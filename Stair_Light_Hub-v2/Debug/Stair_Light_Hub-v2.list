
Stair_Light_Hub-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000628c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a4  080064a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064ac  080064ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080064b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000018  080064cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  080064cc  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ba1  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002568  00000000  00000000  00030be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  00033158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  00033fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d373  00000000  00000000  00034d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca90  00000000  00000000  00052083  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5a0f  00000000  00000000  0005eb13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa0  00000000  00000000  001145a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800644c 	.word	0x0800644c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	0800644c 	.word	0x0800644c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <updateAnimation>:

// Random numbers to be used in the animations
uint16_t randoms1[NUM_RANDOM_NUMS];
uint16_t randoms2[NUM_RANDOM_NUMS];

void updateAnimation() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	animation_idx++;
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <updateAnimation+0x7c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <updateAnimation+0x7c>)
 8000524:	6013      	str	r3, [r2, #0]
	if (animation_idx > animation_len[animation_num]) {
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <updateAnimation+0x80>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <updateAnimation+0x84>)
 800052c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <updateAnimation+0x7c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	da10      	bge.n	800055a <updateAnimation+0x42>
		animation_idx = 0;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <updateAnimation+0x7c>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
		animation_num++;
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <updateAnimation+0x80>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <updateAnimation+0x80>)
 8000546:	6013      	str	r3, [r2, #0]
		if (animation_num >= NUM_ANIMATIONS) {
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <updateAnimation+0x80>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b02      	cmp	r3, #2
 800054e:	dd02      	ble.n	8000556 <updateAnimation+0x3e>
			animation_num = 0;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <updateAnimation+0x80>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
		}
		clearLEDs();
 8000556:	f000 fd09 	bl	8000f6c <clearLEDs>
	}
	switch(animation_num) {
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <updateAnimation+0x80>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d00a      	beq.n	8000578 <updateAnimation+0x60>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d00e      	beq.n	8000584 <updateAnimation+0x6c>
 8000566:	2b00      	cmp	r3, #0
 8000568:	d000      	beq.n	800056c <updateAnimation+0x54>
	case 0: animation1(animation_idx); break;
	case 1: animation2(animation_idx); break;
	case 2: animation3(animation_idx); break;
	}
}
 800056a:	e011      	b.n	8000590 <updateAnimation+0x78>
	case 0: animation1(animation_idx); break;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <updateAnimation+0x7c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f815 	bl	80005a0 <animation1>
 8000576:	e00b      	b.n	8000590 <updateAnimation+0x78>
	case 1: animation2(animation_idx); break;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <updateAnimation+0x7c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f94d 	bl	800081c <animation2>
 8000582:	e005      	b.n	8000590 <updateAnimation+0x78>
	case 2: animation3(animation_idx); break;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <updateAnimation+0x7c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fa07 	bl	800099c <animation3>
 800058e:	bf00      	nop
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000044 	.word	0x20000044
 8000598:	20000040 	.word	0x20000040
 800059c:	20000000 	.word	0x20000000

080005a0 <animation1>:
 * 	Side to side like footsteps
 * 	Expanding dots
 */

// Moving lines
void animation1(int index) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	int num = index % (NUM_TOP_LEDS*2/3);
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4b9a      	ldr	r3, [pc, #616]	; (8000814 <animation1+0x274>)
 80005ac:	fb83 1302 	smull	r1, r3, r3, r2
 80005b0:	1159      	asrs	r1, r3, #5
 80005b2:	17d3      	asrs	r3, r2, #31
 80005b4:	1ac9      	subs	r1, r1, r3
 80005b6:	460b      	mov	r3, r1
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	0119      	lsls	r1, r3, #4
 80005be:	440b      	add	r3, r1
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	60fb      	str	r3, [r7, #12]
	// Turn on going up
	if (num < NUM_TOP_LEDS/3) {
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b29      	cmp	r3, #41	; 0x29
 80005c8:	f300 8089 	bgt.w	80006de <animation1+0x13e>
		setLED(TOP, EMITTER, num, 100, 0, 0);
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	2300      	movs	r3, #0
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2300      	movs	r3, #0
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2100      	movs	r1, #0
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fb60 	bl	8000ca0 <setLED>
		setLED(TOP, RECEIVER, num, 0, 0, 250);
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	23fa      	movs	r3, #250	; 0xfa
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2101      	movs	r1, #1
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fb56 	bl	8000ca0 <setLED>
		setLED(TOP, EMITTER, num+NUM_TOP_LEDS/3, 100, 100, 0);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	332a      	adds	r3, #42	; 0x2a
 80005f8:	461a      	mov	r2, r3
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fb4a 	bl	8000ca0 <setLED>
		setLED(TOP, RECEIVER, num+NUM_TOP_LEDS/3, 0, 100, 100);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	332a      	adds	r3, #42	; 0x2a
 8000610:	461a      	mov	r2, r3
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2101      	movs	r1, #1
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fb3e 	bl	8000ca0 <setLED>
		setLED(TOP, EMITTER, num+NUM_TOP_LEDS*2/3, 100, 0, 100);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3355      	adds	r3, #85	; 0x55
 8000628:	461a      	mov	r2, r3
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2300      	movs	r3, #0
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2100      	movs	r1, #0
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fb32 	bl	8000ca0 <setLED>
		setLED(TOP, RECEIVER, num+NUM_TOP_LEDS*2/3, 0, 100, 0);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3355      	adds	r3, #85	; 0x55
 8000640:	461a      	mov	r2, r3
 8000642:	2300      	movs	r3, #0
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2101      	movs	r1, #1
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fb26 	bl	8000ca0 <setLED>

		setLED(BOT, EMITTER, num, 100, 100, 0);
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	2300      	movs	r3, #0
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	2100      	movs	r1, #0
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fb1c 	bl	8000ca0 <setLED>
		setLED(BOT, RECEIVER, num, 100, 0, 0);
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	2300      	movs	r3, #0
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2300      	movs	r3, #0
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	2101      	movs	r1, #1
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fb12 	bl	8000ca0 <setLED>
		setLED(BOT, EMITTER, num+NUM_BOT_LEDS/3, 0, 100, 100);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	332a      	adds	r3, #42	; 0x2a
 8000680:	461a      	mov	r2, r3
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fb06 	bl	8000ca0 <setLED>
		setLED(BOT, RECEIVER, num+NUM_BOT_LEDS/3, 0, 100, 0);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	332a      	adds	r3, #42	; 0x2a
 8000698:	461a      	mov	r2, r3
 800069a:	2300      	movs	r3, #0
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2101      	movs	r1, #1
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fafa 	bl	8000ca0 <setLED>
		setLED(BOT, EMITTER, num+NUM_BOT_LEDS*2/3, 100, 0, 100);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3355      	adds	r3, #85	; 0x55
 80006b0:	461a      	mov	r2, r3
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	2300      	movs	r3, #0
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	2100      	movs	r1, #0
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 faee 	bl	8000ca0 <setLED>
		setLED(BOT, RECEIVER, num+NUM_BOT_LEDS*2/3, 0, 0, 100);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3355      	adds	r3, #85	; 0x55
 80006c8:	461a      	mov	r2, r3
 80006ca:	2364      	movs	r3, #100	; 0x64
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fae2 	bl	8000ca0 <setLED>
		setLED(BOT, EMITTER, num+NUM_BOT_LEDS/3, 0, 0, 0);
		setLED(BOT, RECEIVER, num+NUM_BOT_LEDS/3, 0, 0, 0);
		setLED(BOT, EMITTER, num+NUM_BOT_LEDS*2/3, 0, 0, 0);
		setLED(BOT, RECEIVER, num+NUM_BOT_LEDS*2/3, 0, 0, 0);
	}
}
 80006dc:	e095      	b.n	800080a <animation1+0x26a>
		num = NUM_TOP_LEDS/3 - index % (NUM_TOP_LEDS/3);
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <animation1+0x278>)
 80006e2:	fb83 1302 	smull	r1, r3, r3, r2
 80006e6:	10d9      	asrs	r1, r3, #3
 80006e8:	17d3      	asrs	r3, r2, #31
 80006ea:	1acb      	subs	r3, r1, r3
 80006ec:	212a      	movs	r1, #42	; 0x2a
 80006ee:	fb01 f303 	mul.w	r3, r1, r3
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 80006f8:	60fb      	str	r3, [r7, #12]
		setLED(TOP, EMITTER, num, 0, 0, 0);
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2300      	movs	r3, #0
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fac9 	bl	8000ca0 <setLED>
		setLED(TOP, RECEIVER, num, 0, 0, 0);
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	2300      	movs	r3, #0
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2300      	movs	r3, #0
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2300      	movs	r3, #0
 800071a:	2101      	movs	r1, #1
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fabf 	bl	8000ca0 <setLED>
		setLED(TOP, EMITTER, num+NUM_TOP_LEDS/3, 0, 0, 0);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	332a      	adds	r3, #42	; 0x2a
 8000726:	461a      	mov	r2, r3
 8000728:	2300      	movs	r3, #0
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2300      	movs	r3, #0
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fab3 	bl	8000ca0 <setLED>
		setLED(TOP, RECEIVER, num+NUM_TOP_LEDS/3, 0, 0, 0);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	332a      	adds	r3, #42	; 0x2a
 800073e:	461a      	mov	r2, r3
 8000740:	2300      	movs	r3, #0
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	2300      	movs	r3, #0
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	2101      	movs	r1, #1
 800074c:	2000      	movs	r0, #0
 800074e:	f000 faa7 	bl	8000ca0 <setLED>
		setLED(TOP, EMITTER, num+NUM_TOP_LEDS*2/3, 0, 0, 0);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3355      	adds	r3, #85	; 0x55
 8000756:	461a      	mov	r2, r3
 8000758:	2300      	movs	r3, #0
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2300      	movs	r3, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fa9b 	bl	8000ca0 <setLED>
		setLED(TOP, RECEIVER, num+NUM_TOP_LEDS*2/3, 0, 0, 0);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3355      	adds	r3, #85	; 0x55
 800076e:	461a      	mov	r2, r3
 8000770:	2300      	movs	r3, #0
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	2300      	movs	r3, #0
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2300      	movs	r3, #0
 800077a:	2101      	movs	r1, #1
 800077c:	2000      	movs	r0, #0
 800077e:	f000 fa8f 	bl	8000ca0 <setLED>
		setLED(BOT, EMITTER, num, 0, 0, 0);
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	2300      	movs	r3, #0
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	2300      	movs	r3, #0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fa85 	bl	8000ca0 <setLED>
		setLED(BOT, RECEIVER, num, 0, 0, 0);
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	2300      	movs	r3, #0
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2300      	movs	r3, #0
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2101      	movs	r1, #1
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fa7b 	bl	8000ca0 <setLED>
		setLED(BOT, EMITTER, num+NUM_BOT_LEDS/3, 0, 0, 0);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	332a      	adds	r3, #42	; 0x2a
 80007ae:	461a      	mov	r2, r3
 80007b0:	2300      	movs	r3, #0
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	2300      	movs	r3, #0
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2300      	movs	r3, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2001      	movs	r0, #1
 80007be:	f000 fa6f 	bl	8000ca0 <setLED>
		setLED(BOT, RECEIVER, num+NUM_BOT_LEDS/3, 0, 0, 0);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	332a      	adds	r3, #42	; 0x2a
 80007c6:	461a      	mov	r2, r3
 80007c8:	2300      	movs	r3, #0
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	2300      	movs	r3, #0
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fa63 	bl	8000ca0 <setLED>
		setLED(BOT, EMITTER, num+NUM_BOT_LEDS*2/3, 0, 0, 0);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3355      	adds	r3, #85	; 0x55
 80007de:	461a      	mov	r2, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	2300      	movs	r3, #0
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2300      	movs	r3, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 fa57 	bl	8000ca0 <setLED>
		setLED(BOT, RECEIVER, num+NUM_BOT_LEDS*2/3, 0, 0, 0);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3355      	adds	r3, #85	; 0x55
 80007f6:	461a      	mov	r2, r3
 80007f8:	2300      	movs	r3, #0
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2300      	movs	r3, #0
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2300      	movs	r3, #0
 8000802:	2101      	movs	r1, #1
 8000804:	2001      	movs	r0, #1
 8000806:	f000 fa4b 	bl	8000ca0 <setLED>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	60606061 	.word	0x60606061
 8000818:	30c30c31 	.word	0x30c30c31

0800081c <animation2>:

// Random dots that expand outwards
void animation2(int index) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
	// Get the number of LEDs to have on in this iteration
	int numOn = index % ANIMATION_2_CYCLE;
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <animation2+0x174>)
 8000828:	fb83 1302 	smull	r1, r3, r3, r2
 800082c:	10d9      	asrs	r1, r3, #3
 800082e:	17d3      	asrs	r3, r2, #31
 8000830:	1ac9      	subs	r1, r1, r3
 8000832:	460b      	mov	r3, r1
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	440b      	add	r3, r1
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	60fb      	str	r3, [r7, #12]
	uint8_t r = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	72fb      	strb	r3, [r7, #11]
	uint8_t g = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	72bb      	strb	r3, [r7, #10]
	uint8_t b = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	727b      	strb	r3, [r7, #9]
	// Generate new random numbers if starting the animation
	if (numOn == 0) {
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d143      	bne.n	80008d8 <animation2+0xbc>
		clearLEDs();
 8000850:	f000 fb8c 	bl	8000f6c <clearLEDs>
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e03a      	b.n	80008d0 <animation2+0xb4>
			randoms1[i] = generateRandom() % (2*NUM_TOP_LEDS);
 800085a:	f000 f941 	bl	8000ae0 <generateRandom>
 800085e:	4603      	mov	r3, r0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	b299      	uxth	r1, r3
 8000864:	4a4b      	ldr	r2, [pc, #300]	; (8000994 <animation2+0x178>)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			randoms2[i] = generateRandom() % (2*NUM_BOT_LEDS);
 800086c:	f000 f938 	bl	8000ae0 <generateRandom>
 8000870:	4603      	mov	r3, r0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	b299      	uxth	r1, r3
 8000876:	4a48      	ldr	r2, [pc, #288]	; (8000998 <animation2+0x17c>)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			generateRGB(i, &r, &g, &b);
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	b2d8      	uxtb	r0, r3
 8000882:	f107 0309 	add.w	r3, r7, #9
 8000886:	f107 020a 	add.w	r2, r7, #10
 800088a:	f107 010b 	add.w	r1, r7, #11
 800088e:	f000 f947 	bl	8000b20 <generateRGB>
			setLEDIndexByLevel(TOP, randoms1[i], r, g, b);
 8000892:	4a40      	ldr	r2, [pc, #256]	; (8000994 <animation2+0x178>)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089a:	4618      	mov	r0, r3
 800089c:	7afa      	ldrb	r2, [r7, #11]
 800089e:	7ab9      	ldrb	r1, [r7, #10]
 80008a0:	7a7b      	ldrb	r3, [r7, #9]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	460b      	mov	r3, r1
 80008a6:	4601      	mov	r1, r0
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 f9ad 	bl	8000c08 <setLEDIndexByLevel>
			setLEDIndexByLevel(BOT, randoms2[i], r, g, b);
 80008ae:	4a3a      	ldr	r2, [pc, #232]	; (8000998 <animation2+0x17c>)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b6:	4618      	mov	r0, r3
 80008b8:	7afa      	ldrb	r2, [r7, #11]
 80008ba:	7ab9      	ldrb	r1, [r7, #10]
 80008bc:	7a7b      	ldrb	r3, [r7, #9]
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	460b      	mov	r3, r1
 80008c2:	4601      	mov	r1, r0
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 f99f 	bl	8000c08 <setLEDIndexByLevel>
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	ddc1      	ble.n	800085a <animation2+0x3e>
//			if (randoms2[i] >= NUM_BOT_LEDS ^ randoms2[i] - numOn < NUM_BOT_LEDS) {
				setLEDIndexByLevel(BOT, randoms2[i]-numOn, r, g, b);
//			}
		}
	}
}
 80008d6:	e056      	b.n	8000986 <animation2+0x16a>
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	e050      	b.n	8000980 <animation2+0x164>
			generateRGB(i, &r, &g, &b);
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	b2d8      	uxtb	r0, r3
 80008e2:	f107 0309 	add.w	r3, r7, #9
 80008e6:	f107 020a 	add.w	r2, r7, #10
 80008ea:	f107 010b 	add.w	r1, r7, #11
 80008ee:	f000 f917 	bl	8000b20 <generateRGB>
				setLEDIndexByLevel(TOP, randoms1[i]+numOn, r, g, b);
 80008f2:	4a28      	ldr	r2, [pc, #160]	; (8000994 <animation2+0x178>)
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	4618      	mov	r0, r3
 8000902:	7afa      	ldrb	r2, [r7, #11]
 8000904:	7ab9      	ldrb	r1, [r7, #10]
 8000906:	7a7b      	ldrb	r3, [r7, #9]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	460b      	mov	r3, r1
 800090c:	4601      	mov	r1, r0
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f97a 	bl	8000c08 <setLEDIndexByLevel>
				setLEDIndexByLevel(TOP, randoms1[i]-numOn, r, g, b);
 8000914:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <animation2+0x178>)
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091c:	461a      	mov	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	7afa      	ldrb	r2, [r7, #11]
 8000926:	7ab9      	ldrb	r1, [r7, #10]
 8000928:	7a7b      	ldrb	r3, [r7, #9]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	460b      	mov	r3, r1
 800092e:	4601      	mov	r1, r0
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f969 	bl	8000c08 <setLEDIndexByLevel>
				setLEDIndexByLevel(BOT, randoms2[i]+numOn, r, g, b);
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <animation2+0x17c>)
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	4618      	mov	r0, r3
 8000946:	7afa      	ldrb	r2, [r7, #11]
 8000948:	7ab9      	ldrb	r1, [r7, #10]
 800094a:	7a7b      	ldrb	r3, [r7, #9]
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	460b      	mov	r3, r1
 8000950:	4601      	mov	r1, r0
 8000952:	2001      	movs	r0, #1
 8000954:	f000 f958 	bl	8000c08 <setLEDIndexByLevel>
				setLEDIndexByLevel(BOT, randoms2[i]-numOn, r, g, b);
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <animation2+0x17c>)
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	7afa      	ldrb	r2, [r7, #11]
 800096a:	7ab9      	ldrb	r1, [r7, #10]
 800096c:	7a7b      	ldrb	r3, [r7, #9]
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	460b      	mov	r3, r1
 8000972:	4601      	mov	r1, r0
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f947 	bl	8000c08 <setLEDIndexByLevel>
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	3301      	adds	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	2b05      	cmp	r3, #5
 8000984:	ddab      	ble.n	80008de <animation2+0xc2>
}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	66666667 	.word	0x66666667
 8000994:	20000034 	.word	0x20000034
 8000998:	20000048 	.word	0x20000048

0800099c <animation3>:
 * Steps are 10 LEDs long with a 6 led buffer in between
 * This means that there are 8 steps
 * There are at most 4 steps visible at any point in time
 * Each step is visible for ANIMATION_3_STEP_TIME
 */
void animation3(int index) {
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08d      	sub	sp, #52	; 0x34
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	6078      	str	r0, [r7, #4]
	int step = (index % (ANIMATION_3_TIME)) / STEP_TIME;
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	4b4c      	ldr	r3, [pc, #304]	; (8000ad8 <animation3+0x13c>)
 80009a8:	fb83 2301 	smull	r2, r3, r3, r1
 80009ac:	111a      	asrs	r2, r3, #4
 80009ae:	17cb      	asrs	r3, r1, #31
 80009b0:	1ad2      	subs	r2, r2, r3
 80009b2:	4613      	mov	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	4413      	add	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	1aca      	subs	r2, r1, r3
 80009bc:	4b47      	ldr	r3, [pc, #284]	; (8000adc <animation3+0x140>)
 80009be:	fb83 3102 	smull	r3, r1, r3, r2
 80009c2:	17d3      	asrs	r3, r2, #31
 80009c4:	1acb      	subs	r3, r1, r3
 80009c6:	61fb      	str	r3, [r7, #28]
	uint8_t r = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]
	uint8_t g = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]
	uint8_t b = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	737b      	strb	r3, [r7, #13]
	// Update when a new step is reached
	if (index % STEP_TIME == 0) {
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	4b41      	ldr	r3, [pc, #260]	; (8000adc <animation3+0x140>)
 80009d8:	fb83 3201 	smull	r3, r2, r3, r1
 80009dc:	17cb      	asrs	r3, r1, #31
 80009de:	1ad2      	subs	r2, r2, r3
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	1aca      	subs	r2, r1, r3
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d16f      	bne.n	8000ace <animation3+0x132>
		// Turn on new step
		int startIndex = step * (STEP_LEN+STEP_GAP);
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	61bb      	str	r3, [r7, #24]
		side_t side = step % 2 == 0 ? EMITTER : RECEIVER;
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf14      	ite	ne
 80009fe:	2301      	movne	r3, #1
 8000a00:	2300      	moveq	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	75fb      	strb	r3, [r7, #23]
		// Only set steps that are within bounds
		if (startIndex < NUM_TOP_LEDS) {
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	dc32      	bgt.n	8000a72 <animation3+0xd6>
			generateRGB(step, &r, &g, &b);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	b2d8      	uxtb	r0, r3
 8000a10:	f107 030d 	add.w	r3, r7, #13
 8000a14:	f107 020e 	add.w	r2, r7, #14
 8000a18:	f107 010f 	add.w	r1, r7, #15
 8000a1c:	f000 f880 	bl	8000b20 <generateRGB>
			for (int i = 0; i < STEP_LEN; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
 8000a24:	e022      	b.n	8000a6c <animation3+0xd0>
				setLED(TOP, side, startIndex+i, r, g, b);
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	4413      	add	r3, r2
 8000a2c:	461c      	mov	r4, r3
 8000a2e:	7bf8      	ldrb	r0, [r7, #15]
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	7b7a      	ldrb	r2, [r7, #13]
 8000a34:	7df9      	ldrb	r1, [r7, #23]
 8000a36:	9201      	str	r2, [sp, #4]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4622      	mov	r2, r4
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f92e 	bl	8000ca0 <setLED>
				// Bottom side needs to be inverted because indexing is reversed
				setLED(BOT, side, NUM_BOT_LEDS - (startIndex+i), r, g, b);
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	4413      	add	r3, r2
 8000a4a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000a4e:	461c      	mov	r4, r3
 8000a50:	7bf8      	ldrb	r0, [r7, #15]
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	7b7a      	ldrb	r2, [r7, #13]
 8000a56:	7df9      	ldrb	r1, [r7, #23]
 8000a58:	9201      	str	r2, [sp, #4]
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4622      	mov	r2, r4
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 f91d 	bl	8000ca0 <setLED>
			for (int i = 0; i < STEP_LEN; i++) {
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	3301      	adds	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	ddd9      	ble.n	8000a26 <animation3+0x8a>
			}
		}
		// Turn off old step
		int offStep = step - NUM_STEPS_ON;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b04      	subs	r3, #4
 8000a76:	613b      	str	r3, [r7, #16]
		if (offStep >= 0) {
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db27      	blt.n	8000ace <animation3+0x132>
			startIndex = offStep * (STEP_LEN+STEP_GAP);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	61bb      	str	r3, [r7, #24]
			for (int i = 0; i < STEP_LEN; i++) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	e01e      	b.n	8000ac8 <animation3+0x12c>
				setLED(TOP, side, startIndex+i, 0, 0, 0);
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	4413      	add	r3, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	7df9      	ldrb	r1, [r7, #23]
 8000a94:	2300      	movs	r3, #0
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f8fe 	bl	8000ca0 <setLED>
				// Bottom side needs to be inverted because indexing is reversed
				setLED(BOT, side, NUM_BOT_LEDS - (startIndex+i), 0, 0, 0);
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000aae:	461a      	mov	r2, r3
 8000ab0:	7df9      	ldrb	r1, [r7, #23]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 f8ef 	bl	8000ca0 <setLED>
			for (int i = 0; i < STEP_LEN; i++) {
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	dddd      	ble.n	8000a8a <animation3+0xee>
			}
		}
	}
}
 8000ace:	bf00      	nop
 8000ad0:	372c      	adds	r7, #44	; 0x2c
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	38e38e39 	.word	0x38e38e39
 8000adc:	2aaaaaab 	.word	0x2aaaaaab

08000ae0 <generateRandom>:


// UTILITy FUNCTIONS

// Generate a random 16 bit unsigned interger
uint16_t generateRandom() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	// Generate random 32 bit number
	uint32_t num;
	HAL_RNG_GenerateRandomNumber(getRNG(), &num);
 8000ae6:	f000 ff8b 	bl	8001a00 <getRNG>
 8000aea:	4602      	mov	r2, r0
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f004 fa26 	bl	8004f42 <HAL_RNG_GenerateRandomNumber>
	// Randomly take either the upper or lower 16 bits
	// Extracts the upper 16 bits
	uint32_t mask = (~0) >> 16;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afa:	607b      	str	r3, [r7, #4]
	if (num >> 31) {
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da04      	bge.n	8000b0c <generateRandom+0x2c>
		num = num & mask;
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4013      	ands	r3, r2
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	e002      	b.n	8000b12 <generateRandom+0x32>
	} else {
		num = num >> 16;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	0c1b      	lsrs	r3, r3, #16
 8000b10:	603b      	str	r3, [r7, #0]
	}
	return (uint16_t) num;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b29b      	uxth	r3, r3
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <generateRGB>:

// Sets the rgb value given a number
void generateRGB(uint8_t num, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
	int color = num % NUM_COLORS;
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <generateRGB+0xe4>)
 8000b34:	fba3 1302 	umull	r1, r3, r3, r2
 8000b38:	0899      	lsrs	r1, r3, #2
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	440b      	add	r3, r1
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	617b      	str	r3, [r7, #20]
	switch (color) {
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d84a      	bhi.n	8000be4 <generateRGB+0xc4>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <generateRGB+0x34>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000b6d 	.word	0x08000b6d
 8000b58:	08000b81 	.word	0x08000b81
 8000b5c:	08000b95 	.word	0x08000b95
 8000b60:	08000ba9 	.word	0x08000ba9
 8000b64:	08000bbd 	.word	0x08000bbd
 8000b68:	08000bd1 	.word	0x08000bd1
	case 0: 		// purple
		*r = 100;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2264      	movs	r2, #100	; 0x64
 8000b70:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
		*b = 100;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2264      	movs	r2, #100	; 0x64
 8000b7c:	701a      	strb	r2, [r3, #0]
		break;
 8000b7e:	e03b      	b.n	8000bf8 <generateRGB+0xd8>
	case 1: 		// orange
		*r = 150;
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2296      	movs	r2, #150	; 0x96
 8000b84:	701a      	strb	r2, [r3, #0]
		*g = 40;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2228      	movs	r2, #40	; 0x28
 8000b8a:	701a      	strb	r2, [r3, #0]
		*b = 70;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2246      	movs	r2, #70	; 0x46
 8000b90:	701a      	strb	r2, [r3, #0]
		break;
 8000b92:	e031      	b.n	8000bf8 <generateRGB+0xd8>
	case 2: 		// yellow
		*r = 100;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2264      	movs	r2, #100	; 0x64
 8000b98:	701a      	strb	r2, [r3, #0]
		*g = 100;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2264      	movs	r2, #100	; 0x64
 8000b9e:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
		break;
 8000ba6:	e027      	b.n	8000bf8 <generateRGB+0xd8>
	case 3: 		// green
		*r = 0;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		*g = 150;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2296      	movs	r2, #150	; 0x96
 8000bb2:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
		break;
 8000bba:	e01d      	b.n	8000bf8 <generateRGB+0xd8>
	case 4: 		// cyan
		*r = 0;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
		*g = 100;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2264      	movs	r2, #100	; 0x64
 8000bc6:	701a      	strb	r2, [r3, #0]
		*b = 100;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2264      	movs	r2, #100	; 0x64
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e013      	b.n	8000bf8 <generateRGB+0xd8>
	case 5: 		// white
		*r = 70;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2246      	movs	r2, #70	; 0x46
 8000bd4:	701a      	strb	r2, [r3, #0]
		*g = 70;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2246      	movs	r2, #70	; 0x46
 8000bda:	701a      	strb	r2, [r3, #0]
		*b = 70;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2246      	movs	r2, #70	; 0x46
 8000be0:	701a      	strb	r2, [r3, #0]
		break;
 8000be2:	e009      	b.n	8000bf8 <generateRGB+0xd8>
	default: 		// off
		*r = 0;
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		break;
 8000bf6:	bf00      	nop
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	aaaaaaab 	.word	0xaaaaaaab

08000c08 <setLEDIndexByLevel>:
		top_led_buf[idx+1] = (red & mask) | (top_led_buf[idx+1] & ~mask);
		top_led_buf[idx+2] = (blue & mask) | (top_led_buf[idx+2] & ~mask);
	}
}

void setLEDIndexByLevel(level_t level, uint32_t led, uint8_t red, uint8_t green, uint8_t blue) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	6039      	str	r1, [r7, #0]
 8000c10:	4611      	mov	r1, r2
 8000c12:	461a      	mov	r2, r3
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	71bb      	strb	r3, [r7, #6]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	717b      	strb	r3, [r7, #5]
	if (level == TOP) {
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d11c      	bne.n	8000c60 <setLEDIndexByLevel+0x58>
		if (led < NUM_TOP_LEDS) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b7f      	cmp	r3, #127	; 0x7f
 8000c2a:	d80b      	bhi.n	8000c44 <setLEDIndexByLevel+0x3c>
			setLED(TOP, RECEIVER, led, red, green, blue);
 8000c2c:	79ba      	ldrb	r2, [r7, #6]
 8000c2e:	7c3b      	ldrb	r3, [r7, #16]
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	797b      	ldrb	r3, [r7, #5]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	4613      	mov	r3, r2
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f82f 	bl	8000ca0 <setLED>
			setLED(BOT, RECEIVER, led, red, green, blue);
		} else {
			setLED(BOT, EMITTER, led-NUM_BOT_LEDS, red, green, blue);
		}
	}
}
 8000c42:	e029      	b.n	8000c98 <setLEDIndexByLevel+0x90>
			setLED(TOP, EMITTER, led-NUM_TOP_LEDS, red, green, blue);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8000c4a:	79b9      	ldrb	r1, [r7, #6]
 8000c4c:	7c3b      	ldrb	r3, [r7, #16]
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	797b      	ldrb	r3, [r7, #5]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	460b      	mov	r3, r1
 8000c56:	2100      	movs	r1, #0
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f821 	bl	8000ca0 <setLED>
}
 8000c5e:	e01b      	b.n	8000c98 <setLEDIndexByLevel+0x90>
		if (led < NUM_BOT_LEDS) {
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b7f      	cmp	r3, #127	; 0x7f
 8000c64:	d80b      	bhi.n	8000c7e <setLEDIndexByLevel+0x76>
			setLED(BOT, RECEIVER, led, red, green, blue);
 8000c66:	79ba      	ldrb	r2, [r7, #6]
 8000c68:	7c3b      	ldrb	r3, [r7, #16]
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	797b      	ldrb	r3, [r7, #5]
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	4613      	mov	r3, r2
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 f812 	bl	8000ca0 <setLED>
}
 8000c7c:	e00c      	b.n	8000c98 <setLEDIndexByLevel+0x90>
			setLED(BOT, EMITTER, led-NUM_BOT_LEDS, red, green, blue);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8000c84:	79b9      	ldrb	r1, [r7, #6]
 8000c86:	7c3b      	ldrb	r3, [r7, #16]
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	797b      	ldrb	r3, [r7, #5]
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	2100      	movs	r1, #0
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 f804 	bl	8000ca0 <setLED>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <setLED>:


void setLED(level_t level, side_t side, uint32_t index, uint8_t red, uint8_t green, uint8_t blue) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	603a      	str	r2, [r7, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	717b      	strb	r3, [r7, #5]
	// Update the correct buffer
	uint8_t* buf;
	uint32_t maxLeds;
	if (level == BOT) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d104      	bne.n	8000cc6 <setLED+0x26>
		buf = bot_led_buf;
 8000cbc:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <setLED+0x1a8>)
 8000cbe:	617b      	str	r3, [r7, #20]
		maxLeds = NUM_BOT_LEDS;
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	e003      	b.n	8000cce <setLED+0x2e>
	} else {
		buf = top_led_buf;
 8000cc6:	4b61      	ldr	r3, [pc, #388]	; (8000e4c <setLED+0x1ac>)
 8000cc8:	617b      	str	r3, [r7, #20]
		maxLeds = NUM_TOP_LEDS;
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	613b      	str	r3, [r7, #16]
	}
	uint8_t mask = 0b11110000;
 8000cce:	23f0      	movs	r3, #240	; 0xf0
 8000cd0:	73fb      	strb	r3, [r7, #15]
	if (index < maxLeds) {
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f080 80af 	bcs.w	8000e3a <setLED+0x19a>
		if (side == RECEIVER) {
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d14b      	bne.n	8000d7a <setLED+0xda>
			// Set the lower 4 bits of each value to set the receiver side
			*(buf+3*index) = (*(buf+3*index)&mask) | (green >> 4);
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4413      	add	r3, r2
 8000cee:	781a      	ldrb	r2, [r3, #0]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	b2d9      	uxtb	r1, r3
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4413      	add	r3, r2
 8000d0a:	ea40 0201 	orr.w	r2, r0, r1
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]
			*(buf+3*index+1) = (*(buf+3*index+1)&mask) | (red >> 4);
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	4013      	ands	r3, r2
 8000d26:	b2d8      	uxtb	r0, r3
 8000d28:	797b      	ldrb	r3, [r7, #5]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	3301      	adds	r3, #1
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	ea40 0201 	orr.w	r2, r0, r1
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
			*(buf+3*index+2) = (*(buf+3*index+2)&mask) | (blue >> 4);
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4413      	add	r3, r2
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	4013      	ands	r3, r2
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	4413      	add	r3, r2
 8000d70:	ea40 0201 	orr.w	r2, r0, r1
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	701a      	strb	r2, [r3, #0]
			*(buf+3*index) = (green & mask) | (*(buf+3*index) & ~mask);
			*(buf+3*index+1) = (red & mask) | (*(buf+3*index+1) & ~mask);
			*(buf+3*index+2) = (blue & mask) | (*(buf+3*index+2) & ~mask);
		}
	}
}
 8000d78:	e05f      	b.n	8000e3a <setLED+0x19a>
		} else if (side == EMITTER) {
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d15c      	bne.n	8000e3a <setLED+0x19a>
			*(buf+3*index) = (green & mask) | (*(buf+3*index) & ~mask);
 8000d80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	4013      	ands	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	b259      	sxtb	r1, r3
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	430b      	orrs	r3, r1
 8000daa:	b259      	sxtb	r1, r3
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	4413      	add	r3, r2
 8000db8:	b2ca      	uxtb	r2, r1
 8000dba:	701a      	strb	r2, [r3, #0]
			*(buf+3*index+1) = (red & mask) | (*(buf+3*index+1) & ~mask);
 8000dbc:	797a      	ldrb	r2, [r7, #5]
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	b259      	sxtb	r1, r3
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	3301      	adds	r3, #1
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b25a      	sxtb	r2, r3
 8000dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	4013      	ands	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	430b      	orrs	r3, r1
 8000de6:	b259      	sxtb	r1, r3
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	3301      	adds	r3, #1
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4413      	add	r3, r2
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
			*(buf+3*index+2) = (blue & mask) | (*(buf+3*index+2) & ~mask);
 8000dfa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4013      	ands	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	b259      	sxtb	r1, r3
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b25a      	sxtb	r2, r3
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	4013      	ands	r3, r2
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	430b      	orrs	r3, r1
 8000e26:	b259      	sxtb	r1, r3
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	3302      	adds	r3, #2
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4413      	add	r3, r2
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	371c      	adds	r7, #28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001dc 	.word	0x200001dc
 8000e4c:	20000058 	.word	0x20000058

08000e50 <objectSensed>:

// Return 1 if an object was sensed
uint8_t objectSensed() {
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	// Return 8 if no sensors were above the threshold
	return top_sense_state | bot_sense_state;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <objectSensed+0x1c>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <objectSensed+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000054 	.word	0x20000054
 8000e70:	20000055 	.word	0x20000055

08000e74 <pollSensors>:


void pollSensors() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
	// Get data from top sensors
	uint8_t res = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = SEND_SENSOR_DATA;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
	int numAttempts = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
	while (ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8000e8a:	e012      	b.n	8000eb2 <pollSensors+0x3e>
		HAL_UART_Transmit(getTopUART(), &cmd, sizeof(cmd), SEND_TIMEOUT);
 8000e8c:	f000 fd9a 	bl	80019c4 <getTopUART>
 8000e90:	1db9      	adds	r1, r7, #6
 8000e92:	2302      	movs	r3, #2
 8000e94:	2201      	movs	r2, #1
 8000e96:	f004 f8f3 	bl	8005080 <HAL_UART_Transmit>
		ret = HAL_UART_Receive(getTopUART(), &res, sizeof(res), SENSOR_UPDATE_TIMEOUT);
 8000e9a:	f000 fd93 	bl	80019c4 <getTopUART>
 8000e9e:	1df9      	adds	r1, r7, #7
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f004 f982 	bl	80051ac <HAL_UART_Receive>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	73fb      	strb	r3, [r7, #15]
		numAttempts++;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
	while (ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <pollSensors+0x4a>
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	dde6      	ble.n	8000e8c <pollSensors+0x18>
	}
	if (res == OBJECT_SENSED) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b45      	cmp	r3, #69	; 0x45
 8000ec2:	d103      	bne.n	8000ecc <pollSensors+0x58>
		top_sense_state = 1;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <pollSensors+0xbc>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e002      	b.n	8000ed2 <pollSensors+0x5e>
	} else {
		top_sense_state = 0;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <pollSensors+0xbc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
	}
	// Get data from bottom sensors
	ret = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
	res = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	numAttempts = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
	while (ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8000ede:	e012      	b.n	8000f06 <pollSensors+0x92>
		HAL_UART_Transmit(getBotUART(), &cmd, sizeof(cmd), SEND_TIMEOUT);
 8000ee0:	f000 fd7a 	bl	80019d8 <getBotUART>
 8000ee4:	1db9      	adds	r1, r7, #6
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f004 f8c9 	bl	8005080 <HAL_UART_Transmit>
		ret = HAL_UART_Receive(getBotUART(), &res, sizeof(res), SENSOR_UPDATE_TIMEOUT);
 8000eee:	f000 fd73 	bl	80019d8 <getBotUART>
 8000ef2:	1df9      	adds	r1, r7, #7
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f004 f958 	bl	80051ac <HAL_UART_Receive>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
		numAttempts++;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
	while (ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <pollSensors+0x9e>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	dde6      	ble.n	8000ee0 <pollSensors+0x6c>
	}
	if (res == OBJECT_SENSED) {
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b45      	cmp	r3, #69	; 0x45
 8000f16:	d103      	bne.n	8000f20 <pollSensors+0xac>
		bot_sense_state = 1;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <pollSensors+0xc0>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
	} else {
		bot_sense_state = 0;
	}
}
 8000f1e:	e002      	b.n	8000f26 <pollSensors+0xb2>
		bot_sense_state = 0;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <pollSensors+0xc0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000054 	.word	0x20000054
 8000f34:	20000055 	.word	0x20000055

08000f38 <recalibrate>:
void recalibrate() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	uint8_t data = RECALIBRATE;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	71fb      	strb	r3, [r7, #7]
	sendCommand(getTopUART(), data);
 8000f42:	f000 fd3f 	bl	80019c4 <getTopUART>
 8000f46:	4602      	mov	r2, r0
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f000 f929 	bl	80011a4 <sendCommand>
	sendCommand(getBotUART(), data);
 8000f52:	f000 fd41 	bl	80019d8 <getBotUART>
 8000f56:	4602      	mov	r2, r0
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f000 f921 	bl	80011a4 <sendCommand>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <clearLEDs>:

void clearLEDs() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
	// reset the LED buffers
	for (int i = 0; i < NUM_TOP_LEDS * 3; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e007      	b.n	8000f88 <clearLEDs+0x1c>
		top_led_buf[i] = 0;
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <clearLEDs+0x70>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_TOP_LEDS * 3; i++) {
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f8e:	dbf3      	blt.n	8000f78 <clearLEDs+0xc>
	}
	for (int i = 0; i < NUM_BOT_LEDS * 3; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	e007      	b.n	8000fa6 <clearLEDs+0x3a>
		bot_led_buf[i] = 0;
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <clearLEDs+0x74>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOT_LEDS * 3; i++) {
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000fac:	dbf3      	blt.n	8000f96 <clearLEDs+0x2a>
	}
	// Send message to clear LEDs
	uint8_t data = CLEAR_LEDS;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	71fb      	strb	r3, [r7, #7]
	sendCommand(getTopUART(), data);
 8000fb2:	f000 fd07 	bl	80019c4 <getTopUART>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	f000 f8f1 	bl	80011a4 <sendCommand>
	sendCommand(getBotUART(), data);
 8000fc2:	f000 fd09 	bl	80019d8 <getBotUART>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4610      	mov	r0, r2
 8000fce:	f000 f8e9 	bl	80011a4 <sendCommand>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000058 	.word	0x20000058
 8000fe0:	200001dc 	.word	0x200001dc

08000fe4 <updateLEDs>:


// Send all the LED data to each board
void updateLEDs() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	int startIndex = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
//	comm_stat_t status;
	// Send data to bottom leds
	// Update in batches until all leds have been updated
	while (startIndex < NUM_BOT_LEDS) {
 8000fee:	e009      	b.n	8001004 <updateLEDs+0x20>
		sendLEDVals(BOT, startIndex, MAX_LED_UPDATE);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	221e      	movs	r2, #30
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f000 f829 	bl	8001050 <sendLEDVals>
//		if (status != COMM_OK) {
//			return;
//		}
		startIndex += MAX_LED_UPDATE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	331e      	adds	r3, #30
 8001002:	607b      	str	r3, [r7, #4]
	while (startIndex < NUM_BOT_LEDS) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b7f      	cmp	r3, #127	; 0x7f
 8001008:	ddf2      	ble.n	8000ff0 <updateLEDs+0xc>
	}
//	uint8_t complete_flag = UPDATE_COMPLETE;
	sendCommand(getBotUART(), UPDATE_COMPLETE);
 800100a:	f000 fce5 	bl	80019d8 <getBotUART>
 800100e:	4603      	mov	r3, r0
 8001010:	2110      	movs	r1, #16
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f8c6 	bl	80011a4 <sendCommand>
	// Send data to top leds
	startIndex = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
	while (startIndex < NUM_TOP_LEDS) {
 800101c:	e009      	b.n	8001032 <updateLEDs+0x4e>
		sendLEDVals(TOP, startIndex, MAX_LED_UPDATE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	221e      	movs	r2, #30
 8001024:	4619      	mov	r1, r3
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f812 	bl	8001050 <sendLEDVals>
		startIndex += MAX_LED_UPDATE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	331e      	adds	r3, #30
 8001030:	607b      	str	r3, [r7, #4]
	while (startIndex < NUM_TOP_LEDS) {
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b7f      	cmp	r3, #127	; 0x7f
 8001036:	ddf2      	ble.n	800101e <updateLEDs+0x3a>
//		if (status != COMM_OK) {
//			return;
//		}
	}
	sendCommand(getTopUART(), UPDATE_COMPLETE);
 8001038:	f000 fcc4 	bl	80019c4 <getTopUART>
 800103c:	4603      	mov	r3, r0
 800103e:	2110      	movs	r1, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f8af 	bl	80011a4 <sendCommand>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <sendLEDVals>:
 * 			- The index of the first LED being updated
 * 			- The number of LEDs to be updated
 * 	2) Wait for ACK from downstream board
 * 	3) Send LED data once ACK is received
 */
comm_stat_t sendLEDVals(level_t level, uint8_t startIndex, uint8_t len) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	460b      	mov	r3, r1
 800105c:	71bb      	strb	r3, [r7, #6]
 800105e:	4613      	mov	r3, r2
 8001060:	717b      	strb	r3, [r7, #5]

	// Send request to send data with start index and number of LEDs to update
	UART_HandleTypeDef* uartPtr;
	uint8_t* LEDdata;

	len = len > MAX_LED_UPDATE ? MAX_LED_UPDATE : len;
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	2b1e      	cmp	r3, #30
 8001066:	bf28      	it	cs
 8001068:	231e      	movcs	r3, #30
 800106a:	717b      	strb	r3, [r7, #5]
	if (level == TOP) {	// transmit to top side
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d11e      	bne.n	80010b0 <sendLEDVals+0x60>
		// Truncate indices if too long
		startIndex = startIndex > NUM_TOP_LEDS ? NUM_TOP_LEDS : startIndex;
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	2b80      	cmp	r3, #128	; 0x80
 8001076:	bf28      	it	cs
 8001078:	2380      	movcs	r3, #128	; 0x80
 800107a:	71bb      	strb	r3, [r7, #6]
		len = startIndex + len > NUM_TOP_LEDS ? NUM_TOP_LEDS - startIndex : len;
 800107c:	79ba      	ldrb	r2, [r7, #6]
 800107e:	797b      	ldrb	r3, [r7, #5]
 8001080:	4413      	add	r3, r2
 8001082:	2b80      	cmp	r3, #128	; 0x80
 8001084:	dd07      	ble.n	8001096 <sendLEDVals+0x46>
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800108c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001090:	3380      	adds	r3, #128	; 0x80
 8001092:	b2db      	uxtb	r3, r3
 8001094:	e000      	b.n	8001098 <sendLEDVals+0x48>
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	717b      	strb	r3, [r7, #5]
		// Set the uart pointer
		uartPtr = getTopUART();
 800109a:	f000 fc93 	bl	80019c4 <getTopUART>
 800109e:	6178      	str	r0, [r7, #20]
		// Get the address of the buffer to transmit
		LEDdata = &top_led_buf[3*startIndex];
 80010a0:	79ba      	ldrb	r2, [r7, #6]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	4a2a      	ldr	r2, [pc, #168]	; (8001154 <sendLEDVals+0x104>)
 80010aa:	4413      	add	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	e01d      	b.n	80010ec <sendLEDVals+0x9c>
	} else { // transmot to bottom side
		// Truncate indices if too long
		startIndex = startIndex > NUM_BOT_LEDS ? NUM_BOT_LEDS : startIndex;
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b80      	cmp	r3, #128	; 0x80
 80010b4:	bf28      	it	cs
 80010b6:	2380      	movcs	r3, #128	; 0x80
 80010b8:	71bb      	strb	r3, [r7, #6]
		len = startIndex + len > NUM_BOT_LEDS ? NUM_BOT_LEDS - startIndex : len;
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	4413      	add	r3, r2
 80010c0:	2b80      	cmp	r3, #128	; 0x80
 80010c2:	dd07      	ble.n	80010d4 <sendLEDVals+0x84>
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80010ca:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80010ce:	3380      	adds	r3, #128	; 0x80
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	e000      	b.n	80010d6 <sendLEDVals+0x86>
 80010d4:	797b      	ldrb	r3, [r7, #5]
 80010d6:	717b      	strb	r3, [r7, #5]
		// Set the uart pointer
		uartPtr = getBotUART();
 80010d8:	f000 fc7e 	bl	80019d8 <getBotUART>
 80010dc:	6178      	str	r0, [r7, #20]
		// Get the address of the buffer to transmit
		LEDdata = &bot_led_buf[3*startIndex];
 80010de:	79ba      	ldrb	r2, [r7, #6]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <sendLEDVals+0x108>)
 80010e8:	4413      	add	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
	}
	// Send request to update leds
	comm_stat_t status = sendCommand(uartPtr, SET_LED_VALS);
 80010ec:	2104      	movs	r1, #4
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f000 f858 	bl	80011a4 <sendCommand>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
	// Return if command was not successful
	if (status != COMM_OK) {
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <sendLEDVals+0xb2>
		return status;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	e024      	b.n	800114c <sendLEDVals+0xfc>
	}
	// Send info about data transfer
	uint8_t info[2] = {startIndex, len};
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	733b      	strb	r3, [r7, #12]
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit_DMA(uartPtr, info, sizeof(info));
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2202      	movs	r2, #2
 8001110:	4619      	mov	r1, r3
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f004 f91a 	bl	800534c <HAL_UART_Transmit_DMA>
	uint8_t rec = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Receive(uartPtr, &rec, sizeof(rec), ACK_TIMEOUT);
 800111c:	f107 010b 	add.w	r1, r7, #11
 8001120:	2302      	movs	r3, #2
 8001122:	2201      	movs	r2, #1
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f004 f841 	bl	80051ac <HAL_UART_Receive>
	// Send LED data if ack was received
	if (rec == ACK) {
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	2b2a      	cmp	r3, #42	; 0x2a
 800112e:	d10c      	bne.n	800114a <sendLEDVals+0xfa>
		HAL_UART_Transmit(uartPtr, LEDdata, len*3, LED_UPDATE_TIMEOUT);
 8001130:	797b      	ldrb	r3, [r7, #5]
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	0052      	lsls	r2, r2, #1
 8001138:	4413      	add	r3, r2
 800113a:	b29a      	uxth	r2, r3
 800113c:	231e      	movs	r3, #30
 800113e:	6939      	ldr	r1, [r7, #16]
 8001140:	6978      	ldr	r0, [r7, #20]
 8001142:	f003 ff9d 	bl	8005080 <HAL_UART_Transmit>
	} else {
		return COMM_ERROR;
	}
	return COMM_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <sendLEDVals+0xfc>
		return COMM_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000058 	.word	0x20000058
 8001158:	200001dc 	.word	0x200001dc

0800115c <enableSense>:

void enableSense() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	sendCommand(getTopUART(), ENABLE_SENSE);
 8001160:	f000 fc30 	bl	80019c4 <getTopUART>
 8001164:	4603      	mov	r3, r0
 8001166:	2112      	movs	r1, #18
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f81b 	bl	80011a4 <sendCommand>
	sendCommand(getBotUART(), ENABLE_SENSE);
 800116e:	f000 fc33 	bl	80019d8 <getBotUART>
 8001172:	4603      	mov	r3, r0
 8001174:	2112      	movs	r1, #18
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f814 	bl	80011a4 <sendCommand>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <disableSense>:

void disableSense() {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	sendCommand(getTopUART(), DISABLE_SENSE);
 8001184:	f000 fc1e 	bl	80019c4 <getTopUART>
 8001188:	4603      	mov	r3, r0
 800118a:	211b      	movs	r1, #27
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f809 	bl	80011a4 <sendCommand>
	sendCommand(getBotUART(), DISABLE_SENSE);
 8001192:	f000 fc21 	bl	80019d8 <getBotUART>
 8001196:	4603      	mov	r3, r0
 8001198:	211b      	movs	r1, #27
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f802 	bl	80011a4 <sendCommand>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <sendCommand>:

comm_stat_t sendCommand(UART_HandleTypeDef* huart, cmd_t cmd) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	// Retry if needed, then give up after too many attempts
	int numAttempts = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
	uint8_t data = cmd;
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	72fb      	strb	r3, [r7, #11]
	uint8_t rec = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	72bb      	strb	r3, [r7, #10]
	while(numAttempts < MAX_ATTEMPTS) {
 80011bc:	e015      	b.n	80011ea <sendCommand+0x46>
//		if (numAttempts > 0) {
//			HAL_Delay(1);
//		}
		HAL_UART_Transmit_DMA(huart, &data, sizeof(data));
 80011be:	f107 030b 	add.w	r3, r7, #11
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f004 f8c0 	bl	800534c <HAL_UART_Transmit_DMA>
		HAL_UART_Receive(huart, &rec, sizeof(rec), ACK_TIMEOUT);
 80011cc:	f107 010a 	add.w	r1, r7, #10
 80011d0:	2302      	movs	r3, #2
 80011d2:	2201      	movs	r2, #1
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f003 ffe9 	bl	80051ac <HAL_UART_Receive>
		if (rec == ACK) {
 80011da:	7abb      	ldrb	r3, [r7, #10]
 80011dc:	2b2a      	cmp	r3, #42	; 0x2a
 80011de:	d101      	bne.n	80011e4 <sendCommand+0x40>
			return COMM_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e006      	b.n	80011f2 <sendCommand+0x4e>
		}
		numAttempts++;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
	while(numAttempts < MAX_ATTEMPTS) {
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b07      	cmp	r3, #7
 80011ee:	dde6      	ble.n	80011be <sendCommand+0x1a>
	}
	return COMM_ERROR;
 80011f0:	2301      	movs	r3, #1
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <I2CActive>:
uint8_t cmd_buf;
uint8_t cmd_ready;

uint8_t active;

uint8_t I2CActive() {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	return active;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <I2CActive+0x14>)
 8001202:	781b      	ldrb	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	2000035e 	.word	0x2000035e

08001214 <I2CUpdateReady>:

uint8_t I2CUpdateReady() {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	return cmd_ready;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <I2CUpdateReady+0x14>)
 800121a:	781b      	ldrb	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000035d 	.word	0x2000035d

0800122c <receiveI2C>:

void receiveI2C() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	cmd_ready = 0;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <receiveI2C+0x20>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(getI2C(), &cmd_buf, sizeof(cmd_buf));
 8001236:	f000 fbd9 	bl	80019ec <getI2C>
 800123a:	4603      	mov	r3, r0
 800123c:	2201      	movs	r2, #1
 800123e:	4904      	ldr	r1, [pc, #16]	; (8001250 <receiveI2C+0x24>)
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fcc7 	bl	8002bd4 <HAL_I2C_Slave_Receive_IT>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000035d 	.word	0x2000035d
 8001250:	2000035f 	.word	0x2000035f

08001254 <processI2C>:

void processI2C() {
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af02      	add	r7, sp, #8
	if (!active && cmd_buf != EXIT) {
 800125a:	4baa      	ldr	r3, [pc, #680]	; (8001504 <processI2C+0x2b0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d108      	bne.n	8001274 <processI2C+0x20>
 8001262:	4ba9      	ldr	r3, [pc, #676]	; (8001508 <processI2C+0x2b4>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b55      	cmp	r3, #85	; 0x55
 8001268:	d004      	beq.n	8001274 <processI2C+0x20>
		disableSense();
 800126a:	f7ff ff89 	bl	8001180 <disableSense>
		active = 1;
 800126e:	4ba5      	ldr	r3, [pc, #660]	; (8001504 <processI2C+0x2b0>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
	}
	clearLEDs();
 8001274:	f7ff fe7a 	bl	8000f6c <clearLEDs>
	if (cmd_buf == BLUE) {
 8001278:	4ba3      	ldr	r3, [pc, #652]	; (8001508 <processI2C+0x2b4>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d13a      	bne.n	80012f6 <processI2C+0xa2>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001284:	e016      	b.n	80012b4 <processI2C+0x60>
			setLED(TOP, EMITTER, i, 0, 0, 100);
 8001286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	2300      	movs	r3, #0
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fd03 	bl	8000ca0 <setLED>
			setLED(TOP, RECEIVER, i, 0, 0, 100);
 800129a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129c:	2364      	movs	r3, #100	; 0x64
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	2101      	movs	r1, #1
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fcf9 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	3302      	adds	r3, #2
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	2b7f      	cmp	r3, #127	; 0x7f
 80012b8:	dde5      	ble.n	8001286 <processI2C+0x32>
		}
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80012be:	e016      	b.n	80012ee <processI2C+0x9a>
			setLED(BOT, EMITTER, i, 0, 0, 100);
 80012c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff fce6 	bl	8000ca0 <setLED>
			setLED(BOT, RECEIVER, i, 0, 0, 100);
 80012d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	2101      	movs	r1, #1
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fcdc 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	3302      	adds	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	dde5      	ble.n	80012c0 <processI2C+0x6c>
		}
	} else if (cmd_buf == EXIT) {
		enableSense();
		active = 0;
	}
}
 80012f4:	e124      	b.n	8001540 <processI2C+0x2ec>
	} else if (cmd_buf == GREEN) {
 80012f6:	4b84      	ldr	r3, [pc, #528]	; (8001508 <processI2C+0x2b4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d13a      	bne.n	8001374 <processI2C+0x120>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	e016      	b.n	8001332 <processI2C+0xde>
			setLED(TOP, EMITTER, i, 0, 100, 0);
 8001304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001306:	2300      	movs	r3, #0
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2300      	movs	r3, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fcc4 	bl	8000ca0 <setLED>
			setLED(TOP, RECEIVER, i, 0, 100, 0);
 8001318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131a:	2300      	movs	r3, #0
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	2101      	movs	r1, #1
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fcba 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	3302      	adds	r3, #2
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	2b7f      	cmp	r3, #127	; 0x7f
 8001336:	dde5      	ble.n	8001304 <processI2C+0xb0>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	e016      	b.n	800136c <processI2C+0x118>
			setLED(BOT, EMITTER, i, 0, 100, 0);
 800133e:	6a3a      	ldr	r2, [r7, #32]
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2364      	movs	r3, #100	; 0x64
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff fca7 	bl	8000ca0 <setLED>
			setLED(BOT, RECEIVER, i, 0, 100, 0);
 8001352:	6a3a      	ldr	r2, [r7, #32]
 8001354:	2300      	movs	r3, #0
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2300      	movs	r3, #0
 800135e:	2101      	movs	r1, #1
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fc9d 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	3302      	adds	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b7f      	cmp	r3, #127	; 0x7f
 8001370:	dde5      	ble.n	800133e <processI2C+0xea>
}
 8001372:	e0e5      	b.n	8001540 <processI2C+0x2ec>
	} else if (cmd_buf == RED) {
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <processI2C+0x2b4>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d13a      	bne.n	80013f2 <processI2C+0x19e>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	e016      	b.n	80013b0 <processI2C+0x15c>
			setLED(TOP, EMITTER, i, 100, 0, 0);
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	2300      	movs	r3, #0
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2364      	movs	r3, #100	; 0x64
 800138e:	2100      	movs	r1, #0
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fc85 	bl	8000ca0 <setLED>
			setLED(TOP, RECEIVER, i, 100, 0, 0);
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	2300      	movs	r3, #0
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	2101      	movs	r1, #1
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fc7b 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3302      	adds	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b7f      	cmp	r3, #127	; 0x7f
 80013b4:	dde5      	ble.n	8001382 <processI2C+0x12e>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	e016      	b.n	80013ea <processI2C+0x196>
			setLED(BOT, EMITTER, i, 100, 0, 0);
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	2300      	movs	r3, #0
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2300      	movs	r3, #0
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	2100      	movs	r1, #0
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff fc68 	bl	8000ca0 <setLED>
			setLED(BOT, RECEIVER, i, 100, 0, 0);
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2364      	movs	r3, #100	; 0x64
 80013dc:	2101      	movs	r1, #1
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fc5e 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	3302      	adds	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b7f      	cmp	r3, #127	; 0x7f
 80013ee:	dde5      	ble.n	80013bc <processI2C+0x168>
}
 80013f0:	e0a6      	b.n	8001540 <processI2C+0x2ec>
	} else if (cmd_buf == SHOW_TOP) {
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <processI2C+0x2b4>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d11d      	bne.n	8001436 <processI2C+0x1e2>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e016      	b.n	800142e <processI2C+0x1da>
			setLED(TOP, EMITTER, i, 100, 0, 100);
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fc46 	bl	8000ca0 <setLED>
			setLED(TOP, RECEIVER, i, 100, 0, 100);
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	2364      	movs	r3, #100	; 0x64
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2300      	movs	r3, #0
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2364      	movs	r3, #100	; 0x64
 8001420:	2101      	movs	r1, #1
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fc3c 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3302      	adds	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b7f      	cmp	r3, #127	; 0x7f
 8001432:	dde5      	ble.n	8001400 <processI2C+0x1ac>
}
 8001434:	e084      	b.n	8001540 <processI2C+0x2ec>
	} else if (cmd_buf == SHOW_BOTTOM) {
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <processI2C+0x2b4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b50      	cmp	r3, #80	; 0x50
 800143c:	d11d      	bne.n	800147a <processI2C+0x226>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	e016      	b.n	8001472 <processI2C+0x21e>
			setLED(BOT, EMITTER, i, 0, 100, 100);
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2364      	movs	r3, #100	; 0x64
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fc24 	bl	8000ca0 <setLED>
			setLED(BOT, RECEIVER, i, 0, 100, 100);
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	2364      	movs	r3, #100	; 0x64
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	2364      	movs	r3, #100	; 0x64
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	2101      	movs	r1, #1
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fc1a 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	3302      	adds	r3, #2
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b7f      	cmp	r3, #127	; 0x7f
 8001476:	dde5      	ble.n	8001444 <processI2C+0x1f0>
}
 8001478:	e062      	b.n	8001540 <processI2C+0x2ec>
	} else if (cmd_buf == SHOW_LEFT) {
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <processI2C+0x2b4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b20      	cmp	r3, #32
 8001480:	d126      	bne.n	80014d0 <processI2C+0x27c>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e00c      	b.n	80014a2 <processI2C+0x24e>
			setLED(TOP, RECEIVER, i, 100, 0, 0);
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	2300      	movs	r3, #0
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2300      	movs	r3, #0
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2364      	movs	r3, #100	; 0x64
 8001494:	2101      	movs	r1, #1
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fc02 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3302      	adds	r3, #2
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b7f      	cmp	r3, #127	; 0x7f
 80014a6:	ddef      	ble.n	8001488 <processI2C+0x234>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	e00c      	b.n	80014c8 <processI2C+0x274>
			setLED(BOT, EMITTER, i, 100, 0, 0);
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	2300      	movs	r3, #0
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2364      	movs	r3, #100	; 0x64
 80014ba:	2100      	movs	r1, #0
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fbef 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3302      	adds	r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b7f      	cmp	r3, #127	; 0x7f
 80014cc:	ddef      	ble.n	80014ae <processI2C+0x25a>
}
 80014ce:	e037      	b.n	8001540 <processI2C+0x2ec>
	} else if (cmd_buf == SHOW_RIGHT) {
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <processI2C+0x2b4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b28      	cmp	r3, #40	; 0x28
 80014d6:	d12a      	bne.n	800152e <processI2C+0x2da>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	e00c      	b.n	80014f8 <processI2C+0x2a4>
			setLED(TOP, EMITTER, i, 0, 0, 100);
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	2364      	movs	r3, #100	; 0x64
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	2300      	movs	r3, #0
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fbd7 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_TOP_LEDS; i += 2) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3302      	adds	r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b7f      	cmp	r3, #127	; 0x7f
 80014fc:	ddef      	ble.n	80014de <processI2C+0x28a>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	e010      	b.n	8001526 <processI2C+0x2d2>
 8001504:	2000035e 	.word	0x2000035e
 8001508:	2000035f 	.word	0x2000035f
			setLED(BOT, RECEIVER, i, 0, 0, 100);
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	2364      	movs	r3, #100	; 0x64
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2300      	movs	r3, #0
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	2101      	movs	r1, #1
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fbc0 	bl	8000ca0 <setLED>
		for (int i = 0; i < NUM_BOT_LEDS; i += 2) {
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	3302      	adds	r3, #2
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	ddef      	ble.n	800150c <processI2C+0x2b8>
}
 800152c:	e008      	b.n	8001540 <processI2C+0x2ec>
	} else if (cmd_buf == EXIT) {
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <processI2C+0x2f4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b55      	cmp	r3, #85	; 0x55
 8001534:	d104      	bne.n	8001540 <processI2C+0x2ec>
		enableSense();
 8001536:	f7ff fe11 	bl	800115c <enableSense>
		active = 0;
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <processI2C+0x2f8>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	3730      	adds	r7, #48	; 0x30
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000035f 	.word	0x2000035f
 800154c:	2000035e 	.word	0x2000035e

08001550 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef * hi2c) {
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	cmd_ready = 1;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000035d 	.word	0x2000035d

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001576:	f000 fc78 	bl	8001e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157a:	f000 f84b 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157e:	f000 f9d7 	bl	8001930 <MX_GPIO_Init>
  MX_DMA_Init();
 8001582:	f000 f9a3 	bl	80018cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001586:	f000 f909 	bl	800179c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800158a:	f000 f953 	bl	8001834 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800158e:	f000 f8af 	bl	80016f0 <MX_I2C2_Init>
  MX_RNG_Init();
 8001592:	f000 f8ed 	bl	8001770 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  // Counts cycles since last recalibration
  int calibrateCount = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  receiveI2C();
 800159a:	f7ff fe47 	bl	800122c <receiveI2C>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (I2CUpdateReady()) {
 800159e:	f7ff fe39 	bl	8001214 <I2CUpdateReady>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <main+0x48>
		  processI2C();
 80015a8:	f7ff fe54 	bl	8001254 <processI2C>
		  updateLEDs();
 80015ac:	f7ff fd1a 	bl	8000fe4 <updateLEDs>
		  updateLEDs();
 80015b0:	f7ff fd18 	bl	8000fe4 <updateLEDs>
		  receiveI2C();
 80015b4:	f7ff fe3a 	bl	800122c <receiveI2C>
	  }
	  if (!I2CActive()) {
 80015b8:	f7ff fe20 	bl	80011fc <I2CActive>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ed      	bne.n	800159e <main+0x2e>
		  pollSensors();
 80015c2:	f7ff fc57 	bl	8000e74 <pollSensors>
		  // If sensors sense something, do not update LEDs
		  if (objectSensed()) {
 80015c6:	f7ff fc43 	bl	8000e50 <objectSensed>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d011      	beq.n	80015f4 <main+0x84>
			  sendCommand(getTopUART(), UPDATE_COMPLETE);
 80015d0:	f000 f9f8 	bl	80019c4 <getTopUART>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2110      	movs	r1, #16
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fde3 	bl	80011a4 <sendCommand>
			  sendCommand(getBotUART(), UPDATE_COMPLETE);
 80015de:	f000 f9fb 	bl	80019d8 <getBotUART>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2110      	movs	r1, #16
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fddc 	bl	80011a4 <sendCommand>
			  HAL_Delay(20);
 80015ec:	2014      	movs	r0, #20
 80015ee:	f000 fcad 	bl	8001f4c <HAL_Delay>
 80015f2:	e003      	b.n	80015fc <main+0x8c>
		  } else {
			  updateAnimation();
 80015f4:	f7fe ff90 	bl	8000518 <updateAnimation>
			  updateLEDs();
 80015f8:	f7ff fcf4 	bl	8000fe4 <updateLEDs>
		  }
		  // Recalibrate every 1000 cycles
		  calibrateCount++;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3301      	adds	r3, #1
 8001600:	607b      	str	r3, [r7, #4]
		  if (calibrateCount > 1000) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001608:	ddc9      	ble.n	800159e <main+0x2e>
			  recalibrate();
 800160a:	f7ff fc95 	bl	8000f38 <recalibrate>
			  calibrateCount = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
	  if (I2CUpdateReady()) {
 8001612:	e7c4      	b.n	800159e <main+0x2e>

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0a4      	sub	sp, #144	; 0x90
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800161e:	2238      	movs	r2, #56	; 0x38
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f004 ff0a 	bl	800643c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2244      	movs	r2, #68	; 0x44
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fefc 	bl	800643c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001644:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001648:	f002 fc6e 	bl	8003f28 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164c:	2302      	movs	r3, #2
 800164e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001654:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165a:	2302      	movs	r3, #2
 800165c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800165e:	2302      	movs	r3, #2
 8001660:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001662:	2301      	movs	r3, #1
 8001664:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001666:	2308      	movs	r3, #8
 8001668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800166c:	2302      	movs	r3, #2
 800166e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001672:	2304      	movs	r3, #4
 8001674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fd04 	bl	8004090 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800168e:	f000 f9c1 	bl	8001a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001696:	2301      	movs	r3, #1
 8001698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 f807 	bl	80046c0 <HAL_RCC_ClockConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80016b8:	f000 f9ac 	bl	8001a14 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80016bc:	f244 0383 	movw	r3, #16515	; 0x4083
 80016c0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 80016ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fa0e 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80016e2:	f000 f997 	bl	8001a14 <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3790      	adds	r7, #144	; 0x90
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_I2C2_Init+0x74>)
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <MX_I2C2_Init+0x78>)
 80016f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_I2C2_Init+0x74>)
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <MX_I2C2_Init+0x7c>)
 80016fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_I2C2_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_I2C2_Init+0x74>)
 8001708:	2201      	movs	r2, #1
 800170a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_I2C2_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_I2C2_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C2_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_I2C2_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_I2C2_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800172a:	480e      	ldr	r0, [pc, #56]	; (8001764 <MX_I2C2_Init+0x74>)
 800172c:	f001 f9c2 	bl	8002ab4 <HAL_I2C_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001736:	f000 f96d 	bl	8001a14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <MX_I2C2_Init+0x74>)
 800173e:	f002 fb5b 	bl	8003df8 <HAL_I2CEx_ConfigAnalogFilter>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001748:	f000 f964 	bl	8001a14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_I2C2_Init+0x74>)
 8001750:	f002 fb9d 	bl	8003e8e <HAL_I2CEx_ConfigDigitalFilter>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800175a:	f000 f95b 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000360 	.word	0x20000360
 8001768:	40005800 	.word	0x40005800
 800176c:	00303d5b 	.word	0x00303d5b

08001770 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MX_RNG_Init+0x24>)
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <MX_RNG_Init+0x28>)
 8001778:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_RNG_Init+0x24>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_RNG_Init+0x24>)
 8001782:	f003 fba9 	bl	8004ed8 <HAL_RNG_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800178c:	f000 f942 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200004f8 	.word	0x200004f8
 8001798:	50060800 	.word	0x50060800

0800179c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <MX_USART1_UART_Init+0x94>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e4:	4811      	ldr	r0, [pc, #68]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017e6:	f003 fbfb 	bl	8004fe0 <HAL_UART_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017f0:	f000 f910 	bl	8001a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_USART1_UART_Init+0x90>)
 80017f8:	f004 fd18 	bl	800622c <HAL_UARTEx_SetTxFifoThreshold>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001802:	f000 f907 	bl	8001a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001806:	2100      	movs	r1, #0
 8001808:	4808      	ldr	r0, [pc, #32]	; (800182c <MX_USART1_UART_Init+0x90>)
 800180a:	f004 fd4d 	bl	80062a8 <HAL_UARTEx_SetRxFifoThreshold>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001814:	f000 f8fe 	bl	8001a14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_USART1_UART_Init+0x90>)
 800181a:	f004 fcce 	bl	80061ba <HAL_UARTEx_DisableFifoMode>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001824:	f000 f8f6 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000046c 	.word	0x2000046c
 8001830:	40013800 	.word	0x40013800

08001834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <MX_USART2_UART_Init+0x94>)
 800183c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 800187e:	f003 fbaf 	bl	8004fe0 <HAL_UART_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001888:	f000 f8c4 	bl	8001a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800188c:	2100      	movs	r1, #0
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 8001890:	f004 fccc 	bl	800622c <HAL_UARTEx_SetTxFifoThreshold>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800189a:	f000 f8bb 	bl	8001a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800189e:	2100      	movs	r1, #0
 80018a0:	4808      	ldr	r0, [pc, #32]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 80018a2:	f004 fd01 	bl	80062a8 <HAL_UARTEx_SetRxFifoThreshold>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018ac:	f000 f8b2 	bl	8001a14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_USART2_UART_Init+0x90>)
 80018b2:	f004 fc82 	bl	80061ba <HAL_UARTEx_DisableFifoMode>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018bc:	f000 f8aa 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000050c 	.word	0x2000050c
 80018c8:	40004400 	.word	0x40004400

080018cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_DMA_Init+0x60>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <MX_DMA_Init+0x60>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6493      	str	r3, [r2, #72]	; 0x48
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_DMA_Init+0x60>)
 80018e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_DMA_Init+0x60>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <MX_DMA_Init+0x60>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6493      	str	r3, [r2, #72]	; 0x48
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <MX_DMA_Init+0x60>)
 80018f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	200b      	movs	r0, #11
 8001908:	f000 fc1d 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800190c:	200b      	movs	r0, #11
 800190e:	f000 fc34 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	200c      	movs	r0, #12
 8001918:	f000 fc15 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800191c:	200c      	movs	r0, #12
 800191e:	f000 fc2c 	bl	800217a <HAL_NVIC_EnableIRQ>

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_GPIO_Init+0x8c>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <MX_GPIO_Init+0x8c>)
 800194c:	f043 0320 	orr.w	r3, r3, #32
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_GPIO_Init+0x8c>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_GPIO_Init+0x8c>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <MX_GPIO_Init+0x8c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_GPIO_Init+0x8c>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_GPIO_Init+0x8c>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <MX_GPIO_Init+0x8c>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_GPIO_Init+0x8c>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2108      	movs	r1, #8
 8001992:	480b      	ldr	r0, [pc, #44]	; (80019c0 <MX_GPIO_Init+0x90>)
 8001994:	f001 f876 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001998:	2308      	movs	r3, #8
 800199a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	4619      	mov	r1, r3
 80019ae:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_GPIO_Init+0x90>)
 80019b0:	f000 fee6 	bl	8002780 <HAL_GPIO_Init>

}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	48000400 	.word	0x48000400

080019c4 <getTopUART>:

/* USER CODE BEGIN 4 */
UART_HandleTypeDef* getTopUART() {
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
	return &huart1;
 80019c8:	4b02      	ldr	r3, [pc, #8]	; (80019d4 <getTopUART+0x10>)
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	2000046c 	.word	0x2000046c

080019d8 <getBotUART>:
UART_HandleTypeDef* getBotUART() {
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	return &huart2;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <getBotUART+0x10>)
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	2000050c 	.word	0x2000050c

080019ec <getI2C>:
I2C_HandleTypeDef* getI2C() {
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	return &hi2c2;
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <getI2C+0x10>)
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	20000360 	.word	0x20000360

08001a00 <getRNG>:
RNG_HandleTypeDef* getRNG() {
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	return &hrng;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <getRNG+0x10>)
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	200004f8 	.word	0x200004f8

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <Error_Handler+0x6>

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_MspInit+0x44>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_MspInit+0x44>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_MspInit+0x44>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_MspInit+0x44>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_MspInit+0x44>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6593      	str	r3, [r2, #88]	; 0x58
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a52:	f002 fb0d 	bl	8004070 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_I2C_MspInit+0xc8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d14d      	bne.n	8001b22 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aba:	2312      	movs	r3, #18
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4818      	ldr	r0, [pc, #96]	; (8001b34 <HAL_I2C_MspInit+0xd0>)
 8001ad2:	f000 fe55 	bl	8002780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001adc:	2312      	movs	r3, #18
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f000 fe43 	bl	8002780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2021      	movs	r0, #33	; 0x21
 8001b18:	f000 fb15 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b1c:	2021      	movs	r0, #33	; 0x21
 8001b1e:	f000 fb2c 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40005800 	.word	0x40005800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48001400 	.word	0x48001400

08001b38 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_RNG_MspInit+0x38>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10b      	bne.n	8001b62 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RNG_MspInit+0x3c>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RNG_MspInit+0x3c>)
 8001b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_RNG_MspInit+0x3c>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	50060800 	.word	0x50060800
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5f      	ldr	r2, [pc, #380]	; (8001d14 <HAL_UART_MspInit+0x19c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d159      	bne.n	8001c4e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba6:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b56      	ldr	r3, [pc, #344]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	484d      	ldr	r0, [pc, #308]	; (8001d1c <HAL_UART_MspInit+0x1a4>)
 8001be6:	f000 fdcb 	bl	8002780 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001bea:	4b4d      	ldr	r3, [pc, #308]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001bec:	4a4d      	ldr	r2, [pc, #308]	; (8001d24 <HAL_UART_MspInit+0x1ac>)
 8001bee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001bf2:	2219      	movs	r2, #25
 8001bf4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c08:	4b45      	ldr	r3, [pc, #276]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c20:	483f      	ldr	r0, [pc, #252]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c22:	f000 fac5 	bl	80021b0 <HAL_DMA_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8001c2c:	f7ff fef2 	bl	8001a14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3b      	ldr	r2, [pc, #236]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c34:	675a      	str	r2, [r3, #116]	; 0x74
 8001c36:	4a3a      	ldr	r2, [pc, #232]	; (8001d20 <HAL_UART_MspInit+0x1a8>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2025      	movs	r0, #37	; 0x25
 8001c42:	f000 fa80 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c46:	2025      	movs	r0, #37	; 0x25
 8001c48:	f000 fa97 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c4c:	e05e      	b.n	8001d0c <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a35      	ldr	r2, [pc, #212]	; (8001d28 <HAL_UART_MspInit+0x1b0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d159      	bne.n	8001d0c <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a2e      	ldr	r2, [pc, #184]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7c:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_UART_MspInit+0x1a0>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c88:	230c      	movs	r3, #12
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca6:	f000 fd6b 	bl	8002780 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_UART_MspInit+0x1b8>)
 8001cae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cb2:	221b      	movs	r2, #27
 8001cb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cb8:	2210      	movs	r2, #16
 8001cba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001ce2:	f000 fa65 	bl	80021b0 <HAL_DMA_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8001cec:	f7ff fe92 	bl	8001a14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cf4:	675a      	str	r2, [r3, #116]	; 0x74
 8001cf6:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_UART_MspInit+0x1b4>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2026      	movs	r0, #38	; 0x26
 8001d02:	f000 fa20 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d06:	2026      	movs	r0, #38	; 0x26
 8001d08:	f000 fa37 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	200003ac 	.word	0x200003ac
 8001d24:	40020008 	.word	0x40020008
 8001d28:	40004400 	.word	0x40004400
 8001d2c:	2000040c 	.word	0x2000040c
 8001d30:	4002001c 	.word	0x4002001c

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <NMI_Handler+0x4>

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 f8c6 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Channel1_IRQHandler+0x10>)
 8001d8e:	f000 fb99 	bl	80024c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200003ac 	.word	0x200003ac

08001d9c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA1_Channel2_IRQHandler+0x10>)
 8001da2:	f000 fb8f 	bl	80024c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000040c 	.word	0x2000040c

08001db0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <I2C2_EV_IRQHandler+0x10>)
 8001db6:	f000 ff5d 	bl	8002c74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000360 	.word	0x20000360

08001dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <USART1_IRQHandler+0x10>)
 8001dca:	f003 fb3f 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000046c 	.word	0x2000046c

08001dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <USART2_IRQHandler+0x10>)
 8001dde:	f003 fb35 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000050c 	.word	0x2000050c

08001dec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <SystemInit+0x28>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <SystemInit+0x28>)
 8001df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SystemInit+0x28>)
 8001e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e06:	609a      	str	r2, [r3, #8]
#endif
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e1e:	490e      	ldr	r1, [pc, #56]	; (8001e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <LoopForever+0xe>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e34:	4c0b      	ldr	r4, [pc, #44]	; (8001e64 <LoopForever+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e42:	f7ff ffd3 	bl	8001dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f004 fad5 	bl	80063f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4a:	f7ff fb91 	bl	8001570 <main>

08001e4e <LoopForever>:

LoopForever:
    b LoopForever
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
  ldr   r0, =_estack
 8001e50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001e5c:	080064b4 	.word	0x080064b4
  ldr r2, =_sbss
 8001e60:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001e64:	2000059c 	.word	0x2000059c

08001e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC1_2_IRQHandler>

08001e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f95b 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f80e 	bl	8001e9c <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	71fb      	strb	r3, [r7, #7]
 8001e8a:	e001      	b.n	8001e90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e8c:	f7ff fdc6 	bl	8001a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e90:	79fb      	ldrb	r3, [r7, #7]

}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_InitTick+0x68>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d022      	beq.n	8001ef6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_InitTick+0x6c>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_InitTick+0x68>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 f966 	bl	8002196 <HAL_SYSTICK_Config>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10f      	bne.n	8001ef0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	d809      	bhi.n	8001eea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ede:	f000 f932 	bl	8002146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_InitTick+0x70>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e007      	b.n	8001efa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e004      	b.n	8001efa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e001      	b.n	8001efa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000014 	.word	0x20000014
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000010 	.word	0x20000010

08001f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_IncTick+0x1c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_IncTick+0x20>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_IncTick+0x1c>)
 8001f20:	6013      	str	r3, [r2, #0]
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	20000598 	.word	0x20000598
 8001f30:	20000014 	.word	0x20000014

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000598 	.word	0x20000598

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f64:	d004      	beq.n	8001f70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_Delay+0x40>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f70:	bf00      	nop
 8001f72:	f7ff ffdf 	bl	8001f34 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d8f7      	bhi.n	8001f72 <HAL_Delay+0x26>
  {
  }
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000014 	.word	0x20000014

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff40 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff90 	bl	8002084 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5f 	bl	8002030 <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff33 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa4 	bl	80020ec <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e08d      	b.n	80022de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_DMA_Init+0x138>)
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d80f      	bhi.n	80021ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b45      	ldr	r3, [pc, #276]	; (80022ec <HAL_DMA_Init+0x13c>)
 80021d6:	4413      	add	r3, r2
 80021d8:	4a45      	ldr	r2, [pc, #276]	; (80022f0 <HAL_DMA_Init+0x140>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	009a      	lsls	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a42      	ldr	r2, [pc, #264]	; (80022f4 <HAL_DMA_Init+0x144>)
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
 80021ec:	e00e      	b.n	800220c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_DMA_Init+0x148>)
 80021f6:	4413      	add	r3, r2
 80021f8:	4a3d      	ldr	r2, [pc, #244]	; (80022f0 <HAL_DMA_Init+0x140>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	009a      	lsls	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a3c      	ldr	r2, [pc, #240]	; (80022fc <HAL_DMA_Init+0x14c>)
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002226:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fa2c 	bl	80026bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226c:	d102      	bne.n	8002274 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002288:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_DMA_Init+0x104>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b04      	cmp	r3, #4
 8002298:	d80c      	bhi.n	80022b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fa4c 	bl	8002738 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	e008      	b.n	80022c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020407 	.word	0x40020407
 80022ec:	bffdfff8 	.word	0xbffdfff8
 80022f0:	cccccccd 	.word	0xcccccccd
 80022f4:	40020000 	.word	0x40020000
 80022f8:	bffdfbf8 	.word	0xbffdfbf8
 80022fc:	40020400 	.word	0x40020400

08002300 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_DMA_Start_IT+0x20>
 800231c:	2302      	movs	r3, #2
 800231e:	e066      	b.n	80023ee <HAL_DMA_Start_IT+0xee>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d155      	bne.n	80023e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f970 	bl	800263e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 020e 	orr.w	r2, r2, #14
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e00f      	b.n	8002398 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0204 	bic.w	r2, r2, #4
 8002386:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 020a 	orr.w	r2, r2, #10
 8002396:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e005      	b.n	80023ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
 80023ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d00d      	beq.n	800242a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e047      	b.n	80024ba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 020e 	bic.w	r2, r2, #14
 8002438:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002458:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f003 021f 	and.w	r2, r3, #31
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f202 	lsl.w	r2, r1, r2
 800246c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002476:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002498:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
    }
  }
  return status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2204      	movs	r2, #4
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d026      	beq.n	800253e <HAL_DMA_IRQHandler+0x7a>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d021      	beq.n	800253e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2104      	movs	r1, #4
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	2b00      	cmp	r3, #0
 8002532:	d071      	beq.n	8002618 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800253c:	e06c      	b.n	8002618 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2202      	movs	r2, #2
 8002548:	409a      	lsls	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d02e      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d029      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10b      	bne.n	8002582 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 020a 	bic.w	r2, r2, #10
 8002578:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2102      	movs	r1, #2
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d038      	beq.n	8002618 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025ae:	e033      	b.n	8002618 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2208      	movs	r2, #8
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d02a      	beq.n	800261a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d025      	beq.n	800261a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 020e 	bic.w	r2, r2, #14
 80025dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 021f 	and.w	r2, r3, #31
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002618:	bf00      	nop
 800261a:	bf00      	nop
}
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002630:	b2db      	uxtb	r3, r3
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002654:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b10      	cmp	r3, #16
 800268a:	d108      	bne.n	800269e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800269c:	e007      	b.n	80026ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	60da      	str	r2, [r3, #12]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d802      	bhi.n	80026d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e001      	b.n	80026da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80026d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3b08      	subs	r3, #8
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002706:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2201      	movs	r2, #1
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40020407 	.word	0x40020407
 8002728:	40020800 	.word	0x40020800
 800272c:	40020820 	.word	0x40020820
 8002730:	cccccccd 	.word	0xcccccccd
 8002734:	40020880 	.word	0x40020880

08002738 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	461a      	mov	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a08      	ldr	r2, [pc, #32]	; (800277c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800275a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3b01      	subs	r3, #1
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2201      	movs	r2, #1
 8002766:	409a      	lsls	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	1000823f 	.word	0x1000823f
 800277c:	40020940 	.word	0x40020940

08002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800278e:	e15a      	b.n	8002a46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 814c 	beq.w	8002a40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d00b      	beq.n	80027c8 <HAL_GPIO_Init+0x48>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d007      	beq.n	80027c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027bc:	2b11      	cmp	r3, #17
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b12      	cmp	r3, #18
 80027c6:	d130      	bne.n	800282a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027fe:	2201      	movs	r2, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0201 	and.w	r2, r3, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0xea>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b12      	cmp	r3, #18
 8002868:	d123      	bne.n	80028b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	6939      	ldr	r1, [r7, #16]
 80028ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80a6 	beq.w	8002a40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f4:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_GPIO_Init+0x2e4>)
 80028f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f8:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <HAL_GPIO_Init+0x2e4>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002900:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_GPIO_Init+0x2e4>)
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290c:	4a56      	ldr	r2, [pc, #344]	; (8002a68 <HAL_GPIO_Init+0x2e8>)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002936:	d01f      	beq.n	8002978 <HAL_GPIO_Init+0x1f8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_GPIO_Init+0x2ec>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d019      	beq.n	8002974 <HAL_GPIO_Init+0x1f4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_GPIO_Init+0x2f0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_GPIO_Init+0x1f0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_GPIO_Init+0x2f4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00d      	beq.n	800296c <HAL_GPIO_Init+0x1ec>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <HAL_GPIO_Init+0x2f8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x1e8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_GPIO_Init+0x2fc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_GPIO_Init+0x1e4>
 8002960:	2305      	movs	r3, #5
 8002962:	e00a      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002964:	2306      	movs	r3, #6
 8002966:	e008      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002968:	2304      	movs	r3, #4
 800296a:	e006      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 800296c:	2303      	movs	r3, #3
 800296e:	e004      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002970:	2302      	movs	r3, #2
 8002972:	e002      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_GPIO_Init+0x1fa>
 8002978:	2300      	movs	r3, #0
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	f002 0203 	and.w	r2, r2, #3
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	4093      	lsls	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298a:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_GPIO_Init+0x2e8>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_GPIO_Init+0x300>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029bc:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e6:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_GPIO_Init+0x300>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a10:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <HAL_GPIO_Init+0x300>)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_GPIO_Init+0x300>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a3a:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_GPIO_Init+0x300>)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f ae9d 	bne.w	8002790 <HAL_GPIO_Init+0x10>
  }
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	48000400 	.word	0x48000400
 8002a70:	48000800 	.word	0x48000800
 8002a74:	48000c00 	.word	0x48000c00
 8002a78:	48001000 	.word	0x48001000
 8002a7c:	48001400 	.word	0x48001400
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e081      	b.n	8002bca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe ffc2 	bl	8001a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e006      	b.n	8002b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d104      	bne.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69d9      	ldr	r1, [r3, #28]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d139      	bne.n	8002c62 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_I2C_Slave_Receive_IT+0x28>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e033      	b.n	8002c64 <HAL_I2C_Slave_Receive_IT+0x90>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2222      	movs	r2, #34	; 0x22
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c28:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <HAL_I2C_Slave_Receive_IT+0x98>)
 8002c44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002c54:	f248 0102 	movw	r1, #32770	; 0x8002
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f001 f80b 	bl	8003c74 <I2C_Enable_IRQ>

    return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	ffff0000 	.word	0xffff0000
 8002c70:	08002d65 	.word	0x08002d65

08002c74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	68f9      	ldr	r1, [r7, #12]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <I2C_Slave_ISR_IT+0x24>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0ec      	b.n	8002f62 <I2C_Slave_ISR_IT+0x1fe>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <I2C_Slave_ISR_IT+0x4c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fc9a 	bl	80036e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d04d      	beq.n	8002e58 <I2C_Slave_ISR_IT+0xf4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d047      	beq.n	8002e58 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d128      	bne.n	8002e24 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b28      	cmp	r3, #40	; 0x28
 8002ddc:	d108      	bne.n	8002df0 <I2C_Slave_ISR_IT+0x8c>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002de4:	d104      	bne.n	8002df0 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002de6:	6939      	ldr	r1, [r7, #16]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fd85 	bl	80038f8 <I2C_ITListenCplt>
 8002dee:	e032      	b.n	8002e56 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b29      	cmp	r3, #41	; 0x29
 8002dfa:	d10e      	bne.n	8002e1a <I2C_Slave_ISR_IT+0xb6>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e02:	d00a      	beq.n	8002e1a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fec0 	bl	8003b92 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fb3d 	bl	8003492 <I2C_ITSlaveSeqCplt>
 8002e18:	e01d      	b.n	8002e56 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2210      	movs	r2, #16
 8002e20:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e22:	e096      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	f043 0204 	orr.w	r2, r3, #4
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <I2C_Slave_ISR_IT+0xe4>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	f040 8085 	bne.w	8002f52 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fda8 	bl	80039a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e54:	e07d      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1ee>
 8002e56:	e07c      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d030      	beq.n	8002ec6 <I2C_Slave_ISR_IT+0x162>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02a      	beq.n	8002ec6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d14f      	bne.n	8002f56 <I2C_Slave_ISR_IT+0x1f2>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ebc:	d04b      	beq.n	8002f56 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fae7 	bl	8003492 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ec4:	e047      	b.n	8002f56 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ede:	6939      	ldr	r1, [r7, #16]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fa15 	bl	8003310 <I2C_ITAddrCplt>
 8002ee6:	e037      	b.n	8002f58 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d031      	beq.n	8002f58 <I2C_Slave_ISR_IT+0x1f4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02b      	beq.n	8002f58 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d018      	beq.n	8002f3c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
 8002f3a:	e00d      	b.n	8002f58 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f42:	d002      	beq.n	8002f4a <I2C_Slave_ISR_IT+0x1e6>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 faa1 	bl	8003492 <I2C_ITSlaveSeqCplt>
 8002f50:	e002      	b.n	8002f58 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002f56:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b088      	sub	sp, #32
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <I2C_Master_ISR_DMA+0x1a>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0e1      	b.n	8003148 <I2C_Master_ISR_DMA+0x1de>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <I2C_Master_ISR_DMA+0x5e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f043 0204 	orr.w	r2, r3, #4
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002fb8:	2120      	movs	r1, #32
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fe5a 	bl	8003c74 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fde6 	bl	8003b92 <I2C_Flush_TXDR>
 8002fc6:	e0ba      	b.n	800313e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	09db      	lsrs	r3, r3, #7
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d072      	beq.n	80030ba <I2C_Master_ISR_DMA+0x150>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d06c      	beq.n	80030ba <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fee:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d04e      	beq.n	8003098 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003006:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d906      	bls.n	8003020 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e010      	b.n	8003042 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003032:	d003      	beq.n	800303c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e002      	b.n	8003042 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800303c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003040:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	8a79      	ldrh	r1, [r7, #18]
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fde1 	bl	8003c18 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b22      	cmp	r3, #34	; 0x22
 8003072:	d108      	bne.n	8003086 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003082:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003084:	e05b      	b.n	800313e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003094:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003096:	e052      	b.n	800313e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a6:	d003      	beq.n	80030b0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f9b5 	bl	8003418 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80030ae:	e046      	b.n	800313e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fc76 	bl	80039a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80030b8:	e041      	b.n	800313e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d029      	beq.n	800311a <I2C_Master_ISR_DMA+0x1b0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d023      	beq.n	800311a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d119      	bne.n	8003110 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ea:	d027      	beq.n	800313c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f4:	d108      	bne.n	8003108 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003104:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003106:	e019      	b.n	800313c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f985 	bl	8003418 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800310e:	e015      	b.n	800313c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fc46 	bl	80039a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003118:	e010      	b.n	800313c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <I2C_Master_ISR_DMA+0x1d4>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fa0b 	bl	8003550 <I2C_ITMasterCplt>
 800313a:	e000      	b.n	800313e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800313c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <I2C_Slave_ISR_DMA+0x24>
 8003170:	2302      	movs	r3, #2
 8003172:	e0c9      	b.n	8003308 <I2C_Slave_ISR_DMA+0x1b8>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <I2C_Slave_ISR_DMA+0x4c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 faa4 	bl	80036e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 809a 	beq.w	80032de <I2C_Slave_ISR_DMA+0x18e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8093 	beq.w	80032de <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	0b9b      	lsrs	r3, r3, #14
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	0bdb      	lsrs	r3, r3, #15
 80031c8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d07f      	beq.n	80032d0 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0bdb      	lsrs	r3, r3, #15
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0b9b      	lsrs	r3, r3, #14
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003214:	2301      	movs	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d128      	bne.n	8003270 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b28      	cmp	r3, #40	; 0x28
 8003228:	d108      	bne.n	800323c <I2C_Slave_ISR_DMA+0xec>
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003230:	d104      	bne.n	800323c <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fb5f 	bl	80038f8 <I2C_ITListenCplt>
 800323a:	e048      	b.n	80032ce <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b29      	cmp	r3, #41	; 0x29
 8003246:	d10e      	bne.n	8003266 <I2C_Slave_ISR_DMA+0x116>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800324e:	d00a      	beq.n	8003266 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2210      	movs	r2, #16
 8003256:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fc9a 	bl	8003b92 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f917 	bl	8003492 <I2C_ITSlaveSeqCplt>
 8003264:	e033      	b.n	80032ce <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2210      	movs	r2, #16
 800326c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800326e:	e034      	b.n	80032da <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2210      	movs	r2, #16
 8003276:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <I2C_Slave_ISR_DMA+0x14a>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003298:	d11f      	bne.n	80032da <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	2b21      	cmp	r3, #33	; 0x21
 800329e:	d002      	beq.n	80032a6 <I2C_Slave_ISR_DMA+0x156>
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b29      	cmp	r3, #41	; 0x29
 80032a4:	d103      	bne.n	80032ae <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2221      	movs	r2, #33	; 0x21
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
 80032ac:	e008      	b.n	80032c0 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b22      	cmp	r3, #34	; 0x22
 80032b2:	d002      	beq.n	80032ba <I2C_Slave_ISR_DMA+0x16a>
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	2b2a      	cmp	r3, #42	; 0x2a
 80032b8:	d102      	bne.n	80032c0 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2222      	movs	r2, #34	; 0x22
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	4619      	mov	r1, r3
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fb6c 	bl	80039a4 <I2C_ITError>
      if (treatdmanack == 1U)
 80032cc:	e005      	b.n	80032da <I2C_Slave_ISR_DMA+0x18a>
 80032ce:	e004      	b.n	80032da <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2210      	movs	r2, #16
 80032d6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80032d8:	e011      	b.n	80032fe <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80032da:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80032dc:	e00f      	b.n	80032fe <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <I2C_Slave_ISR_DMA+0x1ae>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	08db      	lsrs	r3, r3, #3
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f809 	bl	8003310 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003326:	2b28      	cmp	r3, #40	; 0x28
 8003328:	d16a      	bne.n	8003400 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	b29b      	uxth	r3, r3
 8003344:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003348:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	b29b      	uxth	r3, r3
 8003352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003356:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	b29b      	uxth	r3, r3
 8003360:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003364:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d138      	bne.n	80033e0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800336e:	897b      	ldrh	r3, [r7, #10]
 8003370:	09db      	lsrs	r3, r3, #7
 8003372:	b29a      	uxth	r2, r3
 8003374:	89bb      	ldrh	r3, [r7, #12]
 8003376:	4053      	eors	r3, r2
 8003378:	b29b      	uxth	r3, r3
 800337a:	f003 0306 	and.w	r3, r3, #6
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11c      	bne.n	80033bc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	2b02      	cmp	r3, #2
 8003396:	d13b      	bne.n	8003410 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2208      	movs	r2, #8
 80033a4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033ae:	89ba      	ldrh	r2, [r7, #12]
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fc95 	bl	8002ce4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033ba:	e029      	b.n	8003410 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80033bc:	893b      	ldrh	r3, [r7, #8]
 80033be:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fcb9 	bl	8003d3c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033d2:	89ba      	ldrh	r2, [r7, #12]
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fc83 	bl	8002ce4 <HAL_I2C_AddrCallback>
}
 80033de:	e017      	b.n	8003410 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fca9 	bl	8003d3c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033f2:	89ba      	ldrh	r2, [r7, #12]
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fc73 	bl	8002ce4 <HAL_I2C_AddrCallback>
}
 80033fe:	e007      	b.n	8003410 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b21      	cmp	r3, #33	; 0x21
 8003432:	d115      	bne.n	8003460 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2211      	movs	r2, #17
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003448:	2101      	movs	r1, #1
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fc76 	bl	8003d3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fc25 	bl	8002ca8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800345e:	e014      	b.n	800348a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2212      	movs	r2, #18
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003474:	2102      	movs	r1, #2
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fc60 	bl	8003d3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff fc19 	bl	8002cbc <HAL_I2C_MasterRxCpltCallback>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	0b9b      	lsrs	r3, r3, #14
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e00d      	b.n	80034e4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	0bdb      	lsrs	r3, r3, #15
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b29      	cmp	r3, #41	; 0x29
 80034ee:	d112      	bne.n	8003516 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2228      	movs	r2, #40	; 0x28
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2221      	movs	r2, #33	; 0x21
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034fe:	2101      	movs	r1, #1
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fc1b 	bl	8003d3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fbde 	bl	8002cd0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003514:	e017      	b.n	8003546 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b2a      	cmp	r3, #42	; 0x2a
 8003520:	d111      	bne.n	8003546 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2228      	movs	r2, #40	; 0x28
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2222      	movs	r2, #34	; 0x22
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003530:	2102      	movs	r1, #2
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fc02 	bl	8003d3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fe f805 	bl	8001550 <HAL_I2C_SlaveRxCpltCallback>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2220      	movs	r2, #32
 8003564:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b21      	cmp	r3, #33	; 0x21
 8003570:	d107      	bne.n	8003582 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003572:	2101      	movs	r1, #1
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fbe1 	bl	8003d3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2211      	movs	r2, #17
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
 8003580:	e00c      	b.n	800359c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b22      	cmp	r3, #34	; 0x22
 800358c:	d106      	bne.n	800359c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800358e:	2102      	movs	r1, #2
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fbd3 	bl	8003d3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2212      	movs	r2, #18
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <I2C_ITMasterCplt+0x18c>)
 80035a8:	400b      	ands	r3, r1
 80035aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4a      	ldr	r2, [pc, #296]	; (80036e0 <I2C_ITMasterCplt+0x190>)
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2210      	movs	r2, #16
 80035ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f043 0204 	orr.w	r2, r3, #4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b60      	cmp	r3, #96	; 0x60
 80035e2:	d10b      	bne.n	80035fc <I2C_ITMasterCplt+0xac>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80035fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fac8 	bl	8003b92 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b60      	cmp	r3, #96	; 0x60
 8003612:	d002      	beq.n	800361a <I2C_ITMasterCplt+0xca>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f9bf 	bl	80039a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003626:	e054      	b.n	80036d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b21      	cmp	r3, #33	; 0x21
 8003632:	d124      	bne.n	800367e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d10b      	bne.n	8003666 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fb58 	bl	8002d14 <HAL_I2C_MemTxCpltCallback>
}
 8003664:	e035      	b.n	80036d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fb16 	bl	8002ca8 <HAL_I2C_MasterTxCpltCallback>
}
 800367c:	e029      	b.n	80036d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b22      	cmp	r3, #34	; 0x22
 8003688:	d123      	bne.n	80036d2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d10b      	bne.n	80036bc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fb37 	bl	8002d28 <HAL_I2C_MemRxCpltCallback>
}
 80036ba:	e00a      	b.n	80036d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff faf5 	bl	8002cbc <HAL_I2C_MasterRxCpltCallback>
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	fe00e800 	.word	0xfe00e800
 80036e0:	ffff0000 	.word	0xffff0000

080036e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2220      	movs	r2, #32
 8003708:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b21      	cmp	r3, #33	; 0x21
 800370e:	d002      	beq.n	8003716 <I2C_ITSlaveCplt+0x32>
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b29      	cmp	r3, #41	; 0x29
 8003714:	d108      	bne.n	8003728 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003716:	f248 0101 	movw	r1, #32769	; 0x8001
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fb0e 	bl	8003d3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2221      	movs	r2, #33	; 0x21
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
 8003726:	e00d      	b.n	8003744 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b22      	cmp	r3, #34	; 0x22
 800372c:	d002      	beq.n	8003734 <I2C_ITSlaveCplt+0x50>
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b2a      	cmp	r3, #42	; 0x2a
 8003732:	d107      	bne.n	8003744 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003734:	f248 0102 	movw	r1, #32770	; 0x8002
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 faff 	bl	8003d3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2222      	movs	r2, #34	; 0x22
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003752:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b64      	ldr	r3, [pc, #400]	; (80038f0 <I2C_ITSlaveCplt+0x20c>)
 8003760:	400b      	ands	r3, r1
 8003762:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fa14 	bl	8003b92 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	0b9b      	lsrs	r3, r3, #14
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d013      	beq.n	800379e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003784:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800379c:	e018      	b.n	80037d0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	0bdb      	lsrs	r3, r3, #15
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d012      	beq.n	80037d0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00c      	beq.n	800381e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f043 0204 	orr.w	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	2b00      	cmp	r3, #0
 8003848:	d010      	beq.n	800386c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8a7 	bl	80039a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b28      	cmp	r3, #40	; 0x28
 8003860:	d141      	bne.n	80038e6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003862:	6979      	ldr	r1, [r7, #20]
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f847 	bl	80038f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800386a:	e03c      	b.n	80038e6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003874:	d014      	beq.n	80038a0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff fe0b 	bl	8003492 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <I2C_ITSlaveCplt+0x210>)
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fa31 	bl	8002d00 <HAL_I2C_ListenCpltCallback>
}
 800389e:	e022      	b.n	80038e6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b22      	cmp	r3, #34	; 0x22
 80038aa:	d10e      	bne.n	80038ca <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fe44 	bl	8001550 <HAL_I2C_SlaveRxCpltCallback>
}
 80038c8:	e00d      	b.n	80038e6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff f9f5 	bl	8002cd0 <HAL_I2C_SlaveTxCpltCallback>
}
 80038e6:	bf00      	nop
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	fe00e800 	.word	0xfe00e800
 80038f4:	ffff0000 	.word	0xffff0000

080038f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <I2C_ITListenCplt+0xa8>)
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003976:	f248 0103 	movw	r1, #32771	; 0x8003
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9de 	bl	8003d3c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff f9b5 	bl	8002d00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	ffff0000 	.word	0xffff0000

080039a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a5d      	ldr	r2, [pc, #372]	; (8003b38 <I2C_ITError+0x194>)
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b28      	cmp	r3, #40	; 0x28
 80039da:	d005      	beq.n	80039e8 <I2C_ITError+0x44>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b29      	cmp	r3, #41	; 0x29
 80039e0:	d002      	beq.n	80039e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b2a      	cmp	r3, #42	; 0x2a
 80039e6:	d10b      	bne.n	8003a00 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039e8:	2103      	movs	r1, #3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f9a6 	bl	8003d3c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2228      	movs	r2, #40	; 0x28
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a50      	ldr	r2, [pc, #320]	; (8003b3c <I2C_ITError+0x198>)
 80039fc:	635a      	str	r2, [r3, #52]	; 0x34
 80039fe:	e011      	b.n	8003a24 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a00:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f999 	bl	8003d3c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b60      	cmp	r3, #96	; 0x60
 8003a14:	d003      	beq.n	8003a1e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d039      	beq.n	8003aa6 <I2C_ITError+0x102>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b11      	cmp	r3, #17
 8003a36:	d002      	beq.n	8003a3e <I2C_ITError+0x9a>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b21      	cmp	r3, #33	; 0x21
 8003a3c:	d133      	bne.n	8003aa6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a4c:	d107      	bne.n	8003a5e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a5c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fddd 	bl	8002622 <HAL_DMA_GetState>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d017      	beq.n	8003a9e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	4a33      	ldr	r2, [pc, #204]	; (8003b40 <I2C_ITError+0x19c>)
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fcb7 	bl	80023f6 <HAL_DMA_Abort_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04d      	beq.n	8003b2a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a9c:	e045      	b.n	8003b2a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f850 	bl	8003b44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aa4:	e041      	b.n	8003b2a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d039      	beq.n	8003b22 <I2C_ITError+0x17e>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b12      	cmp	r3, #18
 8003ab2:	d002      	beq.n	8003aba <I2C_ITError+0x116>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b22      	cmp	r3, #34	; 0x22
 8003ab8:	d133      	bne.n	8003b22 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac8:	d107      	bne.n	8003ada <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ad8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fd9f 	bl	8002622 <HAL_DMA_GetState>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d017      	beq.n	8003b1a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <I2C_ITError+0x19c>)
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fc79 	bl	80023f6 <HAL_DMA_Abort_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d011      	beq.n	8003b2e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b14:	4610      	mov	r0, r2
 8003b16:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b18:	e009      	b.n	8003b2e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f812 	bl	8003b44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b20:	e005      	b.n	8003b2e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f80e 	bl	8003b44 <I2C_TreatErrorCallback>
  }
}
 8003b28:	e002      	b.n	8003b30 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b2e:	bf00      	nop
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	ffff0000 	.word	0xffff0000
 8003b3c:	08002d65 	.word	0x08002d65
 8003b40:	08003bdb 	.word	0x08003bdb

08003b44 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b60      	cmp	r3, #96	; 0x60
 8003b56:	d10e      	bne.n	8003b76 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff f8ee 	bl	8002d50 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b74:	e009      	b.n	8003b8a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff f8d9 	bl	8002d3c <HAL_I2C_ErrorCallback>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d103      	bne.n	8003bb0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2200      	movs	r2, #0
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d007      	beq.n	8003bce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	619a      	str	r2, [r3, #24]
  }
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	2200      	movs	r2, #0
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff ff9b 	bl	8003b44 <I2C_TreatErrorCallback>
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	4613      	mov	r3, r2
 8003c28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	0d5b      	lsrs	r3, r3, #21
 8003c34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <I2C_TransferConfig+0x58>)
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	ea02 0103 	and.w	r1, r2, r3
 8003c42:	897b      	ldrh	r3, [r7, #10]
 8003c44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c48:	7a7b      	ldrb	r3, [r7, #9]
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	03ff63ff 	.word	0x03ff63ff

08003c74 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c88:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <I2C_Enable_IRQ+0xc0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003c92:	4a29      	ldr	r2, [pc, #164]	; (8003d38 <I2C_Enable_IRQ+0xc4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da03      	bge.n	8003ca8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003ca6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d103      	bne.n	8003cb6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d103      	bne.n	8003cc4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d125      	bne.n	8003d16 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cd2:	e020      	b.n	8003d16 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	da03      	bge.n	8003ce4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003ce2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003cf4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003d06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d103      	bne.n	8003d16 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f043 0320 	orr.w	r3, r3, #32
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	08002f6b 	.word	0x08002f6b
 8003d38:	08003151 	.word	0x08003151

08003d3c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00f      	beq.n	8003d76 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d5c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d6a:	2b28      	cmp	r3, #40	; 0x28
 8003d6c:	d003      	beq.n	8003d76 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d76:	887b      	ldrh	r3, [r7, #2]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00f      	beq.n	8003da0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d94:	2b28      	cmp	r3, #40	; 0x28
 8003d96:	d003      	beq.n	8003da0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d9e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003da0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da03      	bge.n	8003db0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d103      	bne.n	8003dbe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d103      	bne.n	8003dcc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f043 0320 	orr.w	r3, r3, #32
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d103      	bne.n	8003dda <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43da      	mvns	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	400a      	ands	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d138      	bne.n	8003e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e032      	b.n	8003e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	; 0x24
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6819      	ldr	r1, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d139      	bne.n	8003f18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e033      	b.n	8003f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2224      	movs	r2, #36	; 0x24
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ee0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d141      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f36:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d131      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f44:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4a:	4a46      	ldr	r2, [pc, #280]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f5c:	4a41      	ldr	r2, [pc, #260]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f64:	4b40      	ldr	r3, [pc, #256]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2232      	movs	r2, #50	; 0x32
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	4a3f      	ldr	r2, [pc, #252]	; (800406c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	0c9b      	lsrs	r3, r3, #18
 8003f76:	3301      	adds	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f7a:	e002      	b.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f82:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8e:	d102      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f2      	bne.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f96:	4b33      	ldr	r3, [pc, #204]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d158      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e057      	b.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fae:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fb8:	e04d      	b.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc0:	d141      	bne.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc2:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d131      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd6:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe0:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2232      	movs	r2, #50	; 0x32
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	0c9b      	lsrs	r3, r3, #18
 8004002:	3301      	adds	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004006:	e002      	b.n	800400e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b01      	subs	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401a:	d102      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f2      	bne.n	8004008 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d112      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e011      	b.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004044:	e007      	b.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004046:	4b07      	ldr	r3, [pc, #28]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800404e:	4a05      	ldr	r2, [pc, #20]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004054:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40007000 	.word	0x40007000
 8004068:	2000000c 	.word	0x2000000c
 800406c:	431bde83 	.word	0x431bde83

08004070 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800407a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800407e:	6093      	str	r3, [r2, #8]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40007000 	.word	0x40007000

08004090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e308      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d075      	beq.n	800419a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ae:	4ba3      	ldr	r3, [pc, #652]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b8:	4ba0      	ldr	r3, [pc, #640]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_OscConfig+0x3e>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_OscConfig+0x44>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d10b      	bne.n	80040ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	4b99      	ldr	r3, [pc, #612]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05b      	beq.n	8004198 <HAL_RCC_OscConfig+0x108>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d157      	bne.n	8004198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e2e3      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d106      	bne.n	8004104 <HAL_RCC_OscConfig+0x74>
 80040f6:	4b91      	ldr	r3, [pc, #580]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a90      	ldr	r2, [pc, #576]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0xb0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x98>
 800410e:	4b8b      	ldr	r3, [pc, #556]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a8a      	ldr	r2, [pc, #552]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4b88      	ldr	r3, [pc, #544]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a87      	ldr	r2, [pc, #540]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0xb0>
 8004128:	4b84      	ldr	r3, [pc, #528]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a83      	ldr	r2, [pc, #524]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a80      	ldr	r2, [pc, #512]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fd fef4 	bl	8001f34 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd fef0 	bl	8001f34 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e2a8      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004162:	4b76      	ldr	r3, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0xc0>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fee0 	bl	8001f34 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004178:	f7fd fedc 	bl	8001f34 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e294      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418a:	4b6c      	ldr	r3, [pc, #432]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0xe8>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d075      	beq.n	8004292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a6:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b0:	4b62      	ldr	r3, [pc, #392]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	d102      	bne.n	80041c6 <HAL_RCC_OscConfig+0x136>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d002      	beq.n	80041cc <HAL_RCC_OscConfig+0x13c>
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d11f      	bne.n	800420c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041cc:	4b5b      	ldr	r3, [pc, #364]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_OscConfig+0x154>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e267      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e4:	4b55      	ldr	r3, [pc, #340]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	4952      	ldr	r1, [pc, #328]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041f8:	4b51      	ldr	r3, [pc, #324]	; (8004340 <HAL_RCC_OscConfig+0x2b0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd fe4d 	bl	8001e9c <HAL_InitTick>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d043      	beq.n	8004290 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e253      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d023      	beq.n	800425c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b49      	ldr	r3, [pc, #292]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a48      	ldr	r2, [pc, #288]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fe88 	bl	8001f34 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004228:	f7fd fe84 	bl	8001f34 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e23c      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800423a:	4b40      	ldr	r3, [pc, #256]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	4b3d      	ldr	r3, [pc, #244]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	061b      	lsls	r3, r3, #24
 8004254:	4939      	ldr	r1, [pc, #228]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]
 800425a:	e01a      	b.n	8004292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800425c:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a36      	ldr	r2, [pc, #216]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fe64 	bl	8001f34 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004270:	f7fd fe60 	bl	8001f34 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e218      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004282:	4b2e      	ldr	r3, [pc, #184]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x1e0>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d03c      	beq.n	8004318 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01c      	beq.n	80042e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a6:	4b25      	ldr	r3, [pc, #148]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ac:	4a23      	ldr	r2, [pc, #140]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fd fe3d 	bl	8001f34 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042be:	f7fd fe39 	bl	8001f34 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1f1      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d0:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0ef      	beq.n	80042be <HAL_RCC_OscConfig+0x22e>
 80042de:	e01b      	b.n	8004318 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e0:	4b16      	ldr	r3, [pc, #88]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e6:	4a15      	ldr	r2, [pc, #84]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fd fe20 	bl	8001f34 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fd fe1c 	bl	8001f34 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1d4      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ef      	bne.n	80042f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80ab 	beq.w	800447c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_RCC_OscConfig+0x2b4>
 8004336:	2301      	movs	r3, #1
 8004338:	e005      	b.n	8004346 <HAL_RCC_OscConfig+0x2b6>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	20000010 	.word	0x20000010
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434a:	4baf      	ldr	r3, [pc, #700]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	4aae      	ldr	r2, [pc, #696]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6593      	str	r3, [r2, #88]	; 0x58
 8004356:	4bac      	ldr	r3, [pc, #688]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004366:	4ba9      	ldr	r3, [pc, #676]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004372:	4ba6      	ldr	r3, [pc, #664]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4aa5      	ldr	r2, [pc, #660]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fd fdd9 	bl	8001f34 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fd fdd5 	bl	8001f34 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e18d      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004398:	4b9c      	ldr	r3, [pc, #624]	; (800460c <HAL_RCC_OscConfig+0x57c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d108      	bne.n	80043be <HAL_RCC_OscConfig+0x32e>
 80043ac:	4b96      	ldr	r3, [pc, #600]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	4a95      	ldr	r2, [pc, #596]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043bc:	e024      	b.n	8004408 <HAL_RCC_OscConfig+0x378>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d110      	bne.n	80043e8 <HAL_RCC_OscConfig+0x358>
 80043c6:	4b90      	ldr	r3, [pc, #576]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	4a8e      	ldr	r2, [pc, #568]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d6:	4b8c      	ldr	r3, [pc, #560]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	4a8a      	ldr	r2, [pc, #552]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e6:	e00f      	b.n	8004408 <HAL_RCC_OscConfig+0x378>
 80043e8:	4b87      	ldr	r3, [pc, #540]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	4a86      	ldr	r2, [pc, #536]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f8:	4b83      	ldr	r3, [pc, #524]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	4a82      	ldr	r2, [pc, #520]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d016      	beq.n	800443e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fd fd90 	bl	8001f34 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004416:	e00a      	b.n	800442e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7fd fd8c 	bl	8001f34 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	; 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e142      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442e:	4b76      	ldr	r3, [pc, #472]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ed      	beq.n	8004418 <HAL_RCC_OscConfig+0x388>
 800443c:	e015      	b.n	800446a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443e:	f7fd fd79 	bl	8001f34 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004444:	e00a      	b.n	800445c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fd fd75 	bl	8001f34 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f241 3288 	movw	r2, #5000	; 0x1388
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e12b      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800445c:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ed      	bne.n	8004446 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800446a:	7ffb      	ldrb	r3, [r7, #31]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004470:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	4a64      	ldr	r2, [pc, #400]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d03c      	beq.n	8004502 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01c      	beq.n	80044ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004490:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004496:	4a5c      	ldr	r2, [pc, #368]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd fd48 	bl	8001f34 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a8:	f7fd fd44 	bl	8001f34 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e0fc      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ba:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ef      	beq.n	80044a8 <HAL_RCC_OscConfig+0x418>
 80044c8:	e01b      	b.n	8004502 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044ca:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d0:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fd fd2b 	bl	8001f34 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e2:	f7fd fd27 	bl	8001f34 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0df      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f4:	4b44      	ldr	r3, [pc, #272]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80044f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ef      	bne.n	80044e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80d3 	beq.w	80046b2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450c:	4b3e      	ldr	r3, [pc, #248]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b0c      	cmp	r3, #12
 8004516:	f000 808d 	beq.w	8004634 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d15a      	bne.n	80045d8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b39      	ldr	r3, [pc, #228]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a38      	ldr	r2, [pc, #224]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fd fd01 	bl	8001f34 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd fcfd 	bl	8001f34 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0b5      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004548:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004554:	4b2c      	ldr	r3, [pc, #176]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_RCC_OscConfig+0x580>)
 800455a:	4013      	ands	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6a11      	ldr	r1, [r2, #32]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004564:	3a01      	subs	r2, #1
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800456e:	0212      	lsls	r2, r2, #8
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004576:	0852      	lsrs	r2, r2, #1
 8004578:	3a01      	subs	r2, #1
 800457a:	0552      	lsls	r2, r2, #21
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004582:	0852      	lsrs	r2, r2, #1
 8004584:	3a01      	subs	r2, #1
 8004586:	0652      	lsls	r2, r2, #25
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800458e:	06d2      	lsls	r2, r2, #27
 8004590:	430a      	orrs	r2, r1
 8004592:	491d      	ldr	r1, [pc, #116]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 8004594:	4313      	orrs	r3, r2
 8004596:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a17      	ldr	r2, [pc, #92]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fcc0 	bl	8001f34 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fcbc 	bl	8001f34 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e074      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x528>
 80045d6:	e06c      	b.n	80046b2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a07      	ldr	r2, [pc, #28]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a04      	ldr	r2, [pc, #16]	; (8004608 <HAL_RCC_OscConfig+0x578>)
 80045f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd fc98 	bl	8001f34 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004606:	e00e      	b.n	8004626 <HAL_RCC_OscConfig+0x596>
 8004608:	40021000 	.word	0x40021000
 800460c:	40007000 	.word	0x40007000
 8004610:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fd fc8e 	bl	8001f34 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e046      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004626:	4b25      	ldr	r3, [pc, #148]	; (80046bc <HAL_RCC_OscConfig+0x62c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x584>
 8004632:	e03e      	b.n	80046b2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e039      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004640:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <HAL_RCC_OscConfig+0x62c>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0203 	and.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	429a      	cmp	r2, r3
 8004652:	d12c      	bne.n	80046ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	3b01      	subs	r3, #1
 8004660:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d123      	bne.n	80046ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d11b      	bne.n	80046ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d113      	bne.n	80046ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	3b01      	subs	r3, #1
 8004694:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d109      	bne.n	80046ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	3b01      	subs	r3, #1
 80046a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e11e      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d8:	4b91      	ldr	r3, [pc, #580]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d910      	bls.n	8004708 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b8e      	ldr	r3, [pc, #568]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 020f 	bic.w	r2, r3, #15
 80046ee:	498c      	ldr	r1, [pc, #560]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b8a      	ldr	r3, [pc, #552]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e106      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d073      	beq.n	80047fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d129      	bne.n	8004770 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471c:	4b81      	ldr	r3, [pc, #516]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0f4      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800472c:	f000 f99e 	bl	8004a6c <RCC_GetSysClockFreqFromPLLSource>
 8004730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4a7c      	ldr	r2, [pc, #496]	; (8004928 <HAL_RCC_ClockConfig+0x268>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d93f      	bls.n	80047ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800473a:	4b7a      	ldr	r3, [pc, #488]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d033      	beq.n	80047ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d12f      	bne.n	80047ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800475a:	4b72      	ldr	r3, [pc, #456]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004762:	4a70      	ldr	r2, [pc, #448]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004768:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e024      	b.n	80047ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d107      	bne.n	8004788 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004778:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0c6      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004788:	4b66      	ldr	r3, [pc, #408]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0be      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004798:	f000 f8ce 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 800479c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4a61      	ldr	r2, [pc, #388]	; (8004928 <HAL_RCC_ClockConfig+0x268>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d909      	bls.n	80047ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047a6:	4b5f      	ldr	r3, [pc, #380]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ae:	4a5d      	ldr	r2, [pc, #372]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b5a      	ldr	r3, [pc, #360]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4957      	ldr	r1, [pc, #348]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047cc:	f7fd fbb2 	bl	8001f34 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fd fbae 	bl	8001f34 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e095      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b4e      	ldr	r3, [pc, #312]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d023      	beq.n	8004850 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004814:	4b43      	ldr	r3, [pc, #268]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a42      	ldr	r2, [pc, #264]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800481a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800481e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800482c:	4b3d      	ldr	r3, [pc, #244]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004834:	4a3b      	ldr	r2, [pc, #236]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800483a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483c:	4b39      	ldr	r3, [pc, #228]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4936      	ldr	r1, [pc, #216]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
 800484e:	e008      	b.n	8004862 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d105      	bne.n	8004862 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004856:	4b33      	ldr	r3, [pc, #204]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4a32      	ldr	r2, [pc, #200]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 800485c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004860:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004862:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d21d      	bcs.n	80048ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004870:	4b2b      	ldr	r3, [pc, #172]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 020f 	bic.w	r2, r3, #15
 8004878:	4929      	ldr	r1, [pc, #164]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004880:	f7fd fb58 	bl	8001f34 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	e00a      	b.n	800489e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fd fb54 	bl	8001f34 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e03b      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_RCC_ClockConfig+0x260>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1ed      	bne.n	8004888 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4917      	ldr	r1, [pc, #92]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	490f      	ldr	r1, [pc, #60]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ea:	f000 f825 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048ee:	4601      	mov	r1, r0
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <HAL_RCC_ClockConfig+0x26c>)
 80048fc:	5cd3      	ldrb	r3, [r2, r3]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	fa21 f303 	lsr.w	r3, r1, r3
 8004906:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_RCC_ClockConfig+0x270>)
 8004908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x274>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd fac4 	bl	8001e9c <HAL_InitTick>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40022000 	.word	0x40022000
 8004924:	40021000 	.word	0x40021000
 8004928:	04c4b400 	.word	0x04c4b400
 800492c:	08006474 	.word	0x08006474
 8004930:	2000000c 	.word	0x2000000c
 8004934:	20000010 	.word	0x20000010

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800493e:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b04      	cmp	r3, #4
 8004948:	d102      	bne.n	8004950 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800494a:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e047      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d102      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800495c:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	e03e      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004962:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d136      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496e:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004978:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	3301      	adds	r3, #1
 8004984:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d10c      	bne.n	80049a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800498c:	4a1a      	ldr	r2, [pc, #104]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004996:	68d2      	ldr	r2, [r2, #12]
 8004998:	0a12      	lsrs	r2, r2, #8
 800499a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	617b      	str	r3, [r7, #20]
      break;
 80049a4:	e00c      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049a6:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b0:	68d2      	ldr	r2, [r2, #12]
 80049b2:	0a12      	lsrs	r2, r2, #8
 80049b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
      break;
 80049be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	0e5b      	lsrs	r3, r3, #25
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	3301      	adds	r3, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e001      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049e0:	693b      	ldr	r3, [r7, #16]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	007a1200 	.word	0x007a1200

080049fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	2000000c 	.word	0x2000000c

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a18:	f7ff fff0 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a1c:	4601      	mov	r1, r0
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a2a:	5cd3      	ldrb	r3, [r2, r3]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	08006484 	.word	0x08006484

08004a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a44:	f7ff ffda 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0adb      	lsrs	r3, r3, #11
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	08006484 	.word	0x08006484

08004a6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d10c      	bne.n	8004aaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a90:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a9a:	68d2      	ldr	r2, [r2, #12]
 8004a9c:	0a12      	lsrs	r2, r2, #8
 8004a9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	617b      	str	r3, [r7, #20]
    break;
 8004aa8:	e00c      	b.n	8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aaa:	4a12      	ldr	r2, [pc, #72]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ab4:	68d2      	ldr	r2, [r2, #12]
 8004ab6:	0a12      	lsrs	r2, r2, #8
 8004ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004abc:	fb02 f303 	mul.w	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]
    break;
 8004ac2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	0e5b      	lsrs	r3, r3, #25
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ade:	687b      	ldr	r3, [r7, #4]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40021000 	.word	0x40021000
 8004af0:	007a1200 	.word	0x007a1200
 8004af4:	00f42400 	.word	0x00f42400

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b00:	2300      	movs	r3, #0
 8004b02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b04:	2300      	movs	r3, #0
 8004b06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8098 	beq.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1a:	4b43      	ldr	r3, [pc, #268]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	4b40      	ldr	r3, [pc, #256]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b30:	6593      	str	r3, [r2, #88]	; 0x58
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b42:	4b3a      	ldr	r3, [pc, #232]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b4e:	f7fd f9f1 	bl	8001f34 <HAL_GetTick>
 8004b52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b54:	e009      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fd f9ed 	bl	8001f34 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	74fb      	strb	r3, [r7, #19]
        break;
 8004b68:	e005      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6a:	4b30      	ldr	r3, [pc, #192]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d159      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01e      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d019      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b98:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba4:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc4:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fd f9ad 	bl	8001f34 <HAL_GetTick>
 8004bda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bdc:	e00b      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fd f9a9 	bl	8001f34 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d902      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf4:	e006      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ec      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	4903      	ldr	r1, [pc, #12]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c20:	e008      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	74bb      	strb	r3, [r7, #18]
 8004c26:	e005      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c34:	7c7b      	ldrb	r3, [r7, #17]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3a:	4ba6      	ldr	r3, [pc, #664]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	4aa5      	ldr	r2, [pc, #660]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c52:	4ba0      	ldr	r3, [pc, #640]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f023 0203 	bic.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	499c      	ldr	r1, [pc, #624]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c74:	4b97      	ldr	r3, [pc, #604]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 020c 	bic.w	r2, r3, #12
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4994      	ldr	r1, [pc, #592]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c96:	4b8f      	ldr	r3, [pc, #572]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	498b      	ldr	r1, [pc, #556]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb8:	4b86      	ldr	r3, [pc, #536]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4983      	ldr	r1, [pc, #524]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cda:	4b7e      	ldr	r3, [pc, #504]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	497a      	ldr	r1, [pc, #488]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cfc:	4b75      	ldr	r3, [pc, #468]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	4972      	ldr	r1, [pc, #456]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d1e:	4b6d      	ldr	r3, [pc, #436]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	4969      	ldr	r1, [pc, #420]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d40:	4b64      	ldr	r3, [pc, #400]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4961      	ldr	r1, [pc, #388]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d62:	4b5c      	ldr	r3, [pc, #368]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	4958      	ldr	r1, [pc, #352]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d84:	4b53      	ldr	r3, [pc, #332]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	4950      	ldr	r1, [pc, #320]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da2:	d105      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da4:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a4a      	ldr	r2, [pc, #296]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d015      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dbc:	4b45      	ldr	r3, [pc, #276]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	4942      	ldr	r1, [pc, #264]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dda:	d105      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ddc:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a3c      	ldr	r2, [pc, #240]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d015      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004df4:	4b37      	ldr	r3, [pc, #220]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4934      	ldr	r1, [pc, #208]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e12:	d105      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a2e      	ldr	r2, [pc, #184]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e2c:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	4926      	ldr	r1, [pc, #152]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4c:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a20      	ldr	r2, [pc, #128]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e64:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	4918      	ldr	r1, [pc, #96]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e82:	d105      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e84:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	490a      	ldr	r1, [pc, #40]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ec8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000

08004ed8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e027      	b.n	8004f3a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7a5b      	ldrb	r3, [r3, #9]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc fe1c 	bl	8001b38 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 0108 	bic.w	r1, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0204 	orr.w	r2, r2, #4
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7a1b      	ldrb	r3, [r3, #8]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_RNG_GenerateRandomNumber+0x1a>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e03d      	b.n	8004fd8 <HAL_RNG_GenerateRandomNumber+0x96>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7a5b      	ldrb	r3, [r3, #9]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d12c      	bne.n	8004fc6 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f72:	f7fc ffdf 	bl	8001f34 <HAL_GetTick>
 8004f76:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f78:	e011      	b.n	8004f9e <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004f7a:	f7fc ffdb 	bl	8001f34 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d90a      	bls.n	8004f9e <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e01c      	b.n	8004fd8 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d1e6      	bne.n	8004f7a <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	725a      	strb	r2, [r3, #9]
 8004fc4:	e004      	b.n	8004fd0 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	721a      	strb	r2, [r3, #8]

  return status;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e042      	b.n	8005078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fc fdb7 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2224      	movs	r2, #36	; 0x24
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fbb0 	bl	8005788 <UART_SetConfig>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e022      	b.n	8005078 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fe4c 	bl	8005cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800504e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800505e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fed3 	bl	8005e1c <UART_CheckIdleState>
 8005076:	4603      	mov	r3, r0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005096:	2b20      	cmp	r3, #32
 8005098:	f040 8083 	bne.w	80051a2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_UART_Transmit+0x28>
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e07b      	b.n	80051a4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Transmit+0x3a>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e074      	b.n	80051a4 <HAL_UART_Transmit+0x124>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2221      	movs	r2, #33	; 0x21
 80050ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050d2:	f7fc ff2f 	bl	8001f34 <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	88fa      	ldrh	r2, [r7, #6]
 80050e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f0:	d108      	bne.n	8005104 <HAL_UART_Transmit+0x84>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	e003      	b.n	800510c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005114:	e02c      	b.n	8005170 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	2180      	movs	r1, #128	; 0x80
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fec3 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e039      	b.n	80051a4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	3302      	adds	r3, #2
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	e007      	b.n	800515e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1cc      	bne.n	8005116 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2200      	movs	r2, #0
 8005184:	2140      	movs	r1, #64	; 0x40
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fe90 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e006      	b.n	80051a4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3720      	adds	r7, #32
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	4613      	mov	r3, r2
 80051ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	f040 80bd 	bne.w	8005342 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Receive+0x28>
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0b5      	b.n	8005344 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Receive+0x3a>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e0ae      	b.n	8005344 <HAL_UART_Receive+0x198>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2222      	movs	r2, #34	; 0x22
 80051fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051fe:	f7fc fe99 	bl	8001f34 <HAL_GetTick>
 8005202:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521c:	d10e      	bne.n	800523c <HAL_UART_Receive+0x90>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <HAL_UART_Receive+0x86>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f240 12ff 	movw	r2, #511	; 0x1ff
 800522c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005230:	e02d      	b.n	800528e <HAL_UART_Receive+0xe2>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800523a:	e028      	b.n	800528e <HAL_UART_Receive+0xe2>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <HAL_UART_Receive+0xb4>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d104      	bne.n	8005256 <HAL_UART_Receive+0xaa>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22ff      	movs	r2, #255	; 0xff
 8005250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005254:	e01b      	b.n	800528e <HAL_UART_Receive+0xe2>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	227f      	movs	r2, #127	; 0x7f
 800525a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800525e:	e016      	b.n	800528e <HAL_UART_Receive+0xe2>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005268:	d10d      	bne.n	8005286 <HAL_UART_Receive+0xda>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <HAL_UART_Receive+0xd0>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	227f      	movs	r2, #127	; 0x7f
 8005276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800527a:	e008      	b.n	800528e <HAL_UART_Receive+0xe2>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	223f      	movs	r2, #63	; 0x3f
 8005280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005284:	e003      	b.n	800528e <HAL_UART_Receive+0xe2>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005294:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	d108      	bne.n	80052b2 <HAL_UART_Receive+0x106>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	e003      	b.n	80052ba <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052c2:	e032      	b.n	800532a <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2200      	movs	r2, #0
 80052cc:	2120      	movs	r1, #32
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 fdec 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e032      	b.n	8005344 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10c      	bne.n	80052fe <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	8a7b      	ldrh	r3, [r7, #18]
 80052ee:	4013      	ands	r3, r2
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	3302      	adds	r3, #2
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	e00c      	b.n	8005318 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	b2da      	uxtb	r2, r3
 8005306:	8a7b      	ldrh	r3, [r7, #18]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4013      	ands	r3, r2
 800530c:	b2da      	uxtb	r2, r3
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	3301      	adds	r3, #1
 8005316:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1c6      	bne.n	80052c4 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005360:	2b20      	cmp	r3, #32
 8005362:	d168      	bne.n	8005436 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_UART_Transmit_DMA+0x24>
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e061      	b.n	8005438 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_UART_Transmit_DMA+0x36>
 800537e:	2302      	movs	r3, #2
 8005380:	e05a      	b.n	8005438 <HAL_UART_Transmit_DMA+0xec>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2221      	movs	r2, #33	; 0x21
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02c      	beq.n	8005412 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053bc:	4a20      	ldr	r2, [pc, #128]	; (8005440 <HAL_UART_Transmit_DMA+0xf4>)
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c4:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <HAL_UART_Transmit_DMA+0xf8>)
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_UART_Transmit_DMA+0xfc>)
 80053ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d4:	2200      	movs	r2, #0
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	4619      	mov	r1, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3328      	adds	r3, #40	; 0x28
 80053e8:	461a      	mov	r2, r3
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	f7fc ff88 	bl	8002300 <HAL_DMA_Start_IT>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2210      	movs	r2, #16
 80053fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e012      	b.n	8005438 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2240      	movs	r2, #64	; 0x40
 8005418:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005430:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	0800602f 	.word	0x0800602f
 8005444:	08006083 	.word	0x08006083
 8005448:	0800609f 	.word	0x0800609f

0800544c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d118      	bne.n	80054ae <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8145 	beq.w	800572e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
      }
      return;
 80054ac:	e13f      	b.n	800572e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80e8 	beq.w	8005686 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4ba1      	ldr	r3, [pc, #644]	; (8005740 <HAL_UART_IRQHandler+0x2f4>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4ba0      	ldr	r3, [pc, #640]	; (8005744 <HAL_UART_IRQHandler+0x2f8>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80dd 	beq.w	8005686 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_UART_IRQHandler+0xac>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2201      	movs	r2, #1
 80054e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f043 0201 	orr.w	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_UART_IRQHandler+0xd8>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2202      	movs	r2, #2
 8005512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f043 0204 	orr.w	r2, r3, #4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <HAL_UART_IRQHandler+0x104>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2204      	movs	r2, #4
 800553e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f043 0202 	orr.w	r2, r3, #2
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d015      	beq.n	8005586 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4b76      	ldr	r3, [pc, #472]	; (8005740 <HAL_UART_IRQHandler+0x2f4>)
 8005568:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2208      	movs	r2, #8
 8005574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f043 0208 	orr.w	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558c:	2b00      	cmp	r3, #0
 800558e:	d011      	beq.n	80055b4 <HAL_UART_IRQHandler+0x168>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80b9 	beq.w	8005732 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d011      	beq.n	80055ee <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d104      	bne.n	80055de <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d004      	beq.n	800560e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800560a:	2b00      	cmp	r3, #0
 800560c:	d031      	beq.n	8005672 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fcea 	bl	8005fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d123      	bne.n	800566a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005630:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005636:	2b00      	cmp	r3, #0
 8005638:	d013      	beq.n	8005662 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800563e:	4a42      	ldr	r2, [pc, #264]	; (8005748 <HAL_UART_IRQHandler+0x2fc>)
 8005640:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005646:	4618      	mov	r0, r3
 8005648:	f7fc fed5 	bl	80023f6 <HAL_DMA_Abort_IT>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d017      	beq.n	8005682 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	e00f      	b.n	8005682 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f886 	bl	8005774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	e00b      	b.n	8005682 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f882 	bl	8005774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	e007      	b.n	8005682 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f87e 	bl	8005774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005680:	e057      	b.n	8005732 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005682:	bf00      	nop
    return;
 8005684:	e055      	b.n	8005732 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <HAL_UART_IRQHandler+0x260>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fd6a 	bl	800617e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056aa:	e045      	b.n	8005738 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d012      	beq.n	80056dc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d031      	beq.n	8005736 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
    }
    return;
 80056da:	e02c      	b.n	8005736 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_UART_IRQHandler+0x2ac>
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fd2a 	bl	800614a <UART_EndTransmit_IT>
    return;
 80056f6:	e01f      	b.n	8005738 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_UART_IRQHandler+0x2c8>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fd4a 	bl	80061a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005712:	e011      	b.n	8005738 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <HAL_UART_IRQHandler+0x2ec>
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	da09      	bge.n	8005738 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fd34 	bl	8006192 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <HAL_UART_IRQHandler+0x2ec>
      return;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005736:	bf00      	nop
  }
}
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	10000001 	.word	0x10000001
 8005744:	04000120 	.word	0x04000120
 8005748:	0800611f 	.word	0x0800611f

0800574c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800578c:	b088      	sub	sp, #32
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4bb0      	ldr	r3, [pc, #704]	; (8005a80 <UART_SetConfig+0x2f8>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	69f9      	ldr	r1, [r7, #28]
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4aa5      	ldr	r2, [pc, #660]	; (8005a84 <UART_SetConfig+0x2fc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005806:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	69f9      	ldr	r1, [r7, #28]
 8005810:	430b      	orrs	r3, r1
 8005812:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	f023 010f 	bic.w	r1, r3, #15
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a96      	ldr	r2, [pc, #600]	; (8005a88 <UART_SetConfig+0x300>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d121      	bne.n	8005878 <UART_SetConfig+0xf0>
 8005834:	4b95      	ldr	r3, [pc, #596]	; (8005a8c <UART_SetConfig+0x304>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d816      	bhi.n	8005870 <UART_SetConfig+0xe8>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0xc0>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005859 	.word	0x08005859
 800584c:	08005865 	.word	0x08005865
 8005850:	0800585f 	.word	0x0800585f
 8005854:	0800586b 	.word	0x0800586b
 8005858:	2301      	movs	r3, #1
 800585a:	76fb      	strb	r3, [r7, #27]
 800585c:	e0be      	b.n	80059dc <UART_SetConfig+0x254>
 800585e:	2302      	movs	r3, #2
 8005860:	76fb      	strb	r3, [r7, #27]
 8005862:	e0bb      	b.n	80059dc <UART_SetConfig+0x254>
 8005864:	2304      	movs	r3, #4
 8005866:	76fb      	strb	r3, [r7, #27]
 8005868:	e0b8      	b.n	80059dc <UART_SetConfig+0x254>
 800586a:	2308      	movs	r3, #8
 800586c:	76fb      	strb	r3, [r7, #27]
 800586e:	e0b5      	b.n	80059dc <UART_SetConfig+0x254>
 8005870:	2310      	movs	r3, #16
 8005872:	76fb      	strb	r3, [r7, #27]
 8005874:	bf00      	nop
 8005876:	e0b1      	b.n	80059dc <UART_SetConfig+0x254>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a84      	ldr	r2, [pc, #528]	; (8005a90 <UART_SetConfig+0x308>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d134      	bne.n	80058ec <UART_SetConfig+0x164>
 8005882:	4b82      	ldr	r3, [pc, #520]	; (8005a8c <UART_SetConfig+0x304>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f003 030c 	and.w	r3, r3, #12
 800588c:	2b0c      	cmp	r3, #12
 800588e:	d829      	bhi.n	80058e4 <UART_SetConfig+0x15c>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x110>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058e5 	.word	0x080058e5
 80058a0:	080058e5 	.word	0x080058e5
 80058a4:	080058e5 	.word	0x080058e5
 80058a8:	080058d9 	.word	0x080058d9
 80058ac:	080058e5 	.word	0x080058e5
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	080058e5 	.word	0x080058e5
 80058b8:	080058d3 	.word	0x080058d3
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058e5 	.word	0x080058e5
 80058c8:	080058df 	.word	0x080058df
 80058cc:	2300      	movs	r3, #0
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e084      	b.n	80059dc <UART_SetConfig+0x254>
 80058d2:	2302      	movs	r3, #2
 80058d4:	76fb      	strb	r3, [r7, #27]
 80058d6:	e081      	b.n	80059dc <UART_SetConfig+0x254>
 80058d8:	2304      	movs	r3, #4
 80058da:	76fb      	strb	r3, [r7, #27]
 80058dc:	e07e      	b.n	80059dc <UART_SetConfig+0x254>
 80058de:	2308      	movs	r3, #8
 80058e0:	76fb      	strb	r3, [r7, #27]
 80058e2:	e07b      	b.n	80059dc <UART_SetConfig+0x254>
 80058e4:	2310      	movs	r3, #16
 80058e6:	76fb      	strb	r3, [r7, #27]
 80058e8:	bf00      	nop
 80058ea:	e077      	b.n	80059dc <UART_SetConfig+0x254>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a68      	ldr	r2, [pc, #416]	; (8005a94 <UART_SetConfig+0x30c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d120      	bne.n	8005938 <UART_SetConfig+0x1b0>
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <UART_SetConfig+0x304>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005900:	2b10      	cmp	r3, #16
 8005902:	d00f      	beq.n	8005924 <UART_SetConfig+0x19c>
 8005904:	2b10      	cmp	r3, #16
 8005906:	d802      	bhi.n	800590e <UART_SetConfig+0x186>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <UART_SetConfig+0x190>
 800590c:	e010      	b.n	8005930 <UART_SetConfig+0x1a8>
 800590e:	2b20      	cmp	r3, #32
 8005910:	d005      	beq.n	800591e <UART_SetConfig+0x196>
 8005912:	2b30      	cmp	r3, #48	; 0x30
 8005914:	d009      	beq.n	800592a <UART_SetConfig+0x1a2>
 8005916:	e00b      	b.n	8005930 <UART_SetConfig+0x1a8>
 8005918:	2300      	movs	r3, #0
 800591a:	76fb      	strb	r3, [r7, #27]
 800591c:	e05e      	b.n	80059dc <UART_SetConfig+0x254>
 800591e:	2302      	movs	r3, #2
 8005920:	76fb      	strb	r3, [r7, #27]
 8005922:	e05b      	b.n	80059dc <UART_SetConfig+0x254>
 8005924:	2304      	movs	r3, #4
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	e058      	b.n	80059dc <UART_SetConfig+0x254>
 800592a:	2308      	movs	r3, #8
 800592c:	76fb      	strb	r3, [r7, #27]
 800592e:	e055      	b.n	80059dc <UART_SetConfig+0x254>
 8005930:	2310      	movs	r3, #16
 8005932:	76fb      	strb	r3, [r7, #27]
 8005934:	bf00      	nop
 8005936:	e051      	b.n	80059dc <UART_SetConfig+0x254>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a56      	ldr	r2, [pc, #344]	; (8005a98 <UART_SetConfig+0x310>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d120      	bne.n	8005984 <UART_SetConfig+0x1fc>
 8005942:	4b52      	ldr	r3, [pc, #328]	; (8005a8c <UART_SetConfig+0x304>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d00f      	beq.n	8005970 <UART_SetConfig+0x1e8>
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d802      	bhi.n	800595a <UART_SetConfig+0x1d2>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <UART_SetConfig+0x1dc>
 8005958:	e010      	b.n	800597c <UART_SetConfig+0x1f4>
 800595a:	2b80      	cmp	r3, #128	; 0x80
 800595c:	d005      	beq.n	800596a <UART_SetConfig+0x1e2>
 800595e:	2bc0      	cmp	r3, #192	; 0xc0
 8005960:	d009      	beq.n	8005976 <UART_SetConfig+0x1ee>
 8005962:	e00b      	b.n	800597c <UART_SetConfig+0x1f4>
 8005964:	2300      	movs	r3, #0
 8005966:	76fb      	strb	r3, [r7, #27]
 8005968:	e038      	b.n	80059dc <UART_SetConfig+0x254>
 800596a:	2302      	movs	r3, #2
 800596c:	76fb      	strb	r3, [r7, #27]
 800596e:	e035      	b.n	80059dc <UART_SetConfig+0x254>
 8005970:	2304      	movs	r3, #4
 8005972:	76fb      	strb	r3, [r7, #27]
 8005974:	e032      	b.n	80059dc <UART_SetConfig+0x254>
 8005976:	2308      	movs	r3, #8
 8005978:	76fb      	strb	r3, [r7, #27]
 800597a:	e02f      	b.n	80059dc <UART_SetConfig+0x254>
 800597c:	2310      	movs	r3, #16
 800597e:	76fb      	strb	r3, [r7, #27]
 8005980:	bf00      	nop
 8005982:	e02b      	b.n	80059dc <UART_SetConfig+0x254>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a3e      	ldr	r2, [pc, #248]	; (8005a84 <UART_SetConfig+0x2fc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d124      	bne.n	80059d8 <UART_SetConfig+0x250>
 800598e:	4b3f      	ldr	r3, [pc, #252]	; (8005a8c <UART_SetConfig+0x304>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599c:	d012      	beq.n	80059c4 <UART_SetConfig+0x23c>
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a2:	d802      	bhi.n	80059aa <UART_SetConfig+0x222>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <UART_SetConfig+0x230>
 80059a8:	e012      	b.n	80059d0 <UART_SetConfig+0x248>
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	d006      	beq.n	80059be <UART_SetConfig+0x236>
 80059b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059b4:	d009      	beq.n	80059ca <UART_SetConfig+0x242>
 80059b6:	e00b      	b.n	80059d0 <UART_SetConfig+0x248>
 80059b8:	2300      	movs	r3, #0
 80059ba:	76fb      	strb	r3, [r7, #27]
 80059bc:	e00e      	b.n	80059dc <UART_SetConfig+0x254>
 80059be:	2302      	movs	r3, #2
 80059c0:	76fb      	strb	r3, [r7, #27]
 80059c2:	e00b      	b.n	80059dc <UART_SetConfig+0x254>
 80059c4:	2304      	movs	r3, #4
 80059c6:	76fb      	strb	r3, [r7, #27]
 80059c8:	e008      	b.n	80059dc <UART_SetConfig+0x254>
 80059ca:	2308      	movs	r3, #8
 80059cc:	76fb      	strb	r3, [r7, #27]
 80059ce:	e005      	b.n	80059dc <UART_SetConfig+0x254>
 80059d0:	2310      	movs	r3, #16
 80059d2:	76fb      	strb	r3, [r7, #27]
 80059d4:	bf00      	nop
 80059d6:	e001      	b.n	80059dc <UART_SetConfig+0x254>
 80059d8:	2310      	movs	r3, #16
 80059da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <UART_SetConfig+0x2fc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	f040 80a1 	bne.w	8005b2a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059e8:	7efb      	ldrb	r3, [r7, #27]
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d823      	bhi.n	8005a36 <UART_SetConfig+0x2ae>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x26c>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a37 	.word	0x08005a37
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005a37 	.word	0x08005a37
 8005a04:	08005a27 	.word	0x08005a27
 8005a08:	08005a37 	.word	0x08005a37
 8005a0c:	08005a37 	.word	0x08005a37
 8005a10:	08005a37 	.word	0x08005a37
 8005a14:	08005a2f 	.word	0x08005a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a18:	f7fe fffc 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8005a1c:	6178      	str	r0, [r7, #20]
        break;
 8005a1e:	e00f      	b.n	8005a40 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a20:	4b1e      	ldr	r3, [pc, #120]	; (8005a9c <UART_SetConfig+0x314>)
 8005a22:	617b      	str	r3, [r7, #20]
        break;
 8005a24:	e00c      	b.n	8005a40 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a26:	f7fe ff87 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8005a2a:	6178      	str	r0, [r7, #20]
        break;
 8005a2c:	e008      	b.n	8005a40 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a32:	617b      	str	r3, [r7, #20]
        break;
 8005a34:	e004      	b.n	8005a40 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	76bb      	strb	r3, [r7, #26]
        break;
 8005a3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8130 	beq.w	8005ca8 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <UART_SetConfig+0x318>)
 8005a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a52:	461a      	mov	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d305      	bcc.n	8005a78 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d915      	bls.n	8005aa4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	76bb      	strb	r3, [r7, #26]
 8005a7c:	e114      	b.n	8005ca8 <UART_SetConfig+0x520>
 8005a7e:	bf00      	nop
 8005a80:	cfff69f3 	.word	0xcfff69f3
 8005a84:	40008000 	.word	0x40008000
 8005a88:	40013800 	.word	0x40013800
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	40004400 	.word	0x40004400
 8005a94:	40004800 	.word	0x40004800
 8005a98:	40004c00 	.word	0x40004c00
 8005a9c:	00f42400 	.word	0x00f42400
 8005aa0:	0800648c 	.word	0x0800648c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	4a87      	ldr	r2, [pc, #540]	; (8005cd0 <UART_SetConfig+0x548>)
 8005ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f04f 0400 	mov.w	r4, #0
 8005abc:	461a      	mov	r2, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	f7fa fbaa 	bl	8000218 <__aeabi_uldivmod>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4622      	mov	r2, r4
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	0214      	lsls	r4, r2, #8
 8005ad6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ada:	020b      	lsls	r3, r1, #8
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6852      	ldr	r2, [r2, #4]
 8005ae0:	0852      	lsrs	r2, r2, #1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	eb13 0b01 	adds.w	fp, r3, r1
 8005aec:	eb44 0c02 	adc.w	ip, r4, r2
 8005af0:	4658      	mov	r0, fp
 8005af2:	4661      	mov	r1, ip
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f04f 0400 	mov.w	r4, #0
 8005afc:	461a      	mov	r2, r3
 8005afe:	4623      	mov	r3, r4
 8005b00:	f7fa fb8a 	bl	8000218 <__aeabi_uldivmod>
 8005b04:	4603      	mov	r3, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b10:	d308      	bcc.n	8005b24 <UART_SetConfig+0x39c>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b18:	d204      	bcs.n	8005b24 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	e0c1      	b.n	8005ca8 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	76bb      	strb	r3, [r7, #26]
 8005b28:	e0be      	b.n	8005ca8 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b32:	d164      	bne.n	8005bfe <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8005b34:	7efb      	ldrb	r3, [r7, #27]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d827      	bhi.n	8005b8a <UART_SetConfig+0x402>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <UART_SetConfig+0x3b8>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005b8b 	.word	0x08005b8b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b8b 	.word	0x08005b8b
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005b8b 	.word	0x08005b8b
 8005b60:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fe ff56 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8005b68:	6178      	str	r0, [r7, #20]
        break;
 8005b6a:	e013      	b.n	8005b94 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fe ff68 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 8005b70:	6178      	str	r0, [r7, #20]
        break;
 8005b72:	e00f      	b.n	8005b94 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b57      	ldr	r3, [pc, #348]	; (8005cd4 <UART_SetConfig+0x54c>)
 8005b76:	617b      	str	r3, [r7, #20]
        break;
 8005b78:	e00c      	b.n	8005b94 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fe fedd 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8005b7e:	6178      	str	r0, [r7, #20]
        break;
 8005b80:	e008      	b.n	8005b94 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b86:	617b      	str	r3, [r7, #20]
        break;
 8005b88:	e004      	b.n	8005b94 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	76bb      	strb	r3, [r7, #26]
        break;
 8005b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8086 	beq.w	8005ca8 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	4a4b      	ldr	r2, [pc, #300]	; (8005cd0 <UART_SetConfig+0x548>)
 8005ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bae:	005a      	lsls	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	441a      	add	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d916      	bls.n	8005bf8 <UART_SetConfig+0x470>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd0:	d212      	bcs.n	8005bf8 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f023 030f 	bic.w	r3, r3, #15
 8005bda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	89fb      	ldrh	r3, [r7, #14]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	89fa      	ldrh	r2, [r7, #14]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	e057      	b.n	8005ca8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	76bb      	strb	r3, [r7, #26]
 8005bfc:	e054      	b.n	8005ca8 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bfe:	7efb      	ldrb	r3, [r7, #27]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d828      	bhi.n	8005c56 <UART_SetConfig+0x4ce>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x484>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c57 	.word	0x08005c57
 8005c1c:	08005c47 	.word	0x08005c47
 8005c20:	08005c57 	.word	0x08005c57
 8005c24:	08005c57 	.word	0x08005c57
 8005c28:	08005c57 	.word	0x08005c57
 8005c2c:	08005c4f 	.word	0x08005c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fe fef0 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8005c34:	6178      	str	r0, [r7, #20]
        break;
 8005c36:	e013      	b.n	8005c60 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7fe ff02 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	6178      	str	r0, [r7, #20]
        break;
 8005c3e:	e00f      	b.n	8005c60 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c40:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <UART_SetConfig+0x54c>)
 8005c42:	617b      	str	r3, [r7, #20]
        break;
 8005c44:	e00c      	b.n	8005c60 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7fe fe77 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8005c4a:	6178      	str	r0, [r7, #20]
        break;
 8005c4c:	e008      	b.n	8005c60 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c52:	617b      	str	r3, [r7, #20]
        break;
 8005c54:	e004      	b.n	8005c60 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	76bb      	strb	r3, [r7, #26]
        break;
 8005c5e:	bf00      	nop
    }

    if (pclk != 0U)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <UART_SetConfig+0x548>)
 8005c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c70:	461a      	mov	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	441a      	add	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b0f      	cmp	r3, #15
 8005c90:	d908      	bls.n	8005ca4 <UART_SetConfig+0x51c>
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d204      	bcs.n	8005ca4 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	60da      	str	r2, [r3, #12]
 8005ca2:	e001      	b.n	8005ca8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005cc4:	7ebb      	ldrb	r3, [r7, #26]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005cd0:	0800648c 	.word	0x0800648c
 8005cd4:	00f42400 	.word	0x00f42400

08005cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01a      	beq.n	8005dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd6:	d10a      	bne.n	8005dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e2c:	f7fc f882 	bl	8001f34 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d10e      	bne.n	8005e5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f82c 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e022      	b.n	8005ea4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d10e      	bne.n	8005e8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f816 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e00c      	b.n	8005ea4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ebc:	e062      	b.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d05e      	beq.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fc f835 	bl	8001f34 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d11d      	bne.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005eea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e045      	b.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d02e      	beq.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f34:	d126      	bne.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f4e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0201 	bic.w	r2, r2, #1
 8005f5e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e00f      	b.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69da      	ldr	r2, [r3, #28]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	bf0c      	ite	eq
 8005f94:	2301      	moveq	r3, #1
 8005f96:	2300      	movne	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d08d      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005fc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005fd2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ffe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d114      	bne.n	8006074 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006060:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006070:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006072:	e002      	b.n	800607a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fb69 	bl	800574c <HAL_UART_TxCpltCallback>
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff fb65 	bl	8005760 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d109      	bne.n	80060de <UART_DMAError+0x40>
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b21      	cmp	r3, #33	; 0x21
 80060ce:	d106      	bne.n	80060de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80060d8:	6978      	ldr	r0, [r7, #20]
 80060da:	f7ff ff67 	bl	8005fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d109      	bne.n	8006100 <UART_DMAError+0x62>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b22      	cmp	r3, #34	; 0x22
 80060f0:	d106      	bne.n	8006100 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff ff74 	bl	8005fe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f043 0210 	orr.w	r2, r3, #16
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006110:	6978      	ldr	r0, [r7, #20]
 8006112:	f7ff fb2f 	bl	8005774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006116:	bf00      	nop
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fb19 	bl	8005774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006160:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff faeb 	bl	800574c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e027      	b.n	8006220 <HAL_UARTEx_DisableFifoMode+0x66>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2224      	movs	r2, #36	; 0x24
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e02d      	b.n	80062a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2224      	movs	r2, #36	; 0x24
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f84f 	bl	8006324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062bc:	2302      	movs	r3, #2
 80062be:	e02d      	b.n	800631c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2224      	movs	r2, #36	; 0x24
 80062cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f811 	bl	8006324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b089      	sub	sp, #36	; 0x24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800632c:	4a2f      	ldr	r2, [pc, #188]	; (80063ec <UARTEx_SetNbDataToProcess+0xc8>)
 800632e:	f107 0314 	add.w	r3, r7, #20
 8006332:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006336:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800633a:	4a2d      	ldr	r2, [pc, #180]	; (80063f0 <UARTEx_SetNbDataToProcess+0xcc>)
 800633c:	f107 030c 	add.w	r3, r7, #12
 8006340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006344:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634c:	2b00      	cmp	r3, #0
 800634e:	d108      	bne.n	8006362 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006360:	e03d      	b.n	80063de <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006362:	2308      	movs	r3, #8
 8006364:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006366:	2308      	movs	r3, #8
 8006368:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	0e5b      	lsrs	r3, r3, #25
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	0f5b      	lsrs	r3, r3, #29
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800638a:	7fbb      	ldrb	r3, [r7, #30]
 800638c:	7f3a      	ldrb	r2, [r7, #28]
 800638e:	f107 0120 	add.w	r1, r7, #32
 8006392:	440a      	add	r2, r1
 8006394:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800639c:	7f3a      	ldrb	r2, [r7, #28]
 800639e:	f107 0120 	add.w	r1, r7, #32
 80063a2:	440a      	add	r2, r1
 80063a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063b4:	7ffb      	ldrb	r3, [r7, #31]
 80063b6:	7f7a      	ldrb	r2, [r7, #29]
 80063b8:	f107 0120 	add.w	r1, r7, #32
 80063bc:	440a      	add	r2, r1
 80063be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063c6:	7f7a      	ldrb	r2, [r7, #29]
 80063c8:	f107 0120 	add.w	r1, r7, #32
 80063cc:	440a      	add	r2, r1
 80063ce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063de:	bf00      	nop
 80063e0:	3724      	adds	r7, #36	; 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	08006464 	.word	0x08006464
 80063f0:	0800646c 	.word	0x0800646c

080063f4 <__libc_init_array>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	4e0d      	ldr	r6, [pc, #52]	; (800642c <__libc_init_array+0x38>)
 80063f8:	4c0d      	ldr	r4, [pc, #52]	; (8006430 <__libc_init_array+0x3c>)
 80063fa:	1ba4      	subs	r4, r4, r6
 80063fc:	10a4      	asrs	r4, r4, #2
 80063fe:	2500      	movs	r5, #0
 8006400:	42a5      	cmp	r5, r4
 8006402:	d109      	bne.n	8006418 <__libc_init_array+0x24>
 8006404:	4e0b      	ldr	r6, [pc, #44]	; (8006434 <__libc_init_array+0x40>)
 8006406:	4c0c      	ldr	r4, [pc, #48]	; (8006438 <__libc_init_array+0x44>)
 8006408:	f000 f820 	bl	800644c <_init>
 800640c:	1ba4      	subs	r4, r4, r6
 800640e:	10a4      	asrs	r4, r4, #2
 8006410:	2500      	movs	r5, #0
 8006412:	42a5      	cmp	r5, r4
 8006414:	d105      	bne.n	8006422 <__libc_init_array+0x2e>
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800641c:	4798      	blx	r3
 800641e:	3501      	adds	r5, #1
 8006420:	e7ee      	b.n	8006400 <__libc_init_array+0xc>
 8006422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006426:	4798      	blx	r3
 8006428:	3501      	adds	r5, #1
 800642a:	e7f2      	b.n	8006412 <__libc_init_array+0x1e>
 800642c:	080064ac 	.word	0x080064ac
 8006430:	080064ac 	.word	0x080064ac
 8006434:	080064ac 	.word	0x080064ac
 8006438:	080064b0 	.word	0x080064b0

0800643c <memset>:
 800643c:	4402      	add	r2, r0
 800643e:	4603      	mov	r3, r0
 8006440:	4293      	cmp	r3, r2
 8006442:	d100      	bne.n	8006446 <memset+0xa>
 8006444:	4770      	bx	lr
 8006446:	f803 1b01 	strb.w	r1, [r3], #1
 800644a:	e7f9      	b.n	8006440 <memset+0x4>

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
