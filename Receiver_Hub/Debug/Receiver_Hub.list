
Receiver_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008470  08008470  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008478  08008478  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08008480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc8  20000038  080084b8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  080084b8  00021e00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166df  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ce  00000000  00000000  0003673f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ca  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001701b  00000000  00000000  00057202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adf85  00000000  00000000  0006e21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c1a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  0011c1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008348 	.word	0x08008348

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	08008348 	.word	0x08008348

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t dataSentFlag;


// Callback for when data transfer is complete
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(getLEDTimer(), TIM_CHANNEL);
 8000628:	f000 fde0 	bl	80011ec <getLEDTimer>
 800062c:	0003      	movs	r3, r0
 800062e:	2104      	movs	r1, #4
 8000630:	0018      	movs	r0, r3
 8000632:	f004 fbe1 	bl	8004df8 <HAL_TIM_PWM_Stop_DMA>
	dataSentFlag = 1;
 8000636:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20001a38 	.word	0x20001a38

08000648 <setLED>:
uint8_t* getLEDBuf(uint8_t led) {
	return &LED_data[led*3];
}

void setLED(uint32_t LED, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	000c      	movs	r4, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	1c22      	adds	r2, r4, #0
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	1cbb      	adds	r3, r7, #2
 800065e:	1c02      	adds	r2, r0, #0
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	1c7b      	adds	r3, r7, #1
 8000664:	1c0a      	adds	r2, r1, #0
 8000666:	701a      	strb	r2, [r3, #0]
	if (LED < NUM_LEDS) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b7f      	cmp	r3, #127	; 0x7f
 800066c:	d819      	bhi.n	80006a2 <setLED+0x5a>
		LED_data[LED*3] = Green;
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	0013      	movs	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <setLED+0x64>)
 8000678:	1cb9      	adds	r1, r7, #2
 800067a:	7809      	ldrb	r1, [r1, #0]
 800067c:	54d1      	strb	r1, [r2, r3]
		LED_data[LED*3+1] = Red;
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	0013      	movs	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	189b      	adds	r3, r3, r2
 8000686:	3301      	adds	r3, #1
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <setLED+0x64>)
 800068a:	1cf9      	adds	r1, r7, #3
 800068c:	7809      	ldrb	r1, [r1, #0]
 800068e:	54d1      	strb	r1, [r2, r3]
		LED_data[LED*3+2] = Blue;
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	0013      	movs	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	189b      	adds	r3, r3, r2
 8000698:	3302      	adds	r3, #2
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <setLED+0x64>)
 800069c:	1c79      	adds	r1, r7, #1
 800069e:	7809      	ldrb	r1, [r1, #0]
 80006a0:	54d1      	strb	r1, [r2, r3]
	}
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b003      	add	sp, #12
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000054 	.word	0x20000054

080006b0 <clearLEDs>:


void clearLEDs()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	for (int index = 0; index < NUM_LEDS; index++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	e008      	b.n	80006ce <clearLEDs+0x1e>
	{
		setLED(index, 0, 0, 0);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	f7ff ffc0 	bl	8000648 <setLED>
	for (int index = 0; index < NUM_LEDS; index++)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3301      	adds	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b7f      	cmp	r3, #127	; 0x7f
 80006d2:	ddf3      	ble.n	80006bc <clearLEDs+0xc>
	}
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <updateWS2812>:
//	}
//}


void updateWS2812()
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
	uint32_t color;
	uint8_t mask = 0b00001111;
 80006e6:	1d7b      	adds	r3, r7, #5
 80006e8:	220f      	movs	r2, #15
 80006ea:	701a      	strb	r2, [r3, #0]

	uint16_t idx = 0;
 80006ec:	230e      	movs	r3, #14
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
	// Load buffer with LED data
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	e058      	b.n	80007ac <updateWS2812+0xcc>
	{
		// Generate bits to describe color
		// Shift an extra 4 bits since the relevant bits are the lower 4 bits
		color = ((LED_data[led*3] & mask) << 20) |
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	0013      	movs	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	189b      	adds	r3, r3, r2
 8000702:	4a40      	ldr	r2, [pc, #256]	; (8000804 <updateWS2812+0x124>)
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	1d7a      	adds	r2, r7, #5
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	4013      	ands	r3, r2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	0519      	lsls	r1, r3, #20
				((LED_data[led*3+1] & mask) << 12) |
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	0013      	movs	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	189b      	adds	r3, r3, r2
 8000718:	3301      	adds	r3, #1
 800071a:	4a3a      	ldr	r2, [pc, #232]	; (8000804 <updateWS2812+0x124>)
 800071c:	5cd3      	ldrb	r3, [r2, r3]
 800071e:	1d7a      	adds	r2, r7, #5
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	4013      	ands	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	031b      	lsls	r3, r3, #12
		color = ((LED_data[led*3] & mask) << 20) |
 8000728:	4319      	orrs	r1, r3
				((LED_data[led*3+2] & mask) << 4);
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	0013      	movs	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	189b      	adds	r3, r3, r2
 8000732:	3302      	adds	r3, #2
 8000734:	4a33      	ldr	r2, [pc, #204]	; (8000804 <updateWS2812+0x124>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	1d7a      	adds	r2, r7, #5
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	4013      	ands	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	011b      	lsls	r3, r3, #4
				((LED_data[led*3+1] & mask) << 12) |
 8000742:	430b      	orrs	r3, r1
		color = ((LED_data[led*3] & mask) << 20) |
 8000744:	603b      	str	r3, [r7, #0]

		// Set the buffer for this LED
		// Send MSB to LSB
		for (int16_t bit = 23; bit >= 0; bit--)
 8000746:	1dbb      	adds	r3, r7, #6
 8000748:	2217      	movs	r2, #23
 800074a:	801a      	strh	r2, [r3, #0]
 800074c:	e026      	b.n	800079c <updateWS2812+0xbc>
		{
			//uint32_t idx = 24 * led + bit;
			if (color & (1<<bit))
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	2200      	movs	r2, #0
 8000752:	5e9b      	ldrsh	r3, [r3, r2]
 8000754:	2201      	movs	r2, #1
 8000756:	409a      	lsls	r2, r3
 8000758:	0013      	movs	r3, r2
 800075a:	001a      	movs	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	4013      	ands	r3, r2
 8000760:	d007      	beq.n	8000772 <updateWS2812+0x92>
			{
				PWM_data[idx] = HIGH_TIME; // High bit
 8000762:	230e      	movs	r3, #14
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <updateWS2812+0x128>)
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	2136      	movs	r1, #54	; 0x36
 800076e:	52d1      	strh	r1, [r2, r3]
 8000770:	e006      	b.n	8000780 <updateWS2812+0xa0>
			}
			else
			{
				PWM_data[idx] = LOW_TIME; // Low bit
 8000772:	230e      	movs	r3, #14
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <updateWS2812+0x128>)
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	211b      	movs	r1, #27
 800077e:	52d1      	strh	r1, [r2, r3]
			}
			idx++;
 8000780:	210e      	movs	r1, #14
 8000782:	187b      	adds	r3, r7, r1
 8000784:	881a      	ldrh	r2, [r3, #0]
 8000786:	187b      	adds	r3, r7, r1
 8000788:	3201      	adds	r2, #1
 800078a:	801a      	strh	r2, [r3, #0]
		for (int16_t bit = 23; bit >= 0; bit--)
 800078c:	1dbb      	adds	r3, r7, #6
 800078e:	2200      	movs	r2, #0
 8000790:	5e9b      	ldrsh	r3, [r3, r2]
 8000792:	b29b      	uxth	r3, r3
 8000794:	3b01      	subs	r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	801a      	strh	r2, [r3, #0]
 800079c:	1dbb      	adds	r3, r7, #6
 800079e:	2200      	movs	r2, #0
 80007a0:	5e9b      	ldrsh	r3, [r3, r2]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dad3      	bge.n	800074e <updateWS2812+0x6e>
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	2b7f      	cmp	r3, #127	; 0x7f
 80007b0:	d9a3      	bls.n	80006fa <updateWS2812+0x1a>
		}
	}

	// Reset the communication line to signify end of transmission
	while (idx < BUFFER_LENGTH)
 80007b2:	e00b      	b.n	80007cc <updateWS2812+0xec>
	{
		PWM_data[idx] = 0;
 80007b4:	200e      	movs	r0, #14
 80007b6:	183b      	adds	r3, r7, r0
 80007b8:	881a      	ldrh	r2, [r3, #0]
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <updateWS2812+0x128>)
 80007bc:	0052      	lsls	r2, r2, #1
 80007be:	2100      	movs	r1, #0
 80007c0:	52d1      	strh	r1, [r2, r3]
		idx++;
 80007c2:	183b      	adds	r3, r7, r0
 80007c4:	881a      	ldrh	r2, [r3, #0]
 80007c6:	183b      	adds	r3, r7, r0
 80007c8:	3201      	adds	r2, #1
 80007ca:	801a      	strh	r2, [r3, #0]
	while (idx < BUFFER_LENGTH)
 80007cc:	240e      	movs	r4, #14
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <updateWS2812+0x12c>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d9ed      	bls.n	80007b4 <updateWS2812+0xd4>
	}

	// Begin transfer of data
	HAL_TIM_PWM_Start_DMA(getLEDTimer(), TIM_CHANNEL, (uint32_t *)PWM_data, idx);
 80007d8:	f000 fd08 	bl	80011ec <getLEDTimer>
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <updateWS2812+0x128>)
 80007e2:	2104      	movs	r1, #4
 80007e4:	f004 f908 	bl	80049f8 <HAL_TIM_PWM_Start_DMA>

	while(!dataSentFlag)
 80007e8:	e000      	b.n	80007ec <updateWS2812+0x10c>
		continue;
 80007ea:	46c0      	nop			; (mov r8, r8)
	while(!dataSentFlag)
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <updateWS2812+0x130>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0fa      	beq.n	80007ea <updateWS2812+0x10a>

	dataSentFlag = 0;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <updateWS2812+0x130>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b005      	add	sp, #20
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000054 	.word	0x20000054
 8000808:	200001d4 	.word	0x200001d4
 800080c:	00000c31 	.word	0x00000c31
 8000810:	20001a38 	.word	0x20001a38

08000814 <updateAnimation>:
int anim4_prevIdx = 999;

// TODO: reset steps at each reset
// TODO: fix random animation

void updateAnimation(uint8_t num, uint8_t idx) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	1dbb      	adds	r3, r7, #6
 8000822:	1c0a      	adds	r2, r1, #0
 8000824:	701a      	strb	r2, [r3, #0]
   switch(num) {
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d01a      	beq.n	8000864 <updateAnimation+0x50>
 800082e:	dc1f      	bgt.n	8000870 <updateAnimation+0x5c>
 8000830:	2b02      	cmp	r3, #2
 8000832:	d011      	beq.n	8000858 <updateAnimation+0x44>
 8000834:	dc1c      	bgt.n	8000870 <updateAnimation+0x5c>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <updateAnimation+0x2c>
 800083a:	2b01      	cmp	r3, #1
 800083c:	d006      	beq.n	800084c <updateAnimation+0x38>
    case 0: animation1(idx); break;
    case 1: animation2(idx); break;
    case 2: animation3(idx); break;
    case 3: animation2(idx); break;	// FIXME: make animation 4 work
    default: break; 
 800083e:	e017      	b.n	8000870 <updateAnimation+0x5c>
    case 0: animation1(idx); break;
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f819 	bl	800087c <animation1>
 800084a:	e012      	b.n	8000872 <updateAnimation+0x5e>
    case 1: animation2(idx); break;
 800084c:	1dbb      	adds	r3, r7, #6
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	0018      	movs	r0, r3
 8000852:	f000 f88b 	bl	800096c <animation2>
 8000856:	e00c      	b.n	8000872 <updateAnimation+0x5e>
    case 2: animation3(idx); break;
 8000858:	1dbb      	adds	r3, r7, #6
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	0018      	movs	r0, r3
 800085e:	f000 f911 	bl	8000a84 <animation3>
 8000862:	e006      	b.n	8000872 <updateAnimation+0x5e>
    case 3: animation2(idx); break;	// FIXME: make animation 4 work
 8000864:	1dbb      	adds	r3, r7, #6
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f87f 	bl	800096c <animation2>
 800086e:	e000      	b.n	8000872 <updateAnimation+0x5e>
    default: break; 
 8000870:	46c0      	nop			; (mov r8, r8)
   }
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <animation1>:
 * 	Side to side like footsteps
 * 	Expanding dots
 */

// Moving lines
void animation1(uint8_t index) {
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	0002      	movs	r2, r0
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	701a      	strb	r2, [r3, #0]
	int num = index % (NUM_LEDS*2/3);
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2155      	movs	r1, #85	; 0x55
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fcc0 	bl	8000214 <__aeabi_uidivmod>
 8000894:	000b      	movs	r3, r1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	617b      	str	r3, [r7, #20]
    // There are three groups of colors
    // 1st dimension = group
    // 2nd dimension = r, g, or b (respectively)
    uint8_t rgb[3][3] = {{0, 0, 0},{0, 0, 0},{0, 0, 0}};
 800089a:	2108      	movs	r1, #8
 800089c:	187b      	adds	r3, r7, r1
 800089e:	4a32      	ldr	r2, [pc, #200]	; (8000968 <animation1+0xec>)
 80008a0:	ca11      	ldmia	r2!, {r0, r4}
 80008a2:	c311      	stmia	r3!, {r0, r4}
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
        rgb[1][1] = 100;
        rgb[1][2] = 100;
        rgb[2][0] = 100;
        rgb[2][2] = 100;
    #else
        rgb[0][0] = 100;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	701a      	strb	r2, [r3, #0]
        rgb[1][1] = 100;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2264      	movs	r2, #100	; 0x64
 80008b2:	711a      	strb	r2, [r3, #4]
        rgb[1][2] = 100;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2264      	movs	r2, #100	; 0x64
 80008b8:	715a      	strb	r2, [r3, #5]
        rgb[2][2] = 100;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2264      	movs	r2, #100	; 0x64
 80008be:	721a      	strb	r2, [r3, #8]
    #endif
    // Invert direction so lights go bottom to top
	// Turn on going up
	if (num < NUM_LEDS/3) {
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	2b29      	cmp	r3, #41	; 0x29
 80008c4:	dc25      	bgt.n	8000912 <animation1+0x96>
        // Set colors for 3 groups
        setLED(NUM_LEDS * 1/3 - num, rgb[1][0], rgb[1][1], rgb[1][2]);
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	222a      	movs	r2, #42	; 0x2a
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	0018      	movs	r0, r3
 80008ce:	000c      	movs	r4, r1
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	78d9      	ldrb	r1, [r3, #3]
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	791a      	ldrb	r2, [r3, #4]
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	f7ff feb4 	bl	8000648 <setLED>
        setLED(NUM_LEDS * 2/3 - num, rgb[2][0], rgb[2][1], rgb[2][2]);
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2255      	movs	r2, #85	; 0x55
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	0018      	movs	r0, r3
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	7999      	ldrb	r1, [r3, #6]
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	79da      	ldrb	r2, [r3, #7]
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	7a1b      	ldrb	r3, [r3, #8]
 80008f4:	f7ff fea8 	bl	8000648 <setLED>
        setLED(NUM_LEDS       - num, rgb[0][0], rgb[0][1], rgb[0][2]);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	0018      	movs	r0, r3
 8000900:	193b      	adds	r3, r7, r4
 8000902:	7819      	ldrb	r1, [r3, #0]
 8000904:	193b      	adds	r3, r7, r4
 8000906:	785a      	ldrb	r2, [r3, #1]
 8000908:	193b      	adds	r3, r7, r4
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	f7ff fe9c 	bl	8000648 <setLED>
        setLED(NUM_LEDS * 1/3 - num, 0, 0, 0);
        setLED(NUM_LEDS * 2/3 - num, 0, 0, 0);
        setLED(NUM_LEDS       - num, 0, 0, 0);
	}
#endif
}
 8000910:	e026      	b.n	8000960 <animation1+0xe4>
		num = NUM_LEDS/3 - index % (NUM_LEDS/3);
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	212a      	movs	r1, #42	; 0x2a
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff fc7b 	bl	8000214 <__aeabi_uidivmod>
 800091e:	000b      	movs	r3, r1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	001a      	movs	r2, r3
 8000924:	232a      	movs	r3, #42	; 0x2a
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	617b      	str	r3, [r7, #20]
        setLED(NUM_LEDS * 1/3 - num, 0, 0, 0);
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	222a      	movs	r2, #42	; 0x2a
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	0018      	movs	r0, r3
 8000932:	2300      	movs	r3, #0
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	f7ff fe86 	bl	8000648 <setLED>
        setLED(NUM_LEDS * 2/3 - num, 0, 0, 0);
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	2255      	movs	r2, #85	; 0x55
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	0018      	movs	r0, r3
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	f7ff fe7d 	bl	8000648 <setLED>
        setLED(NUM_LEDS       - num, 0, 0, 0);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	0018      	movs	r0, r3
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	f7ff fe74 	bl	8000648 <setLED>
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b007      	add	sp, #28
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	08008360 	.word	0x08008360

0800096c <animation2>:

// Random dots that expand outwards
void animation2(uint8_t idx) {
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	0002      	movs	r2, r0
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	701a      	strb	r2, [r3, #0]
	// Get the number of LEDs to have on in this iteration
    // Delay this update so it doesn't go as fast
	int cycleIdx = (idx / ANIMATION_2_DELAY)  % ANIMATION_2_CYCLE;
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2103      	movs	r1, #3
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fbc2 	bl	8000108 <__udivsi3>
 8000984:	0003      	movs	r3, r0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	211e      	movs	r1, #30
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff fc42 	bl	8000214 <__aeabi_uidivmod>
 8000990:	000b      	movs	r3, r1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	613b      	str	r3, [r7, #16]
    int numOn = cycleIdx > (ANIMATION_2_CYCLE / 2) ? ANIMATION_2_CYCLE - cycleIdx : cycleIdx;
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	dd03      	ble.n	80009a4 <animation2+0x38>
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	221e      	movs	r2, #30
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	e000      	b.n	80009a6 <animation2+0x3a>
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	60fb      	str	r3, [r7, #12]
	uint8_t r = 0;
 80009a8:	230b      	movs	r3, #11
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	uint8_t g = 0;
 80009b0:	230a      	movs	r3, #10
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
 80009b8:	2309      	movs	r3, #9
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
    clearLEDs();
 80009c0:	f7ff fe76 	bl	80006b0 <clearLEDs>
	// Generate new random numbers if starting the animation
	if (numOn == 0) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d115      	bne.n	80009f6 <animation2+0x8a>
		clearLEDs();
 80009ca:	f7ff fe71 	bl	80006b0 <clearLEDs>
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
 80009d2:	e00d      	b.n	80009f0 <animation2+0x84>
			randoms[i] = generateRandom() % (2*NUM_LEDS);
 80009d4:	f000 f8d1 	bl	8000b7a <generateRandom>
 80009d8:	0003      	movs	r3, r0
 80009da:	001a      	movs	r2, r3
 80009dc:	23ff      	movs	r3, #255	; 0xff
 80009de:	4013      	ands	r3, r2
 80009e0:	b299      	uxth	r1, r3
 80009e2:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <animation2+0x114>)
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	0052      	lsls	r2, r2, #1
 80009e8:	52d1      	strh	r1, [r2, r3]
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3301      	adds	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	ddee      	ble.n	80009d4 <animation2+0x68>
		}
	}
	// Iterate through each group of LEDs
	for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	e039      	b.n	8000a70 <animation2+0x104>
		generateRGB(i, &r, &g, &b);
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	b2d8      	uxtb	r0, r3
 8000a00:	2309      	movs	r3, #9
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	220a      	movs	r2, #10
 8000a06:	18ba      	adds	r2, r7, r2
 8000a08:	210b      	movs	r1, #11
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	f000 f8d4 	bl	8000bb8 <generateRGB>
        // Iterate through each led within the group
        for (int j = 0; j < numOn; j++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e025      	b.n	8000a62 <animation2+0xf6>
		    setLED(randoms[i]+j, r, g, b);
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <animation2+0x114>)
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	0052      	lsls	r2, r2, #1
 8000a1c:	5ad3      	ldrh	r3, [r2, r3]
 8000a1e:	001a      	movs	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	0018      	movs	r0, r3
 8000a26:	240b      	movs	r4, #11
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	7819      	ldrb	r1, [r3, #0]
 8000a2c:	250a      	movs	r5, #10
 8000a2e:	197b      	adds	r3, r7, r5
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	2609      	movs	r6, #9
 8000a34:	19bb      	adds	r3, r7, r6
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f7ff fe06 	bl	8000648 <setLED>
		    setLED(randoms[i]-j, r, g, b);
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <animation2+0x114>)
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	5ad3      	ldrh	r3, [r2, r3]
 8000a44:	001a      	movs	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	197b      	adds	r3, r7, r5
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	19bb      	adds	r3, r7, r6
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	f7ff fdf6 	bl	8000648 <setLED>
        for (int j = 0; j < numOn; j++) {
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dbd5      	blt.n	8000a16 <animation2+0xaa>
	for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	2b05      	cmp	r3, #5
 8000a74:	ddc2      	ble.n	80009fc <animation2+0x90>
        }
	}
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b009      	add	sp, #36	; 0x24
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a80:	20001a3c 	.word	0x20001a3c

08000a84 <animation3>:
 * Steps are 10 LEDs long with a 6 led buffer in between
 * This means that there are 8 steps
 * There are at most 4 steps visible at any point in time
 * Each step is visible for ANIMATION_3_STEP_TIME
 */
void animation3(uint8_t index) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	701a      	strb	r2, [r3, #0]
	int step = (index % (ANIMATION_3_TIME)) / STEP_TIME;
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	21f0      	movs	r1, #240	; 0xf0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff fbbc 	bl	8000214 <__aeabi_uidivmod>
 8000a9c:	000b      	movs	r3, r1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2114      	movs	r1, #20
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fb30 	bl	8000108 <__udivsi3>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	61fb      	str	r3, [r7, #28]
	uint8_t r = 0;
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	uint8_t g = 0;
 8000ab6:	230e      	movs	r3, #14
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
 8000abe:	230d      	movs	r3, #13
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
	// Update when a new step is reached
//	if (index % STEP_TIME == 0) {       // commented out because indices may be skipped
		// Turn on new step
		int startIndex = step * (STEP_LEN+STEP_GAP);
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	61bb      	str	r3, [r7, #24]
        uint8_t side = step % 2 == 0 ? SIDE_EMITTER : SIDE_RECEIVER;
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	d101      	bne.n	8000ad8 <animation3+0x54>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	e000      	b.n	8000ada <animation3+0x56>
 8000ad8:	2202      	movs	r2, #2
 8000ada:	2317      	movs	r3, #23
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	701a      	strb	r2, [r3, #0]
		// Only set steps that are within bounds
		if (startIndex < NUM_LEDS) {
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae4:	dc28      	bgt.n	8000b38 <animation3+0xb4>
			generateRGB(step, &r, &g, &b);
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	b2d8      	uxtb	r0, r3
 8000aea:	230d      	movs	r3, #13
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	220e      	movs	r2, #14
 8000af0:	18ba      	adds	r2, r7, r2
 8000af2:	210f      	movs	r1, #15
 8000af4:	1879      	adds	r1, r7, r1
 8000af6:	f000 f85f 	bl	8000bb8 <generateRGB>
			for (int i = 0; i < STEP_LEN; i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
 8000afe:	e018      	b.n	8000b32 <animation3+0xae>
                if (side == POSITION_SIDE) {
 8000b00:	2317      	movs	r3, #23
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d110      	bne.n	8000b2c <animation3+0xa8>
                    #if (POSITION_LEVEL == LEVEL_TOP)
				    setLED(startIndex+i, r, g, b);
                    #else
				    // Bottom side needs to be inverted because indexing is reversed
				    setLED(NUM_LEDS - (startIndex+i), r, g, b);
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	18d3      	adds	r3, r2, r3
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	0018      	movs	r0, r3
 8000b16:	230f      	movs	r3, #15
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	7819      	ldrb	r1, [r3, #0]
 8000b1c:	230e      	movs	r3, #14
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	230d      	movs	r3, #13
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f7ff fd8e 	bl	8000648 <setLED>
			for (int i = 0; i < STEP_LEN; i++) {
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	3301      	adds	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	dde3      	ble.n	8000b00 <animation3+0x7c>
                    #endif
                }
			}
		}
		// Turn off old step
		int offStep = step - NUM_STEPS_ON;
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	613b      	str	r3, [r7, #16]
		if (offStep >= 0) {
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db16      	blt.n	8000b72 <animation3+0xee>
			startIndex = offStep * (STEP_LEN+STEP_GAP);
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
			for (int i = 0; i < STEP_LEN; i++) {
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
 8000b4e:	e00d      	b.n	8000b6c <animation3+0xe8>
#if (POSITION_LEVEL == LEVEL_TOP)
				setLED(startIndex+i, 0, 0, 0);
#else
				// Bottom side needs to be inverted because indexing is reversed
				setLED(NUM_LEDS - (startIndex+i), 0, 0, 0);
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	f7ff fd71 	bl	8000648 <setLED>
			for (int i = 0; i < STEP_LEN; i++) {
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	2b09      	cmp	r3, #9
 8000b70:	ddee      	ble.n	8000b50 <animation3+0xcc>
#endif
			}
		}
//	}
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b00a      	add	sp, #40	; 0x28
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <generateRandom>:
}

// UTILITY FUNCTIONS

// Generate a random 16 bit unsigned interger
uint16_t generateRandom() {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
	// Generate random 32 bit number
	uint32_t num;
	HAL_RNG_GenerateRandomNumber(getRNG(), &num);
 8000b80:	f000 fb54 	bl	800122c <getRNG>
 8000b84:	0002      	movs	r2, r0
 8000b86:	003b      	movs	r3, r7
 8000b88:	0019      	movs	r1, r3
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	f003 fe7f 	bl	800488e <HAL_RNG_GenerateRandomNumber>
	// Randomly take either the upper or lower 16 bits
	// Extracts the upper 16 bits
	uint32_t mask = (~0) >> 16;
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	607b      	str	r3, [r7, #4]
	if (num >> 31) {
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da04      	bge.n	8000ba6 <generateRandom+0x2c>
		num = num & mask;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	e002      	b.n	8000bac <generateRandom+0x32>
	} else {
		num = num >> 16;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	0c1b      	lsrs	r3, r3, #16
 8000baa:	603b      	str	r3, [r7, #0]
	}
	return (uint16_t) num;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b29b      	uxth	r3, r3
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <generateRGB>:

// Sets the rgb value given a number
void generateRGB(uint8_t num, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	1c02      	adds	r2, r0, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	int color = num % NUM_COLORS;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fb1e 	bl	8000214 <__aeabi_uidivmod>
 8000bd8:	000b      	movs	r3, r1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	617b      	str	r3, [r7, #20]
	switch (color) {
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d84b      	bhi.n	8000c7c <generateRGB+0xc4>
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	009a      	lsls	r2, r3, #2
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <generateRGB+0xe0>)
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	469f      	mov	pc, r3
	case 0: 		// purple
		*r = 100;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2264      	movs	r2, #100	; 0x64
 8000bf4:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
		*b = 100;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2264      	movs	r2, #100	; 0x64
 8000c00:	701a      	strb	r2, [r3, #0]
		break;
 8000c02:	e045      	b.n	8000c90 <generateRGB+0xd8>
	case 1: 		// orange
		*r = 150;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2296      	movs	r2, #150	; 0x96
 8000c08:	701a      	strb	r2, [r3, #0]
		*g = 40;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2228      	movs	r2, #40	; 0x28
 8000c0e:	701a      	strb	r2, [r3, #0]
		*b = 70;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2246      	movs	r2, #70	; 0x46
 8000c14:	701a      	strb	r2, [r3, #0]
		break;
 8000c16:	e03b      	b.n	8000c90 <generateRGB+0xd8>
	case 2: 		// yellow
		*r = 100;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2264      	movs	r2, #100	; 0x64
 8000c1c:	701a      	strb	r2, [r3, #0]
		*g = 100;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2264      	movs	r2, #100	; 0x64
 8000c22:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
		break;
 8000c2a:	e031      	b.n	8000c90 <generateRGB+0xd8>
	case 3: 		// green
		*r = 0;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		*g = 150;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2296      	movs	r2, #150	; 0x96
 8000c36:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e027      	b.n	8000c90 <generateRGB+0xd8>
	case 4: 		// cyan
		*r = 0;
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
		*g = 100;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2264      	movs	r2, #100	; 0x64
 8000c4a:	701a      	strb	r2, [r3, #0]
		*b = 100;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2264      	movs	r2, #100	; 0x64
 8000c50:	701a      	strb	r2, [r3, #0]
		break;
 8000c52:	e01d      	b.n	8000c90 <generateRGB+0xd8>
	case 5: 		// white
		*r = 70;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2246      	movs	r2, #70	; 0x46
 8000c58:	701a      	strb	r2, [r3, #0]
		*g = 70;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2246      	movs	r2, #70	; 0x46
 8000c5e:	701a      	strb	r2, [r3, #0]
		*b = 70;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2246      	movs	r2, #70	; 0x46
 8000c64:	701a      	strb	r2, [r3, #0]
		break;
 8000c66:	e013      	b.n	8000c90 <generateRGB+0xd8>
    case 6:         // red
        *r = 255;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
        break;
 8000c7a:	e009      	b.n	8000c90 <generateRGB+0xd8>
	default: 		// off
		*r = 0;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
		break;
 8000c8e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b006      	add	sp, #24
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	08008378 	.word	0x08008378

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f001 f982 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f823 	bl	8000cee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f000 fa50 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cac:	f000 fa28 	bl	8001100 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cb0:	f000 f9a4 	bl	8000ffc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000cb4:	f000 f9f0 	bl	8001098 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000cb8:	f000 f878 	bl	8000dac <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cbc:	f000 f8f4 	bl	8000ea8 <MX_TIM1_Init>
  MX_RNG_Init();
 8000cc0:	f000 f8da 	bl	8000e78 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  receiveIT();
 8000cc4:	f000 fe58 	bl	8001978 <receiveIT>
  clearSensorHistory();
 8000cc8:	f000 ffbe 	bl	8001c48 <clearSensorHistory>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (cmdReady()) {
 8000ccc:	f000 fe8a 	bl	80019e4 <cmdReady>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d0fb      	beq.n	8000ccc <main+0x30>
		  abortIT();
 8000cd4:	f000 fe3e 	bl	8001954 <abortIT>
		  processCommand();
 8000cd8:	f000 fed6 	bl	8001a88 <processCommand>
		  // Update LEDs if needed
		  if (updateLEDs()) {
 8000cdc:	f000 fe70 	bl	80019c0 <updateLEDs>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <main+0x4c>
			  updateWS2812();
 8000ce4:	f7ff fcfc 	bl	80006e0 <updateWS2812>
		  }
		  receiveIT();
 8000ce8:	f000 fe46 	bl	8001978 <receiveIT>
	  if (cmdReady()) {
 8000cec:	e7ee      	b.n	8000ccc <main+0x30>

08000cee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cee:	b590      	push	{r4, r7, lr}
 8000cf0:	b093      	sub	sp, #76	; 0x4c
 8000cf2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf4:	2410      	movs	r4, #16
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	2338      	movs	r3, #56	; 0x38
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f007 fb1a 	bl	8008338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	003b      	movs	r3, r7
 8000d06:	0018      	movs	r0, r3
 8000d08:	2310      	movs	r3, #16
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f007 fb13 	bl	8008338 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f002 fe9a 	bl	8003a50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2202      	movs	r2, #2
 8000d20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	0052      	lsls	r2, r2, #1
 8000d28:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d2a:	0021      	movs	r1, r4
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2202      	movs	r2, #2
 8000d42:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	0292      	lsls	r2, r2, #10
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	0492      	lsls	r2, r2, #18
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	0592      	lsls	r2, r2, #22
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f002 febc 	bl	8003ae8 <HAL_RCC_OscConfig>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d74:	f000 fa62 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	003b      	movs	r3, r7
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2202      	movs	r2, #2
 8000d82:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	003b      	movs	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d90:	003b      	movs	r3, r7
 8000d92:	2102      	movs	r1, #2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f003 f9c1 	bl	800411c <HAL_RCC_ClockConfig>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d9e:	f000 fa4d 	bl	800123c <Error_Handler>
  }
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b013      	add	sp, #76	; 0x4c
 8000da8:	bd90      	pop	{r4, r7, pc}
	...

08000dac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	0018      	movs	r0, r3
 8000db6:	230c      	movs	r3, #12
 8000db8:	001a      	movs	r2, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f007 fabc 	bl	8008338 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <MX_ADC1_Init+0xc8>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	05d2      	lsls	r2, r2, #23
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e0c:	222c      	movs	r2, #44	; 0x2c
 8000e0e:	2100      	movs	r1, #0
 8000e10:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e26:	223c      	movs	r2, #60	; 0x3c
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fabd 	bl	80023b4 <HAL_ADC_Init>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000e3e:	f000 f9fd 	bl	800123c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e54:	1d3a      	adds	r2, r7, #4
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_ADC1_Init+0xc4>)
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 fd7c 	bl	8002958 <HAL_ADC_ConfigChannel>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000e64:	f000 f9ea 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b004      	add	sp, #16
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20001a48 	.word	0x20001a48
 8000e74:	40012400 	.word	0x40012400

08000e78 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_RNG_Init+0x28>)
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <MX_RNG_Init+0x2c>)
 8000e80:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_RNG_Init+0x28>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <MX_RNG_Init+0x28>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f003 fcc8 	bl	8004820 <HAL_RNG_Init>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000e94:	f000 f9d2 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20001aac 	.word	0x20001aac
 8000ea4:	40025000 	.word	0x40025000

08000ea8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b098      	sub	sp, #96	; 0x60
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	2354      	movs	r3, #84	; 0x54
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f007 fa3d 	bl	8008338 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebe:	2338      	movs	r3, #56	; 0x38
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	231c      	movs	r3, #28
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f007 fa35 	bl	8008338 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2334      	movs	r3, #52	; 0x34
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f007 fa2e 	bl	8008338 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000edc:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000ede:	4a46      	ldr	r2, [pc, #280]	; (8000ff8 <MX_TIM1_Init+0x150>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ee2:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80;
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000ef0:	2250      	movs	r2, #80	; 0x50
 8000ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f003 fd1d 	bl	8004948 <HAL_TIM_PWM_Init>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f12:	f000 f993 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f16:	2154      	movs	r1, #84	; 0x54
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2a:	187a      	adds	r2, r7, r1
 8000f2c:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f004 fd9d 	bl	8005a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f3a:	f000 f97f 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	2138      	movs	r1, #56	; 0x38
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2260      	movs	r2, #96	; 0x60
 8000f44:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f6a:	1879      	adds	r1, r7, r1
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	0018      	movs	r0, r3
 8000f72:	f004 f831 	bl	8004fd8 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000f7a:	f000 f95f 	bl	800123c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	0492      	lsls	r2, r2, #18
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd0:	1d3a      	adds	r2, r7, #4
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f004 fdb8 	bl	8005b4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000fe0:	f000 f92c 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <MX_TIM1_Init+0x14c>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fb18 	bl	800161c <HAL_TIM_MspPostInit>

}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b018      	add	sp, #96	; 0x60
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20001ac0 	.word	0x20001ac0
 8000ff8:	40012c00 	.word	0x40012c00

08000ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001002:	4a24      	ldr	r2, [pc, #144]	; (8001094 <MX_USART1_UART_Init+0x98>)
 8001004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001008:	22e1      	movs	r2, #225	; 0xe1
 800100a:	0252      	lsls	r2, r2, #9
 800100c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_USART1_UART_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_USART1_UART_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_USART1_UART_Init+0x94>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001046:	0018      	movs	r0, r3
 8001048:	f004 fe26 	bl	8005c98 <HAL_UART_Init>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 f8f4 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001056:	2100      	movs	r1, #0
 8001058:	0018      	movs	r0, r3
 800105a:	f007 f869 	bl	8008130 <HAL_UARTEx_SetTxFifoThreshold>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d001      	beq.n	8001066 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 f8eb 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001068:	2100      	movs	r1, #0
 800106a:	0018      	movs	r0, r3
 800106c:	f007 f8a0 	bl	80081b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 f8e2 	bl	800123c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <MX_USART1_UART_Init+0x94>)
 800107a:	0018      	movs	r0, r3
 800107c:	f007 f81e 	bl	80080bc <HAL_UARTEx_DisableFifoMode>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 f8da 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	20001b68 	.word	0x20001b68
 8001094:	40013800 	.word	0x40013800

08001098 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <MX_USART3_UART_Init+0x64>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010a4:	22e1      	movs	r2, #225	; 0xe1
 80010a6:	0252      	lsls	r2, r2, #9
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <MX_USART3_UART_Init+0x60>)
 80010e2:	0018      	movs	r0, r3
 80010e4:	f004 fdd8 	bl	8005c98 <HAL_UART_Init>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010ec:	f000 f8a6 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	20001bf8 	.word	0x20001bf8
 80010fc:	40004800 	.word	0x40004800

08001100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_DMA_Init+0x48>)
 8001108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_DMA_Init+0x48>)
 800110c:	2101      	movs	r1, #1
 800110e:	430a      	orrs	r2, r1
 8001110:	639a      	str	r2, [r3, #56]	; 0x38
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_DMA_Init+0x48>)
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	2201      	movs	r2, #1
 8001118:	4013      	ands	r3, r2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2009      	movs	r0, #9
 8001124:	f001 ffc2 	bl	80030ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001128:	2009      	movs	r0, #9
 800112a:	f001 ffd4 	bl	80030d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	200a      	movs	r0, #10
 8001134:	f001 ffba 	bl	80030ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001138:	200a      	movs	r0, #10
 800113a:	f001 ffcc 	bl	80030d6 <HAL_NVIC_EnableIRQ>

}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40021000 	.word	0x40021000

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	240c      	movs	r4, #12
 8001154:	193b      	adds	r3, r7, r4
 8001156:	0018      	movs	r0, r3
 8001158:	2314      	movs	r3, #20
 800115a:	001a      	movs	r2, r3
 800115c:	2100      	movs	r1, #0
 800115e:	f007 f8eb 	bl	8008338 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001168:	2102      	movs	r1, #2
 800116a:	430a      	orrs	r2, r1
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001172:	2202      	movs	r2, #2
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_GPIO_Init+0x98>)
 800117c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001180:	2101      	movs	r1, #1
 8001182:	430a      	orrs	r2, r1
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	2201      	movs	r2, #1
 800118c:	4013      	ands	r3, r2
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001198:	2104      	movs	r1, #4
 800119a:	430a      	orrs	r2, r1
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_GPIO_Init+0x98>)
 80011a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a2:	2204      	movs	r2, #4
 80011a4:	4013      	ands	r3, r2
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_GPIO_Init+0x9c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	0018      	movs	r0, r3
 80011b2:	f002 fc2f 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011b6:	0021      	movs	r1, r4
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2201      	movs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <MX_GPIO_Init+0x9c>)
 80011d4:	0019      	movs	r1, r3
 80011d6:	0010      	movs	r0, r2
 80011d8:	f002 fab8 	bl	800374c <HAL_GPIO_Init>

}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b009      	add	sp, #36	; 0x24
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	50000800 	.word	0x50000800

080011ec <getLEDTimer>:

/* USER CODE BEGIN 4 */
TIM_HandleTypeDef* getLEDTimer() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	return &htim1;
 80011f0:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <getLEDTimer+0xc>)
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20001ac0 	.word	0x20001ac0

080011fc <getADCPtr>:
ADC_HandleTypeDef* getADCPtr() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	return &hadc1;
 8001200:	4b01      	ldr	r3, [pc, #4]	; (8001208 <getADCPtr+0xc>)
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20001a48 	.word	0x20001a48

0800120c <getUFP>:
UART_HandleTypeDef* getUFP() {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	return &huart1;
 8001210:	4b01      	ldr	r3, [pc, #4]	; (8001218 <getUFP+0xc>)
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001b68 	.word	0x20001b68

0800121c <getDFP>:
UART_HandleTypeDef* getDFP() {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	return &huart3;
 8001220:	4b01      	ldr	r3, [pc, #4]	; (8001228 <getDFP+0xc>)
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20001bf8 	.word	0x20001bf8

0800122c <getRNG>:
RNG_HandleTypeDef* getRNG() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	return &hrng;
 8001230:	4b01      	ldr	r3, [pc, #4]	; (8001238 <getRNG+0xc>)
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20001aac 	.word	0x20001aac

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>

08001246 <mapSensor>:
		ADC_CHANNEL_8,
		ADC_CHANNEL_9,
};

// Maps the sensor index to the correct location
uint8_t mapSensor(uint8_t idx) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	0002      	movs	r2, r0
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	701a      	strb	r2, [r3, #0]
		return idx - 1;
	} else {
		return idx;
	}
#else
	if (idx == 0) {
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <mapSensor+0x18>
		return 5;
 800125a:	2305      	movs	r3, #5
 800125c:	e00e      	b.n	800127c <mapSensor+0x36>
	} else if (idx < 5) {
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b04      	cmp	r3, #4
 8001264:	d805      	bhi.n	8001272 <mapSensor+0x2c>
		return 10 - idx;
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	220a      	movs	r2, #10
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	e004      	b.n	800127c <mapSensor+0x36>
	} else {
		return 9 - idx;
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2209      	movs	r2, #9
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	b2db      	uxtb	r3, r3
	}
#endif
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <getNewReadings>:

//. collect new readings from the sensors
uint16_t* getNewReadings()
{
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	for (int sensor = 0; sensor < SENSORS_PER_BOARD; sensor++) {
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	e013      	b.n	80012b8 <getNewReadings+0x34>
		prev_readings[mapSensor(sensor)] = readSensor(sensor);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	b2dc      	uxtb	r4, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ffd4 	bl	8001246 <mapSensor>
 800129e:	0003      	movs	r3, r0
 80012a0:	001d      	movs	r5, r3
 80012a2:	0020      	movs	r0, r4
 80012a4:	f000 f81a 	bl	80012dc <readSensor>
 80012a8:	0003      	movs	r3, r0
 80012aa:	0019      	movs	r1, r3
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <getNewReadings+0x44>)
 80012ae:	006a      	lsls	r2, r5, #1
 80012b0:	52d1      	strh	r1, [r2, r3]
	for (int sensor = 0; sensor < SENSORS_PER_BOARD; sensor++) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3301      	adds	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	dde8      	ble.n	8001290 <getNewReadings+0xc>
	}
	return prev_readings;
 80012be:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <getNewReadings+0x44>)
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	20001d40 	.word	0x20001d40

080012cc <getLastReadings>:


// retrieve most recent sensor readings
uint16_t* getLastReadings()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	return prev_readings;
 80012d0:	4b01      	ldr	r3, [pc, #4]	; (80012d8 <getLastReadings+0xc>)
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20001d40 	.word	0x20001d40

080012dc <readSensor>:

uint16_t readSensor(uint8_t sensor)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	0002      	movs	r2, r0
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	701a      	strb	r2, [r3, #0]
	// Do not use the 9th sensor for the reversed side
#ifdef REVERSE_ORDER
	if (sensor == 9) {
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	d101      	bne.n	80012f4 <readSensor+0x18>
		return 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e008      	b.n	8001306 <readSensor+0x2a>
	}
#endif
	return readADC(ADC_channels[sensor]);;
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <readSensor+0x34>)
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	58d3      	ldr	r3, [r2, r3]
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 f808 	bl	8001314 <readADC>
 8001304:	0003      	movs	r3, r0
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	20000000 	.word	0x20000000

08001314 <readADC>:


uint16_t readADC(uint32_t channel)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]


	ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 800131c:	240c      	movs	r4, #12
 800131e:	193b      	adds	r3, r7, r4
 8001320:	0018      	movs	r0, r3
 8001322:	230c      	movs	r3, #12
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f007 f806 	bl	8008338 <memset>
	ADC_HandleTypeDef *adcPtr = getADCPtr(); //this is a pointer to your hal_adc
 800132c:	f7ff ff66 	bl	80011fc <getADCPtr>
 8001330:	0003      	movs	r3, r0
 8001332:	61fb      	str	r3, [r7, #28]
	//this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

	//this picks the IR direction to choose the right ADC.
	sConfig.Channel = channel;
 8001334:	193b      	adds	r3, r7, r4
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800133a:	193b      	adds	r3, r7, r4
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]

	// make sure everything was set up correctly
	if (HAL_ADC_ConfigChannel(adcPtr, &sConfig) != HAL_OK)
 8001346:	193a      	adds	r2, r7, r4
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f001 fb03 	bl	8002958 <HAL_ADC_ConfigChannel>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d001      	beq.n	800135a <readADC+0x46>
	{
		return 0;
 8001356:	2300      	movs	r3, #0
 8001358:	e016      	b.n	8001388 <readADC+0x74>
	}

	HAL_ADC_Start(adcPtr);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	0018      	movs	r0, r3
 800135e:	f001 f9d1 	bl	8002704 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(adcPtr, 1);
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2101      	movs	r1, #1
 8001366:	0018      	movs	r0, r3
 8001368:	f001 fa56 	bl	8002818 <HAL_ADC_PollForConversion>

	uint16_t val = HAL_ADC_GetValue(adcPtr);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	0018      	movs	r0, r3
 8001370:	f001 fae6 	bl	8002940 <HAL_ADC_GetValue>
 8001374:	0002      	movs	r2, r0
 8001376:	241a      	movs	r4, #26
 8001378:	193b      	adds	r3, r7, r4
 800137a:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(adcPtr);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	0018      	movs	r0, r3
 8001380:	f001 fa0e 	bl	80027a0 <HAL_ADC_Stop>

	return val;
 8001384:	193b      	adds	r3, r7, r4
 8001386:	881b      	ldrh	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b009      	add	sp, #36	; 0x24
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_MspInit+0x4c>)
 8001398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_MspInit+0x4c>)
 800139c:	2101      	movs	r1, #1
 800139e:	430a      	orrs	r2, r1
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	2201      	movs	r2, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_MspInit+0x4c>)
 80013b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x4c>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0549      	lsls	r1, r1, #21
 80013b8:	430a      	orrs	r2, r1
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_MspInit+0x4c>)
 80013be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	055b      	lsls	r3, r3, #21
 80013c4:	4013      	ands	r3, r2
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 fe70 	bl	80020b4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b099      	sub	sp, #100	; 0x64
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	234c      	movs	r3, #76	; 0x4c
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	0018      	movs	r0, r3
 80013ee:	2314      	movs	r3, #20
 80013f0:	001a      	movs	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	f006 ffa0 	bl	8008338 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f8:	2414      	movs	r4, #20
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	0018      	movs	r0, r3
 80013fe:	2338      	movs	r3, #56	; 0x38
 8001400:	001a      	movs	r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	f006 ff98 	bl	8008338 <memset>
  if(hadc->Instance==ADC1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <HAL_ADC_MspInit+0xe4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d154      	bne.n	80014bc <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001412:	193b      	adds	r3, r7, r4
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	01d2      	lsls	r2, r2, #7
 8001418:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800141a:	193b      	adds	r3, r7, r4
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	193b      	adds	r3, r7, r4
 8001422:	0018      	movs	r0, r3
 8001424:	f003 f824 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d001      	beq.n	8001430 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800142c:	f7ff ff06 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 8001432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0349      	lsls	r1, r1, #13
 800143a:	430a      	orrs	r2, r1
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 8001440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	035b      	lsls	r3, r3, #13
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 800144e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 8001452:	2101      	movs	r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	635a      	str	r2, [r3, #52]	; 0x34
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 8001466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 800146a:	2102      	movs	r1, #2
 800146c:	430a      	orrs	r2, r1
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_ADC_MspInit+0xe8>)
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	2202      	movs	r2, #2
 8001476:	4013      	ands	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800147c:	244c      	movs	r4, #76	; 0x4c
 800147e:	193b      	adds	r3, r7, r4
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	193b      	adds	r3, r7, r4
 8001486:	2203      	movs	r2, #3
 8001488:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	193b      	adds	r3, r7, r4
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	193a      	adds	r2, r7, r4
 8001492:	23a0      	movs	r3, #160	; 0xa0
 8001494:	05db      	lsls	r3, r3, #23
 8001496:	0011      	movs	r1, r2
 8001498:	0018      	movs	r0, r3
 800149a:	f002 f957 	bl	800374c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2203      	movs	r2, #3
 80014a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	2203      	movs	r2, #3
 80014a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_ADC_MspInit+0xec>)
 80014b4:	0019      	movs	r1, r3
 80014b6:	0010      	movs	r0, r2
 80014b8:	f002 f948 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b019      	add	sp, #100	; 0x64
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	40012400 	.word	0x40012400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	50000400 	.word	0x50000400

080014d0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b093      	sub	sp, #76	; 0x4c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	2410      	movs	r4, #16
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	0018      	movs	r0, r3
 80014de:	2338      	movs	r3, #56	; 0x38
 80014e0:	001a      	movs	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f006 ff28 	bl	8008338 <memset>
  if(hrng->Instance==RNG)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a15      	ldr	r2, [pc, #84]	; (8001544 <HAL_RNG_MspInit+0x74>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d123      	bne.n	800153a <HAL_RNG_MspInit+0x6a>

  /* USER CODE END RNG_MspInit 0 */

  /** Configure the RNG clock division factor
  */
    __HAL_RCC_RNGDIV_CONFIG(RCC_RNGCLK_DIV1);
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_RNG_MspInit+0x78>)
 80014f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_RNG_MspInit+0x78>)
 80014f8:	4914      	ldr	r1, [pc, #80]	; (800154c <HAL_RNG_MspInit+0x7c>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	02d2      	lsls	r2, r2, #11
 8001504:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI_DIV8;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	04d2      	lsls	r2, r2, #19
 800150c:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150e:	193b      	adds	r3, r7, r4
 8001510:	0018      	movs	r0, r3
 8001512:	f002 ffad 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d001      	beq.n	800151e <HAL_RNG_MspInit+0x4e>
    {
      Error_Handler();
 800151a:	f7ff fe8f 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_RNG_MspInit+0x78>)
 8001520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RNG_MspInit+0x78>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	02c9      	lsls	r1, r1, #11
 8001528:	430a      	orrs	r2, r1
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RNG_MspInit+0x78>)
 800152e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	02db      	lsls	r3, r3, #11
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b013      	add	sp, #76	; 0x4c
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40025000 	.word	0x40025000
 8001548:	40021000 	.word	0x40021000
 800154c:	cfffffff 	.word	0xcfffffff

08001550 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b093      	sub	sp, #76	; 0x4c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001558:	2410      	movs	r4, #16
 800155a:	193b      	adds	r3, r7, r4
 800155c:	0018      	movs	r0, r3
 800155e:	2338      	movs	r3, #56	; 0x38
 8001560:	001a      	movs	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	f006 fee8 	bl	8008338 <memset>
  if(htim_pwm->Instance==TIM1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <HAL_TIM_PWM_MspInit+0xbc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d148      	bne.n	8001604 <HAL_TIM_PWM_MspInit+0xb4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001572:	193b      	adds	r3, r7, r4
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	0392      	lsls	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 800157a:	193b      	adds	r3, r7, r4
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	03d2      	lsls	r2, r2, #15
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001582:	193b      	adds	r3, r7, r4
 8001584:	0018      	movs	r0, r3
 8001586:	f002 ff73 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d001      	beq.n	8001592 <HAL_TIM_PWM_MspInit+0x42>
    {
      Error_Handler();
 800158e:	f7ff fe55 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_TIM_PWM_MspInit+0xc0>)
 8001594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_TIM_PWM_MspInit+0xc0>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0109      	lsls	r1, r1, #4
 800159c:	430a      	orrs	r2, r1
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_TIM_PWM_MspInit+0xc0>)
 80015a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel1;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_TIM_PWM_MspInit+0xc8>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015b6:	2215      	movs	r2, #21
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015bc:	2210      	movs	r2, #16
 80015be:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 fd90 	bl	8003110 <HAL_DMA_Init>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_TIM_PWM_MspInit+0xa8>
    {
      Error_Handler();
 80015f4:	f7ff fe22 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_TIM_PWM_MspInit+0xc4>)
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b013      	add	sp, #76	; 0x4c
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	40012c00 	.word	0x40012c00
 8001610:	40021000 	.word	0x40021000
 8001614:	20001b0c 	.word	0x20001b0c
 8001618:	40020008 	.word	0x40020008

0800161c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	240c      	movs	r4, #12
 8001626:	193b      	adds	r3, r7, r4
 8001628:	0018      	movs	r0, r3
 800162a:	2314      	movs	r3, #20
 800162c:	001a      	movs	r2, r3
 800162e:	2100      	movs	r1, #0
 8001630:	f006 fe82 	bl	8008338 <memset>
  if(htim->Instance==TIM1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_TIM_MspPostInit+0x74>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d123      	bne.n	8001686 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_TIM_MspPostInit+0x78>)
 8001640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_TIM_MspPostInit+0x78>)
 8001644:	2101      	movs	r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_TIM_MspPostInit+0x78>)
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	2201      	movs	r2, #1
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001656:	193b      	adds	r3, r7, r4
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	0021      	movs	r1, r4
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2202      	movs	r2, #2
 8001664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2202      	movs	r2, #2
 8001676:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	187a      	adds	r2, r7, r1
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f002 f863 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b009      	add	sp, #36	; 0x24
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b09b      	sub	sp, #108	; 0x6c
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	2354      	movs	r3, #84	; 0x54
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	0018      	movs	r0, r3
 80016a6:	2314      	movs	r3, #20
 80016a8:	001a      	movs	r2, r3
 80016aa:	2100      	movs	r1, #0
 80016ac:	f006 fe44 	bl	8008338 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	241c      	movs	r4, #28
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	0018      	movs	r0, r3
 80016b6:	2338      	movs	r3, #56	; 0x38
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f006 fe3c 	bl	8008338 <memset>
  if(huart->Instance==USART1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_UART_MspInit+0x1e8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d16f      	bne.n	80017aa <HAL_UART_MspInit+0x112>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	0018      	movs	r0, r3
 80016da:	f002 fec9 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016e2:	f7ff fdab 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80016e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ea:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	01c9      	lsls	r1, r1, #7
 80016f0:	430a      	orrs	r2, r1
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
 80016f4:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80016f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	01db      	lsls	r3, r3, #7
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b60      	ldr	r3, [pc, #384]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 8001704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001706:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 8001708:	2102      	movs	r1, #2
 800170a:	430a      	orrs	r2, r1
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800171a:	2154      	movs	r1, #84	; 0x54
 800171c:	187b      	adds	r3, r7, r1
 800171e:	22c0      	movs	r2, #192	; 0xc0
 8001720:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2202      	movs	r2, #2
 8001726:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	187b      	adds	r3, r7, r1
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_UART_MspInit+0x1f0>)
 800173e:	0019      	movs	r1, r3
 8001740:	0010      	movs	r0, r2
 8001742:	f002 f803 	bl	800374c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001748:	4a51      	ldr	r2, [pc, #324]	; (8001890 <HAL_UART_MspInit+0x1f8>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800174c:	4b4f      	ldr	r3, [pc, #316]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800174e:	2233      	movs	r2, #51	; 0x33
 8001750:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001752:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001754:	2210      	movs	r2, #16
 8001756:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001758:	4b4c      	ldr	r3, [pc, #304]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800175e:	4b4b      	ldr	r3, [pc, #300]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001764:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176a:	4b48      	ldr	r3, [pc, #288]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001770:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001776:	4b45      	ldr	r3, [pc, #276]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800177c:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800177e:	0018      	movs	r0, r3
 8001780:	f001 fcc6 	bl	8003110 <HAL_DMA_Init>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001788:	f7ff fd58 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3f      	ldr	r2, [pc, #252]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001790:	679a      	str	r2, [r3, #120]	; 0x78
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	201b      	movs	r0, #27
 800179e:	f001 fc85 	bl	80030ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a2:	201b      	movs	r0, #27
 80017a4:	f001 fc97 	bl	80030d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a8:	e066      	b.n	8001878 <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART3)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a39      	ldr	r2, [pc, #228]	; (8001894 <HAL_UART_MspInit+0x1fc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d161      	bne.n	8001878 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80017b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	02c9      	lsls	r1, r1, #11
 80017be:	430a      	orrs	r2, r1
 80017c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80017c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	02db      	lsls	r3, r3, #11
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80017d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80017d6:	2102      	movs	r1, #2
 80017d8:	430a      	orrs	r2, r1
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_UART_MspInit+0x1ec>)
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80017e8:	2154      	movs	r1, #84	; 0x54
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	22c0      	movs	r2, #192	; 0xc0
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2202      	movs	r2, #2
 80017f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2204      	movs	r2, #4
 8001808:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	187b      	adds	r3, r7, r1
 800180c:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <HAL_UART_MspInit+0x1f0>)
 800180e:	0019      	movs	r1, r3
 8001810:	0010      	movs	r0, r2
 8001812:	f001 ff9b 	bl	800374c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001818:	4a20      	ldr	r2, [pc, #128]	; (800189c <HAL_UART_MspInit+0x204>)
 800181a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_UART_MspInit+0x200>)
 800181e:	2237      	movs	r2, #55	; 0x37
 8001820:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001824:	2210      	movs	r2, #16
 8001826:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_UART_MspInit+0x200>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_UART_MspInit+0x200>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_UART_MspInit+0x200>)
 800184e:	0018      	movs	r0, r3
 8001850:	f001 fc5e 	bl	8003110 <HAL_DMA_Init>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8001858:	f7ff fcf0 	bl	800123c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001860:	679a      	str	r2, [r3, #120]	; 0x78
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_UART_MspInit+0x200>)
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	201d      	movs	r0, #29
 800186e:	f001 fc1d 	bl	80030ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8001872:	201d      	movs	r0, #29
 8001874:	f001 fc2f 	bl	80030d6 <HAL_NVIC_EnableIRQ>
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b01b      	add	sp, #108	; 0x6c
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	40013800 	.word	0x40013800
 8001884:	40021000 	.word	0x40021000
 8001888:	50000400 	.word	0x50000400
 800188c:	20001c88 	.word	0x20001c88
 8001890:	4002001c 	.word	0x4002001c
 8001894:	40004800 	.word	0x40004800
 8001898:	20001ce4 	.word	0x20001ce4
 800189c:	40020030 	.word	0x40020030

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 fbda 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <DMA1_Channel1_IRQHandler+0x14>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f001 fdf6 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	20001b0c 	.word	0x20001b0c

080018e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80018ee:	0018      	movs	r0, r3
 80018f0:	f001 fdea 	bl	80034c8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <DMA1_Channel2_3_IRQHandler+0x20>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f001 fde6 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	20001c88 	.word	0x20001c88
 8001908:	20001ce4 	.word	0x20001ce4

0800190c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <USART1_IRQHandler+0x14>)
 8001912:	0018      	movs	r0, r3
 8001914:	f004 fd4c 	bl	80063b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20001b68 	.word	0x20001b68

08001924 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <USART3_4_LPUART1_IRQHandler+0x14>)
 800192a:	0018      	movs	r0, r3
 800192c:	f004 fd40 	bl	80063b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20001bf8 	.word	0x20001bf8

0800193c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <SystemInit+0x14>)
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	0512      	lsls	r2, r2, #20
 8001946:	609a      	str	r2, [r3, #8]
#endif
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <abortIT>:

// state of user LED on the board
uint8_t led_state = 0;


void abortIT() {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(getUFP());
 8001958:	f7ff fc58 	bl	800120c <getUFP>
 800195c:	0003      	movs	r3, r0
 800195e:	0018      	movs	r0, r3
 8001960:	f004 fbf8 	bl	8006154 <HAL_UART_Abort_IT>
// Only receiver side receives interrupts from downstream boards
#if (POSITION_SIDE == SIDE_RECEIVER)
	HAL_UART_Abort_IT(getDFP());
 8001964:	f7ff fc5a 	bl	800121c <getDFP>
 8001968:	0003      	movs	r3, r0
 800196a:	0018      	movs	r0, r3
 800196c:	f004 fbf2 	bl	8006154 <HAL_UART_Abort_IT>
#endif
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <receiveIT>:

// initialize polling for data from UFP
void receiveIT() {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	cmd_ready = 0;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <receiveIT+0x3c>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	cmd = 0;
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <receiveIT+0x40>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
	abortIT();
 8001988:	f7ff ffe4 	bl	8001954 <abortIT>
	HAL_UART_Receive_IT(getUFP(), &cmd, 1);
 800198c:	f7ff fc3e 	bl	800120c <getUFP>
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <receiveIT+0x40>)
 8001992:	2201      	movs	r2, #1
 8001994:	0019      	movs	r1, r3
 8001996:	f004 fb73 	bl	8006080 <HAL_UART_Receive_IT>
// Only receiver side receives interrupts from downstream boards
// Downstream commands read new sensor values
#if (POSITION_SIDE == SIDE_RECEIVER)
	dfp_cmd = 0;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <receiveIT+0x44>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(getDFP(), &dfp_cmd, 1);
 80019a0:	f7ff fc3c 	bl	800121c <getDFP>
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <receiveIT+0x44>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	0019      	movs	r1, r3
 80019aa:	f004 fb69 	bl	8006080 <HAL_UART_Receive_IT>
#endif
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20001d55 	.word	0x20001d55
 80019b8:	20001d56 	.word	0x20001d56
 80019bc:	20001d57 	.word	0x20001d57

080019c0 <updateLEDs>:
	}
}

#if (POSITION_TYPE == TYPE_HUB)
// Returns whether LEDs should be updated
uint8_t updateLEDs() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	if (update_leds) {
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <updateLEDs+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <updateLEDs+0x16>
		update_leds = 0;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <updateLEDs+0x20>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
		return 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <updateLEDs+0x18>
	} else {
		return 0;
 80019d6:	2300      	movs	r3, #0
	}
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	20001d54 	.word	0x20001d54

080019e4 <cmdReady>:
#endif

uint8_t cmdReady() {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	return cmd_ready;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <cmdReady+0x10>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	20001d55 	.word	0x20001d55

080019f8 <sendACK>:

// Send ACK to UFP
void sendACK(UART_HandleTypeDef* huart) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	uint8_t data = ACK;
 8001a00:	210f      	movs	r1, #15
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	222a      	movs	r2, #42	; 0x2a
 8001a06:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &data, 1, SEND_TIMEOUT);
 8001a08:	1879      	adds	r1, r7, r1
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f004 f998 	bl	8005d44 <HAL_UART_Transmit>
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b004      	add	sp, #16
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <insertReadingsToBuf>:
}

// Insert sensor readings to buffer
#if (POSITION_SIDE == SIDE_RECEIVER)
// Adds this boards readings into the send buffer (buffer 1)
void insertReadingsToBuf() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
	// Get most recent readings
	uint16_t* readings = getLastReadings();
 8001a22:	f7ff fc53 	bl	80012cc <getLastReadings>
 8001a26:	0003      	movs	r3, r0
 8001a28:	607b      	str	r3, [r7, #4]
	// Add data to the buffer
	for (int i = 0; i < SENSORS_PER_BOARD; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e00f      	b.n	8001a50 <insertReadingsToBuf+0x34>
		sensor_buf[i] = (uint8_t) (readings[i] / 16);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	18d3      	adds	r3, r2, r3
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b2d9      	uxtb	r1, r3
 8001a40:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <insertReadingsToBuf+0x68>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	1c0a      	adds	r2, r1, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SENSORS_PER_BOARD; i++) {
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	ddec      	ble.n	8001a30 <insertReadingsToBuf+0x14>
	}
    #if (POSITION_TYPE == TYPE_HUB)
    // Update sensor activations (in utils.h)
	for (int i = 0; i < NUM_SENSORS; i++) {
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	e00b      	b.n	8001a74 <insertReadingsToBuf+0x58>
		registerReading(i, sensor_buf[i]);
 8001a5c:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <insertReadingsToBuf+0x68>)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 f90d 	bl	8001c88 <registerReading>
	for (int i = 0; i < NUM_SENSORS; i++) {
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3301      	adds	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b27      	cmp	r3, #39	; 0x27
 8001a78:	ddf0      	ble.n	8001a5c <insertReadingsToBuf+0x40>
	}
    #endif
}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20001d5c 	.word	0x20001d5c

08001a88 <processCommand>:
        * Only for receivers
    TODO: make these situations reality
*/

// Reads command from hub in order to see if action needs to be taken
HAL_StatusTypeDef processCommand() {
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
	if (cmd == UPDATE_COMPLETE) {
 8001a96:	4b5e      	ldr	r3, [pc, #376]	; (8001c10 <processCommand+0x188>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d117      	bne.n	8001ace <processCommand+0x46>
		sendACK(getUFP());
 8001a9e:	f7ff fbb5 	bl	800120c <getUFP>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff ffa7 	bl	80019f8 <sendACK>
        sendCommand(getDFP(), UPDATE_COMPLETE);
        #endif
        // Hubs then display sense state
        #if (POSITION_TYPE == TYPE_HUB)
		// Update the LED strips if an object was sensed
		if (display_sense && sense_state == OBJECT_SENSED) {
 8001aaa:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <processCommand+0x18c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d100      	bne.n	8001ab4 <processCommand+0x2c>
 8001ab2:	e0a5      	b.n	8001c00 <processCommand+0x178>
 8001ab4:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <processCommand+0x190>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b45      	cmp	r3, #69	; 0x45
 8001aba:	d000      	beq.n	8001abe <processCommand+0x36>
 8001abc:	e0a0      	b.n	8001c00 <processCommand+0x178>
			clearLEDs();
 8001abe:	f7fe fdf7 	bl	80006b0 <clearLEDs>
			displaySense();
 8001ac2:	f000 f947 	bl	8001d54 <displaySense>
		    update_leds = 1;
 8001ac6:	4b55      	ldr	r3, [pc, #340]	; (8001c1c <processCommand+0x194>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e098      	b.n	8001c00 <processCommand+0x178>
        #endif
		//// Send LED values to receiver hub when update is complete
        //#if (POSITION_SIDE == SIDE_EMITTER) 
        //sendLEDData();
        //#endif       
	} else if (cmd == SEND_SENSOR_DATA) {
 8001ace:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <processCommand+0x188>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10d      	bne.n	8001af2 <processCommand+0x6a>
        // Receiver side sends last sensed state
        #if (POSITION_SIDE == SIDE_RECEIVER)
            sendACK(getUFP());
 8001ad6:	f7ff fb99 	bl	800120c <getUFP>
 8001ada:	0003      	movs	r3, r0
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff ff8b 	bl	80019f8 <sendACK>
            #if (POSITION_TYPE == TYPE_HUB) // Hub sends activations to emitter hub
		    HAL_UART_Transmit(getUFP(), sensor_activations, NUM_SENSORS, SENSOR_UPDATE_TIMEOUT);
 8001ae2:	f7ff fb93 	bl	800120c <getUFP>
 8001ae6:	494e      	ldr	r1, [pc, #312]	; (8001c20 <processCommand+0x198>)
 8001ae8:	234b      	movs	r3, #75	; 0x4b
 8001aea:	2228      	movs	r2, #40	; 0x28
 8001aec:	f004 f92a 	bl	8005d44 <HAL_UART_Transmit>
 8001af0:	e086      	b.n	8001c00 <processCommand+0x178>
            // Emitter side only sends if an object was sensed
		    // Send last known sense state back to hub
		    ret = HAL_UART_Transmit(getUFP(), &sense_state, sizeof(sense_state), SEND_TIMEOUT);
        #endif
#if (POSITION_SIDE == SIDE_RECEIVER)
	} else if (dfp_cmd == SENSOR_UPDATE) {
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <processCommand+0x19c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d12a      	bne.n	8001b50 <processCommand+0xc8>
		// Send ACK to dfp
		sendACK(getDFP());
 8001afa:	f7ff fb8f 	bl	800121c <getDFP>
 8001afe:	0003      	movs	r3, r0
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff79 	bl	80019f8 <sendACK>
		// Get updated sensor values from dfp
		ret = HAL_UART_Receive(getDFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
 8001b06:	f7ff fb89 	bl	800121c <getDFP>
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	18fc      	adds	r4, r7, r3
 8001b0e:	4946      	ldr	r1, [pc, #280]	; (8001c28 <processCommand+0x1a0>)
 8001b10:	234b      	movs	r3, #75	; 0x4b
 8001b12:	2228      	movs	r2, #40	; 0x28
 8001b14:	f004 f9c2 	bl	8005e9c <HAL_UART_Receive>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	7023      	strb	r3, [r4, #0]
		// Get new readings
		getNewReadings();
 8001b1c:	f7ff fbb2 	bl	8001284 <getNewReadings>
		// Scale all the sensor readings
		insertReadingsToBuf();
 8001b20:	f7ff ff7c 	bl	8001a1c <insertReadingsToBuf>
		// Process sensor values to determine if an object was sensed
        // Only the hub determines sense state
        #if (POSITION_TYPE == TYPE_HUB)
		sense_state = OBJECT_NOT_SENSED;
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <processCommand+0x190>)
 8001b26:	2260      	movs	r2, #96	; 0x60
 8001b28:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	e00b      	b.n	8001b48 <processCommand+0xc0>
			if (sensor_activations[i] > 0) {
 8001b30:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <processCommand+0x198>)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <processCommand+0xba>
				sense_state = OBJECT_SENSED;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <processCommand+0x190>)
 8001b3e:	2245      	movs	r2, #69	; 0x45
 8001b40:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b27      	cmp	r3, #39	; 0x27
 8001b4c:	ddf0      	ble.n	8001b30 <processCommand+0xa8>
 8001b4e:	e057      	b.n	8001c00 <processCommand+0x178>
			HAL_UART_Transmit(getUFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
		}
        #endif
#endif
#if (POSITION_TYPE == TYPE_HUB)         // Hub commands for sensors
	} else if (cmd == RECALIBRATE) {
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <processCommand+0x188>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d108      	bne.n	8001b6a <processCommand+0xe2>
		sendACK(getUFP());
 8001b58:	f7ff fb58 	bl	800120c <getUFP>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff ff4a 	bl	80019f8 <sendACK>
		// Pass command to downstream boards
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), cmd);
        #endif
		// recalibrate the sensors by clearing the history
		clearSensorHistory();
 8001b64:	f000 f870 	bl	8001c48 <clearSensorHistory>
 8001b68:	e04a      	b.n	8001c00 <processCommand+0x178>
	} else if (cmd == ENABLE_SENSE) {
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <processCommand+0x188>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d109      	bne.n	8001b86 <processCommand+0xfe>
		sendACK(getUFP());
 8001b72:	f7ff fb4b 	bl	800120c <getUFP>
 8001b76:	0003      	movs	r3, r0
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff ff3d 	bl	80019f8 <sendACK>
		display_sense = 1;
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <processCommand+0x18c>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e03c      	b.n	8001c00 <processCommand+0x178>
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), ENABLE_SENSE);
        #endif
	} else if (cmd == DISABLE_SENSE) {
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <processCommand+0x188>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b1b      	cmp	r3, #27
 8001b8c:	d109      	bne.n	8001ba2 <processCommand+0x11a>
		sendACK(getUFP());
 8001b8e:	f7ff fb3d 	bl	800120c <getUFP>
 8001b92:	0003      	movs	r3, r0
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff ff2f 	bl	80019f8 <sendACK>
		display_sense = 0;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <processCommand+0x18c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e02e      	b.n	8001c00 <processCommand+0x178>
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), DISABLE_SENSE);
        #endif
#endif
#if (POSITION_TYPE == TYPE_HUB)         // Only hubs control LEDs
	} else if (cmd == CLEAR_LEDS) {
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <processCommand+0x188>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	d10b      	bne.n	8001bc2 <processCommand+0x13a>
		sendACK(getUFP());
 8001baa:	f7ff fb2f 	bl	800120c <getUFP>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff ff21 	bl	80019f8 <sendACK>
		// Pass command to downstream boards
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), cmd);
        #endif
		// Clear LEDs and update strips
		clearLEDs();
 8001bb6:	f7fe fd7b 	bl	80006b0 <clearLEDs>
		// Set leds to update
		update_leds = 1;
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <processCommand+0x194>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	e01e      	b.n	8001c00 <processCommand+0x178>
	} else if (cmd == SET_LED_VALS) {
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <processCommand+0x188>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d11a      	bne.n	8001c00 <processCommand+0x178>
		// Begin waiting for LED data from UFP
		uint8_t info[2] = {0, 0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	801a      	strh	r2, [r3, #0]
		// Return an ACK to begin handshake
		sendACK(getUFP());
 8001bd0:	f7ff fb1c 	bl	800120c <getUFP>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff ff0e 	bl	80019f8 <sendACK>
		// Receive info about the data transfer
		HAL_UART_Receive(getUFP(), info, sizeof(info), INFO_TIMEOUT);
 8001bdc:	f7ff fb16 	bl	800120c <getUFP>
 8001be0:	1d39      	adds	r1, r7, #4
 8001be2:	2305      	movs	r3, #5
 8001be4:	2202      	movs	r2, #2
 8001be6:	f004 f959 	bl	8005e9c <HAL_UART_Receive>
    #ifdef ANIMATION_BY_INDEX
        updateAnimation(info[0], info[1]);
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	785b      	ldrb	r3, [r3, #1]
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	f7fe fe0d 	bl	8000814 <updateAnimation>
        update_leds = 1;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <processCommand+0x194>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
		}
        // Then would pass data on to downstream board in UPDATE_COMPLETE command
    #endif
#endif
	}
	return ret;
 8001c00:	230f      	movs	r3, #15
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	781b      	ldrb	r3, [r3, #0]
}
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b005      	add	sp, #20
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	20001d56 	.word	0x20001d56
 8001c14:	2000002c 	.word	0x2000002c
 8001c18:	20001d58 	.word	0x20001d58
 8001c1c:	20001d54 	.word	0x20001d54
 8001c20:	20001dd4 	.word	0x20001dd4
 8001c24:	20001d57 	.word	0x20001d57
 8001c28:	20001d5c 	.word	0x20001d5c

08001c2c <HAL_UART_RxCpltCallback>:
	return status;
}
#endif

// Receive commands from hub
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	cmd_ready = 1;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_UART_RxCpltCallback+0x18>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	20001d55 	.word	0x20001d55

08001c48 <clearSensorHistory>:

uint8_t min_readings[NUM_SENSORS];
uint8_t max_readings[NUM_SENSORS];
uint8_t sensor_activations[NUM_SENSORS];

void clearSensorHistory() {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_SENSORS; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	e00c      	b.n	8001c6e <clearSensorHistory+0x26>
		min_readings[i] = 255;
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <clearSensorHistory+0x38>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	18d3      	adds	r3, r2, r3
 8001c5a:	22ff      	movs	r2, #255	; 0xff
 8001c5c:	701a      	strb	r2, [r3, #0]
		max_readings[i] = 50;
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <clearSensorHistory+0x3c>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	18d3      	adds	r3, r2, r3
 8001c64:	2232      	movs	r2, #50	; 0x32
 8001c66:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_SENSORS; i++) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b27      	cmp	r3, #39	; 0x27
 8001c72:	ddef      	ble.n	8001c54 <clearSensorHistory+0xc>
	}
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	20001d84 	.word	0x20001d84
 8001c84:	20001dac 	.word	0x20001dac

08001c88 <registerReading>:

#if (POSITION_SIDE == SIDE_RECEIVER)
void registerReading(int sensor, uint8_t reading) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	000a      	movs	r2, r1
 8001c92:	1cfb      	adds	r3, r7, #3
 8001c94:	701a      	strb	r2, [r3, #0]
	// update the min and max readings for this sensor
	if (reading < min_readings[sensor]) {
 8001c96:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <registerReading+0xc0>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	1cfa      	adds	r2, r7, #3
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d21e      	bcs.n	8001ce4 <registerReading+0x5c>
		min_readings[sensor] = reading;
 8001ca6:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <registerReading+0xc0>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	18d3      	adds	r3, r2, r3
 8001cac:	1cfa      	adds	r2, r7, #3
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]
		// Make the max reading no less than 50 more than the min reading
		max_readings[sensor] = max_readings[sensor] - 50 > reading ?
 8001cb2:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <registerReading+0xc4>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	18d3      	adds	r3, r2, r3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3b32      	subs	r3, #50	; 0x32
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	1cfb      	adds	r3, r7, #3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dd04      	ble.n	8001cd0 <registerReading+0x48>
 8001cc6:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <registerReading+0xc4>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	18d3      	adds	r3, r2, r3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	e005      	b.n	8001cdc <registerReading+0x54>
				max_readings[sensor] :
				min_readings[sensor] + 50;
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <registerReading+0xc0>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	18d3      	adds	r3, r2, r3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
		max_readings[sensor] = max_readings[sensor] - 50 > reading ?
 8001cd8:	3332      	adds	r3, #50	; 0x32
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	491b      	ldr	r1, [pc, #108]	; (8001d4c <registerReading+0xc4>)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	188a      	adds	r2, r1, r2
 8001ce2:	7013      	strb	r3, [r2, #0]
	}
	if (reading > max_readings[sensor]) {
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <registerReading+0xc4>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	18d3      	adds	r3, r2, r3
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	1cfa      	adds	r2, r7, #3
 8001cee:	7812      	ldrb	r2, [r2, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d905      	bls.n	8001d00 <registerReading+0x78>
		max_readings[sensor] = reading;
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <registerReading+0xc4>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	18d3      	adds	r3, r2, r3
 8001cfa:	1cfa      	adds	r2, r7, #3
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	701a      	strb	r2, [r3, #0]
	}
	// Update the sensor activations
	if (reading > min_readings[sensor] + 20) {
 8001d00:	1cfb      	adds	r3, r7, #3
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4910      	ldr	r1, [pc, #64]	; (8001d48 <registerReading+0xc0>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	18cb      	adds	r3, r1, r3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dd05      	ble.n	8001d1e <registerReading+0x96>
		sensor_activations[sensor] = ON_TIME;
 8001d12:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <registerReading+0xc8>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	2232      	movs	r2, #50	; 0x32
 8001d1a:	701a      	strb	r2, [r3, #0]
	} else if (sensor_activations[sensor] > 0) {
		sensor_activations[sensor]--;
	}
}
 8001d1c:	e010      	b.n	8001d40 <registerReading+0xb8>
	} else if (sensor_activations[sensor] > 0) {
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <registerReading+0xc8>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	18d3      	adds	r3, r2, r3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <registerReading+0xb8>
		sensor_activations[sensor]--;
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <registerReading+0xc8>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	18d3      	adds	r3, r2, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b2d9      	uxtb	r1, r3
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <registerReading+0xc8>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	18d3      	adds	r3, r2, r3
 8001d3c:	1c0a      	adds	r2, r1, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20001d84 	.word	0x20001d84
 8001d4c:	20001dac 	.word	0x20001dac
 8001d50:	20001dd4 	.word	0x20001dd4

08001d54 <displaySense>:
#endif


void displaySense() {
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af02      	add	r7, sp, #8
    int extraLEDs = NUM_LEDS - NUM_SENSORS * (int) LEDS_PER_SENSOR;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	60fb      	str	r3, [r7, #12]
    int extraInterval = NUM_SENSORS / extraLEDs;
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	2028      	movs	r0, #40	; 0x28
 8001d62:	f7fe fa5b 	bl	800021c <__divsi3>
 8001d66:	0003      	movs	r3, r0
 8001d68:	60bb      	str	r3, [r7, #8]
	// Iterate through each sensor
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e056      	b.n	8001e1e <displaySense+0xca>
		uint8_t r = 0;
 8001d70:	1cfb      	adds	r3, r7, #3
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
		uint8_t g = 0;
 8001d76:	1cbb      	adds	r3, r7, #2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
		uint8_t b = 0;
 8001d7c:	1c7b      	adds	r3, r7, #1
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
		// Determine if sensor is activated by reading the correct bit in the activation bitmap
		if (sensor_activations[sensor]) {
 8001d82:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <displaySense+0xdc>)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	18d3      	adds	r3, r2, r3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00e      	beq.n	8001dac <displaySense+0x58>
			generateRGB_sense(sensor_activations[sensor], ON_TIME, 200, &r, &g, &b);
 8001d8e:	4a28      	ldr	r2, [pc, #160]	; (8001e30 <displaySense+0xdc>)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	0018      	movs	r0, r3
 8001d98:	1cfa      	adds	r2, r7, #3
 8001d9a:	1c7b      	adds	r3, r7, #1
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	1cbb      	adds	r3, r7, #2
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	0013      	movs	r3, r2
 8001da4:	22c8      	movs	r2, #200	; 0xc8
 8001da6:	2132      	movs	r1, #50	; 0x32
 8001da8:	f000 f844 	bl	8001e34 <generateRGB_sense>
		}
		int startIndex = LEDS_PER_SENSOR * sensor + sensor / extraLEDs;
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	0013      	movs	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	189c      	adds	r4, r3, r2
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7fe fa30 	bl	800021c <__divsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	18e3      	adds	r3, r4, r3
 8001dc0:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < LEDS_PER_SENSOR; i++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	e00e      	b.n	8001de6 <displaySense+0x92>
			setLED(startIndex + i, r, g, b);
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	18d3      	adds	r3, r2, r3
 8001dce:	0018      	movs	r0, r3
 8001dd0:	1cfb      	adds	r3, r7, #3
 8001dd2:	7819      	ldrb	r1, [r3, #0]
 8001dd4:	1cbb      	adds	r3, r7, #2
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	1c7b      	adds	r3, r7, #1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f7fe fc34 	bl	8000648 <setLED>
		for (int i = 0; i < LEDS_PER_SENSOR; i++) {
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	3301      	adds	r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	dded      	ble.n	8001dc8 <displaySense+0x74>
		}
		// Control an additional LED if this sensor is mapped to an extra LED
		if (sensor % extraInterval == (extraInterval - 1)) {
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7fe faf9 	bl	80003e8 <__aeabi_idivmod>
 8001df6:	000b      	movs	r3, r1
 8001df8:	001a      	movs	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d10a      	bne.n	8001e18 <displaySense+0xc4>
			setLED(startIndex + LEDS_PER_SENSOR, r, g, b);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3303      	adds	r3, #3
 8001e06:	0018      	movs	r0, r3
 8001e08:	1cfb      	adds	r3, r7, #3
 8001e0a:	7819      	ldrb	r1, [r3, #0]
 8001e0c:	1cbb      	adds	r3, r7, #2
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	1c7b      	adds	r3, r7, #1
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f7fe fc18 	bl	8000648 <setLED>
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b27      	cmp	r3, #39	; 0x27
 8001e22:	dda5      	ble.n	8001d70 <displaySense+0x1c>
		}
	}
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b007      	add	sp, #28
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	20001dd4 	.word	0x20001dd4

08001e34 <generateRGB_sense>:


void generateRGB_sense(uint32_t index, uint32_t maxIndex, uint8_t brightness, uint8_t* r, uint8_t* g, uint8_t* b)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	701a      	strb	r2, [r3, #0]
//	{
//		*b = (uint8_t) cos1;
//	}

	// Choose one of 6 colors
	uint8_t div = maxIndex / 6;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2106      	movs	r1, #6
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7fe f95d 	bl	8000108 <__udivsi3>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	001a      	movs	r2, r3
 8001e52:	2117      	movs	r1, #23
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	701a      	strb	r2, [r3, #0]
	if (index < div) {
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d20a      	bcs.n	8001e78 <generateRGB_sense+0x44>
		*r = 0;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
		*g = brightness;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	1dfa      	adds	r2, r7, #7
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
	} else {
		*r = 0;
		*g = brightness/2;
		*b = brightness/2;
	}
}
 8001e76:	e068      	b.n	8001f4a <generateRGB_sense+0x116>
	} else if (index < 2*div) {
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	001a      	movs	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d20f      	bcs.n	8001ea8 <generateRGB_sense+0x74>
		*r = brightness/2;
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
}
 8001ea6:	e050      	b.n	8001f4a <generateRGB_sense+0x116>
	} else if (index < 3*div) {
 8001ea8:	2317      	movs	r3, #23
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	0013      	movs	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d20a      	bcs.n	8001ed2 <generateRGB_sense+0x9e>
		*r = brightness;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	1dfa      	adds	r2, r7, #7
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
}
 8001ed0:	e03b      	b.n	8001f4a <generateRGB_sense+0x116>
	} else if (index < 4*div) {
 8001ed2:	2317      	movs	r3, #23
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	001a      	movs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d20f      	bcs.n	8001f02 <generateRGB_sense+0xce>
		*r = brightness/2;
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	701a      	strb	r2, [r3, #0]
}
 8001f00:	e023      	b.n	8001f4a <generateRGB_sense+0x116>
	} else if (index < 5*div) {
 8001f02:	2317      	movs	r3, #23
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	0013      	movs	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	189b      	adds	r3, r3, r2
 8001f0e:	001a      	movs	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d20a      	bcs.n	8001f2c <generateRGB_sense+0xf8>
		*r = 0;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
		*b = brightness;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	1dfa      	adds	r2, r7, #7
 8001f26:	7812      	ldrb	r2, [r2, #0]
 8001f28:	701a      	strb	r2, [r3, #0]
}
 8001f2a:	e00e      	b.n	8001f4a <generateRGB_sense+0x116>
		*r = 0;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 8001f3e:	1dfb      	adds	r3, r7, #7
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	701a      	strb	r2, [r3, #0]
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b006      	add	sp, #24
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f58:	f7ff fcf0 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	; (8001f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <LoopForever+0xe>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	; (8001fa0 <LoopForever+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f82:	f006 f9b5 	bl	80082f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f86:	f7fe fe89 	bl	8000c9c <main>

08001f8a <LoopForever>:

LoopForever:
  b LoopForever
 8001f8a:	e7fe      	b.n	8001f8a <LoopForever>
  ldr   r0, =_estack
 8001f8c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001f98:	08008480 	.word	0x08008480
  ldr r2, =_sbss
 8001f9c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001fa0:	20001e00 	.word	0x20001e00

08001fa4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_COMP_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_Init+0x3c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_Init+0x3c>)
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0049      	lsls	r1, r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 f810 	bl	8001fe8 <HAL_InitTick>
 8001fc8:	1e03      	subs	r3, r0, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001fcc:	1dfb      	adds	r3, r7, #7
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e001      	b.n	8001fd8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff f9dc 	bl	8001390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_InitTick+0x88>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02b      	beq.n	8002058 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_InitTick+0x8c>)
 8002002:	681c      	ldr	r4, [r3, #0]
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_InitTick+0x88>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	0019      	movs	r1, r3
 800200a:	23fa      	movs	r3, #250	; 0xfa
 800200c:	0098      	lsls	r0, r3, #2
 800200e:	f7fe f87b 	bl	8000108 <__udivsi3>
 8002012:	0003      	movs	r3, r0
 8002014:	0019      	movs	r1, r3
 8002016:	0020      	movs	r0, r4
 8002018:	f7fe f876 	bl	8000108 <__udivsi3>
 800201c:	0003      	movs	r3, r0
 800201e:	0018      	movs	r0, r3
 8002020:	f001 f869 	bl	80030f6 <HAL_SYSTICK_Config>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d112      	bne.n	800204e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d80a      	bhi.n	8002044 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	2301      	movs	r3, #1
 8002032:	425b      	negs	r3, r3
 8002034:	2200      	movs	r2, #0
 8002036:	0018      	movs	r0, r3
 8002038:	f001 f838 	bl	80030ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_InitTick+0x90>)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e00d      	b.n	8002060 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002044:	230f      	movs	r3, #15
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e008      	b.n	8002060 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800204e:	230f      	movs	r3, #15
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e003      	b.n	8002060 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002058:	230f      	movs	r3, #15
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	781b      	ldrb	r3, [r3, #0]
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b005      	add	sp, #20
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	20000034 	.word	0x20000034
 8002074:	20000028 	.word	0x20000028
 8002078:	20000030 	.word	0x20000030

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x1c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	001a      	movs	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	18d2      	adds	r2, r2, r3
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_IncTick+0x20>)
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	20000034 	.word	0x20000034
 800209c:	20001dfc 	.word	0x20001dfc

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_GetTick+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	20001dfc 	.word	0x20001dfc

080020b4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40010000 	.word	0x40010000
 80020dc:	fffff9ff 	.word	0xfffff9ff

080020e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80020f0:	401a      	ands	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	fe3fffff 	.word	0xfe3fffff

08002108 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	23e0      	movs	r3, #224	; 0xe0
 8002116:	045b      	lsls	r3, r3, #17
 8002118:	4013      	ands	r3, r2
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	2104      	movs	r1, #4
 8002136:	400a      	ands	r2, r1
 8002138:	2107      	movs	r1, #7
 800213a:	4091      	lsls	r1, r2
 800213c:	000a      	movs	r2, r1
 800213e:	43d2      	mvns	r2, r2
 8002140:	401a      	ands	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2104      	movs	r1, #4
 8002146:	400b      	ands	r3, r1
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4099      	lsls	r1, r3
 800214c:	000b      	movs	r3, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b004      	add	sp, #16
 800215a:	bd80      	pop	{r7, pc}

0800215c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	2104      	movs	r1, #4
 800216e:	400a      	ands	r2, r1
 8002170:	2107      	movs	r1, #7
 8002172:	4091      	lsls	r1, r2
 8002174:	000a      	movs	r2, r1
 8002176:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2104      	movs	r1, #4
 800217c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800217e:	40da      	lsrs	r2, r3
 8002180:	0013      	movs	r3, r2
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}

0800218a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	23c0      	movs	r3, #192	; 0xc0
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4013      	ands	r3, r2
 800219c:	d101      	bne.n	80021a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	211f      	movs	r1, #31
 80021c0:	400a      	ands	r2, r1
 80021c2:	210f      	movs	r1, #15
 80021c4:	4091      	lsls	r1, r2
 80021c6:	000a      	movs	r2, r1
 80021c8:	43d2      	mvns	r2, r2
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0e9b      	lsrs	r3, r3, #26
 80021d0:	210f      	movs	r1, #15
 80021d2:	4019      	ands	r1, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	201f      	movs	r0, #31
 80021d8:	4003      	ands	r3, r0
 80021da:	4099      	lsls	r1, r3
 80021dc:	000b      	movs	r3, r1
 80021de:	431a      	orrs	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}

080021ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	035b      	lsls	r3, r3, #13
 80021fe:	0b5b      	lsrs	r3, r3, #13
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}

0800220e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	0352      	lsls	r2, r2, #13
 8002220:	0b52      	lsrs	r2, r2, #13
 8002222:	43d2      	mvns	r2, r2
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b002      	add	sp, #8
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	0212      	lsls	r2, r2, #8
 8002248:	43d2      	mvns	r2, r2
 800224a:	401a      	ands	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	400b      	ands	r3, r1
 8002254:	4904      	ldr	r1, [pc, #16]	; (8002268 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002256:	400b      	ands	r3, r1
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b004      	add	sp, #16
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	07ffff00 	.word	0x07ffff00

0800226c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a05      	ldr	r2, [pc, #20]	; (8002290 <LL_ADC_EnableInternalRegulator+0x24>)
 800227a:	4013      	ands	r3, r2
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	0552      	lsls	r2, r2, #21
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	6fffffe8 	.word	0x6fffffe8

08002294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	055b      	lsls	r3, r3, #21
 80022a4:	401a      	ands	r2, r3
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	055b      	lsls	r3, r3, #21
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <LL_ADC_Enable+0x20>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	2201      	movs	r2, #1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	7fffffe8 	.word	0x7fffffe8

080022e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <LL_ADC_Disable+0x20>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	2202      	movs	r2, #2
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	7fffffe8 	.word	0x7fffffe8

08002304 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2201      	movs	r2, #1
 8002312:	4013      	ands	r3, r2
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <LL_ADC_IsEnabled+0x18>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <LL_ADC_IsEnabled+0x1a>
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}

08002326 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d101      	bne.n	800233e <LL_ADC_IsDisableOngoing+0x18>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_ADC_IsDisableOngoing+0x1a>
 800233e:	2300      	movs	r3, #0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <LL_ADC_REG_StartConversion+0x20>)
 8002356:	4013      	ands	r3, r2
 8002358:	2204      	movs	r2, #4
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}
 8002368:	7fffffe8 	.word	0x7fffffe8

0800236c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <LL_ADC_REG_StopConversion+0x20>)
 800237a:	4013      	ands	r3, r2
 800237c:	2210      	movs	r2, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}
 800238c:	7fffffe8 	.word	0x7fffffe8

08002390 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2204      	movs	r2, #4
 800239e:	4013      	ands	r3, r2
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d101      	bne.n	80023a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023bc:	231f      	movs	r3, #31
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e17f      	b.n	80026da <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe fffb 	bl	80013e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2254      	movs	r2, #84	; 0x54
 80023f4:	2100      	movs	r1, #0
 80023f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff ff49 	bl	8002294 <LL_ADC_IsInternalRegulatorEnabled>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d115      	bne.n	8002432 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff ff2e 	bl	800226c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002410:	4bb4      	ldr	r3, [pc, #720]	; (80026e4 <HAL_ADC_Init+0x330>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	49b4      	ldr	r1, [pc, #720]	; (80026e8 <HAL_ADC_Init+0x334>)
 8002416:	0018      	movs	r0, r3
 8002418:	f7fd fe76 	bl	8000108 <__udivsi3>
 800241c:	0003      	movs	r3, r0
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002424:	e002      	b.n	800242c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3b01      	subs	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff2c 	bl	8002294 <LL_ADC_IsInternalRegulatorEnabled>
 800243c:	1e03      	subs	r3, r0, #0
 800243e:	d10f      	bne.n	8002460 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	2210      	movs	r2, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2201      	movs	r2, #1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002458:	231f      	movs	r3, #31
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff ff93 	bl	8002390 <LL_ADC_REG_IsConversionOngoing>
 800246a:	0003      	movs	r3, r0
 800246c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	2210      	movs	r2, #16
 8002474:	4013      	ands	r3, r2
 8002476:	d000      	beq.n	800247a <HAL_ADC_Init+0xc6>
 8002478:	e122      	b.n	80026c0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d000      	beq.n	8002482 <HAL_ADC_Init+0xce>
 8002480:	e11e      	b.n	80026c0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4a99      	ldr	r2, [pc, #612]	; (80026ec <HAL_ADC_Init+0x338>)
 8002488:	4013      	ands	r3, r2
 800248a:	2202      	movs	r2, #2
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff ff34 	bl	8002304 <LL_ADC_IsEnabled>
 800249c:	1e03      	subs	r3, r0, #0
 800249e:	d000      	beq.n	80024a2 <HAL_ADC_Init+0xee>
 80024a0:	e0ad      	b.n	80025fe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7e1b      	ldrb	r3, [r3, #24]
 80024aa:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80024ac:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e5b      	ldrb	r3, [r3, #25]
 80024b2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024b4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7e9b      	ldrb	r3, [r3, #26]
 80024ba:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024bc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_ADC_Init+0x118>
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	015b      	lsls	r3, r3, #5
 80024ca:	e000      	b.n	80024ce <HAL_ADC_Init+0x11a>
 80024cc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024ce:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024d4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	da04      	bge.n	80024e8 <HAL_ADC_Init+0x134>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	e001      	b.n	80024ec <HAL_ADC_Init+0x138>
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80024ec:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	5c5b      	ldrb	r3, [r3, r1]
 80024f4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024f6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d115      	bne.n	8002534 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e9b      	ldrb	r3, [r3, #26]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	0252      	lsls	r2, r2, #9
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	e00b      	b.n	8002534 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	2220      	movs	r2, #32
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	2201      	movs	r2, #1
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002540:	23e0      	movs	r3, #224	; 0xe0
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800254a:	4313      	orrs	r3, r2
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <HAL_ADC_Init+0x33c>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	0f9b      	lsrs	r3, r3, #30
 800256e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002574:	4313      	orrs	r3, r2
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	223c      	movs	r2, #60	; 0x3c
 8002580:	5c9b      	ldrb	r3, [r3, r2]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d111      	bne.n	80025aa <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0f9b      	lsrs	r3, r3, #30
 800258c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002592:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002598:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800259e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	2201      	movs	r2, #1
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	4a50      	ldr	r2, [pc, #320]	; (80026f4 <HAL_ADC_Init+0x340>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	430a      	orrs	r2, r1
 80025be:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d018      	beq.n	80025fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	05db      	lsls	r3, r3, #23
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d012      	beq.n	80025fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d00c      	beq.n	80025fe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80025e4:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <HAL_ADC_Init+0x344>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a44      	ldr	r2, [pc, #272]	; (80026fc <HAL_ADC_Init+0x348>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	23f0      	movs	r3, #240	; 0xf0
 80025f4:	039b      	lsls	r3, r3, #14
 80025f6:	401a      	ands	r2, r3
 80025f8:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_ADC_Init+0x344>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	001a      	movs	r2, r3
 8002608:	2100      	movs	r1, #0
 800260a:	f7ff fd8a 	bl	8002122 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	493a      	ldr	r1, [pc, #232]	; (8002700 <HAL_ADC_Init+0x34c>)
 8002618:	001a      	movs	r2, r3
 800261a:	f7ff fd82 	bl	8002122 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2110      	movs	r1, #16
 8002632:	4249      	negs	r1, r1
 8002634:	430a      	orrs	r2, r1
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
 8002638:	e018      	b.n	800266c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	039b      	lsls	r3, r3, #14
 8002642:	429a      	cmp	r2, r3
 8002644:	d112      	bne.n	800266c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	3b01      	subs	r3, #1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	221c      	movs	r2, #28
 8002656:	4013      	ands	r3, r2
 8002658:	2210      	movs	r2, #16
 800265a:	4252      	negs	r2, r2
 800265c:	409a      	lsls	r2, r3
 800265e:	0011      	movs	r1, r2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2100      	movs	r1, #0
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff fd72 	bl	800215c <LL_ADC_GetSamplingTimeCommonChannels>
 8002678:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800267e:	429a      	cmp	r2, r3
 8002680:	d10b      	bne.n	800269a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	2203      	movs	r2, #3
 800268e:	4393      	bics	r3, r2
 8002690:	2201      	movs	r2, #1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002698:	e01c      	b.n	80026d4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	2212      	movs	r2, #18
 80026a0:	4393      	bics	r3, r2
 80026a2:	2210      	movs	r2, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2201      	movs	r2, #1
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80026b6:	231f      	movs	r3, #31
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026be:	e009      	b.n	80026d4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	2210      	movs	r2, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80026d4:	231f      	movs	r3, #31
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	781b      	ldrb	r3, [r3, #0]
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b008      	add	sp, #32
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	20000028 	.word	0x20000028
 80026e8:	00030d40 	.word	0x00030d40
 80026ec:	fffffefd 	.word	0xfffffefd
 80026f0:	fffe0201 	.word	0xfffe0201
 80026f4:	1ffffc02 	.word	0x1ffffc02
 80026f8:	40012708 	.word	0x40012708
 80026fc:	ffc3ffff 	.word	0xffc3ffff
 8002700:	07ffff04 	.word	0x07ffff04

08002704 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0018      	movs	r0, r3
 8002712:	f7ff fe3d 	bl	8002390 <LL_ADC_REG_IsConversionOngoing>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d135      	bne.n	8002786 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2254      	movs	r2, #84	; 0x54
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_ADC_Start+0x24>
 8002724:	2302      	movs	r3, #2
 8002726:	e035      	b.n	8002794 <HAL_ADC_Start+0x90>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2254      	movs	r2, #84	; 0x54
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002730:	250f      	movs	r5, #15
 8002732:	197c      	adds	r4, r7, r5
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fb28 	bl	8002d8c <ADC_Enable>
 800273c:	0003      	movs	r3, r0
 800273e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002740:	197b      	adds	r3, r7, r5
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d119      	bne.n	800277c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_ADC_Start+0x98>)
 800274e:	4013      	ands	r3, r2
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	0052      	lsls	r2, r2, #1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	221c      	movs	r2, #28
 8002766:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2254      	movs	r2, #84	; 0x54
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff fde7 	bl	8002348 <LL_ADC_REG_StartConversion>
 800277a:	e008      	b.n	800278e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2254      	movs	r2, #84	; 0x54
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]
 8002784:	e003      	b.n	800278e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002786:	230f      	movs	r3, #15
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2202      	movs	r2, #2
 800278c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800278e:	230f      	movs	r3, #15
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b004      	add	sp, #16
 800279a:	bdb0      	pop	{r4, r5, r7, pc}
 800279c:	fffff0fe 	.word	0xfffff0fe

080027a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2254      	movs	r2, #84	; 0x54
 80027ac:	5c9b      	ldrb	r3, [r3, r2]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Stop+0x16>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e029      	b.n	800280a <HAL_ADC_Stop+0x6a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2254      	movs	r2, #84	; 0x54
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80027be:	250f      	movs	r5, #15
 80027c0:	197c      	adds	r4, r7, r5
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fa9f 	bl	8002d08 <ADC_ConversionStop>
 80027ca:	0003      	movs	r3, r0
 80027cc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027ce:	197b      	adds	r3, r7, r5
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d112      	bne.n	80027fc <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027d6:	197c      	adds	r4, r7, r5
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fb5c 	bl	8002e98 <ADC_Disable>
 80027e0:	0003      	movs	r3, r0
 80027e2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027e4:	197b      	adds	r3, r7, r5
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_ADC_Stop+0x74>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	2201      	movs	r2, #1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2254      	movs	r2, #84	; 0x54
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002804:	230f      	movs	r3, #15
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bdb0      	pop	{r4, r5, r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	fffffefe 	.word	0xfffffefe

08002818 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d102      	bne.n	8002830 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800282a:	2308      	movs	r3, #8
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e00f      	b.n	8002850 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d007      	beq.n	800284c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	2220      	movs	r2, #32
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e072      	b.n	8002932 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800284c:	2304      	movs	r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002850:	f7ff fc26 	bl	80020a0 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002858:	e01f      	b.n	800289a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	d01c      	beq.n	800289a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002860:	f7ff fc1e 	bl	80020a0 <HAL_GetTick>
 8002864:	0002      	movs	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <HAL_ADC_PollForConversion+0x5e>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d111      	bne.n	800289a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	d10b      	bne.n	800289a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	2204      	movs	r2, #4
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2254      	movs	r2, #84	; 0x54
 8002892:	2100      	movs	r1, #0
 8002894:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e04b      	b.n	8002932 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	d0d9      	beq.n	800285a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff fc66 	bl	800218a <LL_ADC_REG_IsTriggerSourceSWStart>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d02e      	beq.n	8002920 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7e9b      	ldrb	r3, [r3, #26]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d12a      	bne.n	8002920 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d123      	bne.n	8002920 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff fd57 	bl	8002390 <LL_ADC_REG_IsConversionOngoing>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d110      	bne.n	8002908 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	210c      	movs	r1, #12
 80028f2:	438a      	bics	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_ADC_PollForConversion+0x124>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	2201      	movs	r2, #1
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	659a      	str	r2, [r3, #88]	; 0x58
 8002906:	e00b      	b.n	8002920 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	2220      	movs	r2, #32
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2201      	movs	r2, #1
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7e1b      	ldrb	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	220c      	movs	r2, #12
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b004      	add	sp, #16
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	fffffefe 	.word	0xfffffefe

08002940 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002962:	2317      	movs	r3, #23
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2254      	movs	r2, #84	; 0x54
 8002972:	5c9b      	ldrb	r3, [r3, r2]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x24>
 8002978:	2302      	movs	r3, #2
 800297a:	e1c0      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x3a6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2254      	movs	r2, #84	; 0x54
 8002980:	2101      	movs	r1, #1
 8002982:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff fd01 	bl	8002390 <LL_ADC_REG_IsConversionOngoing>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d000      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x3c>
 8002992:	e1a3      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d100      	bne.n	800299e <HAL_ADC_ConfigChannel+0x46>
 800299c:	e143      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029ae:	4ac1      	ldr	r2, [pc, #772]	; (8002cb4 <HAL_ADC_ConfigChannel+0x35c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d108      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0019      	movs	r1, r3
 80029be:	0010      	movs	r0, r2
 80029c0:	f7ff fc14 	bl	80021ec <LL_ADC_REG_SetSequencerChAdd>
 80029c4:	e0c9      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	211f      	movs	r1, #31
 80029d0:	400b      	ands	r3, r1
 80029d2:	210f      	movs	r1, #15
 80029d4:	4099      	lsls	r1, r3
 80029d6:	000b      	movs	r3, r1
 80029d8:	43db      	mvns	r3, r3
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	035b      	lsls	r3, r3, #13
 80029e4:	0b5b      	lsrs	r3, r3, #13
 80029e6:	d105      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x9c>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	221f      	movs	r2, #31
 80029f0:	4013      	ands	r3, r2
 80029f2:	e098      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2201      	movs	r2, #1
 80029fa:	4013      	ands	r3, r2
 80029fc:	d000      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0xa8>
 80029fe:	e091      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x1cc>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d000      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0xb4>
 8002a0a:	e089      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x1c8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2204      	movs	r2, #4
 8002a12:	4013      	ands	r3, r2
 8002a14:	d000      	beq.n	8002a18 <HAL_ADC_ConfigChannel+0xc0>
 8002a16:	e081      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1c4>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d000      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0xcc>
 8002a22:	e079      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1c0>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d000      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0xd8>
 8002a2e:	e071      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1bc>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2220      	movs	r2, #32
 8002a36:	4013      	ands	r3, r2
 8002a38:	d000      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0xe4>
 8002a3a:	e069      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x1b8>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	4013      	ands	r3, r2
 8002a44:	d000      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0xf0>
 8002a46:	e061      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x1b4>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d000      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0xfc>
 8002a52:	e059      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x1b0>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d151      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1ac>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d149      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1a8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4013      	ands	r3, r2
 8002a76:	d141      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1a4>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	4013      	ands	r3, r2
 8002a82:	d139      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1a0>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	015b      	lsls	r3, r3, #5
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d131      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x19c>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	019b      	lsls	r3, r3, #6
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d129      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x198>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	01db      	lsls	r3, r3, #7
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d121      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x194>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d119      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x190>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	025b      	lsls	r3, r3, #9
 8002abc:	4013      	ands	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x18c>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d109      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x188>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	02db      	lsls	r3, r3, #11
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d001      	beq.n	8002adc <HAL_ADC_ConfigChannel+0x184>
 8002ad8:	2312      	movs	r3, #18
 8002ada:	e024      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002adc:	2300      	movs	r3, #0
 8002ade:	e022      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002ae0:	2311      	movs	r3, #17
 8002ae2:	e020      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	e01e      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002ae8:	230f      	movs	r3, #15
 8002aea:	e01c      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002aec:	230e      	movs	r3, #14
 8002aee:	e01a      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002af0:	230d      	movs	r3, #13
 8002af2:	e018      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002af4:	230c      	movs	r3, #12
 8002af6:	e016      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002af8:	230b      	movs	r3, #11
 8002afa:	e014      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002afc:	230a      	movs	r3, #10
 8002afe:	e012      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b00:	2309      	movs	r3, #9
 8002b02:	e010      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b04:	2308      	movs	r3, #8
 8002b06:	e00e      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b08:	2307      	movs	r3, #7
 8002b0a:	e00c      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b0c:	2306      	movs	r3, #6
 8002b0e:	e00a      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b10:	2305      	movs	r3, #5
 8002b12:	e008      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b14:	2304      	movs	r3, #4
 8002b16:	e006      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e004      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e002      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1ce>
 8002b24:	2300      	movs	r3, #0
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	6852      	ldr	r2, [r2, #4]
 8002b2a:	201f      	movs	r0, #31
 8002b2c:	4002      	ands	r2, r0
 8002b2e:	4093      	lsls	r3, r2
 8002b30:	000a      	movs	r2, r1
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d808      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	001a      	movs	r2, r3
 8002b56:	f7ff fb29 	bl	80021ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	001a      	movs	r2, r3
 8002b68:	f7ff fb64 	bl	8002234 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db00      	blt.n	8002b76 <HAL_ADC_ConfigChannel+0x21e>
 8002b74:	e0bc      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b76:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fac5 	bl	8002108 <LL_ADC_GetCommonPathInternalCh>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_ADC_ConfigChannel+0x364>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d122      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b94:	d11d      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	0412      	lsls	r2, r2, #16
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	f7ff fa9c 	bl	80020e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba8:	4b45      	ldr	r3, [pc, #276]	; (8002cc0 <HAL_ADC_ConfigChannel+0x368>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4945      	ldr	r1, [pc, #276]	; (8002cc4 <HAL_ADC_ConfigChannel+0x36c>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7fd faaa 	bl	8000108 <__udivsi3>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	0013      	movs	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	189b      	adds	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bd0:	e08e      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <HAL_ADC_ConfigChannel+0x370>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10e      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x2a2>
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	045b      	lsls	r3, r3, #17
 8002be2:	4013      	ands	r3, r2
 8002be4:	d109      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	0452      	lsls	r2, r2, #17
 8002bec:	4313      	orrs	r3, r2
 8002bee:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	0010      	movs	r0, r2
 8002bf4:	f7ff fa74 	bl	80020e0 <LL_ADC_SetCommonPathInternalCh>
 8002bf8:	e07a      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <HAL_ADC_ConfigChannel+0x374>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d000      	beq.n	8002c06 <HAL_ADC_ConfigChannel+0x2ae>
 8002c04:	e074      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	03db      	lsls	r3, r3, #15
 8002c0c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c0e:	d000      	beq.n	8002c12 <HAL_ADC_ConfigChannel+0x2ba>
 8002c10:	e06e      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	03d2      	lsls	r2, r2, #15
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	0010      	movs	r0, r2
 8002c20:	f7ff fa5e 	bl	80020e0 <LL_ADC_SetCommonPathInternalCh>
 8002c24:	e064      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d004      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c36:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_ADC_ConfigChannel+0x35c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d107      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0019      	movs	r1, r3
 8002c46:	0010      	movs	r0, r2
 8002c48:	f7ff fae1 	bl	800220e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da4d      	bge.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f7ff fa56 	bl	8002108 <LL_ADC_GetCommonPathInternalCh>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_ADC_ConfigChannel+0x364>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d108      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_ADC_ConfigChannel+0x378>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f7ff fa33 	bl	80020e0 <LL_ADC_SetCommonPathInternalCh>
 8002c7a:	e039      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_ADC_ConfigChannel+0x370>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <HAL_ADC_ConfigChannel+0x37c>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002c8e:	0019      	movs	r1, r3
 8002c90:	0010      	movs	r0, r2
 8002c92:	f7ff fa25 	bl	80020e0 <LL_ADC_SetCommonPathInternalCh>
 8002c96:	e02b      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_ADC_ConfigChannel+0x374>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d126      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <HAL_ADC_ConfigChannel+0x380>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_ADC_ConfigChannel+0x360>)
 8002caa:	0019      	movs	r1, r3
 8002cac:	0010      	movs	r0, r2
 8002cae:	f7ff fa17 	bl	80020e0 <LL_ADC_SetCommonPathInternalCh>
 8002cb2:	e01d      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x398>
 8002cb4:	80000004 	.word	0x80000004
 8002cb8:	40012708 	.word	0x40012708
 8002cbc:	b0001000 	.word	0xb0001000
 8002cc0:	20000028 	.word	0x20000028
 8002cc4:	00030d40 	.word	0x00030d40
 8002cc8:	b8004000 	.word	0xb8004000
 8002ccc:	b4002000 	.word	0xb4002000
 8002cd0:	ff7fffff 	.word	0xff7fffff
 8002cd4:	feffffff 	.word	0xfeffffff
 8002cd8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ce8:	2317      	movs	r3, #23
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2254      	movs	r2, #84	; 0x54
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002cf8:	2317      	movs	r3, #23
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	781b      	ldrb	r3, [r3, #0]
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b006      	add	sp, #24
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)

08002d08 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff fb3b 	bl	8002390 <LL_ADC_REG_IsConversionOngoing>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d031      	beq.n	8002d82 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff faff 	bl	8002326 <LL_ADC_IsDisableOngoing>
 8002d28:	1e03      	subs	r3, r0, #0
 8002d2a:	d104      	bne.n	8002d36 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff fb1b 	bl	800236c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d36:	f7ff f9b3 	bl	80020a0 <HAL_GetTick>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d3e:	e01a      	b.n	8002d76 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d40:	f7ff f9ae 	bl	80020a0 <HAL_GetTick>
 8002d44:	0002      	movs	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d913      	bls.n	8002d76 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2204      	movs	r2, #4
 8002d56:	4013      	ands	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	2210      	movs	r2, #16
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e006      	b.n	8002d84 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d1de      	bne.n	8002d40 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b004      	add	sp, #16
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff fab1 	bl	8002304 <LL_ADC_IsEnabled>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d000      	beq.n	8002da8 <ADC_Enable+0x1c>
 8002da6:	e069      	b.n	8002e7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4a36      	ldr	r2, [pc, #216]	; (8002e88 <ADC_Enable+0xfc>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	d00d      	beq.n	8002dd0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	2210      	movs	r2, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e056      	b.n	8002e7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff fa71 	bl	80022bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <ADC_Enable+0x100>)
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff f993 	bl	8002108 <LL_ADC_GetCommonPathInternalCh>
 8002de2:	0002      	movs	r2, r0
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	4013      	ands	r3, r2
 8002dea:	d00f      	beq.n	8002e0c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <ADC_Enable+0x104>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4928      	ldr	r1, [pc, #160]	; (8002e94 <ADC_Enable+0x108>)
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7fd f988 	bl	8000108 <__udivsi3>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dfe:	e002      	b.n	8002e06 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f9      	bne.n	8002e00 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7e5b      	ldrb	r3, [r3, #25]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d033      	beq.n	8002e7c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e14:	f7ff f944 	bl	80020a0 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e1c:	e027      	b.n	8002e6e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff fa6e 	bl	8002304 <LL_ADC_IsEnabled>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d104      	bne.n	8002e36 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fa43 	bl	80022bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e36:	f7ff f933 	bl	80020a0 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d914      	bls.n	8002e6e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00d      	beq.n	8002e6e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	2210      	movs	r2, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2201      	movs	r2, #1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d1d0      	bne.n	8002e1e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	80000017 	.word	0x80000017
 8002e8c:	40012708 	.word	0x40012708
 8002e90:	20000028 	.word	0x20000028
 8002e94:	00030d40 	.word	0x00030d40

08002e98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff fa3e 	bl	8002326 <LL_ADC_IsDisableOngoing>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff fa26 	bl	8002304 <LL_ADC_IsEnabled>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d046      	beq.n	8002f4a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d143      	bne.n	8002f4a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2205      	movs	r2, #5
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10d      	bne.n	8002eec <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff fa03 	bl	80022e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ee2:	f7ff f8dd 	bl	80020a0 <HAL_GetTick>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eea:	e028      	b.n	8002f3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2201      	movs	r2, #1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e021      	b.n	8002f4c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f08:	f7ff f8ca 	bl	80020a0 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d913      	bls.n	8002f3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	2210      	movs	r2, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	2201      	movs	r2, #1
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e006      	b.n	8002f4c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d1de      	bne.n	8002f08 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b004      	add	sp, #16
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	1dfb      	adds	r3, r7, #7
 8002f5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	1dfb      	adds	r3, r7, #7
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b7f      	cmp	r3, #127	; 0x7f
 8002f66:	d809      	bhi.n	8002f7c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	231f      	movs	r3, #31
 8002f70:	401a      	ands	r2, r3
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <__NVIC_EnableIRQ+0x30>)
 8002f74:	2101      	movs	r1, #1
 8002f76:	4091      	lsls	r1, r2
 8002f78:	000a      	movs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	0002      	movs	r2, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f9c:	d828      	bhi.n	8002ff0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f9e:	4a2f      	ldr	r2, [pc, #188]	; (800305c <__NVIC_SetPriority+0xd4>)
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b25b      	sxtb	r3, r3
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	33c0      	adds	r3, #192	; 0xc0
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	589b      	ldr	r3, [r3, r2]
 8002fae:	1dfa      	adds	r2, r7, #7
 8002fb0:	7812      	ldrb	r2, [r2, #0]
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	00d2      	lsls	r2, r2, #3
 8002fba:	21ff      	movs	r1, #255	; 0xff
 8002fbc:	4091      	lsls	r1, r2
 8002fbe:	000a      	movs	r2, r1
 8002fc0:	43d2      	mvns	r2, r2
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	401a      	ands	r2, r3
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	4003      	ands	r3, r0
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fdc:	481f      	ldr	r0, [pc, #124]	; (800305c <__NVIC_SetPriority+0xd4>)
 8002fde:	1dfb      	adds	r3, r7, #7
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	33c0      	adds	r3, #192	; 0xc0
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fee:	e031      	b.n	8003054 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <__NVIC_SetPriority+0xd8>)
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	230f      	movs	r3, #15
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	3b08      	subs	r3, #8
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	3306      	adds	r3, #6
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	18d3      	adds	r3, r2, r3
 8003006:	3304      	adds	r3, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1dfa      	adds	r2, r7, #7
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	0011      	movs	r1, r2
 8003010:	2203      	movs	r2, #3
 8003012:	400a      	ands	r2, r1
 8003014:	00d2      	lsls	r2, r2, #3
 8003016:	21ff      	movs	r1, #255	; 0xff
 8003018:	4091      	lsls	r1, r2
 800301a:	000a      	movs	r2, r1
 800301c:	43d2      	mvns	r2, r2
 800301e:	401a      	ands	r2, r3
 8003020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	22ff      	movs	r2, #255	; 0xff
 8003028:	401a      	ands	r2, r3
 800302a:	1dfb      	adds	r3, r7, #7
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	0018      	movs	r0, r3
 8003030:	2303      	movs	r3, #3
 8003032:	4003      	ands	r3, r0
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003038:	4809      	ldr	r0, [pc, #36]	; (8003060 <__NVIC_SetPriority+0xd8>)
 800303a:	1dfb      	adds	r3, r7, #7
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	001c      	movs	r4, r3
 8003040:	230f      	movs	r3, #15
 8003042:	4023      	ands	r3, r4
 8003044:	3b08      	subs	r3, #8
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	430a      	orrs	r2, r1
 800304a:	3306      	adds	r3, #6
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	18c3      	adds	r3, r0, r3
 8003050:	3304      	adds	r3, #4
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b003      	add	sp, #12
 800305a:	bd90      	pop	{r4, r7, pc}
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1e5a      	subs	r2, r3, #1
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	045b      	lsls	r3, r3, #17
 8003074:	429a      	cmp	r2, r3
 8003076:	d301      	bcc.n	800307c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003078:	2301      	movs	r3, #1
 800307a:	e010      	b.n	800309e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <SysTick_Config+0x44>)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	3a01      	subs	r2, #1
 8003082:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003084:	2301      	movs	r3, #1
 8003086:	425b      	negs	r3, r3
 8003088:	2103      	movs	r1, #3
 800308a:	0018      	movs	r0, r3
 800308c:	f7ff ff7c 	bl	8002f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <SysTick_Config+0x44>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <SysTick_Config+0x44>)
 8003098:	2207      	movs	r2, #7
 800309a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800309c:	2300      	movs	r3, #0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	e000e010 	.word	0xe000e010

080030ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	210f      	movs	r1, #15
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	1c02      	adds	r2, r0, #0
 80030bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b25b      	sxtb	r3, r3
 80030c6:	0011      	movs	r1, r2
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff ff5d 	bl	8002f88 <__NVIC_SetPriority>
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b004      	add	sp, #16
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	0002      	movs	r2, r0
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e2:	1dfb      	adds	r3, r7, #7
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff ff33 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff ffaf 	bl	8003064 <SysTick_Config>
 8003106:	0003      	movs	r3, r0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e077      	b.n	8003212 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3d      	ldr	r2, [pc, #244]	; (800321c <HAL_DMA_Init+0x10c>)
 8003128:	4694      	mov	ip, r2
 800312a:	4463      	add	r3, ip
 800312c:	2114      	movs	r1, #20
 800312e:	0018      	movs	r0, r3
 8003130:	f7fc ffea 	bl	8000108 <__udivsi3>
 8003134:	0003      	movs	r3, r0
 8003136:	009a      	lsls	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2225      	movs	r2, #37	; 0x25
 8003140:	2102      	movs	r1, #2
 8003142:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4934      	ldr	r1, [pc, #208]	; (8003220 <HAL_DMA_Init+0x110>)
 8003150:	400a      	ands	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 fa8d 	bl	80036ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	01db      	lsls	r3, r3, #7
 800319a:	429a      	cmp	r2, r3
 800319c:	d102      	bne.n	80031a4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	213f      	movs	r1, #63	; 0x3f
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d011      	beq.n	80031e8 <HAL_DMA_Init+0xd8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d80d      	bhi.n	80031e8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 fa98 	bl	8003704 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e008      	b.n	80031fa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2225      	movs	r2, #37	; 0x25
 8003204:	2101      	movs	r1, #1
 8003206:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	bffdfff8 	.word	0xbffdfff8
 8003220:	ffff800f 	.word	0xffff800f

08003224 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2317      	movs	r3, #23
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2224      	movs	r2, #36	; 0x24
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_DMA_Start_IT+0x24>
 8003244:	2302      	movs	r3, #2
 8003246:	e06f      	b.n	8003328 <HAL_DMA_Start_IT+0x104>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2225      	movs	r2, #37	; 0x25
 8003254:	5c9b      	ldrb	r3, [r3, r2]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d157      	bne.n	800330c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2225      	movs	r2, #37	; 0x25
 8003260:	2102      	movs	r1, #2
 8003262:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	438a      	bics	r2, r1
 8003278:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f9d3 	bl	800362c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	210e      	movs	r1, #14
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e00f      	b.n	80032c0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2104      	movs	r1, #4
 80032ac:	438a      	bics	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	210a      	movs	r1, #10
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	025b      	lsls	r3, r3, #9
 80032ca:	4013      	ands	r3, r2
 80032cc:	d008      	beq.n	80032e0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	0049      	lsls	r1, r1, #1
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	0049      	lsls	r1, r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e00a      	b.n	8003322 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2224      	movs	r2, #36	; 0x24
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800331a:	2317      	movs	r3, #23
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003322:	2317      	movs	r3, #23
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b006      	add	sp, #24
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e050      	b.n	80033e4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2225      	movs	r2, #37	; 0x25
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d008      	beq.n	8003360 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2204      	movs	r2, #4
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e041      	b.n	80033e4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	210e      	movs	r1, #14
 800336c:	438a      	bics	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	491c      	ldr	r1, [pc, #112]	; (80033ec <HAL_DMA_Abort+0xbc>)
 800337c:	400a      	ands	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2101      	movs	r1, #1
 800338c:	438a      	bics	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003390:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_DMA_Abort+0xc0>)
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	221c      	movs	r2, #28
 800339a:	4013      	ands	r3, r2
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_DMA_Abort+0xc0>)
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00c      	beq.n	80033d2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	490a      	ldr	r1, [pc, #40]	; (80033ec <HAL_DMA_Abort+0xbc>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2225      	movs	r2, #37	; 0x25
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2224      	movs	r2, #36	; 0x24
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	fffffeff 	.word	0xfffffeff
 80033f0:	40020000 	.word	0x40020000

080033f4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033fc:	210f      	movs	r1, #15
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2225      	movs	r2, #37	; 0x25
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d006      	beq.n	800341e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2204      	movs	r2, #4
 8003414:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e049      	b.n	80034b2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	210e      	movs	r1, #14
 800342a:	438a      	bics	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	438a      	bics	r2, r1
 800343c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	491d      	ldr	r1, [pc, #116]	; (80034c0 <HAL_DMA_Abort_IT+0xcc>)
 800344a:	400a      	ands	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_DMA_Abort_IT+0xd0>)
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	221c      	movs	r2, #28
 8003458:	4013      	ands	r3, r2
 800345a:	2201      	movs	r2, #1
 800345c:	409a      	lsls	r2, r3
 800345e:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_DMA_Abort_IT+0xd0>)
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800346c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	490f      	ldr	r1, [pc, #60]	; (80034c0 <HAL_DMA_Abort_IT+0xcc>)
 8003482:	400a      	ands	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800348e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2225      	movs	r2, #37	; 0x25
 8003494:	2101      	movs	r1, #1
 8003496:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	; 0x24
 800349c:	2100      	movs	r1, #0
 800349e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	0010      	movs	r0, r2
 80034b0:	4798      	blx	r3
    }
  }
  return status;
 80034b2:	230f      	movs	r3, #15
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	781b      	ldrb	r3, [r3, #0]
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	fffffeff 	.word	0xfffffeff
 80034c4:	40020000 	.word	0x40020000

080034c8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80034d0:	4b55      	ldr	r3, [pc, #340]	; (8003628 <HAL_DMA_IRQHandler+0x160>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	221c      	movs	r2, #28
 80034e4:	4013      	ands	r3, r2
 80034e6:	2204      	movs	r2, #4
 80034e8:	409a      	lsls	r2, r3
 80034ea:	0013      	movs	r3, r2
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_DMA_IRQHandler+0x7a>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2204      	movs	r2, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	d023      	beq.n	8003542 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2220      	movs	r2, #32
 8003502:	4013      	ands	r3, r2
 8003504:	d107      	bne.n	8003516 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2104      	movs	r1, #4
 8003512:	438a      	bics	r2, r1
 8003514:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003516:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_DMA_IRQHandler+0x160>)
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	221c      	movs	r2, #28
 8003520:	4013      	ands	r3, r2
 8003522:	2204      	movs	r2, #4
 8003524:	409a      	lsls	r2, r3
 8003526:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_DMA_IRQHandler+0x160>)
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	2b00      	cmp	r3, #0
 8003532:	d100      	bne.n	8003536 <HAL_DMA_IRQHandler+0x6e>
 8003534:	e073      	b.n	800361e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	0010      	movs	r0, r2
 800353e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003540:	e06d      	b.n	800361e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	221c      	movs	r2, #28
 8003548:	4013      	ands	r3, r2
 800354a:	2202      	movs	r2, #2
 800354c:	409a      	lsls	r2, r3
 800354e:	0013      	movs	r3, r2
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	d02e      	beq.n	80035b4 <HAL_DMA_IRQHandler+0xec>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2202      	movs	r2, #2
 800355a:	4013      	ands	r3, r2
 800355c:	d02a      	beq.n	80035b4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2220      	movs	r2, #32
 8003566:	4013      	ands	r3, r2
 8003568:	d10b      	bne.n	8003582 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	210a      	movs	r1, #10
 8003576:	438a      	bics	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2225      	movs	r2, #37	; 0x25
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_DMA_IRQHandler+0x160>)
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	221c      	movs	r2, #28
 800358c:	4013      	ands	r3, r2
 800358e:	2202      	movs	r2, #2
 8003590:	409a      	lsls	r2, r3
 8003592:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_DMA_IRQHandler+0x160>)
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	; 0x24
 800359c:	2100      	movs	r1, #0
 800359e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d03a      	beq.n	800361e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	0010      	movs	r0, r2
 80035b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80035b2:	e034      	b.n	800361e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	221c      	movs	r2, #28
 80035ba:	4013      	ands	r3, r2
 80035bc:	2208      	movs	r2, #8
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4013      	ands	r3, r2
 80035c6:	d02b      	beq.n	8003620 <HAL_DMA_IRQHandler+0x158>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2208      	movs	r2, #8
 80035cc:	4013      	ands	r3, r2
 80035ce:	d027      	beq.n	8003620 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	210e      	movs	r1, #14
 80035dc:	438a      	bics	r2, r1
 80035de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_DMA_IRQHandler+0x160>)
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	221c      	movs	r2, #28
 80035ea:	4013      	ands	r3, r2
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_DMA_IRQHandler+0x160>)
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2225      	movs	r2, #37	; 0x25
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	0010      	movs	r0, r2
 800361c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46c0      	nop			; (mov r8, r8)
}
 8003622:	46bd      	mov	sp, r7
 8003624:	b004      	add	sp, #16
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40020000 	.word	0x40020000

0800362c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003642:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003654:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <DMA_SetConfig+0x7c>)
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	221c      	movs	r2, #28
 8003660:	4013      	ands	r3, r2
 8003662:	2201      	movs	r2, #1
 8003664:	409a      	lsls	r2, r3
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <DMA_SetConfig+0x7c>)
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b10      	cmp	r3, #16
 800367a:	d108      	bne.n	800368e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800368c:	e007      	b.n	800369e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	60da      	str	r2, [r3, #12]
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	40020000 	.word	0x40020000

080036ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	4a10      	ldr	r2, [pc, #64]	; (80036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80036bc:	4694      	mov	ip, r2
 80036be:	4463      	add	r3, ip
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	001a      	movs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	001a      	movs	r2, r3
 80036ce:	23ff      	movs	r3, #255	; 0xff
 80036d0:	4013      	ands	r3, r2
 80036d2:	3b08      	subs	r3, #8
 80036d4:	2114      	movs	r1, #20
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fc fd16 	bl	8000108 <__udivsi3>
 80036dc:	0003      	movs	r3, r0
 80036de:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80036e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	221f      	movs	r2, #31
 80036ea:	4013      	ands	r3, r2
 80036ec:	2201      	movs	r2, #1
 80036ee:	409a      	lsls	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b004      	add	sp, #16
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	10008200 	.word	0x10008200
 8003700:	40020880 	.word	0x40020880

08003704 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	223f      	movs	r2, #63	; 0x3f
 8003712:	4013      	ands	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800371a:	4694      	mov	ip, r2
 800371c:	4463      	add	r3, ip
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	001a      	movs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a07      	ldr	r2, [pc, #28]	; (8003748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800372a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b01      	subs	r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	4013      	ands	r3, r2
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b004      	add	sp, #16
 8003742:	bd80      	pop	{r7, pc}
 8003744:	1000823f 	.word	0x1000823f
 8003748:	40020940 	.word	0x40020940

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	e147      	b.n	80039ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4091      	lsls	r1, r2
 8003766:	000a      	movs	r2, r1
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d100      	bne.n	8003774 <HAL_GPIO_Init+0x28>
 8003772:	e138      	b.n	80039e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	4013      	ands	r3, r2
 800377c:	2b01      	cmp	r3, #1
 800377e:	d005      	beq.n	800378c <HAL_GPIO_Init+0x40>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2203      	movs	r2, #3
 8003786:	4013      	ands	r3, r2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d130      	bne.n	80037ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	409a      	lsls	r2, r3
 800379a:	0013      	movs	r3, r2
 800379c:	43da      	mvns	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	409a      	lsls	r2, r3
 80037ae:	0013      	movs	r3, r2
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c2:	2201      	movs	r2, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
 80037c8:	0013      	movs	r3, r2
 80037ca:	43da      	mvns	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	2201      	movs	r2, #1
 80037da:	401a      	ands	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	409a      	lsls	r2, r3
 80037e0:	0013      	movs	r3, r2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2203      	movs	r2, #3
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d017      	beq.n	800382a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	409a      	lsls	r2, r3
 8003808:	0013      	movs	r3, r2
 800380a:	43da      	mvns	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	409a      	lsls	r2, r3
 800381c:	0013      	movs	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2203      	movs	r2, #3
 8003830:	4013      	ands	r3, r2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d123      	bne.n	800387e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	58d3      	ldr	r3, [r2, r3]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2207      	movs	r2, #7
 8003848:	4013      	ands	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	409a      	lsls	r2, r3
 8003850:	0013      	movs	r3, r2
 8003852:	43da      	mvns	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2107      	movs	r1, #7
 8003862:	400b      	ands	r3, r1
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	409a      	lsls	r2, r3
 8003868:	0013      	movs	r3, r2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	6939      	ldr	r1, [r7, #16]
 800387c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	409a      	lsls	r2, r3
 800388c:	0013      	movs	r3, r2
 800388e:	43da      	mvns	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	401a      	ands	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	409a      	lsls	r2, r3
 80038a4:	0013      	movs	r3, r2
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	23c0      	movs	r3, #192	; 0xc0
 80038b8:	029b      	lsls	r3, r3, #10
 80038ba:	4013      	ands	r3, r2
 80038bc:	d100      	bne.n	80038c0 <HAL_GPIO_Init+0x174>
 80038be:	e092      	b.n	80039e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80038c0:	4a50      	ldr	r2, [pc, #320]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	3318      	adds	r3, #24
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	589b      	ldr	r3, [r3, r2]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2203      	movs	r2, #3
 80038d2:	4013      	ands	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	220f      	movs	r2, #15
 80038d8:	409a      	lsls	r2, r3
 80038da:	0013      	movs	r3, r2
 80038dc:	43da      	mvns	r2, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	23a0      	movs	r3, #160	; 0xa0
 80038e8:	05db      	lsls	r3, r3, #23
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d013      	beq.n	8003916 <HAL_GPIO_Init+0x1ca>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a45      	ldr	r2, [pc, #276]	; (8003a08 <HAL_GPIO_Init+0x2bc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00d      	beq.n	8003912 <HAL_GPIO_Init+0x1c6>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a44      	ldr	r2, [pc, #272]	; (8003a0c <HAL_GPIO_Init+0x2c0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d007      	beq.n	800390e <HAL_GPIO_Init+0x1c2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a43      	ldr	r2, [pc, #268]	; (8003a10 <HAL_GPIO_Init+0x2c4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_GPIO_Init+0x1be>
 8003906:	2303      	movs	r3, #3
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 800390a:	2305      	movs	r3, #5
 800390c:	e004      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 800390e:	2302      	movs	r3, #2
 8003910:	e002      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 8003916:	2300      	movs	r3, #0
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	2103      	movs	r1, #3
 800391c:	400a      	ands	r2, r1
 800391e:	00d2      	lsls	r2, r2, #3
 8003920:	4093      	lsls	r3, r2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003928:	4936      	ldr	r1, [pc, #216]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3318      	adds	r3, #24
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	035b      	lsls	r3, r3, #13
 800394e:	4013      	ands	r3, r2
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800395a:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43da      	mvns	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	039b      	lsls	r3, r3, #14
 8003978:	4013      	ands	r3, r2
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800398a:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 800398c:	2384      	movs	r3, #132	; 0x84
 800398e:	58d3      	ldr	r3, [r2, r3]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43da      	mvns	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	4013      	ands	r3, r2
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039b0:	4914      	ldr	r1, [pc, #80]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 80039b2:	2284      	movs	r2, #132	; 0x84
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	58d3      	ldr	r3, [r2, r3]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	43da      	mvns	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	025b      	lsls	r3, r3, #9
 80039d2:	4013      	ands	r3, r2
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039de:	4909      	ldr	r1, [pc, #36]	; (8003a04 <HAL_GPIO_Init+0x2b8>)
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3301      	adds	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	40da      	lsrs	r2, r3
 80039f4:	1e13      	subs	r3, r2, #0
 80039f6:	d000      	beq.n	80039fa <HAL_GPIO_Init+0x2ae>
 80039f8:	e6b0      	b.n	800375c <HAL_GPIO_Init+0x10>
  }
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b006      	add	sp, #24
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021800 	.word	0x40021800
 8003a08:	50000400 	.word	0x50000400
 8003a0c:	50000800 	.word	0x50000800
 8003a10:	50000c00 	.word	0x50000c00

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	0008      	movs	r0, r1
 8003a1e:	0011      	movs	r1, r2
 8003a20:	1cbb      	adds	r3, r7, #2
 8003a22:	1c02      	adds	r2, r0, #0
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	1c7b      	adds	r3, r7, #1
 8003a28:	1c0a      	adds	r2, r1, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a2c:	1c7b      	adds	r3, r7, #1
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a34:	1cbb      	adds	r3, r7, #2
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a3c:	e003      	b.n	8003a46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d11f      	bne.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a74:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	0013      	movs	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	189b      	adds	r3, r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4912      	ldr	r1, [pc, #72]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7fc fb40 	bl	8000108 <__udivsi3>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a8e:	e008      	b.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e001      	b.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e009      	b.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	401a      	ands	r2, r3
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d0ed      	beq.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b004      	add	sp, #16
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	fffff9ff 	.word	0xfffff9ff
 8003ac8:	20000028 	.word	0x20000028
 8003acc:	000f4240 	.word	0x000f4240

08003ad0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	23e0      	movs	r3, #224	; 0xe0
 8003ada:	01db      	lsls	r3, r3, #7
 8003adc:	4013      	ands	r3, r2
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e2fe      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	d100      	bne.n	8003b06 <HAL_RCC_OscConfig+0x1e>
 8003b04:	e07c      	b.n	8003c00 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b06:	4bc3      	ldr	r3, [pc, #780]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2238      	movs	r2, #56	; 0x38
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b10:	4bc0      	ldr	r3, [pc, #768]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4013      	ands	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3e>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d002      	beq.n	8003b2c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	4bb9      	ldr	r3, [pc, #740]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	4013      	ands	r3, r2
 8003b36:	d062      	beq.n	8003bfe <HAL_RCC_OscConfig+0x116>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d15e      	bne.n	8003bfe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e2d9      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	025b      	lsls	r3, r3, #9
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x78>
 8003b50:	4bb0      	ldr	r3, [pc, #704]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4baf      	ldr	r3, [pc, #700]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	2180      	movs	r1, #128	; 0x80
 8003b58:	0249      	lsls	r1, r1, #9
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e020      	b.n	8003ba2 <HAL_RCC_OscConfig+0xba>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	23a0      	movs	r3, #160	; 0xa0
 8003b66:	02db      	lsls	r3, r3, #11
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d10e      	bne.n	8003b8a <HAL_RCC_OscConfig+0xa2>
 8003b6c:	4ba9      	ldr	r3, [pc, #676]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4ba8      	ldr	r3, [pc, #672]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	02c9      	lsls	r1, r1, #11
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	4ba6      	ldr	r3, [pc, #664]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4ba5      	ldr	r3, [pc, #660]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	0249      	lsls	r1, r1, #9
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0xba>
 8003b8a:	4ba2      	ldr	r3, [pc, #648]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4ba1      	ldr	r3, [pc, #644]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	49a1      	ldr	r1, [pc, #644]	; (8003e18 <HAL_RCC_OscConfig+0x330>)
 8003b92:	400a      	ands	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	4b9f      	ldr	r3, [pc, #636]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b9e      	ldr	r3, [pc, #632]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003b9c:	499f      	ldr	r1, [pc, #636]	; (8003e1c <HAL_RCC_OscConfig+0x334>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d014      	beq.n	8003bd4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe fa79 	bl	80020a0 <HAL_GetTick>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fa74 	bl	80020a0 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e298      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc6:	4b93      	ldr	r3, [pc, #588]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	029b      	lsls	r3, r3, #10
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xcc>
 8003bd2:	e015      	b.n	8003c00 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fa64 	bl	80020a0 <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bde:	f7fe fa5f 	bl	80020a0 <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	; 0x64
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e283      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf0:	4b88      	ldr	r3, [pc, #544]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	029b      	lsls	r3, r3, #10
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0xf6>
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d100      	bne.n	8003c0c <HAL_RCC_OscConfig+0x124>
 8003c0a:	e099      	b.n	8003d40 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0c:	4b81      	ldr	r3, [pc, #516]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2238      	movs	r2, #56	; 0x38
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c16:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_OscConfig+0x144>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d002      	beq.n	8003c32 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d135      	bne.n	8003c9e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c32:	4b78      	ldr	r3, [pc, #480]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d005      	beq.n	8003c4a <HAL_RCC_OscConfig+0x162>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e256      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b72      	ldr	r3, [pc, #456]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a74      	ldr	r2, [pc, #464]	; (8003e20 <HAL_RCC_OscConfig+0x338>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	021a      	lsls	r2, r3, #8
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c66:	4b6b      	ldr	r3, [pc, #428]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6e      	ldr	r2, [pc, #440]	; (8003e24 <HAL_RCC_OscConfig+0x33c>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	4b67      	ldr	r3, [pc, #412]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	0adb      	lsrs	r3, r3, #11
 8003c80:	2207      	movs	r2, #7
 8003c82:	4013      	ands	r3, r2
 8003c84:	4a68      	ldr	r2, [pc, #416]	; (8003e28 <HAL_RCC_OscConfig+0x340>)
 8003c86:	40da      	lsrs	r2, r3
 8003c88:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <HAL_RCC_OscConfig+0x344>)
 8003c8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c8c:	4b68      	ldr	r3, [pc, #416]	; (8003e30 <HAL_RCC_OscConfig+0x348>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7fe f9a9 	bl	8001fe8 <HAL_InitTick>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d051      	beq.n	8003d3e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e22c      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d030      	beq.n	8003d08 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ca6:	4b5b      	ldr	r3, [pc, #364]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5e      	ldr	r2, [pc, #376]	; (8003e24 <HAL_RCC_OscConfig+0x33c>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003cba:	4b56      	ldr	r3, [pc, #344]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	0049      	lsls	r1, r1, #1
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f9ea 	bl	80020a0 <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe f9e5 	bl	80020a0 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e209      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4013      	ands	r3, r2
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b48      	ldr	r3, [pc, #288]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_RCC_OscConfig+0x338>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	e01b      	b.n	8003d40 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d08:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	4949      	ldr	r1, [pc, #292]	; (8003e34 <HAL_RCC_OscConfig+0x34c>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fe f9c4 	bl	80020a0 <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1e:	f7fe f9bf 	bl	80020a0 <HAL_GetTick>
 8003d22:	0002      	movs	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1e3      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d30:	4b38      	ldr	r3, [pc, #224]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x236>
 8003d3c:	e000      	b.n	8003d40 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	4013      	ands	r3, r2
 8003d48:	d047      	beq.n	8003dda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d4a:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2238      	movs	r2, #56	; 0x38
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b18      	cmp	r3, #24
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d56:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d03c      	beq.n	8003dda <HAL_RCC_OscConfig+0x2f2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d138      	bne.n	8003dda <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e1c5      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d019      	beq.n	8003da8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d78:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe f98e 	bl	80020a0 <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fe f989 	bl	80020a0 <HAL_GetTick>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1ad      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	2202      	movs	r2, #2
 8003da2:	4013      	ands	r3, r2
 8003da4:	d0f1      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2a2>
 8003da6:	e018      	b.n	8003dda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe f974 	bl	80020a0 <HAL_GetTick>
 8003db8:	0003      	movs	r3, r0
 8003dba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe f96f 	bl	80020a0 <HAL_GetTick>
 8003dc2:	0002      	movs	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e193      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d1f1      	bne.n	8003dbe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2204      	movs	r2, #4
 8003de0:	4013      	ands	r3, r2
 8003de2:	d100      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2fe>
 8003de4:	e0c6      	b.n	8003f74 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	231f      	movs	r3, #31
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2238      	movs	r2, #56	; 0x38
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d11e      	bne.n	8003e38 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_OscConfig+0x32c>)
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfe:	2202      	movs	r2, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	d100      	bne.n	8003e06 <HAL_RCC_OscConfig+0x31e>
 8003e04:	e0b6      	b.n	8003f74 <HAL_RCC_OscConfig+0x48c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d000      	beq.n	8003e10 <HAL_RCC_OscConfig+0x328>
 8003e0e:	e0b1      	b.n	8003f74 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e171      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
 8003e14:	40021000 	.word	0x40021000
 8003e18:	fffeffff 	.word	0xfffeffff
 8003e1c:	fffbffff 	.word	0xfffbffff
 8003e20:	ffff80ff 	.word	0xffff80ff
 8003e24:	ffffc7ff 	.word	0xffffc7ff
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	20000028 	.word	0x20000028
 8003e30:	20000030 	.word	0x20000030
 8003e34:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e38:	4bb1      	ldr	r3, [pc, #708]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	055b      	lsls	r3, r3, #21
 8003e40:	4013      	ands	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_OscConfig+0x360>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x362>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d011      	beq.n	8003e72 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	4bac      	ldr	r3, [pc, #688]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e52:	4bab      	ldr	r3, [pc, #684]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0549      	lsls	r1, r1, #21
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e5c:	4ba8      	ldr	r3, [pc, #672]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	055b      	lsls	r3, r3, #21
 8003e64:	4013      	ands	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003e6a:	231f      	movs	r3, #31
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e72:	4ba4      	ldr	r3, [pc, #656]	; (8004104 <HAL_RCC_OscConfig+0x61c>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d11a      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7e:	4ba1      	ldr	r3, [pc, #644]	; (8004104 <HAL_RCC_OscConfig+0x61c>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4ba0      	ldr	r3, [pc, #640]	; (8004104 <HAL_RCC_OscConfig+0x61c>)
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	0049      	lsls	r1, r1, #1
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f908 	bl	80020a0 <HAL_GetTick>
 8003e90:	0003      	movs	r3, r0
 8003e92:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e96:	f7fe f903 	bl	80020a0 <HAL_GetTick>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e127      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea8:	4b96      	ldr	r3, [pc, #600]	; (8004104 <HAL_RCC_OscConfig+0x61c>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x3e2>
 8003ebc:	4b90      	ldr	r3, [pc, #576]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ec0:	4b8f      	ldr	r3, [pc, #572]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec8:	e01c      	b.n	8003f04 <HAL_RCC_OscConfig+0x41c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x404>
 8003ed2:	4b8b      	ldr	r3, [pc, #556]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ed4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ed6:	4b8a      	ldr	r3, [pc, #552]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ed8:	2104      	movs	r1, #4
 8003eda:	430a      	orrs	r2, r1
 8003edc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ede:	4b88      	ldr	r3, [pc, #544]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ee2:	4b87      	ldr	r3, [pc, #540]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0x41c>
 8003eec:	4b84      	ldr	r3, [pc, #528]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ef0:	4b83      	ldr	r3, [pc, #524]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ef8:	4b81      	ldr	r3, [pc, #516]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003efa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003efc:	4b80      	ldr	r3, [pc, #512]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003efe:	2104      	movs	r1, #4
 8003f00:	438a      	bics	r2, r1
 8003f02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d014      	beq.n	8003f36 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f8c8 	bl	80020a0 <HAL_GetTick>
 8003f10:	0003      	movs	r3, r0
 8003f12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f14:	e009      	b.n	8003f2a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe f8c3 	bl	80020a0 <HAL_GetTick>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	4a79      	ldr	r2, [pc, #484]	; (8004108 <HAL_RCC_OscConfig+0x620>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0e6      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2a:	4b75      	ldr	r3, [pc, #468]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	2202      	movs	r2, #2
 8003f30:	4013      	ands	r3, r2
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x42e>
 8003f34:	e013      	b.n	8003f5e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fe f8b3 	bl	80020a0 <HAL_GetTick>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f3e:	e009      	b.n	8003f54 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fe f8ae 	bl	80020a0 <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	4a6f      	ldr	r2, [pc, #444]	; (8004108 <HAL_RCC_OscConfig+0x620>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e0d1      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f5e:	231f      	movs	r3, #31
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f68:	4b65      	ldr	r3, [pc, #404]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003f6e:	4967      	ldr	r1, [pc, #412]	; (800410c <HAL_RCC_OscConfig+0x624>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d100      	bne.n	8003f7e <HAL_RCC_OscConfig+0x496>
 8003f7c:	e0bb      	b.n	80040f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f7e:	4b60      	ldr	r3, [pc, #384]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2238      	movs	r2, #56	; 0x38
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d100      	bne.n	8003f8c <HAL_RCC_OscConfig+0x4a4>
 8003f8a:	e07b      	b.n	8004084 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d156      	bne.n	8004042 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f94:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b59      	ldr	r3, [pc, #356]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003f9a:	495d      	ldr	r1, [pc, #372]	; (8004110 <HAL_RCC_OscConfig+0x628>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe f87e 	bl	80020a0 <HAL_GetTick>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fe f879 	bl	80020a0 <HAL_GetTick>
 8003fae:	0002      	movs	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e09d      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fbc:	4b50      	ldr	r3, [pc, #320]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	049b      	lsls	r3, r3, #18
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc8:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a51      	ldr	r2, [pc, #324]	; (8004114 <HAL_RCC_OscConfig+0x62c>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1a      	ldr	r2, [r3, #32]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	4b42      	ldr	r3, [pc, #264]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b40      	ldr	r3, [pc, #256]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b3f      	ldr	r3, [pc, #252]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	0449      	lsls	r1, r1, #17
 8004006:	430a      	orrs	r2, r1
 8004008:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800400a:	4b3d      	ldr	r3, [pc, #244]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	0549      	lsls	r1, r1, #21
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe f842 	bl	80020a0 <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7fe f83d 	bl	80020a0 <HAL_GetTick>
 8004026:	0002      	movs	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e061      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004034:	4b32      	ldr	r3, [pc, #200]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	049b      	lsls	r3, r3, #18
 800403c:	4013      	ands	r3, r2
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x53a>
 8004040:	e059      	b.n	80040f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8004048:	4931      	ldr	r1, [pc, #196]	; (8004110 <HAL_RCC_OscConfig+0x628>)
 800404a:	400a      	ands	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fe f827 	bl	80020a0 <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004058:	f7fe f822 	bl	80020a0 <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e046      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	049b      	lsls	r3, r3, #18
 8004072:	4013      	ands	r3, r2
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004076:	4b22      	ldr	r3, [pc, #136]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 800407c:	4926      	ldr	r1, [pc, #152]	; (8004118 <HAL_RCC_OscConfig+0x630>)
 800407e:	400a      	ands	r2, r1
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e038      	b.n	80040f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e033      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x618>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2203      	movs	r2, #3
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d126      	bne.n	80040f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2270      	movs	r2, #112	; 0x70
 80040a8:	401a      	ands	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d11f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	23fe      	movs	r3, #254	; 0xfe
 80040b6:	01db      	lsls	r3, r3, #7
 80040b8:	401a      	ands	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d116      	bne.n	80040f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	23f8      	movs	r3, #248	; 0xf8
 80040c8:	039b      	lsls	r3, r3, #14
 80040ca:	401a      	ands	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d10e      	bne.n	80040f2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	23e0      	movs	r3, #224	; 0xe0
 80040d8:	051b      	lsls	r3, r3, #20
 80040da:	401a      	ands	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	0f5b      	lsrs	r3, r3, #29
 80040e8:	075a      	lsls	r2, r3, #29
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b008      	add	sp, #32
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	40007000 	.word	0x40007000
 8004108:	00001388 	.word	0x00001388
 800410c:	efffffff 	.word	0xefffffff
 8004110:	feffffff 	.word	0xfeffffff
 8004114:	11c1808c 	.word	0x11c1808c
 8004118:	eefefffc 	.word	0xeefefffc

0800411c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0e9      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b76      	ldr	r3, [pc, #472]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2207      	movs	r2, #7
 8004136:	4013      	ands	r3, r2
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d91e      	bls.n	800417c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b73      	ldr	r3, [pc, #460]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2207      	movs	r2, #7
 8004144:	4393      	bics	r3, r2
 8004146:	0019      	movs	r1, r3
 8004148:	4b70      	ldr	r3, [pc, #448]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004150:	f7fd ffa6 	bl	80020a0 <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004158:	e009      	b.n	800416e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415a:	f7fd ffa1 	bl	80020a0 <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_RCC_ClockConfig+0x1f4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0ca      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800416e:	4b67      	ldr	r3, [pc, #412]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2207      	movs	r2, #7
 8004174:	4013      	ands	r3, r2
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d1ee      	bne.n	800415a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2202      	movs	r2, #2
 8004182:	4013      	ands	r3, r2
 8004184:	d015      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2204      	movs	r2, #4
 800418c:	4013      	ands	r3, r2
 800418e:	d006      	beq.n	800419e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004190:	4b60      	ldr	r3, [pc, #384]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 8004196:	21e0      	movs	r1, #224	; 0xe0
 8004198:	01c9      	lsls	r1, r1, #7
 800419a:	430a      	orrs	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419e:	4b5d      	ldr	r3, [pc, #372]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4a5d      	ldr	r2, [pc, #372]	; (8004318 <HAL_RCC_ClockConfig+0x1fc>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b59      	ldr	r3, [pc, #356]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80041ae:	430a      	orrs	r2, r1
 80041b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	d057      	beq.n	800426c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c4:	4b53      	ldr	r3, [pc, #332]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	4013      	ands	r3, r2
 80041ce:	d12b      	bne.n	8004228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e097      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d107      	bne.n	80041ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041dc:	4b4d      	ldr	r3, [pc, #308]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	049b      	lsls	r3, r3, #18
 80041e4:	4013      	ands	r3, r2
 80041e6:	d11f      	bne.n	8004228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e08b      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f4:	4b47      	ldr	r3, [pc, #284]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4013      	ands	r3, r2
 80041fe:	d113      	bne.n	8004228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e07f      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d106      	bne.n	800421a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800420c:	4b41      	ldr	r3, [pc, #260]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	2202      	movs	r2, #2
 8004212:	4013      	ands	r3, r2
 8004214:	d108      	bne.n	8004228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e074      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	2202      	movs	r2, #2
 8004220:	4013      	ands	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e06d      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004228:	4b3a      	ldr	r3, [pc, #232]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2207      	movs	r2, #7
 800422e:	4393      	bics	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	4b37      	ldr	r3, [pc, #220]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423c:	f7fd ff30 	bl	80020a0 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004244:	e009      	b.n	800425a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004246:	f7fd ff2b 	bl	80020a0 <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <HAL_RCC_ClockConfig+0x1f4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e054      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2238      	movs	r2, #56	; 0x38
 8004260:	401a      	ands	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	429a      	cmp	r2, r3
 800426a:	d1ec      	bne.n	8004246 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2207      	movs	r2, #7
 8004272:	4013      	ands	r3, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d21e      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2207      	movs	r2, #7
 8004280:	4393      	bics	r3, r2
 8004282:	0019      	movs	r1, r3
 8004284:	4b21      	ldr	r3, [pc, #132]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800428c:	f7fd ff08 	bl	80020a0 <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004294:	e009      	b.n	80042aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f7fd ff03 	bl	80020a0 <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <HAL_RCC_ClockConfig+0x1f4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e02c      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042aa:	4b18      	ldr	r3, [pc, #96]	; (800430c <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2207      	movs	r2, #7
 80042b0:	4013      	ands	r3, r2
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1ee      	bne.n	8004296 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2204      	movs	r2, #4
 80042be:	4013      	ands	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_RCC_ClockConfig+0x200>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042d6:	f000 f829 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80042da:	0001      	movs	r1, r0
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCC_ClockConfig+0x1f8>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	220f      	movs	r2, #15
 80042e4:	401a      	ands	r2, r3
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x204>)
 80042e8:	0092      	lsls	r2, r2, #2
 80042ea:	58d3      	ldr	r3, [r2, r3]
 80042ec:	221f      	movs	r2, #31
 80042ee:	4013      	ands	r3, r2
 80042f0:	000a      	movs	r2, r1
 80042f2:	40da      	lsrs	r2, r3
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_ClockConfig+0x208>)
 80042f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x20c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7fd fe73 	bl	8001fe8 <HAL_InitTick>
 8004302:	0003      	movs	r3, r0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b004      	add	sp, #16
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40022000 	.word	0x40022000
 8004310:	00001388 	.word	0x00001388
 8004314:	40021000 	.word	0x40021000
 8004318:	fffff0ff 	.word	0xfffff0ff
 800431c:	ffff8fff 	.word	0xffff8fff
 8004320:	08008394 	.word	0x08008394
 8004324:	20000028 	.word	0x20000028
 8004328:	20000030 	.word	0x20000030

0800432c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004332:	4b3c      	ldr	r3, [pc, #240]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2238      	movs	r2, #56	; 0x38
 8004338:	4013      	ands	r3, r2
 800433a:	d10f      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800433c:	4b39      	ldr	r3, [pc, #228]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0adb      	lsrs	r3, r3, #11
 8004342:	2207      	movs	r2, #7
 8004344:	4013      	ands	r3, r2
 8004346:	2201      	movs	r2, #1
 8004348:	409a      	lsls	r2, r3
 800434a:	0013      	movs	r3, r2
 800434c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	4835      	ldr	r0, [pc, #212]	; (8004428 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004352:	f7fb fed9 	bl	8000108 <__udivsi3>
 8004356:	0003      	movs	r3, r0
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e05d      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2238      	movs	r2, #56	; 0x38
 8004362:	4013      	ands	r3, r2
 8004364:	2b08      	cmp	r3, #8
 8004366:	d102      	bne.n	800436e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004368:	4b30      	ldr	r3, [pc, #192]	; (800442c <HAL_RCC_GetSysClockFreq+0x100>)
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	e054      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2238      	movs	r2, #56	; 0x38
 8004374:	4013      	ands	r3, r2
 8004376:	2b10      	cmp	r3, #16
 8004378:	d138      	bne.n	80043ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800437a:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2203      	movs	r2, #3
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	2207      	movs	r2, #7
 800438c:	4013      	ands	r3, r2
 800438e:	3301      	adds	r3, #1
 8004390:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d10d      	bne.n	80043b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4824      	ldr	r0, [pc, #144]	; (800442c <HAL_RCC_GetSysClockFreq+0x100>)
 800439c:	f7fb feb4 	bl	8000108 <__udivsi3>
 80043a0:	0003      	movs	r3, r0
 80043a2:	0019      	movs	r1, r3
 80043a4:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	0a1b      	lsrs	r3, r3, #8
 80043aa:	227f      	movs	r2, #127	; 0x7f
 80043ac:	4013      	ands	r3, r2
 80043ae:	434b      	muls	r3, r1
 80043b0:	617b      	str	r3, [r7, #20]
        break;
 80043b2:	e00d      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	481c      	ldr	r0, [pc, #112]	; (8004428 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043b8:	f7fb fea6 	bl	8000108 <__udivsi3>
 80043bc:	0003      	movs	r3, r0
 80043be:	0019      	movs	r1, r3
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	227f      	movs	r2, #127	; 0x7f
 80043c8:	4013      	ands	r3, r2
 80043ca:	434b      	muls	r3, r1
 80043cc:	617b      	str	r3, [r7, #20]
        break;
 80043ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80043d0:	4b14      	ldr	r3, [pc, #80]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	0f5b      	lsrs	r3, r3, #29
 80043d6:	2207      	movs	r2, #7
 80043d8:	4013      	ands	r3, r2
 80043da:	3301      	adds	r3, #1
 80043dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	6978      	ldr	r0, [r7, #20]
 80043e2:	f7fb fe91 	bl	8000108 <__udivsi3>
 80043e6:	0003      	movs	r3, r0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e015      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2238      	movs	r2, #56	; 0x38
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d103      	bne.n	8004400 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004400:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2238      	movs	r2, #56	; 0x38
 8004406:	4013      	ands	r3, r2
 8004408:	2b18      	cmp	r3, #24
 800440a:	d103      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800440c:	23fa      	movs	r3, #250	; 0xfa
 800440e:	01db      	lsls	r3, r3, #7
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e001      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004418:	693b      	ldr	r3, [r7, #16]
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b006      	add	sp, #24
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	40021000 	.word	0x40021000
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200

08004430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <HAL_RCC_GetHCLKFreq+0x10>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	20000028 	.word	0x20000028

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b5b0      	push	{r4, r5, r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004448:	f7ff fff2 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 800444c:	0004      	movs	r4, r0
 800444e:	f7ff fb3f 	bl	8003ad0 <LL_RCC_GetAPB1Prescaler>
 8004452:	0003      	movs	r3, r0
 8004454:	0b1a      	lsrs	r2, r3, #12
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004458:	0092      	lsls	r2, r2, #2
 800445a:	58d3      	ldr	r3, [r2, r3]
 800445c:	221f      	movs	r2, #31
 800445e:	4013      	ands	r3, r2
 8004460:	40dc      	lsrs	r4, r3
 8004462:	0023      	movs	r3, r4
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	bdb0      	pop	{r4, r5, r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	080083d4 	.word	0x080083d4

08004470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004478:	2313      	movs	r3, #19
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004480:	2312      	movs	r3, #18
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	029b      	lsls	r3, r3, #10
 8004490:	4013      	ands	r3, r2
 8004492:	d100      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004494:	e0ad      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2011      	movs	r0, #17
 8004498:	183b      	adds	r3, r7, r0
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b47      	ldr	r3, [pc, #284]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	055b      	lsls	r3, r3, #21
 80044a6:	4013      	ands	r3, r2
 80044a8:	d110      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	4b44      	ldr	r3, [pc, #272]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	0549      	lsls	r1, r1, #21
 80044b4:	430a      	orrs	r2, r1
 80044b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80044b8:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	055b      	lsls	r3, r3, #21
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044cc:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	0049      	lsls	r1, r1, #1
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044da:	f7fd fde1 	bl	80020a0 <HAL_GetTick>
 80044de:	0003      	movs	r3, r0
 80044e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e2:	e00b      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fd fddc 	bl	80020a0 <HAL_GetTick>
 80044e8:	0002      	movs	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d904      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80044f2:	2313      	movs	r3, #19
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	2203      	movs	r2, #3
 80044f8:	701a      	strb	r2, [r3, #0]
        break;
 80044fa:	e005      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044fc:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4013      	ands	r3, r2
 8004506:	d0ed      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004508:	2313      	movs	r3, #19
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d15e      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004514:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004516:	23c0      	movs	r3, #192	; 0xc0
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4013      	ands	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d019      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	429a      	cmp	r2, r3
 800452c:	d014      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004534:	4013      	ands	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800453a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800453c:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800453e:	2180      	movs	r1, #128	; 0x80
 8004540:	0249      	lsls	r1, r1, #9
 8004542:	430a      	orrs	r2, r1
 8004544:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004548:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800454a:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800454c:	491e      	ldr	r1, [pc, #120]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800454e:	400a      	ands	r2, r1
 8004550:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2201      	movs	r2, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d016      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fd9e 	bl	80020a0 <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004568:	e00c      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fd99 	bl	80020a0 <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d904      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800457a:	2313      	movs	r3, #19
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	2203      	movs	r2, #3
 8004580:	701a      	strb	r2, [r3, #0]
            break;
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d0ed      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800458e:	2313      	movs	r3, #19
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800459e:	4013      	ands	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ac:	e016      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ae:	2312      	movs	r3, #18
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	2213      	movs	r2, #19
 80045b4:	18ba      	adds	r2, r7, r2
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e00f      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40007000 	.word	0x40007000
 80045c4:	fffffcff 	.word	0xfffffcff
 80045c8:	fffeffff 	.word	0xfffeffff
 80045cc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	2312      	movs	r3, #18
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2213      	movs	r2, #19
 80045d6:	18ba      	adds	r2, r7, r2
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045dc:	2311      	movs	r3, #17
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b84      	ldr	r3, [pc, #528]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80045e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ea:	4b83      	ldr	r3, [pc, #524]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80045ec:	4983      	ldr	r1, [pc, #524]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80045ee:	400a      	ands	r2, r1
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045fc:	4b7e      	ldr	r3, [pc, #504]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	2203      	movs	r2, #3
 8004602:	4393      	bics	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b7b      	ldr	r3, [pc, #492]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800460c:	430a      	orrs	r2, r1
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2202      	movs	r2, #2
 8004616:	4013      	ands	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800461a:	4b77      	ldr	r3, [pc, #476]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	220c      	movs	r2, #12
 8004620:	4393      	bics	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	4b73      	ldr	r3, [pc, #460]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800462a:	430a      	orrs	r2, r1
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2210      	movs	r2, #16
 8004634:	4013      	ands	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004638:	4b6f      	ldr	r3, [pc, #444]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	4a70      	ldr	r2, [pc, #448]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800463e:	4013      	ands	r3, r2
 8004640:	0019      	movs	r1, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004648:	430a      	orrs	r2, r1
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4013      	ands	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004658:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	4a69      	ldr	r2, [pc, #420]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800465e:	4013      	ands	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	4b64      	ldr	r3, [pc, #400]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004668:	430a      	orrs	r2, r1
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4013      	ands	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004678:	4b5f      	ldr	r3, [pc, #380]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	4a62      	ldr	r2, [pc, #392]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800467e:	4013      	ands	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	4b5c      	ldr	r3, [pc, #368]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004688:	430a      	orrs	r2, r1
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2220      	movs	r2, #32
 8004692:	4013      	ands	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004696:	4b58      	ldr	r3, [pc, #352]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	4a5c      	ldr	r2, [pc, #368]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800469c:	4013      	ands	r3, r2
 800469e:	0019      	movs	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	4b54      	ldr	r3, [pc, #336]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80046a6:	430a      	orrs	r2, r1
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	02db      	lsls	r3, r3, #11
 80046b2:	4013      	ands	r3, r2
 80046b4:	d016      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b6:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	4a55      	ldr	r2, [pc, #340]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1a      	ldr	r2, [r3, #32]
 80046c4:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80046c6:	430a      	orrs	r2, r1
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	23c0      	movs	r3, #192	; 0xc0
 80046d0:	051b      	lsls	r3, r3, #20
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d106      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046d6:	4b48      	ldr	r3, [pc, #288]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	0449      	lsls	r1, r1, #17
 80046e0:	430a      	orrs	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	01db      	lsls	r3, r3, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	d015      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	0899      	lsrs	r1, r3, #2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046fc:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80046fe:	430a      	orrs	r2, r1
 8004700:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	05db      	lsls	r3, r3, #23
 800470a:	429a      	cmp	r2, r3
 800470c:	d106      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800470e:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	0249      	lsls	r1, r1, #9
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	031b      	lsls	r3, r3, #12
 8004724:	4013      	ands	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004728:	4b33      	ldr	r3, [pc, #204]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800472a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472c:	2240      	movs	r2, #64	; 0x40
 800472e:	4393      	bics	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004736:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004738:	430a      	orrs	r2, r1
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	039b      	lsls	r3, r3, #14
 8004744:	4013      	ands	r3, r2
 8004746:	d016      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	4a31      	ldr	r2, [pc, #196]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004758:	430a      	orrs	r2, r1
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	03db      	lsls	r3, r3, #15
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800476e:	2180      	movs	r1, #128	; 0x80
 8004770:	0449      	lsls	r1, r1, #17
 8004772:	430a      	orrs	r2, r1
 8004774:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	03db      	lsls	r3, r3, #15
 800477e:	4013      	ands	r3, r2
 8004780:	d016      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	4a24      	ldr	r2, [pc, #144]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004788:	4013      	ands	r3, r2
 800478a:	0019      	movs	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004790:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004792:	430a      	orrs	r2, r1
 8004794:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	045b      	lsls	r3, r3, #17
 800479e:	429a      	cmp	r2, r3
 80047a0:	d106      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80047a8:	2180      	movs	r1, #128	; 0x80
 80047aa:	0449      	lsls	r1, r1, #17
 80047ac:	430a      	orrs	r2, r1
 80047ae:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	4013      	ands	r3, r2
 80047ba:	d016      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	4a16      	ldr	r2, [pc, #88]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	0019      	movs	r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	01db      	lsls	r3, r3, #7
 80047d8:	429a      	cmp	r2, r3
 80047da:	d106      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	0249      	lsls	r1, r1, #9
 80047e6:	430a      	orrs	r2, r1
 80047e8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80047ea:	2312      	movs	r3, #18
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	781b      	ldrb	r3, [r3, #0]
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b006      	add	sp, #24
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	efffffff 	.word	0xefffffff
 8004800:	fffff3ff 	.word	0xfffff3ff
 8004804:	fff3ffff 	.word	0xfff3ffff
 8004808:	ffcfffff 	.word	0xffcfffff
 800480c:	ffffcfff 	.word	0xffffcfff
 8004810:	f3ffffff 	.word	0xf3ffffff
 8004814:	ffbfffff 	.word	0xffbfffff
 8004818:	feffffff 	.word	0xfeffffff
 800481c:	ffff3fff 	.word	0xffff3fff

08004820 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e029      	b.n	8004886 <HAL_RNG_Init+0x66>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7a5b      	ldrb	r3, [r3, #9]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f7fc fe43 	bl	80014d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2220      	movs	r2, #32
 8004858:	4393      	bics	r3, r2
 800485a:	0019      	movs	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2104      	movs	r1, #4
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b002      	add	sp, #8
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004898:	230f      	movs	r3, #15
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7a1b      	ldrb	r3, [r3, #8]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_RNG_GenerateRandomNumber+0x1e>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e049      	b.n	8004940 <HAL_RNG_GenerateRandomNumber+0xb2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7a5b      	ldrb	r3, [r3, #9]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d134      	bne.n	8004926 <HAL_RNG_GenerateRandomNumber+0x98>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048c2:	f7fd fbed 	bl	80020a0 <HAL_GetTick>
 80048c6:	0003      	movs	r3, r0
 80048c8:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80048ca:	e018      	b.n	80048fe <HAL_RNG_GenerateRandomNumber+0x70>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80048cc:	f7fd fbe8 	bl	80020a0 <HAL_GetTick>
 80048d0:	0002      	movs	r2, r0
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d911      	bls.n	80048fe <HAL_RNG_GenerateRandomNumber+0x70>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d00a      	beq.n	80048fe <HAL_RNG_GenerateRandomNumber+0x70>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e020      	b.n	8004940 <HAL_RNG_GenerateRandomNumber+0xb2>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	4013      	ands	r3, r2
 8004908:	2b01      	cmp	r3, #1
 800490a:	d1df      	bne.n	80048cc <HAL_RNG_GenerateRandomNumber+0x3e>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	725a      	strb	r2, [r3, #9]
 8004924:	e006      	b.n	8004934 <HAL_RNG_GenerateRandomNumber+0xa6>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2204      	movs	r2, #4
 800492a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800492c:	230f      	movs	r3, #15
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	721a      	strb	r2, [r3, #8]

  return status;
 800493a:	230f      	movs	r3, #15
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	781b      	ldrb	r3, [r3, #0]
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b004      	add	sp, #16
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e04a      	b.n	80049f0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	223d      	movs	r2, #61	; 0x3d
 800495e:	5c9b      	ldrb	r3, [r3, r2]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223c      	movs	r2, #60	; 0x3c
 800496a:	2100      	movs	r1, #0
 800496c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0018      	movs	r0, r3
 8004972:	f7fc fded 	bl	8001550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	223d      	movs	r2, #61	; 0x3d
 800497a:	2102      	movs	r1, #2
 800497c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	0019      	movs	r1, r3
 8004988:	0010      	movs	r0, r2
 800498a:	f000 fd09 	bl	80053a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2248      	movs	r2, #72	; 0x48
 8004992:	2101      	movs	r1, #1
 8004994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	223e      	movs	r2, #62	; 0x3e
 800499a:	2101      	movs	r1, #1
 800499c:	5499      	strb	r1, [r3, r2]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	223f      	movs	r2, #63	; 0x3f
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2241      	movs	r2, #65	; 0x41
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2242      	movs	r2, #66	; 0x42
 80049ba:	2101      	movs	r1, #1
 80049bc:	5499      	strb	r1, [r3, r2]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2243      	movs	r2, #67	; 0x43
 80049c2:	2101      	movs	r1, #1
 80049c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2244      	movs	r2, #68	; 0x44
 80049ca:	2101      	movs	r1, #1
 80049cc:	5499      	strb	r1, [r3, r2]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2245      	movs	r2, #69	; 0x45
 80049d2:	2101      	movs	r1, #1
 80049d4:	5499      	strb	r1, [r3, r2]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2246      	movs	r2, #70	; 0x46
 80049da:	2101      	movs	r1, #1
 80049dc:	5499      	strb	r1, [r3, r2]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2247      	movs	r2, #71	; 0x47
 80049e2:	2101      	movs	r1, #1
 80049e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	223d      	movs	r2, #61	; 0x3d
 80049ea:	2101      	movs	r1, #1
 80049ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	001a      	movs	r2, r3
 8004a06:	1cbb      	adds	r3, r7, #2
 8004a08:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2317      	movs	r3, #23
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <HAL_TIM_PWM_Start_DMA+0x32>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	223e      	movs	r2, #62	; 0x3e
 8004a1c:	5c9b      	ldrb	r3, [r3, r2]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3b02      	subs	r3, #2
 8004a22:	425a      	negs	r2, r3
 8004a24:	4153      	adcs	r3, r2
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e037      	b.n	8004a9a <HAL_TIM_PWM_Start_DMA+0xa2>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d108      	bne.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x4a>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	223f      	movs	r2, #63	; 0x3f
 8004a34:	5c9b      	ldrb	r3, [r3, r2]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3b02      	subs	r3, #2
 8004a3a:	425a      	negs	r2, r3
 8004a3c:	4153      	adcs	r3, r2
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e02b      	b.n	8004a9a <HAL_TIM_PWM_Start_DMA+0xa2>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d108      	bne.n	8004a5a <HAL_TIM_PWM_Start_DMA+0x62>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	5c9b      	ldrb	r3, [r3, r2]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3b02      	subs	r3, #2
 8004a52:	425a      	negs	r2, r3
 8004a54:	4153      	adcs	r3, r2
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e01f      	b.n	8004a9a <HAL_TIM_PWM_Start_DMA+0xa2>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	d108      	bne.n	8004a72 <HAL_TIM_PWM_Start_DMA+0x7a>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2241      	movs	r2, #65	; 0x41
 8004a64:	5c9b      	ldrb	r3, [r3, r2]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3b02      	subs	r3, #2
 8004a6a:	425a      	negs	r2, r3
 8004a6c:	4153      	adcs	r3, r2
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_PWM_Start_DMA+0xa2>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d108      	bne.n	8004a8a <HAL_TIM_PWM_Start_DMA+0x92>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2242      	movs	r2, #66	; 0x42
 8004a7c:	5c9b      	ldrb	r3, [r3, r2]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	3b02      	subs	r3, #2
 8004a82:	425a      	negs	r2, r3
 8004a84:	4153      	adcs	r3, r2
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e007      	b.n	8004a9a <HAL_TIM_PWM_Start_DMA+0xa2>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2243      	movs	r2, #67	; 0x43
 8004a8e:	5c9b      	ldrb	r3, [r3, r2]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	3b02      	subs	r3, #2
 8004a94:	425a      	negs	r2, r3
 8004a96:	4153      	adcs	r3, r2
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e193      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3d2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d108      	bne.n	8004aba <HAL_TIM_PWM_Start_DMA+0xc2>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	223e      	movs	r2, #62	; 0x3e
 8004aac:	5c9b      	ldrb	r3, [r3, r2]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	425a      	negs	r2, r3
 8004ab4:	4153      	adcs	r3, r2
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e037      	b.n	8004b2a <HAL_TIM_PWM_Start_DMA+0x132>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d108      	bne.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0xda>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	223f      	movs	r2, #63	; 0x3f
 8004ac4:	5c9b      	ldrb	r3, [r3, r2]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	425a      	negs	r2, r3
 8004acc:	4153      	adcs	r3, r2
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	e02b      	b.n	8004b2a <HAL_TIM_PWM_Start_DMA+0x132>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d108      	bne.n	8004aea <HAL_TIM_PWM_Start_DMA+0xf2>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	5c9b      	ldrb	r3, [r3, r2]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	425a      	negs	r2, r3
 8004ae4:	4153      	adcs	r3, r2
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e01f      	b.n	8004b2a <HAL_TIM_PWM_Start_DMA+0x132>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b0c      	cmp	r3, #12
 8004aee:	d108      	bne.n	8004b02 <HAL_TIM_PWM_Start_DMA+0x10a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2241      	movs	r2, #65	; 0x41
 8004af4:	5c9b      	ldrb	r3, [r3, r2]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	425a      	negs	r2, r3
 8004afc:	4153      	adcs	r3, r2
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e013      	b.n	8004b2a <HAL_TIM_PWM_Start_DMA+0x132>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d108      	bne.n	8004b1a <HAL_TIM_PWM_Start_DMA+0x122>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2242      	movs	r2, #66	; 0x42
 8004b0c:	5c9b      	ldrb	r3, [r3, r2]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	425a      	negs	r2, r3
 8004b14:	4153      	adcs	r3, r2
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e007      	b.n	8004b2a <HAL_TIM_PWM_Start_DMA+0x132>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2243      	movs	r2, #67	; 0x43
 8004b1e:	5c9b      	ldrb	r3, [r3, r2]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	425a      	negs	r2, r3
 8004b26:	4153      	adcs	r3, r2
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d035      	beq.n	8004b9a <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_TIM_PWM_Start_DMA+0x144>
 8004b34:	1cbb      	adds	r3, r7, #2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e144      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3d2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <HAL_TIM_PWM_Start_DMA+0x158>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	223e      	movs	r2, #62	; 0x3e
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	5499      	strb	r1, [r3, r2]
 8004b4e:	e026      	b.n	8004b9e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d104      	bne.n	8004b60 <HAL_TIM_PWM_Start_DMA+0x168>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	223f      	movs	r2, #63	; 0x3f
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	5499      	strb	r1, [r3, r2]
 8004b5e:	e01e      	b.n	8004b9e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d104      	bne.n	8004b70 <HAL_TIM_PWM_Start_DMA+0x178>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	5499      	strb	r1, [r3, r2]
 8004b6e:	e016      	b.n	8004b9e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d104      	bne.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x188>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2241      	movs	r2, #65	; 0x41
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	5499      	strb	r1, [r3, r2]
 8004b7e:	e00e      	b.n	8004b9e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d104      	bne.n	8004b90 <HAL_TIM_PWM_Start_DMA+0x198>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2242      	movs	r2, #66	; 0x42
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	5499      	strb	r1, [r3, r2]
 8004b8e:	e006      	b.n	8004b9e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2243      	movs	r2, #67	; 0x43
 8004b94:	2102      	movs	r1, #2
 8004b96:	5499      	strb	r1, [r3, r2]
 8004b98:	e001      	b.n	8004b9e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e115      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3d2>
  }

  switch (Channel)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	d100      	bne.n	8004ba6 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8004ba4:	e080      	b.n	8004ca8 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	d900      	bls.n	8004bae <HAL_TIM_PWM_Start_DMA+0x1b6>
 8004bac:	e0a1      	b.n	8004cf2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d054      	beq.n	8004c5e <HAL_TIM_PWM_Start_DMA+0x266>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d900      	bls.n	8004bbc <HAL_TIM_PWM_Start_DMA+0x1c4>
 8004bba:	e09a      	b.n	8004cf2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_PWM_Start_DMA+0x1d2>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d025      	beq.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x21c>
 8004bc8:	e093      	b.n	8004cf2 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	4a81      	ldr	r2, [pc, #516]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	4a80      	ldr	r2, [pc, #512]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	4a7f      	ldr	r2, [pc, #508]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3334      	adds	r3, #52	; 0x34
 8004bee:	001a      	movs	r2, r3
 8004bf0:	1cbb      	adds	r3, r7, #2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	f7fe fb16 	bl	8003224 <HAL_DMA_Start_IT>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0e4      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3d2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	0089      	lsls	r1, r1, #2
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	60da      	str	r2, [r3, #12]
      break;
 8004c12:	e073      	b.n	8004cfc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	4a6e      	ldr	r2, [pc, #440]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	4a6d      	ldr	r2, [pc, #436]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	4a6c      	ldr	r2, [pc, #432]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3338      	adds	r3, #56	; 0x38
 8004c38:	001a      	movs	r2, r3
 8004c3a:	1cbb      	adds	r3, r7, #2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	f7fe faf1 	bl	8003224 <HAL_DMA_Start_IT>
 8004c42:	1e03      	subs	r3, r0, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0bf      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	00c9      	lsls	r1, r1, #3
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	60da      	str	r2, [r3, #12]
      break;
 8004c5c:	e04e      	b.n	8004cfc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a5c      	ldr	r2, [pc, #368]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004c64:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	4a5b      	ldr	r2, [pc, #364]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a5a      	ldr	r2, [pc, #360]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004c74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	333c      	adds	r3, #60	; 0x3c
 8004c82:	001a      	movs	r2, r3
 8004c84:	1cbb      	adds	r3, r7, #2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	f7fe facc 	bl	8003224 <HAL_DMA_Start_IT>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e09a      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2180      	movs	r1, #128	; 0x80
 8004ca0:	0109      	lsls	r1, r1, #4
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	60da      	str	r2, [r3, #12]
      break;
 8004ca6:	e029      	b.n	8004cfc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	4a49      	ldr	r2, [pc, #292]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	4a48      	ldr	r2, [pc, #288]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004cbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3340      	adds	r3, #64	; 0x40
 8004ccc:	001a      	movs	r2, r3
 8004cce:	1cbb      	adds	r3, r7, #2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	f7fe faa7 	bl	8003224 <HAL_DMA_Start_IT>
 8004cd6:	1e03      	subs	r3, r0, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e075      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	0149      	lsls	r1, r1, #5
 8004cec:	430a      	orrs	r2, r1
 8004cee:	60da      	str	r2, [r3, #12]
      break;
 8004cf0:	e004      	b.n	8004cfc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8004cf2:	2317      	movs	r3, #23
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
      break;
 8004cfa:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004cfc:	2317      	movs	r3, #23
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d15e      	bne.n	8004dc4 <HAL_TIM_PWM_Start_DMA+0x3cc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f000 fe8a 	bl	8005a28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a31      	ldr	r2, [pc, #196]	; (8004de0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x344>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a30      	ldr	r2, [pc, #192]	; (8004de4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x344>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	; (8004de8 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x344>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_PWM_Start_DMA+0x348>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_TIM_PWM_Start_DMA+0x34a>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	0209      	lsls	r1, r1, #8
 8004d54:	430a      	orrs	r2, r1
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <HAL_TIM_PWM_Start_DMA+0x38a>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	05db      	lsls	r3, r3, #23
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIM_PWM_Start_DMA+0x38a>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIM_PWM_Start_DMA+0x38a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d116      	bne.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x3b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b06      	cmp	r3, #6
 8004d92:	d016      	beq.n	8004dc2 <HAL_TIM_PWM_Start_DMA+0x3ca>
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	025b      	lsls	r3, r3, #9
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d011      	beq.n	8004dc2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      {
        __HAL_TIM_ENABLE(htim);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	e008      	b.n	8004dc2 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e000      	b.n	8004dc4 <HAL_TIM_PWM_Start_DMA+0x3cc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc2:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004dc4:	2317      	movs	r3, #23
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	781b      	ldrb	r3, [r3, #0]
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b006      	add	sp, #24
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	0800528d 	.word	0x0800528d
 8004dd8:	08005337 	.word	0x08005337
 8004ddc:	080051f9 	.word	0x080051f9
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	40000400 	.word	0x40000400
 8004df4:	00010007 	.word	0x00010007

08004df8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	230f      	movs	r3, #15
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b0c      	cmp	r3, #12
 8004e0e:	d039      	beq.n	8004e84 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d844      	bhi.n	8004ea0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d025      	beq.n	8004e68 <HAL_TIM_PWM_Stop_DMA+0x70>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d83e      	bhi.n	8004ea0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_TIM_PWM_Stop_DMA+0x38>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d00e      	beq.n	8004e4c <HAL_TIM_PWM_Stop_DMA+0x54>
 8004e2e:	e037      	b.n	8004ea0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	495c      	ldr	r1, [pc, #368]	; (8004fac <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fe fad5 	bl	80033f4 <HAL_DMA_Abort_IT>
      break;
 8004e4a:	e02e      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4956      	ldr	r1, [pc, #344]	; (8004fb0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8004e58:	400a      	ands	r2, r1
 8004e5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7fe fac7 	bl	80033f4 <HAL_DMA_Abort_IT>
      break;
 8004e66:	e020      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4950      	ldr	r1, [pc, #320]	; (8004fb4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7fe fab9 	bl	80033f4 <HAL_DMA_Abort_IT>
      break;
 8004e82:	e012      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	494a      	ldr	r1, [pc, #296]	; (8004fb8 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7fe faab 	bl	80033f4 <HAL_DMA_Abort_IT>
      break;
 8004e9e:	e004      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8004ea0:	230f      	movs	r3, #15
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
      break;
 8004ea8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004eaa:	230f      	movs	r3, #15
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d000      	beq.n	8004eb6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8004eb4:	e073      	b.n	8004f9e <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 fdb2 	bl	8005a28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a3c      	ldr	r2, [pc, #240]	; (8004fbc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3b      	ldr	r2, [pc, #236]	; (8004fc0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a39      	ldr	r2, [pc, #228]	; (8004fc4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a38      	ldr	r2, [pc, #224]	; (8004fc8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	d10d      	bne.n	8004f1e <HAL_TIM_PWM_Stop_DMA+0x126>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	4a31      	ldr	r2, [pc, #196]	; (8004fd0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d107      	bne.n	8004f1e <HAL_TIM_PWM_Stop_DMA+0x126>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	492e      	ldr	r1, [pc, #184]	; (8004fd4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	d10d      	bne.n	8004f46 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	d107      	bne.n	8004f46 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	438a      	bics	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <HAL_TIM_PWM_Stop_DMA+0x15e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	223e      	movs	r2, #62	; 0x3e
 8004f50:	2101      	movs	r1, #1
 8004f52:	5499      	strb	r1, [r3, r2]
 8004f54:	e023      	b.n	8004f9e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	223f      	movs	r2, #63	; 0x3f
 8004f60:	2101      	movs	r1, #1
 8004f62:	5499      	strb	r1, [r3, r2]
 8004f64:	e01b      	b.n	8004f9e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_PWM_Stop_DMA+0x17e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2240      	movs	r2, #64	; 0x40
 8004f70:	2101      	movs	r1, #1
 8004f72:	5499      	strb	r1, [r3, r2]
 8004f74:	e013      	b.n	8004f9e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b0c      	cmp	r3, #12
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Stop_DMA+0x18e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2241      	movs	r2, #65	; 0x41
 8004f80:	2101      	movs	r1, #1
 8004f82:	5499      	strb	r1, [r3, r2]
 8004f84:	e00b      	b.n	8004f9e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Stop_DMA+0x19e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2242      	movs	r2, #66	; 0x42
 8004f90:	2101      	movs	r1, #1
 8004f92:	5499      	strb	r1, [r3, r2]
 8004f94:	e003      	b.n	8004f9e <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2243      	movs	r2, #67	; 0x43
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8004f9e:	230f      	movs	r3, #15
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	781b      	ldrb	r3, [r3, #0]
}
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b004      	add	sp, #16
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	fffffdff 	.word	0xfffffdff
 8004fb0:	fffffbff 	.word	0xfffffbff
 8004fb4:	fffff7ff 	.word	0xfffff7ff
 8004fb8:	ffffefff 	.word	0xffffefff
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40014400 	.word	0x40014400
 8004fc8:	40014800 	.word	0x40014800
 8004fcc:	00001111 	.word	0x00001111
 8004fd0:	00000444 	.word	0x00000444
 8004fd4:	ffff7fff 	.word	0xffff7fff

08004fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2317      	movs	r3, #23
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	223c      	movs	r2, #60	; 0x3c
 8004ff0:	5c9b      	ldrb	r3, [r3, r2]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x22>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0e5      	b.n	80051c6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	223c      	movs	r2, #60	; 0x3c
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b14      	cmp	r3, #20
 8005006:	d900      	bls.n	800500a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005008:	e0d1      	b.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	009a      	lsls	r2, r3, #2
 800500e:	4b70      	ldr	r3, [pc, #448]	; (80051d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005010:	18d3      	adds	r3, r2, r3
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	0011      	movs	r1, r2
 800501e:	0018      	movs	r0, r3
 8005020:	f000 fa3e 	bl	80054a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2108      	movs	r1, #8
 8005030:	430a      	orrs	r2, r1
 8005032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2104      	movs	r1, #4
 8005040:	438a      	bics	r2, r1
 8005042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6999      	ldr	r1, [r3, #24]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	619a      	str	r2, [r3, #24]
      break;
 8005056:	e0af      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	0011      	movs	r1, r2
 8005060:	0018      	movs	r0, r3
 8005062:	f000 faa7 	bl	80055b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	0109      	lsls	r1, r1, #4
 8005074:	430a      	orrs	r2, r1
 8005076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4954      	ldr	r1, [pc, #336]	; (80051d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005084:	400a      	ands	r2, r1
 8005086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6999      	ldr	r1, [r3, #24]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	619a      	str	r2, [r3, #24]
      break;
 800509c:	e08c      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0011      	movs	r1, r2
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 fb08 	bl	80056bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2108      	movs	r1, #8
 80050b8:	430a      	orrs	r2, r1
 80050ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2104      	movs	r1, #4
 80050c8:	438a      	bics	r2, r1
 80050ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69d9      	ldr	r1, [r3, #28]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	61da      	str	r2, [r3, #28]
      break;
 80050de:	e06b      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0011      	movs	r1, r2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 fb6f 	bl	80057cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	0109      	lsls	r1, r1, #4
 80050fc:	430a      	orrs	r2, r1
 80050fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4932      	ldr	r1, [pc, #200]	; (80051d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800510c:	400a      	ands	r2, r1
 800510e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69d9      	ldr	r1, [r3, #28]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	61da      	str	r2, [r3, #28]
      break;
 8005124:	e048      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0011      	movs	r1, r2
 800512e:	0018      	movs	r0, r3
 8005130:	f000 fbb6 	bl	80058a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2108      	movs	r1, #8
 8005140:	430a      	orrs	r2, r1
 8005142:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2104      	movs	r1, #4
 8005150:	438a      	bics	r2, r1
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005166:	e027      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	0011      	movs	r1, r2
 8005170:	0018      	movs	r0, r3
 8005172:	f000 fbf5 	bl	8005960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2180      	movs	r1, #128	; 0x80
 8005182:	0109      	lsls	r1, r1, #4
 8005184:	430a      	orrs	r2, r1
 8005186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4910      	ldr	r1, [pc, #64]	; (80051d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005194:	400a      	ands	r2, r1
 8005196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051ac:	e004      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80051ae:	2317      	movs	r3, #23
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
      break;
 80051b6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	223c      	movs	r2, #60	; 0x3c
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

  return status;
 80051c0:	2317      	movs	r3, #23
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	781b      	ldrb	r3, [r3, #0]
}
 80051c6:	0018      	movs	r0, r3
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b006      	add	sp, #24
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	080083f4 	.word	0x080083f4
 80051d4:	fffffbff 	.word	0xfffffbff

080051d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b002      	add	sp, #8
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80051f0:	46c0      	nop			; (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b002      	add	sp, #8
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d107      	bne.n	8005220 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	223e      	movs	r2, #62	; 0x3e
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]
 800521e:	e02a      	b.n	8005276 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	d107      	bne.n	800523a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2202      	movs	r2, #2
 800522e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	223f      	movs	r2, #63	; 0x3f
 8005234:	2101      	movs	r1, #1
 8005236:	5499      	strb	r1, [r3, r2]
 8005238:	e01d      	b.n	8005276 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d107      	bne.n	8005254 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2204      	movs	r2, #4
 8005248:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	2101      	movs	r1, #1
 8005250:	5499      	strb	r1, [r3, r2]
 8005252:	e010      	b.n	8005276 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d107      	bne.n	800526e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2208      	movs	r2, #8
 8005262:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2241      	movs	r2, #65	; 0x41
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]
 800526c:	e003      	b.n	8005276 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	223d      	movs	r2, #61	; 0x3d
 8005272:	2101      	movs	r1, #1
 8005274:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	0018      	movs	r0, r3
 800527a:	f7ff ffb5 	bl	80051e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b004      	add	sp, #16
 800528a:	bd80      	pop	{r7, pc}

0800528c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d10b      	bne.n	80052bc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d136      	bne.n	8005320 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	223e      	movs	r2, #62	; 0x3e
 80052b6:	2101      	movs	r1, #1
 80052b8:	5499      	strb	r1, [r3, r2]
 80052ba:	e031      	b.n	8005320 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d10b      	bne.n	80052de <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2202      	movs	r2, #2
 80052ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d125      	bne.n	8005320 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	223f      	movs	r2, #63	; 0x3f
 80052d8:	2101      	movs	r1, #1
 80052da:	5499      	strb	r1, [r3, r2]
 80052dc:	e020      	b.n	8005320 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d10b      	bne.n	8005300 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2204      	movs	r2, #4
 80052ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d114      	bne.n	8005320 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2240      	movs	r2, #64	; 0x40
 80052fa:	2101      	movs	r1, #1
 80052fc:	5499      	strb	r1, [r3, r2]
 80052fe:	e00f      	b.n	8005320 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	429a      	cmp	r2, r3
 8005308:	d10a      	bne.n	8005320 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2208      	movs	r2, #8
 800530e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2241      	movs	r2, #65	; 0x41
 800531c:	2101      	movs	r1, #1
 800531e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	0018      	movs	r0, r3
 8005324:	f7fb f97c 	bl	8000620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	771a      	strb	r2, [r3, #28]
}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b004      	add	sp, #16
 8005334:	bd80      	pop	{r7, pc}

08005336 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d103      	bne.n	8005356 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	771a      	strb	r2, [r3, #28]
 8005354:	e019      	b.n	800538a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d103      	bne.n	8005368 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2202      	movs	r2, #2
 8005364:	771a      	strb	r2, [r3, #28]
 8005366:	e010      	b.n	800538a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d103      	bne.n	800537a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2204      	movs	r2, #4
 8005376:	771a      	strb	r2, [r3, #28]
 8005378:	e007      	b.n	800538a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	429a      	cmp	r2, r3
 8005382:	d102      	bne.n	800538a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2208      	movs	r2, #8
 8005388:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	0018      	movs	r0, r3
 800538e:	f7ff ff23 	bl	80051d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	b004      	add	sp, #16
 800539e:	bd80      	pop	{r7, pc}

080053a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a34      	ldr	r2, [pc, #208]	; (8005484 <TIM_Base_SetConfig+0xe4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d008      	beq.n	80053ca <TIM_Base_SetConfig+0x2a>
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	05db      	lsls	r3, r3, #23
 80053be:	429a      	cmp	r2, r3
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x2a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a30      	ldr	r2, [pc, #192]	; (8005488 <TIM_Base_SetConfig+0xe8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2270      	movs	r2, #112	; 0x70
 80053ce:	4393      	bics	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a29      	ldr	r2, [pc, #164]	; (8005484 <TIM_Base_SetConfig+0xe4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <TIM_Base_SetConfig+0x76>
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	05db      	lsls	r3, r3, #23
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d013      	beq.n	8005416 <TIM_Base_SetConfig+0x76>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a25      	ldr	r2, [pc, #148]	; (8005488 <TIM_Base_SetConfig+0xe8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_Base_SetConfig+0x76>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a24      	ldr	r2, [pc, #144]	; (800548c <TIM_Base_SetConfig+0xec>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_Base_SetConfig+0x76>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a23      	ldr	r2, [pc, #140]	; (8005490 <TIM_Base_SetConfig+0xf0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_Base_SetConfig+0x76>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a22      	ldr	r2, [pc, #136]	; (8005494 <TIM_Base_SetConfig+0xf4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_Base_SetConfig+0x76>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a21      	ldr	r2, [pc, #132]	; (8005498 <TIM_Base_SetConfig+0xf8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d108      	bne.n	8005428 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a20      	ldr	r2, [pc, #128]	; (800549c <TIM_Base_SetConfig+0xfc>)
 800541a:	4013      	ands	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	4393      	bics	r3, r2
 800542e:	001a      	movs	r2, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <TIM_Base_SetConfig+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0xce>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a0d      	ldr	r2, [pc, #52]	; (8005490 <TIM_Base_SetConfig+0xf0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0xce>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a0c      	ldr	r2, [pc, #48]	; (8005494 <TIM_Base_SetConfig+0xf4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0xce>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a0b      	ldr	r2, [pc, #44]	; (8005498 <TIM_Base_SetConfig+0xf8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d103      	bne.n	8005476 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	615a      	str	r2, [r3, #20]
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40000400 	.word	0x40000400
 800548c:	40002000 	.word	0x40002000
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	fffffcff 	.word	0xfffffcff

080054a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	2201      	movs	r2, #1
 80054b0:	4393      	bics	r3, r2
 80054b2:	001a      	movs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a32      	ldr	r2, [pc, #200]	; (8005598 <TIM_OC1_SetConfig+0xf8>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2203      	movs	r2, #3
 80054d6:	4393      	bics	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2202      	movs	r2, #2
 80054e8:	4393      	bics	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a28      	ldr	r2, [pc, #160]	; (800559c <TIM_OC1_SetConfig+0xfc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_OC1_SetConfig+0x76>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <TIM_OC1_SetConfig+0x100>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <TIM_OC1_SetConfig+0x76>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <TIM_OC1_SetConfig+0x104>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_OC1_SetConfig+0x76>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <TIM_OC1_SetConfig+0x108>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d10c      	bne.n	8005530 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2208      	movs	r2, #8
 800551a:	4393      	bics	r3, r2
 800551c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2204      	movs	r2, #4
 800552c:	4393      	bics	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a1a      	ldr	r2, [pc, #104]	; (800559c <TIM_OC1_SetConfig+0xfc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_OC1_SetConfig+0xb0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a19      	ldr	r2, [pc, #100]	; (80055a0 <TIM_OC1_SetConfig+0x100>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_OC1_SetConfig+0xb0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <TIM_OC1_SetConfig+0x104>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_OC1_SetConfig+0xb0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <TIM_OC1_SetConfig+0x108>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d111      	bne.n	8005574 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4a16      	ldr	r2, [pc, #88]	; (80055ac <TIM_OC1_SetConfig+0x10c>)
 8005554:	4013      	ands	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <TIM_OC1_SetConfig+0x110>)
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	46bd      	mov	sp, r7
 8005592:	b006      	add	sp, #24
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	fffeff8f 	.word	0xfffeff8f
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400
 80055a8:	40014800 	.word	0x40014800
 80055ac:	fffffeff 	.word	0xfffffeff
 80055b0:	fffffdff 	.word	0xfffffdff

080055b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	2210      	movs	r2, #16
 80055c4:	4393      	bics	r3, r2
 80055c6:	001a      	movs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <TIM_OC2_SetConfig+0xe8>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <TIM_OC2_SetConfig+0xec>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2220      	movs	r2, #32
 80055fe:	4393      	bics	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a24      	ldr	r2, [pc, #144]	; (80056a4 <TIM_OC2_SetConfig+0xf0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d10d      	bne.n	8005632 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	4393      	bics	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2240      	movs	r2, #64	; 0x40
 800562e:	4393      	bics	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <TIM_OC2_SetConfig+0xf0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00b      	beq.n	8005652 <TIM_OC2_SetConfig+0x9e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <TIM_OC2_SetConfig+0xf4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d007      	beq.n	8005652 <TIM_OC2_SetConfig+0x9e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a19      	ldr	r2, [pc, #100]	; (80056ac <TIM_OC2_SetConfig+0xf8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_OC2_SetConfig+0x9e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <TIM_OC2_SetConfig+0xfc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d113      	bne.n	800567a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <TIM_OC2_SetConfig+0x100>)
 8005656:	4013      	ands	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <TIM_OC2_SetConfig+0x104>)
 800565e:	4013      	ands	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	46bd      	mov	sp, r7
 8005698:	b006      	add	sp, #24
 800569a:	bd80      	pop	{r7, pc}
 800569c:	feff8fff 	.word	0xfeff8fff
 80056a0:	fffffcff 	.word	0xfffffcff
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800
 80056b4:	fffffbff 	.word	0xfffffbff
 80056b8:	fffff7ff 	.word	0xfffff7ff

080056bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4a35      	ldr	r2, [pc, #212]	; (80057a0 <TIM_OC3_SetConfig+0xe4>)
 80056cc:	401a      	ands	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <TIM_OC3_SetConfig+0xe8>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2203      	movs	r2, #3
 80056f0:	4393      	bics	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <TIM_OC3_SetConfig+0xec>)
 8005702:	4013      	ands	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a25      	ldr	r2, [pc, #148]	; (80057ac <TIM_OC3_SetConfig+0xf0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10d      	bne.n	8005736 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4a24      	ldr	r2, [pc, #144]	; (80057b0 <TIM_OC3_SetConfig+0xf4>)
 800571e:	4013      	ands	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <TIM_OC3_SetConfig+0xf8>)
 8005732:	4013      	ands	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <TIM_OC3_SetConfig+0xf0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_OC3_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <TIM_OC3_SetConfig+0xfc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_OC3_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <TIM_OC3_SetConfig+0x100>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_OC3_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1b      	ldr	r2, [pc, #108]	; (80057c0 <TIM_OC3_SetConfig+0x104>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d113      	bne.n	800577e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <TIM_OC3_SetConfig+0x108>)
 800575a:	4013      	ands	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4a19      	ldr	r2, [pc, #100]	; (80057c8 <TIM_OC3_SetConfig+0x10c>)
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b006      	add	sp, #24
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	fffffeff 	.word	0xfffffeff
 80057a4:	fffeff8f 	.word	0xfffeff8f
 80057a8:	fffffdff 	.word	0xfffffdff
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	fffff7ff 	.word	0xfffff7ff
 80057b4:	fffffbff 	.word	0xfffffbff
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40014400 	.word	0x40014400
 80057c0:	40014800 	.word	0x40014800
 80057c4:	ffffefff 	.word	0xffffefff
 80057c8:	ffffdfff 	.word	0xffffdfff

080057cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	4a28      	ldr	r2, [pc, #160]	; (800587c <TIM_OC4_SetConfig+0xb0>)
 80057dc:	401a      	ands	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a22      	ldr	r2, [pc, #136]	; (8005880 <TIM_OC4_SetConfig+0xb4>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a21      	ldr	r2, [pc, #132]	; (8005884 <TIM_OC4_SetConfig+0xb8>)
 8005800:	4013      	ands	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <TIM_OC4_SetConfig+0xbc>)
 8005814:	4013      	ands	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	031b      	lsls	r3, r3, #12
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a19      	ldr	r2, [pc, #100]	; (800588c <TIM_OC4_SetConfig+0xc0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_OC4_SetConfig+0x78>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a18      	ldr	r2, [pc, #96]	; (8005890 <TIM_OC4_SetConfig+0xc4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_OC4_SetConfig+0x78>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a17      	ldr	r2, [pc, #92]	; (8005894 <TIM_OC4_SetConfig+0xc8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC4_SetConfig+0x78>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a16      	ldr	r2, [pc, #88]	; (8005898 <TIM_OC4_SetConfig+0xcc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d109      	bne.n	8005858 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4a15      	ldr	r2, [pc, #84]	; (800589c <TIM_OC4_SetConfig+0xd0>)
 8005848:	4013      	ands	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	b006      	add	sp, #24
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	ffffefff 	.word	0xffffefff
 8005880:	feff8fff 	.word	0xfeff8fff
 8005884:	fffffcff 	.word	0xfffffcff
 8005888:	ffffdfff 	.word	0xffffdfff
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800
 800589c:	ffffbfff 	.word	0xffffbfff

080058a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	4a25      	ldr	r2, [pc, #148]	; (8005944 <TIM_OC5_SetConfig+0xa4>)
 80058b0:	401a      	ands	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <TIM_OC5_SetConfig+0xa8>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <TIM_OC5_SetConfig+0xac>)
 80058de:	4013      	ands	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a17      	ldr	r2, [pc, #92]	; (8005950 <TIM_OC5_SetConfig+0xb0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_OC5_SetConfig+0x6e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a16      	ldr	r2, [pc, #88]	; (8005954 <TIM_OC5_SetConfig+0xb4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_OC5_SetConfig+0x6e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <TIM_OC5_SetConfig+0xb8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_OC5_SetConfig+0x6e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a14      	ldr	r2, [pc, #80]	; (800595c <TIM_OC5_SetConfig+0xbc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d109      	bne.n	8005922 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <TIM_OC5_SetConfig+0xa4>)
 8005912:	4013      	ands	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	021b      	lsls	r3, r3, #8
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	b006      	add	sp, #24
 8005942:	bd80      	pop	{r7, pc}
 8005944:	fffeffff 	.word	0xfffeffff
 8005948:	fffeff8f 	.word	0xfffeff8f
 800594c:	fffdffff 	.word	0xfffdffff
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40014000 	.word	0x40014000
 8005958:	40014400 	.word	0x40014400
 800595c:	40014800 	.word	0x40014800

08005960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <TIM_OC6_SetConfig+0xa8>)
 8005970:	401a      	ands	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <TIM_OC6_SetConfig+0xac>)
 800598c:	4013      	ands	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <TIM_OC6_SetConfig+0xb0>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	051b      	lsls	r3, r3, #20
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <TIM_OC6_SetConfig+0xb4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_OC6_SetConfig+0x70>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <TIM_OC6_SetConfig+0xb8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_OC6_SetConfig+0x70>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <TIM_OC6_SetConfig+0xbc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC6_SetConfig+0x70>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <TIM_OC6_SetConfig+0xc0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d109      	bne.n	80059e4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <TIM_OC6_SetConfig+0xc4>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b006      	add	sp, #24
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	ffefffff 	.word	0xffefffff
 8005a0c:	feff8fff 	.word	0xfeff8fff
 8005a10:	ffdfffff 	.word	0xffdfffff
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800
 8005a24:	fffbffff 	.word	0xfffbffff

08005a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	221f      	movs	r2, #31
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	0013      	movs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	43d2      	mvns	r2, r2
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	211f      	movs	r1, #31
 8005a58:	400b      	ands	r3, r1
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4099      	lsls	r1, r3
 8005a5e:	000b      	movs	r3, r1
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b006      	add	sp, #24
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	223c      	movs	r2, #60	; 0x3c
 8005a7e:	5c9b      	ldrb	r3, [r3, r2]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e055      	b.n	8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	223c      	movs	r2, #60	; 0x3c
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	223d      	movs	r2, #61	; 0x3d
 8005a94:	2102      	movs	r1, #2
 8005a96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a23      	ldr	r2, [pc, #140]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d108      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2270      	movs	r2, #112	; 0x70
 8005ac8:	4393      	bics	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	05db      	lsls	r3, r3, #23
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d009      	beq.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10c      	bne.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	4393      	bics	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	223d      	movs	r2, #61	; 0x3d
 8005b26:	2101      	movs	r1, #1
 8005b28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	223c      	movs	r2, #60	; 0x3c
 8005b2e:	2100      	movs	r1, #0
 8005b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b004      	add	sp, #16
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	ff0fffff 	.word	0xff0fffff
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40014000 	.word	0x40014000

08005b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	223c      	movs	r2, #60	; 0x3c
 8005b5e:	5c9b      	ldrb	r3, [r3, r2]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e079      	b.n	8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	223c      	movs	r2, #60	; 0x3c
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	22ff      	movs	r2, #255	; 0xff
 8005b74:	4393      	bics	r3, r2
 8005b76:	001a      	movs	r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005b84:	401a      	ands	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a35      	ldr	r2, [pc, #212]	; (8005c68 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005b92:	401a      	ands	r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4a33      	ldr	r2, [pc, #204]	; (8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005ba0:	401a      	ands	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a30      	ldr	r2, [pc, #192]	; (8005c70 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005bae:	401a      	ands	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a2e      	ldr	r2, [pc, #184]	; (8005c74 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005bbc:	401a      	ands	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a2b      	ldr	r2, [pc, #172]	; (8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005bca:	401a      	ands	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a29      	ldr	r2, [pc, #164]	; (8005c7c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005bd8:	401a      	ands	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d106      	bne.n	8005bfc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a24      	ldr	r2, [pc, #144]	; (8005c84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d121      	bne.n	8005c4a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a1f      	ldr	r2, [pc, #124]	; (8005c88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	051b      	lsls	r3, r3, #20
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005c28:	401a      	ands	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d106      	bne.n	8005c4a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005c40:	401a      	ands	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	223c      	movs	r2, #60	; 0x3c
 8005c56:	2100      	movs	r1, #0
 8005c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b004      	add	sp, #16
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	fffffcff 	.word	0xfffffcff
 8005c68:	fffffbff 	.word	0xfffffbff
 8005c6c:	fffff7ff 	.word	0xfffff7ff
 8005c70:	ffffefff 	.word	0xffffefff
 8005c74:	ffffdfff 	.word	0xffffdfff
 8005c78:	ffffbfff 	.word	0xffffbfff
 8005c7c:	fff0ffff 	.word	0xfff0ffff
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	efffffff 	.word	0xefffffff
 8005c88:	ff0fffff 	.word	0xff0fffff
 8005c8c:	feffffff 	.word	0xfeffffff
 8005c90:	fdffffff 	.word	0xfdffffff
 8005c94:	dfffffff 	.word	0xdfffffff

08005c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e046      	b.n	8005d38 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2284      	movs	r2, #132	; 0x84
 8005cae:	589b      	ldr	r3, [r3, r2]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d107      	bne.n	8005cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	2100      	movs	r1, #0
 8005cba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f7fb fcea 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2284      	movs	r2, #132	; 0x84
 8005cc8:	2124      	movs	r1, #36	; 0x24
 8005cca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	438a      	bics	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f000 fea4 	bl	8006a2c <UART_SetConfig>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e024      	b.n	8005d38 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f001 f955 	bl	8006fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	490d      	ldr	r1, [pc, #52]	; (8005d40 <HAL_UART_Init+0xa8>)
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	212a      	movs	r1, #42	; 0x2a
 8005d1a:	438a      	bics	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f001 f9ed 	bl	8007110 <UART_CheckIdleState>
 8005d36:	0003      	movs	r3, r0
}
 8005d38:	0018      	movs	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b002      	add	sp, #8
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	ffffb7ff 	.word	0xffffb7ff

08005d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	1dbb      	adds	r3, r7, #6
 8005d52:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2284      	movs	r2, #132	; 0x84
 8005d58:	589b      	ldr	r3, [r3, r2]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d000      	beq.n	8005d60 <HAL_UART_Transmit+0x1c>
 8005d5e:	e097      	b.n	8005e90 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_UART_Transmit+0x2a>
 8005d66:	1dbb      	adds	r3, r7, #6
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e08f      	b.n	8005e92 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	015b      	lsls	r3, r3, #5
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d109      	bne.n	8005d92 <HAL_UART_Transmit+0x4e>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d001      	beq.n	8005d92 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07f      	b.n	8005e92 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	5c9b      	ldrb	r3, [r3, r2]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Transmit+0x5c>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e078      	b.n	8005e92 <HAL_UART_Transmit+0x14e>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	2101      	movs	r1, #1
 8005da6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	228c      	movs	r2, #140	; 0x8c
 8005dac:	2100      	movs	r1, #0
 8005dae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2284      	movs	r2, #132	; 0x84
 8005db4:	2121      	movs	r1, #33	; 0x21
 8005db6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005db8:	f7fc f972 	bl	80020a0 <HAL_GetTick>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1dba      	adds	r2, r7, #6
 8005dc4:	2154      	movs	r1, #84	; 0x54
 8005dc6:	8812      	ldrh	r2, [r2, #0]
 8005dc8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	1dba      	adds	r2, r7, #6
 8005dce:	2156      	movs	r1, #86	; 0x56
 8005dd0:	8812      	ldrh	r2, [r2, #0]
 8005dd2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	015b      	lsls	r3, r3, #5
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d108      	bne.n	8005df2 <HAL_UART_Transmit+0xae>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e003      	b.n	8005dfa <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2280      	movs	r2, #128	; 0x80
 8005dfe:	2100      	movs	r1, #0
 8005e00:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005e02:	e02c      	b.n	8005e5e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	0013      	movs	r3, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	f001 f9c7 	bl	80071a4 <UART_WaitOnFlagUntilTimeout>
 8005e16:	1e03      	subs	r3, r0, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e039      	b.n	8005e92 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	001a      	movs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	3302      	adds	r3, #2
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	e007      	b.n	8005e4c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2256      	movs	r2, #86	; 0x56
 8005e50:	5a9b      	ldrh	r3, [r3, r2]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b299      	uxth	r1, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2256      	movs	r2, #86	; 0x56
 8005e5c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2256      	movs	r2, #86	; 0x56
 8005e62:	5a9b      	ldrh	r3, [r3, r2]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1cc      	bne.n	8005e04 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	0013      	movs	r3, r2
 8005e74:	2200      	movs	r2, #0
 8005e76:	2140      	movs	r1, #64	; 0x40
 8005e78:	f001 f994 	bl	80071a4 <UART_WaitOnFlagUntilTimeout>
 8005e7c:	1e03      	subs	r3, r0, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e006      	b.n	8005e92 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2284      	movs	r2, #132	; 0x84
 8005e88:	2120      	movs	r1, #32
 8005e8a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b008      	add	sp, #32
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	1dbb      	adds	r3, r7, #6
 8005eaa:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2288      	movs	r2, #136	; 0x88
 8005eb0:	589b      	ldr	r3, [r3, r2]
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d000      	beq.n	8005eb8 <HAL_UART_Receive+0x1c>
 8005eb6:	e0db      	b.n	8006070 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_UART_Receive+0x2a>
 8005ebe:	1dbb      	adds	r3, r7, #6
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e0d3      	b.n	8006072 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	2380      	movs	r3, #128	; 0x80
 8005ed0:	015b      	lsls	r3, r3, #5
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d109      	bne.n	8005eea <HAL_UART_Receive+0x4e>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d105      	bne.n	8005eea <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d001      	beq.n	8005eea <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e0c3      	b.n	8006072 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	5c9b      	ldrb	r3, [r3, r2]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_UART_Receive+0x5c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e0bc      	b.n	8006072 <HAL_UART_Receive+0x1d6>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	2101      	movs	r1, #1
 8005efe:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	228c      	movs	r2, #140	; 0x8c
 8005f04:	2100      	movs	r1, #0
 8005f06:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2288      	movs	r2, #136	; 0x88
 8005f0c:	2122      	movs	r1, #34	; 0x22
 8005f0e:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f16:	f7fc f8c3 	bl	80020a0 <HAL_GetTick>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1dba      	adds	r2, r7, #6
 8005f22:	215c      	movs	r1, #92	; 0x5c
 8005f24:	8812      	ldrh	r2, [r2, #0]
 8005f26:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1dba      	adds	r2, r7, #6
 8005f2c:	215e      	movs	r1, #94	; 0x5e
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	2380      	movs	r3, #128	; 0x80
 8005f38:	015b      	lsls	r3, r3, #5
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d10d      	bne.n	8005f5a <HAL_UART_Receive+0xbe>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <HAL_UART_Receive+0xb4>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2260      	movs	r2, #96	; 0x60
 8005f4a:	494c      	ldr	r1, [pc, #304]	; (800607c <HAL_UART_Receive+0x1e0>)
 8005f4c:	5299      	strh	r1, [r3, r2]
 8005f4e:	e02e      	b.n	8005fae <HAL_UART_Receive+0x112>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2260      	movs	r2, #96	; 0x60
 8005f54:	21ff      	movs	r1, #255	; 0xff
 8005f56:	5299      	strh	r1, [r3, r2]
 8005f58:	e029      	b.n	8005fae <HAL_UART_Receive+0x112>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10d      	bne.n	8005f7e <HAL_UART_Receive+0xe2>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <HAL_UART_Receive+0xd8>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2260      	movs	r2, #96	; 0x60
 8005f6e:	21ff      	movs	r1, #255	; 0xff
 8005f70:	5299      	strh	r1, [r3, r2]
 8005f72:	e01c      	b.n	8005fae <HAL_UART_Receive+0x112>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2260      	movs	r2, #96	; 0x60
 8005f78:	217f      	movs	r1, #127	; 0x7f
 8005f7a:	5299      	strh	r1, [r3, r2]
 8005f7c:	e017      	b.n	8005fae <HAL_UART_Receive+0x112>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	055b      	lsls	r3, r3, #21
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d10d      	bne.n	8005fa6 <HAL_UART_Receive+0x10a>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_UART_Receive+0x100>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2260      	movs	r2, #96	; 0x60
 8005f96:	217f      	movs	r1, #127	; 0x7f
 8005f98:	5299      	strh	r1, [r3, r2]
 8005f9a:	e008      	b.n	8005fae <HAL_UART_Receive+0x112>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2260      	movs	r2, #96	; 0x60
 8005fa0:	213f      	movs	r1, #63	; 0x3f
 8005fa2:	5299      	strh	r1, [r3, r2]
 8005fa4:	e003      	b.n	8005fae <HAL_UART_Receive+0x112>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2260      	movs	r2, #96	; 0x60
 8005faa:	2100      	movs	r1, #0
 8005fac:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005fae:	2312      	movs	r3, #18
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	2160      	movs	r1, #96	; 0x60
 8005fb6:	5a52      	ldrh	r2, [r2, r1]
 8005fb8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	015b      	lsls	r3, r3, #5
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d108      	bne.n	8005fd8 <HAL_UART_Receive+0x13c>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e003      	b.n	8005fe0 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005fe8:	e036      	b.n	8006058 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	0013      	movs	r3, r2
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2120      	movs	r1, #32
 8005ff8:	f001 f8d4 	bl	80071a4 <UART_WaitOnFlagUntilTimeout>
 8005ffc:	1e03      	subs	r3, r0, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e036      	b.n	8006072 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10e      	bne.n	8006028 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	b29b      	uxth	r3, r3
 8006012:	2212      	movs	r2, #18
 8006014:	18ba      	adds	r2, r7, r2
 8006016:	8812      	ldrh	r2, [r2, #0]
 8006018:	4013      	ands	r3, r2
 800601a:	b29a      	uxth	r2, r3
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3302      	adds	r3, #2
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e00e      	b.n	8006046 <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2212      	movs	r2, #18
 8006032:	18ba      	adds	r2, r7, r2
 8006034:	8812      	ldrh	r2, [r2, #0]
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	4013      	ands	r3, r2
 800603a:	b2da      	uxtb	r2, r3
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3301      	adds	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	225e      	movs	r2, #94	; 0x5e
 800604a:	5a9b      	ldrh	r3, [r3, r2]
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b299      	uxth	r1, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	225e      	movs	r2, #94	; 0x5e
 8006056:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	225e      	movs	r2, #94	; 0x5e
 800605c:	5a9b      	ldrh	r3, [r3, r2]
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1c2      	bne.n	8005fea <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2288      	movs	r2, #136	; 0x88
 8006068:	2120      	movs	r1, #32
 800606a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e000      	b.n	8006072 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b008      	add	sp, #32
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	000001ff 	.word	0x000001ff

08006080 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	1dbb      	adds	r3, r7, #6
 800608c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2288      	movs	r2, #136	; 0x88
 8006092:	589b      	ldr	r3, [r3, r2]
 8006094:	2b20      	cmp	r3, #32
 8006096:	d155      	bne.n	8006144 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_UART_Receive_IT+0x26>
 800609e:	1dbb      	adds	r3, r7, #6
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e04d      	b.n	8006146 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	015b      	lsls	r3, r3, #5
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d109      	bne.n	80060ca <HAL_UART_Receive_IT+0x4a>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2201      	movs	r2, #1
 80060c2:	4013      	ands	r3, r2
 80060c4:	d001      	beq.n	80060ca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e03d      	b.n	8006146 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2280      	movs	r2, #128	; 0x80
 80060ce:	5c9b      	ldrb	r3, [r3, r2]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_UART_Receive_IT+0x58>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e036      	b.n	8006146 <HAL_UART_Receive_IT+0xc6>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2280      	movs	r2, #128	; 0x80
 80060dc:	2101      	movs	r1, #1
 80060de:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a19      	ldr	r2, [pc, #100]	; (8006150 <HAL_UART_Receive_IT+0xd0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d020      	beq.n	8006132 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	041b      	lsls	r3, r3, #16
 80060fa:	4013      	ands	r3, r2
 80060fc:	d019      	beq.n	8006132 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006102:	613b      	str	r3, [r7, #16]
  return(result);
 8006104:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f383 8810 	msr	PRIMASK, r3
}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2180      	movs	r1, #128	; 0x80
 8006120:	04c9      	lsls	r1, r1, #19
 8006122:	430a      	orrs	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f383 8810 	msr	PRIMASK, r3
}
 8006130:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006132:	1dbb      	adds	r3, r7, #6
 8006134:	881a      	ldrh	r2, [r3, #0]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	0018      	movs	r0, r3
 800613c:	f001 f8fa 	bl	8007334 <UART_Start_Receive_IT>
 8006140:	0003      	movs	r3, r0
 8006142:	e000      	b.n	8006146 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006144:	2302      	movs	r3, #2
  }
}
 8006146:	0018      	movs	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	b008      	add	sp, #32
 800614c:	bd80      	pop	{r7, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	40008000 	.word	0x40008000

08006154 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b098      	sub	sp, #96	; 0x60
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800615c:	2301      	movs	r3, #1
 800615e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006160:	f3ef 8310 	mrs	r3, PRIMASK
 8006164:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8006168:	65bb      	str	r3, [r7, #88]	; 0x58
 800616a:	2301      	movs	r3, #1
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006170:	f383 8810 	msr	PRIMASK, r3
}
 8006174:	46c0      	nop			; (mov r8, r8)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4987      	ldr	r1, [pc, #540]	; (80063a0 <HAL_UART_Abort_IT+0x24c>)
 8006182:	400a      	ands	r2, r1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006188:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800619a:	657b      	str	r3, [r7, #84]	; 0x54
 800619c:	2301      	movs	r3, #1
 800619e:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a2:	f383 8810 	msr	PRIMASK, r3
}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	497c      	ldr	r1, [pc, #496]	; (80063a4 <HAL_UART_Abort_IT+0x250>)
 80061b4:	400a      	ands	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ba:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	f383 8810 	msr	PRIMASK, r3
}
 80061c2:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d118      	bne.n	80061fe <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061cc:	f3ef 8310 	mrs	r3, PRIMASK
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80061d4:	653b      	str	r3, [r7, #80]	; 0x50
 80061d6:	2301      	movs	r3, #1
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	f383 8810 	msr	PRIMASK, r3
}
 80061e0:	46c0      	nop			; (mov r8, r8)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2110      	movs	r1, #16
 80061ee:	438a      	bics	r2, r1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	f383 8810 	msr	PRIMASK, r3
}
 80061fc:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00f      	beq.n	8006226 <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2280      	movs	r2, #128	; 0x80
 800620e:	4013      	ands	r3, r2
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d104      	bne.n	800621e <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006218:	4a63      	ldr	r2, [pc, #396]	; (80063a8 <HAL_UART_Abort_IT+0x254>)
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
 800621c:	e003      	b.n	8006226 <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006222:	2200      	movs	r2, #0
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <HAL_UART_Abort_IT+0xfa>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2240      	movs	r2, #64	; 0x40
 8006236:	4013      	ands	r3, r2
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d104      	bne.n	8006246 <HAL_UART_Abort_IT+0xf2>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006240:	4a5a      	ldr	r2, [pc, #360]	; (80063ac <HAL_UART_Abort_IT+0x258>)
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
 8006244:	e003      	b.n	800624e <HAL_UART_Abort_IT+0xfa>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624a:	2200      	movs	r2, #0
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2280      	movs	r2, #128	; 0x80
 8006256:	4013      	ands	r3, r2
 8006258:	2b80      	cmp	r3, #128	; 0x80
 800625a:	d12a      	bne.n	80062b2 <HAL_UART_Abort_IT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	61bb      	str	r3, [r7, #24]
  return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006266:	2301      	movs	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2180      	movs	r1, #128	; 0x80
 800627e:	438a      	bics	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	f383 8810 	msr	PRIMASK, r3
}
 800628c:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <HAL_UART_Abort_IT+0x15e>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629a:	0018      	movs	r0, r3
 800629c:	f7fd f8aa 	bl	80033f4 <HAL_DMA_Abort_IT>
 80062a0:	1e03      	subs	r3, r0, #0
 80062a2:	d004      	beq.n	80062ae <HAL_UART_Abort_IT+0x15a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a8:	2200      	movs	r2, #0
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
 80062ac:	e001      	b.n	80062b2 <HAL_UART_Abort_IT+0x15e>
      }
      else
      {
        abortcplt = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2240      	movs	r2, #64	; 0x40
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d12c      	bne.n	800631a <HAL_UART_Abort_IT+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c0:	f3ef 8310 	mrs	r3, PRIMASK
 80062c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80062c6:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ca:	2301      	movs	r3, #1
 80062cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f383 8810 	msr	PRIMASK, r3
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2140      	movs	r1, #64	; 0x40
 80062e2:	438a      	bics	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
 80062e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f383 8810 	msr	PRIMASK, r3
}
 80062f0:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00f      	beq.n	800631a <HAL_UART_Abort_IT+0x1c6>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062fe:	0018      	movs	r0, r3
 8006300:	f7fd f878 	bl	80033f4 <HAL_DMA_Abort_IT>
 8006304:	1e03      	subs	r3, r0, #0
 8006306:	d006      	beq.n	8006316 <HAL_UART_Abort_IT+0x1c2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630c:	2200      	movs	r2, #0
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8006310:	2301      	movs	r3, #1
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006314:	e001      	b.n	800631a <HAL_UART_Abort_IT+0x1c6>
      }
      else
      {
        abortcplt = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	2b01      	cmp	r3, #1
 800631e:	d13a      	bne.n	8006396 <HAL_UART_Abort_IT+0x242>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2256      	movs	r2, #86	; 0x56
 8006324:	2100      	movs	r1, #0
 8006326:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	225e      	movs	r2, #94	; 0x5e
 800632c:	2100      	movs	r1, #0
 800632e:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	228c      	movs	r2, #140	; 0x8c
 8006340:	2100      	movs	r1, #0
 8006342:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	220f      	movs	r2, #15
 800634a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	059b      	lsls	r3, r3, #22
 8006354:	429a      	cmp	r2, r3
 8006356:	d107      	bne.n	8006368 <HAL_UART_Abort_IT+0x214>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2110      	movs	r1, #16
 8006364:	430a      	orrs	r2, r1
 8006366:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2108      	movs	r1, #8
 8006374:	430a      	orrs	r2, r1
 8006376:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2284      	movs	r2, #132	; 0x84
 800637c:	2120      	movs	r1, #32
 800637e:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2288      	movs	r2, #136	; 0x88
 8006384:	2120      	movs	r1, #32
 8006386:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	0018      	movs	r0, r3
 8006392:	f000 fb37 	bl	8006a04 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	b018      	add	sp, #96	; 0x60
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	fffffe1f 	.word	0xfffffe1f
 80063a4:	ef7ffffe 	.word	0xef7ffffe
 80063a8:	08007687 	.word	0x08007687
 80063ac:	08007713 	.word	0x08007713

080063b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b0aa      	sub	sp, #168	; 0xa8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	22a4      	movs	r2, #164	; 0xa4
 80063c0:	18b9      	adds	r1, r7, r2
 80063c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	20a0      	movs	r0, #160	; 0xa0
 80063cc:	1839      	adds	r1, r7, r0
 80063ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	249c      	movs	r4, #156	; 0x9c
 80063d8:	1939      	adds	r1, r7, r4
 80063da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063dc:	0011      	movs	r1, r2
 80063de:	18bb      	adds	r3, r7, r2
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4aa0      	ldr	r2, [pc, #640]	; (8006664 <HAL_UART_IRQHandler+0x2b4>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	2298      	movs	r2, #152	; 0x98
 80063e8:	18bd      	adds	r5, r7, r2
 80063ea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80063ec:	18bb      	adds	r3, r7, r2
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11a      	bne.n	800642a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063f4:	187b      	adds	r3, r7, r1
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2220      	movs	r2, #32
 80063fa:	4013      	ands	r3, r2
 80063fc:	d015      	beq.n	800642a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063fe:	183b      	adds	r3, r7, r0
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2220      	movs	r2, #32
 8006404:	4013      	ands	r3, r2
 8006406:	d105      	bne.n	8006414 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006408:	193b      	adds	r3, r7, r4
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	055b      	lsls	r3, r3, #21
 8006410:	4013      	ands	r3, r2
 8006412:	d00a      	beq.n	800642a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006418:	2b00      	cmp	r3, #0
 800641a:	d100      	bne.n	800641e <HAL_UART_IRQHandler+0x6e>
 800641c:	e2cf      	b.n	80069be <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	0010      	movs	r0, r2
 8006426:	4798      	blx	r3
      }
      return;
 8006428:	e2c9      	b.n	80069be <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800642a:	2398      	movs	r3, #152	; 0x98
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d100      	bne.n	8006436 <HAL_UART_IRQHandler+0x86>
 8006434:	e11e      	b.n	8006674 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006436:	239c      	movs	r3, #156	; 0x9c
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a8a      	ldr	r2, [pc, #552]	; (8006668 <HAL_UART_IRQHandler+0x2b8>)
 800643e:	4013      	ands	r3, r2
 8006440:	d106      	bne.n	8006450 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006442:	23a0      	movs	r3, #160	; 0xa0
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a88      	ldr	r2, [pc, #544]	; (800666c <HAL_UART_IRQHandler+0x2bc>)
 800644a:	4013      	ands	r3, r2
 800644c:	d100      	bne.n	8006450 <HAL_UART_IRQHandler+0xa0>
 800644e:	e111      	b.n	8006674 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006450:	23a4      	movs	r3, #164	; 0xa4
 8006452:	18fb      	adds	r3, r7, r3
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2201      	movs	r2, #1
 8006458:	4013      	ands	r3, r2
 800645a:	d012      	beq.n	8006482 <HAL_UART_IRQHandler+0xd2>
 800645c:	23a0      	movs	r3, #160	; 0xa0
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	2380      	movs	r3, #128	; 0x80
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4013      	ands	r3, r2
 8006468:	d00b      	beq.n	8006482 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2201      	movs	r2, #1
 8006470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	228c      	movs	r2, #140	; 0x8c
 8006476:	589b      	ldr	r3, [r3, r2]
 8006478:	2201      	movs	r2, #1
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	218c      	movs	r1, #140	; 0x8c
 8006480:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006482:	23a4      	movs	r3, #164	; 0xa4
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2202      	movs	r2, #2
 800648a:	4013      	ands	r3, r2
 800648c:	d011      	beq.n	80064b2 <HAL_UART_IRQHandler+0x102>
 800648e:	239c      	movs	r3, #156	; 0x9c
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2201      	movs	r2, #1
 8006496:	4013      	ands	r3, r2
 8006498:	d00b      	beq.n	80064b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2202      	movs	r2, #2
 80064a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	228c      	movs	r2, #140	; 0x8c
 80064a6:	589b      	ldr	r3, [r3, r2]
 80064a8:	2204      	movs	r2, #4
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	218c      	movs	r1, #140	; 0x8c
 80064b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b2:	23a4      	movs	r3, #164	; 0xa4
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2204      	movs	r2, #4
 80064ba:	4013      	ands	r3, r2
 80064bc:	d011      	beq.n	80064e2 <HAL_UART_IRQHandler+0x132>
 80064be:	239c      	movs	r3, #156	; 0x9c
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2201      	movs	r2, #1
 80064c6:	4013      	ands	r3, r2
 80064c8:	d00b      	beq.n	80064e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2204      	movs	r2, #4
 80064d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	228c      	movs	r2, #140	; 0x8c
 80064d6:	589b      	ldr	r3, [r3, r2]
 80064d8:	2202      	movs	r2, #2
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	218c      	movs	r1, #140	; 0x8c
 80064e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064e2:	23a4      	movs	r3, #164	; 0xa4
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2208      	movs	r2, #8
 80064ea:	4013      	ands	r3, r2
 80064ec:	d017      	beq.n	800651e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064ee:	23a0      	movs	r3, #160	; 0xa0
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2220      	movs	r2, #32
 80064f6:	4013      	ands	r3, r2
 80064f8:	d105      	bne.n	8006506 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064fa:	239c      	movs	r3, #156	; 0x9c
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a59      	ldr	r2, [pc, #356]	; (8006668 <HAL_UART_IRQHandler+0x2b8>)
 8006502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006504:	d00b      	beq.n	800651e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2208      	movs	r2, #8
 800650c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	228c      	movs	r2, #140	; 0x8c
 8006512:	589b      	ldr	r3, [r3, r2]
 8006514:	2208      	movs	r2, #8
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	218c      	movs	r1, #140	; 0x8c
 800651c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800651e:	23a4      	movs	r3, #164	; 0xa4
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	4013      	ands	r3, r2
 800652a:	d013      	beq.n	8006554 <HAL_UART_IRQHandler+0x1a4>
 800652c:	23a0      	movs	r3, #160	; 0xa0
 800652e:	18fb      	adds	r3, r7, r3
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	04db      	lsls	r3, r3, #19
 8006536:	4013      	ands	r3, r2
 8006538:	d00c      	beq.n	8006554 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	0112      	lsls	r2, r2, #4
 8006542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	228c      	movs	r2, #140	; 0x8c
 8006548:	589b      	ldr	r3, [r3, r2]
 800654a:	2220      	movs	r2, #32
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	218c      	movs	r1, #140	; 0x8c
 8006552:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	228c      	movs	r2, #140	; 0x8c
 8006558:	589b      	ldr	r3, [r3, r2]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d100      	bne.n	8006560 <HAL_UART_IRQHandler+0x1b0>
 800655e:	e230      	b.n	80069c2 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006560:	23a4      	movs	r3, #164	; 0xa4
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2220      	movs	r2, #32
 8006568:	4013      	ands	r3, r2
 800656a:	d015      	beq.n	8006598 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800656c:	23a0      	movs	r3, #160	; 0xa0
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2220      	movs	r2, #32
 8006574:	4013      	ands	r3, r2
 8006576:	d106      	bne.n	8006586 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006578:	239c      	movs	r3, #156	; 0x9c
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	055b      	lsls	r3, r3, #21
 8006582:	4013      	ands	r3, r2
 8006584:	d008      	beq.n	8006598 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	0010      	movs	r0, r2
 8006596:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	228c      	movs	r2, #140	; 0x8c
 800659c:	589b      	ldr	r3, [r3, r2]
 800659e:	2194      	movs	r1, #148	; 0x94
 80065a0:	187a      	adds	r2, r7, r1
 80065a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2240      	movs	r2, #64	; 0x40
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d004      	beq.n	80065bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065b2:	187b      	adds	r3, r7, r1
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2228      	movs	r2, #40	; 0x28
 80065b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065ba:	d047      	beq.n	800664c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 ffe4 	bl	800758c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d137      	bne.n	8006642 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d2:	f3ef 8310 	mrs	r3, PRIMASK
 80065d6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80065d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	2090      	movs	r0, #144	; 0x90
 80065dc:	183a      	adds	r2, r7, r0
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	2301      	movs	r3, #1
 80065e2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e6:	f383 8810 	msr	PRIMASK, r3
}
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2140      	movs	r1, #64	; 0x40
 80065f8:	438a      	bics	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]
 80065fc:	183b      	adds	r3, r7, r0
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006604:	f383 8810 	msr	PRIMASK, r3
}
 8006608:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d012      	beq.n	8006638 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006616:	4a16      	ldr	r2, [pc, #88]	; (8006670 <HAL_UART_IRQHandler+0x2c0>)
 8006618:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800661e:	0018      	movs	r0, r3
 8006620:	f7fc fee8 	bl	80033f4 <HAL_DMA_Abort_IT>
 8006624:	1e03      	subs	r3, r0, #0
 8006626:	d01a      	beq.n	800665e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800662c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006632:	0018      	movs	r0, r3
 8006634:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006636:	e012      	b.n	800665e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	0018      	movs	r0, r3
 800663c:	f000 f9da 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	e00d      	b.n	800665e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0018      	movs	r0, r3
 8006646:	f000 f9d5 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664a:	e008      	b.n	800665e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	0018      	movs	r0, r3
 8006650:	f000 f9d0 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	228c      	movs	r2, #140	; 0x8c
 8006658:	2100      	movs	r1, #0
 800665a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800665c:	e1b1      	b.n	80069c2 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665e:	46c0      	nop			; (mov r8, r8)
    return;
 8006660:	e1af      	b.n	80069c2 <HAL_UART_IRQHandler+0x612>
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	0000080f 	.word	0x0000080f
 8006668:	10000001 	.word	0x10000001
 800666c:	04000120 	.word	0x04000120
 8006670:	08007659 	.word	0x08007659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d000      	beq.n	800667e <HAL_UART_IRQHandler+0x2ce>
 800667c:	e135      	b.n	80068ea <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800667e:	23a4      	movs	r3, #164	; 0xa4
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2210      	movs	r2, #16
 8006686:	4013      	ands	r3, r2
 8006688:	d100      	bne.n	800668c <HAL_UART_IRQHandler+0x2dc>
 800668a:	e12e      	b.n	80068ea <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800668c:	23a0      	movs	r3, #160	; 0xa0
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2210      	movs	r2, #16
 8006694:	4013      	ands	r3, r2
 8006696:	d100      	bne.n	800669a <HAL_UART_IRQHandler+0x2ea>
 8006698:	e127      	b.n	80068ea <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2210      	movs	r2, #16
 80066a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	2240      	movs	r2, #64	; 0x40
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d000      	beq.n	80066b2 <HAL_UART_IRQHandler+0x302>
 80066b0:	e09e      	b.n	80067f0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	217e      	movs	r1, #126	; 0x7e
 80066bc:	187b      	adds	r3, r7, r1
 80066be:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d100      	bne.n	80066ca <HAL_UART_IRQHandler+0x31a>
 80066c8:	e17d      	b.n	80069c6 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	225c      	movs	r2, #92	; 0x5c
 80066ce:	5a9b      	ldrh	r3, [r3, r2]
 80066d0:	187a      	adds	r2, r7, r1
 80066d2:	8812      	ldrh	r2, [r2, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d300      	bcc.n	80066da <HAL_UART_IRQHandler+0x32a>
 80066d8:	e175      	b.n	80069c6 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	187a      	adds	r2, r7, r1
 80066de:	215e      	movs	r1, #94	; 0x5e
 80066e0:	8812      	ldrh	r2, [r2, #0]
 80066e2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2220      	movs	r2, #32
 80066ee:	4013      	ands	r3, r2
 80066f0:	d16f      	bne.n	80067d2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f2:	f3ef 8310 	mrs	r3, PRIMASK
 80066f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80066fc:	2301      	movs	r3, #1
 80066fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	49b1      	ldr	r1, [pc, #708]	; (80069d8 <HAL_UART_IRQHandler+0x628>)
 8006714:	400a      	ands	r2, r1
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	f383 8810 	msr	PRIMASK, r3
}
 8006722:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006724:	f3ef 8310 	mrs	r3, PRIMASK
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	677b      	str	r3, [r7, #116]	; 0x74
 800672e:	2301      	movs	r3, #1
 8006730:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006734:	f383 8810 	msr	PRIMASK, r3
}
 8006738:	46c0      	nop			; (mov r8, r8)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2101      	movs	r1, #1
 8006746:	438a      	bics	r2, r1
 8006748:	609a      	str	r2, [r3, #8]
 800674a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800674c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800674e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006750:	f383 8810 	msr	PRIMASK, r3
}
 8006754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006756:	f3ef 8310 	mrs	r3, PRIMASK
 800675a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800675c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	673b      	str	r3, [r7, #112]	; 0x70
 8006760:	2301      	movs	r3, #1
 8006762:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006766:	f383 8810 	msr	PRIMASK, r3
}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2140      	movs	r1, #64	; 0x40
 8006778:	438a      	bics	r2, r1
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800677e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006782:	f383 8810 	msr	PRIMASK, r3
}
 8006786:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2288      	movs	r2, #136	; 0x88
 800678c:	2120      	movs	r1, #32
 800678e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006796:	f3ef 8310 	mrs	r3, PRIMASK
 800679a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800679c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067a0:	2301      	movs	r3, #1
 80067a2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067a6:	f383 8810 	msr	PRIMASK, r3
}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2110      	movs	r1, #16
 80067b8:	438a      	bics	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067be:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c2:	f383 8810 	msr	PRIMASK, r3
}
 80067c6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7fc fdaf 	bl	8003330 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	225c      	movs	r2, #92	; 0x5c
 80067d6:	5a9a      	ldrh	r2, [r3, r2]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	215e      	movs	r1, #94	; 0x5e
 80067dc:	5a5b      	ldrh	r3, [r3, r1]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	0011      	movs	r1, r2
 80067e8:	0018      	movs	r0, r3
 80067ea:	f000 f913 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067ee:	e0ea      	b.n	80069c6 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	225c      	movs	r2, #92	; 0x5c
 80067f4:	5a99      	ldrh	r1, [r3, r2]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	225e      	movs	r2, #94	; 0x5e
 80067fa:	5a9b      	ldrh	r3, [r3, r2]
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	208e      	movs	r0, #142	; 0x8e
 8006800:	183b      	adds	r3, r7, r0
 8006802:	1a8a      	subs	r2, r1, r2
 8006804:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	225e      	movs	r2, #94	; 0x5e
 800680a:	5a9b      	ldrh	r3, [r3, r2]
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d100      	bne.n	8006814 <HAL_UART_IRQHandler+0x464>
 8006812:	e0da      	b.n	80069ca <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8006814:	183b      	adds	r3, r7, r0
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d100      	bne.n	800681e <HAL_UART_IRQHandler+0x46e>
 800681c:	e0d5      	b.n	80069ca <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800681e:	f3ef 8310 	mrs	r3, PRIMASK
 8006822:	60fb      	str	r3, [r7, #12]
  return(result);
 8006824:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006826:	2488      	movs	r4, #136	; 0x88
 8006828:	193a      	adds	r2, r7, r4
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	2301      	movs	r3, #1
 800682e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f383 8810 	msr	PRIMASK, r3
}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4966      	ldr	r1, [pc, #408]	; (80069dc <HAL_UART_IRQHandler+0x62c>)
 8006844:	400a      	ands	r2, r1
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	193b      	adds	r3, r7, r4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006856:	f3ef 8310 	mrs	r3, PRIMASK
 800685a:	61bb      	str	r3, [r7, #24]
  return(result);
 800685c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800685e:	2484      	movs	r4, #132	; 0x84
 8006860:	193a      	adds	r2, r7, r4
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	2301      	movs	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f383 8810 	msr	PRIMASK, r3
}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4959      	ldr	r1, [pc, #356]	; (80069e0 <HAL_UART_IRQHandler+0x630>)
 800687c:	400a      	ands	r2, r1
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	193b      	adds	r3, r7, r4
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	f383 8810 	msr	PRIMASK, r3
}
 800688c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2288      	movs	r2, #136	; 0x88
 8006892:	2120      	movs	r1, #32
 8006894:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a2:	f3ef 8310 	mrs	r3, PRIMASK
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068aa:	2480      	movs	r4, #128	; 0x80
 80068ac:	193a      	adds	r2, r7, r4
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	2301      	movs	r3, #1
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	f383 8810 	msr	PRIMASK, r3
}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2110      	movs	r1, #16
 80068c8:	438a      	bics	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	193b      	adds	r3, r7, r4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	f383 8810 	msr	PRIMASK, r3
}
 80068d8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068da:	183b      	adds	r3, r7, r0
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	0011      	movs	r1, r2
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f896 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068e8:	e06f      	b.n	80069ca <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068ea:	23a4      	movs	r3, #164	; 0xa4
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	035b      	lsls	r3, r3, #13
 80068f4:	4013      	ands	r3, r2
 80068f6:	d010      	beq.n	800691a <HAL_UART_IRQHandler+0x56a>
 80068f8:	239c      	movs	r3, #156	; 0x9c
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	03db      	lsls	r3, r3, #15
 8006902:	4013      	ands	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	0352      	lsls	r2, r2, #13
 800690e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	0018      	movs	r0, r3
 8006914:	f001 fbba 	bl	800808c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006918:	e05a      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800691a:	23a4      	movs	r3, #164	; 0xa4
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2280      	movs	r2, #128	; 0x80
 8006922:	4013      	ands	r3, r2
 8006924:	d016      	beq.n	8006954 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006926:	23a0      	movs	r3, #160	; 0xa0
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2280      	movs	r2, #128	; 0x80
 800692e:	4013      	ands	r3, r2
 8006930:	d106      	bne.n	8006940 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006932:	239c      	movs	r3, #156	; 0x9c
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	4013      	ands	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006944:	2b00      	cmp	r3, #0
 8006946:	d042      	beq.n	80069ce <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	0010      	movs	r0, r2
 8006950:	4798      	blx	r3
    }
    return;
 8006952:	e03c      	b.n	80069ce <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006954:	23a4      	movs	r3, #164	; 0xa4
 8006956:	18fb      	adds	r3, r7, r3
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	4013      	ands	r3, r2
 800695e:	d00a      	beq.n	8006976 <HAL_UART_IRQHandler+0x5c6>
 8006960:	23a0      	movs	r3, #160	; 0xa0
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2240      	movs	r2, #64	; 0x40
 8006968:	4013      	ands	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	0018      	movs	r0, r3
 8006970:	f000 ff0f 	bl	8007792 <UART_EndTransmit_IT>
    return;
 8006974:	e02c      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006976:	23a4      	movs	r3, #164	; 0xa4
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2380      	movs	r3, #128	; 0x80
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	4013      	ands	r3, r2
 8006982:	d00b      	beq.n	800699c <HAL_UART_IRQHandler+0x5ec>
 8006984:	23a0      	movs	r3, #160	; 0xa0
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	2380      	movs	r3, #128	; 0x80
 800698c:	05db      	lsls	r3, r3, #23
 800698e:	4013      	ands	r3, r2
 8006990:	d004      	beq.n	800699c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	0018      	movs	r0, r3
 8006996:	f001 fb89 	bl	80080ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800699a:	e019      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800699c:	23a4      	movs	r3, #164	; 0xa4
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	2380      	movs	r3, #128	; 0x80
 80069a4:	045b      	lsls	r3, r3, #17
 80069a6:	4013      	ands	r3, r2
 80069a8:	d012      	beq.n	80069d0 <HAL_UART_IRQHandler+0x620>
 80069aa:	23a0      	movs	r3, #160	; 0xa0
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	da0d      	bge.n	80069d0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	0018      	movs	r0, r3
 80069b8:	f001 fb70 	bl	800809c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069bc:	e008      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
      return;
 80069be:	46c0      	nop			; (mov r8, r8)
 80069c0:	e006      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
    return;
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	e004      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
      return;
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	e002      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
      return;
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	e000      	b.n	80069d0 <HAL_UART_IRQHandler+0x620>
    return;
 80069ce:	46c0      	nop			; (mov r8, r8)
  }
}
 80069d0:	46bd      	mov	sp, r7
 80069d2:	b02a      	add	sp, #168	; 0xa8
 80069d4:	bdb0      	pop	{r4, r5, r7, pc}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	fffffeff 	.word	0xfffffeff
 80069dc:	fffffedf 	.word	0xfffffedf
 80069e0:	effffffe 	.word	0xeffffffe

080069e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069fc:	46c0      	nop			; (mov r8, r8)
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b002      	add	sp, #8
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006a0c:	46c0      	nop			; (mov r8, r8)
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b002      	add	sp, #8
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	000a      	movs	r2, r1
 8006a1e:	1cbb      	adds	r3, r7, #2
 8006a20:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b002      	add	sp, #8
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a2c:	b5b0      	push	{r4, r5, r7, lr}
 8006a2e:	b090      	sub	sp, #64	; 0x40
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a34:	231a      	movs	r3, #26
 8006a36:	2220      	movs	r2, #32
 8006a38:	189b      	adds	r3, r3, r2
 8006a3a:	19db      	adds	r3, r3, r7
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4aaf      	ldr	r2, [pc, #700]	; (8006d1c <UART_SetConfig+0x2f0>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	0019      	movs	r1, r3
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4aaa      	ldr	r2, [pc, #680]	; (8006d20 <UART_SetConfig+0x2f4>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	0018      	movs	r0, r3
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	68d9      	ldr	r1, [r3, #12]
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	0003      	movs	r3, r0
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4aa4      	ldr	r2, [pc, #656]	; (8006d24 <UART_SetConfig+0x2f8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	4a9f      	ldr	r2, [pc, #636]	; (8006d28 <UART_SetConfig+0x2fc>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	0019      	movs	r1, r3
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	220f      	movs	r2, #15
 8006ac0:	4393      	bics	r3, r2
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	0003      	movs	r3, r0
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a95      	ldr	r2, [pc, #596]	; (8006d2c <UART_SetConfig+0x300>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d131      	bne.n	8006b40 <UART_SetConfig+0x114>
 8006adc:	4b94      	ldr	r3, [pc, #592]	; (8006d30 <UART_SetConfig+0x304>)
 8006ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d01d      	beq.n	8006b24 <UART_SetConfig+0xf8>
 8006ae8:	d823      	bhi.n	8006b32 <UART_SetConfig+0x106>
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d00c      	beq.n	8006b08 <UART_SetConfig+0xdc>
 8006aee:	d820      	bhi.n	8006b32 <UART_SetConfig+0x106>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <UART_SetConfig+0xce>
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d00e      	beq.n	8006b16 <UART_SetConfig+0xea>
 8006af8:	e01b      	b.n	8006b32 <UART_SetConfig+0x106>
 8006afa:	231b      	movs	r3, #27
 8006afc:	2220      	movs	r2, #32
 8006afe:	189b      	adds	r3, r3, r2
 8006b00:	19db      	adds	r3, r3, r7
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e0b4      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b08:	231b      	movs	r3, #27
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	19db      	adds	r3, r3, r7
 8006b10:	2202      	movs	r2, #2
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e0ad      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b16:	231b      	movs	r3, #27
 8006b18:	2220      	movs	r2, #32
 8006b1a:	189b      	adds	r3, r3, r2
 8006b1c:	19db      	adds	r3, r3, r7
 8006b1e:	2204      	movs	r2, #4
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	e0a6      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b24:	231b      	movs	r3, #27
 8006b26:	2220      	movs	r2, #32
 8006b28:	189b      	adds	r3, r3, r2
 8006b2a:	19db      	adds	r3, r3, r7
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e09f      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b32:	231b      	movs	r3, #27
 8006b34:	2220      	movs	r2, #32
 8006b36:	189b      	adds	r3, r3, r2
 8006b38:	19db      	adds	r3, r3, r7
 8006b3a:	2210      	movs	r2, #16
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e098      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a7b      	ldr	r2, [pc, #492]	; (8006d34 <UART_SetConfig+0x308>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d131      	bne.n	8006bae <UART_SetConfig+0x182>
 8006b4a:	4b79      	ldr	r3, [pc, #484]	; (8006d30 <UART_SetConfig+0x304>)
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	220c      	movs	r2, #12
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b0c      	cmp	r3, #12
 8006b54:	d01d      	beq.n	8006b92 <UART_SetConfig+0x166>
 8006b56:	d823      	bhi.n	8006ba0 <UART_SetConfig+0x174>
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d00c      	beq.n	8006b76 <UART_SetConfig+0x14a>
 8006b5c:	d820      	bhi.n	8006ba0 <UART_SetConfig+0x174>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <UART_SetConfig+0x13c>
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d00e      	beq.n	8006b84 <UART_SetConfig+0x158>
 8006b66:	e01b      	b.n	8006ba0 <UART_SetConfig+0x174>
 8006b68:	231b      	movs	r3, #27
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	189b      	adds	r3, r3, r2
 8006b6e:	19db      	adds	r3, r3, r7
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	e07d      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b76:	231b      	movs	r3, #27
 8006b78:	2220      	movs	r2, #32
 8006b7a:	189b      	adds	r3, r3, r2
 8006b7c:	19db      	adds	r3, r3, r7
 8006b7e:	2202      	movs	r2, #2
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e076      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b84:	231b      	movs	r3, #27
 8006b86:	2220      	movs	r2, #32
 8006b88:	189b      	adds	r3, r3, r2
 8006b8a:	19db      	adds	r3, r3, r7
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	e06f      	b.n	8006c72 <UART_SetConfig+0x246>
 8006b92:	231b      	movs	r3, #27
 8006b94:	2220      	movs	r2, #32
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	19db      	adds	r3, r3, r7
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e068      	b.n	8006c72 <UART_SetConfig+0x246>
 8006ba0:	231b      	movs	r3, #27
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	189b      	adds	r3, r3, r2
 8006ba6:	19db      	adds	r3, r3, r7
 8006ba8:	2210      	movs	r2, #16
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e061      	b.n	8006c72 <UART_SetConfig+0x246>
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a61      	ldr	r2, [pc, #388]	; (8006d38 <UART_SetConfig+0x30c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d106      	bne.n	8006bc6 <UART_SetConfig+0x19a>
 8006bb8:	231b      	movs	r3, #27
 8006bba:	2220      	movs	r2, #32
 8006bbc:	189b      	adds	r3, r3, r2
 8006bbe:	19db      	adds	r3, r3, r7
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e055      	b.n	8006c72 <UART_SetConfig+0x246>
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a5c      	ldr	r2, [pc, #368]	; (8006d3c <UART_SetConfig+0x310>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d106      	bne.n	8006bde <UART_SetConfig+0x1b2>
 8006bd0:	231b      	movs	r3, #27
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	189b      	adds	r3, r3, r2
 8006bd6:	19db      	adds	r3, r3, r7
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	e049      	b.n	8006c72 <UART_SetConfig+0x246>
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a50      	ldr	r2, [pc, #320]	; (8006d24 <UART_SetConfig+0x2f8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d13e      	bne.n	8006c66 <UART_SetConfig+0x23a>
 8006be8:	4b51      	ldr	r3, [pc, #324]	; (8006d30 <UART_SetConfig+0x304>)
 8006bea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bec:	23c0      	movs	r3, #192	; 0xc0
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	22c0      	movs	r2, #192	; 0xc0
 8006bf4:	0112      	lsls	r2, r2, #4
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d027      	beq.n	8006c4a <UART_SetConfig+0x21e>
 8006bfa:	22c0      	movs	r2, #192	; 0xc0
 8006bfc:	0112      	lsls	r2, r2, #4
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d82a      	bhi.n	8006c58 <UART_SetConfig+0x22c>
 8006c02:	2280      	movs	r2, #128	; 0x80
 8006c04:	0112      	lsls	r2, r2, #4
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d011      	beq.n	8006c2e <UART_SetConfig+0x202>
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	0112      	lsls	r2, r2, #4
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d822      	bhi.n	8006c58 <UART_SetConfig+0x22c>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <UART_SetConfig+0x1f4>
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	00d2      	lsls	r2, r2, #3
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <UART_SetConfig+0x210>
 8006c1e:	e01b      	b.n	8006c58 <UART_SetConfig+0x22c>
 8006c20:	231b      	movs	r3, #27
 8006c22:	2220      	movs	r2, #32
 8006c24:	189b      	adds	r3, r3, r2
 8006c26:	19db      	adds	r3, r3, r7
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e021      	b.n	8006c72 <UART_SetConfig+0x246>
 8006c2e:	231b      	movs	r3, #27
 8006c30:	2220      	movs	r2, #32
 8006c32:	189b      	adds	r3, r3, r2
 8006c34:	19db      	adds	r3, r3, r7
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e01a      	b.n	8006c72 <UART_SetConfig+0x246>
 8006c3c:	231b      	movs	r3, #27
 8006c3e:	2220      	movs	r2, #32
 8006c40:	189b      	adds	r3, r3, r2
 8006c42:	19db      	adds	r3, r3, r7
 8006c44:	2204      	movs	r2, #4
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e013      	b.n	8006c72 <UART_SetConfig+0x246>
 8006c4a:	231b      	movs	r3, #27
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	19db      	adds	r3, r3, r7
 8006c52:	2208      	movs	r2, #8
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e00c      	b.n	8006c72 <UART_SetConfig+0x246>
 8006c58:	231b      	movs	r3, #27
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	19db      	adds	r3, r3, r7
 8006c60:	2210      	movs	r2, #16
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	e005      	b.n	8006c72 <UART_SetConfig+0x246>
 8006c66:	231b      	movs	r3, #27
 8006c68:	2220      	movs	r2, #32
 8006c6a:	189b      	adds	r3, r3, r2
 8006c6c:	19db      	adds	r3, r3, r7
 8006c6e:	2210      	movs	r2, #16
 8006c70:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2b      	ldr	r2, [pc, #172]	; (8006d24 <UART_SetConfig+0x2f8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d000      	beq.n	8006c7e <UART_SetConfig+0x252>
 8006c7c:	e0a9      	b.n	8006dd2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c7e:	231b      	movs	r3, #27
 8006c80:	2220      	movs	r2, #32
 8006c82:	189b      	adds	r3, r3, r2
 8006c84:	19db      	adds	r3, r3, r7
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d015      	beq.n	8006cb8 <UART_SetConfig+0x28c>
 8006c8c:	dc18      	bgt.n	8006cc0 <UART_SetConfig+0x294>
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d00d      	beq.n	8006cae <UART_SetConfig+0x282>
 8006c92:	dc15      	bgt.n	8006cc0 <UART_SetConfig+0x294>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <UART_SetConfig+0x272>
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d005      	beq.n	8006ca8 <UART_SetConfig+0x27c>
 8006c9c:	e010      	b.n	8006cc0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c9e:	f7fd fbd1 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ca6:	e014      	b.n	8006cd2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca8:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <UART_SetConfig+0x314>)
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cac:	e011      	b.n	8006cd2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cae:	f7fd fb3d 	bl	800432c <HAL_RCC_GetSysClockFreq>
 8006cb2:	0003      	movs	r3, r0
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb6:	e00c      	b.n	8006cd2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cbe:	e008      	b.n	8006cd2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006cc4:	231a      	movs	r3, #26
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	189b      	adds	r3, r3, r2
 8006cca:	19db      	adds	r3, r3, r7
 8006ccc:	2201      	movs	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
        break;
 8006cd0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d100      	bne.n	8006cda <UART_SetConfig+0x2ae>
 8006cd8:	e14b      	b.n	8006f72 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cde:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <UART_SetConfig+0x318>)
 8006ce0:	0052      	lsls	r2, r2, #1
 8006ce2:	5ad3      	ldrh	r3, [r2, r3]
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ce8:	f7f9 fa0e 	bl	8000108 <__udivsi3>
 8006cec:	0003      	movs	r3, r0
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	0013      	movs	r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	189b      	adds	r3, r3, r2
 8006cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d305      	bcc.n	8006d0c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d91d      	bls.n	8006d48 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006d0c:	231a      	movs	r3, #26
 8006d0e:	2220      	movs	r2, #32
 8006d10:	189b      	adds	r3, r3, r2
 8006d12:	19db      	adds	r3, r3, r7
 8006d14:	2201      	movs	r2, #1
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	e12b      	b.n	8006f72 <UART_SetConfig+0x546>
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	cfff69f3 	.word	0xcfff69f3
 8006d20:	ffffcfff 	.word	0xffffcfff
 8006d24:	40008000 	.word	0x40008000
 8006d28:	11fff4ff 	.word	0x11fff4ff
 8006d2c:	40013800 	.word	0x40013800
 8006d30:	40021000 	.word	0x40021000
 8006d34:	40004400 	.word	0x40004400
 8006d38:	40004800 	.word	0x40004800
 8006d3c:	40004c00 	.word	0x40004c00
 8006d40:	00f42400 	.word	0x00f42400
 8006d44:	08008448 	.word	0x08008448
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d54:	4b92      	ldr	r3, [pc, #584]	; (8006fa0 <UART_SetConfig+0x574>)
 8006d56:	0052      	lsls	r2, r2, #1
 8006d58:	5ad3      	ldrh	r3, [r2, r3]
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	69f9      	ldr	r1, [r7, #28]
 8006d68:	f7f9 fb44 	bl	80003f4 <__aeabi_uldivmod>
 8006d6c:	0002      	movs	r2, r0
 8006d6e:	000b      	movs	r3, r1
 8006d70:	0e11      	lsrs	r1, r2, #24
 8006d72:	021d      	lsls	r5, r3, #8
 8006d74:	430d      	orrs	r5, r1
 8006d76:	0214      	lsls	r4, r2, #8
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	1900      	adds	r0, r0, r4
 8006d8a:	4169      	adcs	r1, r5
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f7f9 fb2b 	bl	80003f4 <__aeabi_uldivmod>
 8006d9e:	0002      	movs	r2, r0
 8006da0:	000b      	movs	r3, r1
 8006da2:	0013      	movs	r3, r2
 8006da4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da8:	23c0      	movs	r3, #192	; 0xc0
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d309      	bcc.n	8006dc4 <UART_SetConfig+0x398>
 8006db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db2:	2380      	movs	r3, #128	; 0x80
 8006db4:	035b      	lsls	r3, r3, #13
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d204      	bcs.n	8006dc4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc0:	60da      	str	r2, [r3, #12]
 8006dc2:	e0d6      	b.n	8006f72 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006dc4:	231a      	movs	r3, #26
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	189b      	adds	r3, r3, r2
 8006dca:	19db      	adds	r3, r3, r7
 8006dcc:	2201      	movs	r2, #1
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	e0cf      	b.n	8006f72 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	69da      	ldr	r2, [r3, #28]
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d000      	beq.n	8006de0 <UART_SetConfig+0x3b4>
 8006dde:	e070      	b.n	8006ec2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006de0:	231b      	movs	r3, #27
 8006de2:	2220      	movs	r2, #32
 8006de4:	189b      	adds	r3, r3, r2
 8006de6:	19db      	adds	r3, r3, r7
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d015      	beq.n	8006e1a <UART_SetConfig+0x3ee>
 8006dee:	dc18      	bgt.n	8006e22 <UART_SetConfig+0x3f6>
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d00d      	beq.n	8006e10 <UART_SetConfig+0x3e4>
 8006df4:	dc15      	bgt.n	8006e22 <UART_SetConfig+0x3f6>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <UART_SetConfig+0x3d4>
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d005      	beq.n	8006e0a <UART_SetConfig+0x3de>
 8006dfe:	e010      	b.n	8006e22 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e00:	f7fd fb20 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8006e04:	0003      	movs	r3, r0
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e08:	e014      	b.n	8006e34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e0a:	4b66      	ldr	r3, [pc, #408]	; (8006fa4 <UART_SetConfig+0x578>)
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e0e:	e011      	b.n	8006e34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e10:	f7fd fa8c 	bl	800432c <HAL_RCC_GetSysClockFreq>
 8006e14:	0003      	movs	r3, r0
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e18:	e00c      	b.n	8006e34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e20:	e008      	b.n	8006e34 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e26:	231a      	movs	r3, #26
 8006e28:	2220      	movs	r2, #32
 8006e2a:	189b      	adds	r3, r3, r2
 8006e2c:	19db      	adds	r3, r3, r7
 8006e2e:	2201      	movs	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]
        break;
 8006e32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d100      	bne.n	8006e3c <UART_SetConfig+0x410>
 8006e3a:	e09a      	b.n	8006f72 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e40:	4b57      	ldr	r3, [pc, #348]	; (8006fa0 <UART_SetConfig+0x574>)
 8006e42:	0052      	lsls	r2, r2, #1
 8006e44:	5ad3      	ldrh	r3, [r2, r3]
 8006e46:	0019      	movs	r1, r3
 8006e48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e4a:	f7f9 f95d 	bl	8000108 <__udivsi3>
 8006e4e:	0003      	movs	r3, r0
 8006e50:	005a      	lsls	r2, r3, #1
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	18d2      	adds	r2, r2, r3
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	0019      	movs	r1, r3
 8006e60:	0010      	movs	r0, r2
 8006e62:	f7f9 f951 	bl	8000108 <__udivsi3>
 8006e66:	0003      	movs	r3, r0
 8006e68:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	2b0f      	cmp	r3, #15
 8006e6e:	d921      	bls.n	8006eb4 <UART_SetConfig+0x488>
 8006e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	025b      	lsls	r3, r3, #9
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d21c      	bcs.n	8006eb4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	200e      	movs	r0, #14
 8006e80:	2420      	movs	r4, #32
 8006e82:	1903      	adds	r3, r0, r4
 8006e84:	19db      	adds	r3, r3, r7
 8006e86:	210f      	movs	r1, #15
 8006e88:	438a      	bics	r2, r1
 8006e8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2207      	movs	r2, #7
 8006e94:	4013      	ands	r3, r2
 8006e96:	b299      	uxth	r1, r3
 8006e98:	1903      	adds	r3, r0, r4
 8006e9a:	19db      	adds	r3, r3, r7
 8006e9c:	1902      	adds	r2, r0, r4
 8006e9e:	19d2      	adds	r2, r2, r7
 8006ea0:	8812      	ldrh	r2, [r2, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	1902      	adds	r2, r0, r4
 8006eac:	19d2      	adds	r2, r2, r7
 8006eae:	8812      	ldrh	r2, [r2, #0]
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	e05e      	b.n	8006f72 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb4:	231a      	movs	r3, #26
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	189b      	adds	r3, r3, r2
 8006eba:	19db      	adds	r3, r3, r7
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e057      	b.n	8006f72 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ec2:	231b      	movs	r3, #27
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	189b      	adds	r3, r3, r2
 8006ec8:	19db      	adds	r3, r3, r7
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d015      	beq.n	8006efc <UART_SetConfig+0x4d0>
 8006ed0:	dc18      	bgt.n	8006f04 <UART_SetConfig+0x4d8>
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d00d      	beq.n	8006ef2 <UART_SetConfig+0x4c6>
 8006ed6:	dc15      	bgt.n	8006f04 <UART_SetConfig+0x4d8>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <UART_SetConfig+0x4b6>
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d005      	beq.n	8006eec <UART_SetConfig+0x4c0>
 8006ee0:	e010      	b.n	8006f04 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee2:	f7fd faaf 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8006ee6:	0003      	movs	r3, r0
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eea:	e014      	b.n	8006f16 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <UART_SetConfig+0x578>)
 8006eee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ef0:	e011      	b.n	8006f16 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fd fa1b 	bl	800432c <HAL_RCC_GetSysClockFreq>
 8006ef6:	0003      	movs	r3, r0
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006efa:	e00c      	b.n	8006f16 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f02:	e008      	b.n	8006f16 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f08:	231a      	movs	r3, #26
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	189b      	adds	r3, r3, r2
 8006f0e:	19db      	adds	r3, r3, r7
 8006f10:	2201      	movs	r2, #1
 8006f12:	701a      	strb	r2, [r3, #0]
        break;
 8006f14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d02a      	beq.n	8006f72 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f20:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <UART_SetConfig+0x574>)
 8006f22:	0052      	lsls	r2, r2, #1
 8006f24:	5ad3      	ldrh	r3, [r2, r3]
 8006f26:	0019      	movs	r1, r3
 8006f28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f2a:	f7f9 f8ed 	bl	8000108 <__udivsi3>
 8006f2e:	0003      	movs	r3, r0
 8006f30:	001a      	movs	r2, r3
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	18d2      	adds	r2, r2, r3
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	0019      	movs	r1, r3
 8006f40:	0010      	movs	r0, r2
 8006f42:	f7f9 f8e1 	bl	8000108 <__udivsi3>
 8006f46:	0003      	movs	r3, r0
 8006f48:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	2b0f      	cmp	r3, #15
 8006f4e:	d90a      	bls.n	8006f66 <UART_SetConfig+0x53a>
 8006f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f52:	2380      	movs	r3, #128	; 0x80
 8006f54:	025b      	lsls	r3, r3, #9
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d205      	bcs.n	8006f66 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60da      	str	r2, [r3, #12]
 8006f64:	e005      	b.n	8006f72 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006f66:	231a      	movs	r3, #26
 8006f68:	2220      	movs	r2, #32
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	19db      	adds	r3, r3, r7
 8006f6e:	2201      	movs	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	226a      	movs	r2, #106	; 0x6a
 8006f76:	2101      	movs	r1, #1
 8006f78:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	2268      	movs	r2, #104	; 0x68
 8006f7e:	2101      	movs	r1, #1
 8006f80:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2200      	movs	r2, #0
 8006f86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f8e:	231a      	movs	r3, #26
 8006f90:	2220      	movs	r2, #32
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	19db      	adds	r3, r3, r7
 8006f96:	781b      	ldrb	r3, [r3, #0]
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b010      	add	sp, #64	; 0x40
 8006f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8006fa0:	08008448 	.word	0x08008448
 8006fa4:	00f42400 	.word	0x00f42400

08006fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d00b      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a4a      	ldr	r2, [pc, #296]	; (80070ec <UART_AdvFeatureConfig+0x144>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4a43      	ldr	r2, [pc, #268]	; (80070f0 <UART_AdvFeatureConfig+0x148>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	4a3b      	ldr	r2, [pc, #236]	; (80070f4 <UART_AdvFeatureConfig+0x14c>)
 8007006:	4013      	ands	r3, r2
 8007008:	0019      	movs	r1, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	2208      	movs	r2, #8
 800701c:	4013      	ands	r3, r2
 800701e:	d00b      	beq.n	8007038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	4a34      	ldr	r2, [pc, #208]	; (80070f8 <UART_AdvFeatureConfig+0x150>)
 8007028:	4013      	ands	r3, r2
 800702a:	0019      	movs	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	2210      	movs	r2, #16
 800703e:	4013      	ands	r3, r2
 8007040:	d00b      	beq.n	800705a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4a2c      	ldr	r2, [pc, #176]	; (80070fc <UART_AdvFeatureConfig+0x154>)
 800704a:	4013      	ands	r3, r2
 800704c:	0019      	movs	r1, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	2220      	movs	r2, #32
 8007060:	4013      	ands	r3, r2
 8007062:	d00b      	beq.n	800707c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	4a25      	ldr	r2, [pc, #148]	; (8007100 <UART_AdvFeatureConfig+0x158>)
 800706c:	4013      	ands	r3, r2
 800706e:	0019      	movs	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	2240      	movs	r2, #64	; 0x40
 8007082:	4013      	ands	r3, r2
 8007084:	d01d      	beq.n	80070c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <UART_AdvFeatureConfig+0x15c>)
 800708e:	4013      	ands	r3, r2
 8007090:	0019      	movs	r1, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	035b      	lsls	r3, r3, #13
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d10b      	bne.n	80070c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4a15      	ldr	r2, [pc, #84]	; (8007108 <UART_AdvFeatureConfig+0x160>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	0019      	movs	r1, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	2280      	movs	r2, #128	; 0x80
 80070c8:	4013      	ands	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	4a0e      	ldr	r2, [pc, #56]	; (800710c <UART_AdvFeatureConfig+0x164>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	0019      	movs	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }
}
 80070e4:	46c0      	nop			; (mov r8, r8)
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b002      	add	sp, #8
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	fffdffff 	.word	0xfffdffff
 80070f0:	fffeffff 	.word	0xfffeffff
 80070f4:	fffbffff 	.word	0xfffbffff
 80070f8:	ffff7fff 	.word	0xffff7fff
 80070fc:	ffffefff 	.word	0xffffefff
 8007100:	ffffdfff 	.word	0xffffdfff
 8007104:	ffefffff 	.word	0xffefffff
 8007108:	ff9fffff 	.word	0xff9fffff
 800710c:	fff7ffff 	.word	0xfff7ffff

08007110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	228c      	movs	r2, #140	; 0x8c
 800711c:	2100      	movs	r1, #0
 800711e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007120:	f7fa ffbe 	bl	80020a0 <HAL_GetTick>
 8007124:	0003      	movs	r3, r0
 8007126:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2208      	movs	r2, #8
 8007130:	4013      	ands	r3, r2
 8007132:	2b08      	cmp	r3, #8
 8007134:	d10c      	bne.n	8007150 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2280      	movs	r2, #128	; 0x80
 800713a:	0391      	lsls	r1, r2, #14
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4a18      	ldr	r2, [pc, #96]	; (80071a0 <UART_CheckIdleState+0x90>)
 8007140:	9200      	str	r2, [sp, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	f000 f82e 	bl	80071a4 <UART_WaitOnFlagUntilTimeout>
 8007148:	1e03      	subs	r3, r0, #0
 800714a:	d001      	beq.n	8007150 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e023      	b.n	8007198 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2204      	movs	r2, #4
 8007158:	4013      	ands	r3, r2
 800715a:	2b04      	cmp	r3, #4
 800715c:	d10c      	bne.n	8007178 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	03d1      	lsls	r1, r2, #15
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4a0e      	ldr	r2, [pc, #56]	; (80071a0 <UART_CheckIdleState+0x90>)
 8007168:	9200      	str	r2, [sp, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	f000 f81a 	bl	80071a4 <UART_WaitOnFlagUntilTimeout>
 8007170:	1e03      	subs	r3, r0, #0
 8007172:	d001      	beq.n	8007178 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e00f      	b.n	8007198 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2284      	movs	r2, #132	; 0x84
 800717c:	2120      	movs	r1, #32
 800717e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2288      	movs	r2, #136	; 0x88
 8007184:	2120      	movs	r1, #32
 8007186:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2280      	movs	r2, #128	; 0x80
 8007192:	2100      	movs	r1, #0
 8007194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b004      	add	sp, #16
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	01ffffff 	.word	0x01ffffff

080071a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b094      	sub	sp, #80	; 0x50
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	1dfb      	adds	r3, r7, #7
 80071b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b4:	e0a7      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071b8:	3301      	adds	r3, #1
 80071ba:	d100      	bne.n	80071be <UART_WaitOnFlagUntilTimeout+0x1a>
 80071bc:	e0a3      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071be:	f7fa ff6f 	bl	80020a0 <HAL_GetTick>
 80071c2:	0002      	movs	r2, r0
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d302      	bcc.n	80071d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d13f      	bne.n	8007254 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d4:	f3ef 8310 	mrs	r3, PRIMASK
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071dc:	647b      	str	r3, [r7, #68]	; 0x44
 80071de:	2301      	movs	r3, #1
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	494e      	ldr	r1, [pc, #312]	; (8007330 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f383 8810 	msr	PRIMASK, r3
}
 8007204:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007206:	f3ef 8310 	mrs	r3, PRIMASK
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	643b      	str	r3, [r7, #64]	; 0x40
 8007210:	2301      	movs	r3, #1
 8007212:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	f383 8810 	msr	PRIMASK, r3
}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2101      	movs	r1, #1
 8007228:	438a      	bics	r2, r1
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007232:	f383 8810 	msr	PRIMASK, r3
}
 8007236:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2284      	movs	r2, #132	; 0x84
 800723c:	2120      	movs	r1, #32
 800723e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2288      	movs	r2, #136	; 0x88
 8007244:	2120      	movs	r1, #32
 8007246:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2280      	movs	r2, #128	; 0x80
 800724c:	2100      	movs	r1, #0
 800724e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e069      	b.n	8007328 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2204      	movs	r2, #4
 800725c:	4013      	ands	r3, r2
 800725e:	d052      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69da      	ldr	r2, [r3, #28]
 8007266:	2380      	movs	r3, #128	; 0x80
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	401a      	ands	r2, r3
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	429a      	cmp	r2, r3
 8007272:	d148      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2280      	movs	r2, #128	; 0x80
 800727a:	0112      	lsls	r2, r2, #4
 800727c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727e:	f3ef 8310 	mrs	r3, PRIMASK
 8007282:	613b      	str	r3, [r7, #16]
  return(result);
 8007284:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007288:	2301      	movs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f383 8810 	msr	PRIMASK, r3
}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4924      	ldr	r1, [pc, #144]	; (8007330 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80072a0:	400a      	ands	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f383 8810 	msr	PRIMASK, r3
}
 80072ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b0:	f3ef 8310 	mrs	r3, PRIMASK
 80072b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80072b6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072ba:	2301      	movs	r3, #1
 80072bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f383 8810 	msr	PRIMASK, r3
}
 80072c4:	46c0      	nop			; (mov r8, r8)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2101      	movs	r1, #1
 80072d2:	438a      	bics	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]
 80072d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	f383 8810 	msr	PRIMASK, r3
}
 80072e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2284      	movs	r2, #132	; 0x84
 80072e6:	2120      	movs	r1, #32
 80072e8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2288      	movs	r2, #136	; 0x88
 80072ee:	2120      	movs	r1, #32
 80072f0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	228c      	movs	r2, #140	; 0x8c
 80072f6:	2120      	movs	r1, #32
 80072f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2280      	movs	r2, #128	; 0x80
 80072fe:	2100      	movs	r1, #0
 8007300:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e010      	b.n	8007328 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4013      	ands	r3, r2
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	425a      	negs	r2, r3
 8007316:	4153      	adcs	r3, r2
 8007318:	b2db      	uxtb	r3, r3
 800731a:	001a      	movs	r2, r3
 800731c:	1dfb      	adds	r3, r7, #7
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d100      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x182>
 8007324:	e747      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	0018      	movs	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	b014      	add	sp, #80	; 0x50
 800732e:	bd80      	pop	{r7, pc}
 8007330:	fffffe5f 	.word	0xfffffe5f

08007334 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b098      	sub	sp, #96	; 0x60
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	1dbb      	adds	r3, r7, #6
 8007340:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	1dba      	adds	r2, r7, #6
 800734c:	215c      	movs	r1, #92	; 0x5c
 800734e:	8812      	ldrh	r2, [r2, #0]
 8007350:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1dba      	adds	r2, r7, #6
 8007356:	215e      	movs	r1, #94	; 0x5e
 8007358:	8812      	ldrh	r2, [r2, #0]
 800735a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	2380      	movs	r3, #128	; 0x80
 8007368:	015b      	lsls	r3, r3, #5
 800736a:	429a      	cmp	r2, r3
 800736c:	d10d      	bne.n	800738a <UART_Start_Receive_IT+0x56>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <UART_Start_Receive_IT+0x4c>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2260      	movs	r2, #96	; 0x60
 800737a:	497f      	ldr	r1, [pc, #508]	; (8007578 <UART_Start_Receive_IT+0x244>)
 800737c:	5299      	strh	r1, [r3, r2]
 800737e:	e02e      	b.n	80073de <UART_Start_Receive_IT+0xaa>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2260      	movs	r2, #96	; 0x60
 8007384:	21ff      	movs	r1, #255	; 0xff
 8007386:	5299      	strh	r1, [r3, r2]
 8007388:	e029      	b.n	80073de <UART_Start_Receive_IT+0xaa>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10d      	bne.n	80073ae <UART_Start_Receive_IT+0x7a>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <UART_Start_Receive_IT+0x70>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2260      	movs	r2, #96	; 0x60
 800739e:	21ff      	movs	r1, #255	; 0xff
 80073a0:	5299      	strh	r1, [r3, r2]
 80073a2:	e01c      	b.n	80073de <UART_Start_Receive_IT+0xaa>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2260      	movs	r2, #96	; 0x60
 80073a8:	217f      	movs	r1, #127	; 0x7f
 80073aa:	5299      	strh	r1, [r3, r2]
 80073ac:	e017      	b.n	80073de <UART_Start_Receive_IT+0xaa>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	2380      	movs	r3, #128	; 0x80
 80073b4:	055b      	lsls	r3, r3, #21
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d10d      	bne.n	80073d6 <UART_Start_Receive_IT+0xa2>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <UART_Start_Receive_IT+0x98>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2260      	movs	r2, #96	; 0x60
 80073c6:	217f      	movs	r1, #127	; 0x7f
 80073c8:	5299      	strh	r1, [r3, r2]
 80073ca:	e008      	b.n	80073de <UART_Start_Receive_IT+0xaa>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2260      	movs	r2, #96	; 0x60
 80073d0:	213f      	movs	r1, #63	; 0x3f
 80073d2:	5299      	strh	r1, [r3, r2]
 80073d4:	e003      	b.n	80073de <UART_Start_Receive_IT+0xaa>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2260      	movs	r2, #96	; 0x60
 80073da:	2100      	movs	r1, #0
 80073dc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	228c      	movs	r2, #140	; 0x8c
 80073e2:	2100      	movs	r1, #0
 80073e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2288      	movs	r2, #136	; 0x88
 80073ea:	2122      	movs	r1, #34	; 0x22
 80073ec:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ee:	f3ef 8310 	mrs	r3, PRIMASK
 80073f2:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80073f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073f8:	2301      	movs	r3, #1
 80073fa:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fe:	f383 8810 	msr	PRIMASK, r3
}
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2101      	movs	r1, #1
 8007410:	430a      	orrs	r2, r1
 8007412:	609a      	str	r2, [r3, #8]
 8007414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007416:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741a:	f383 8810 	msr	PRIMASK, r3
}
 800741e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	059b      	lsls	r3, r3, #22
 8007428:	429a      	cmp	r2, r3
 800742a:	d154      	bne.n	80074d6 <UART_Start_Receive_IT+0x1a2>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2268      	movs	r2, #104	; 0x68
 8007430:	5a9b      	ldrh	r3, [r3, r2]
 8007432:	1dba      	adds	r2, r7, #6
 8007434:	8812      	ldrh	r2, [r2, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d34d      	bcc.n	80074d6 <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	2380      	movs	r3, #128	; 0x80
 8007440:	015b      	lsls	r3, r3, #5
 8007442:	429a      	cmp	r2, r3
 8007444:	d107      	bne.n	8007456 <UART_Start_Receive_IT+0x122>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4a4a      	ldr	r2, [pc, #296]	; (800757c <UART_Start_Receive_IT+0x248>)
 8007452:	671a      	str	r2, [r3, #112]	; 0x70
 8007454:	e002      	b.n	800745c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a49      	ldr	r2, [pc, #292]	; (8007580 <UART_Start_Receive_IT+0x24c>)
 800745a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2280      	movs	r2, #128	; 0x80
 8007460:	2100      	movs	r1, #0
 8007462:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d019      	beq.n	80074a0 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746c:	f3ef 8310 	mrs	r3, PRIMASK
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007474:	65bb      	str	r3, [r7, #88]	; 0x58
 8007476:	2301      	movs	r3, #1
 8007478:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747c:	f383 8810 	msr	PRIMASK, r3
}
 8007480:	46c0      	nop			; (mov r8, r8)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2180      	movs	r1, #128	; 0x80
 800748e:	0049      	lsls	r1, r1, #1
 8007490:	430a      	orrs	r2, r1
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749a:	f383 8810 	msr	PRIMASK, r3
}
 800749e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a0:	f3ef 8310 	mrs	r3, PRIMASK
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074a8:	657b      	str	r3, [r7, #84]	; 0x54
 80074aa:	2301      	movs	r3, #1
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	f383 8810 	msr	PRIMASK, r3
}
 80074b4:	46c0      	nop			; (mov r8, r8)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2180      	movs	r1, #128	; 0x80
 80074c2:	0549      	lsls	r1, r1, #21
 80074c4:	430a      	orrs	r2, r1
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ca:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	f383 8810 	msr	PRIMASK, r3
}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	e04b      	b.n	800756e <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	015b      	lsls	r3, r3, #5
 80074de:	429a      	cmp	r2, r3
 80074e0:	d107      	bne.n	80074f2 <UART_Start_Receive_IT+0x1be>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a25      	ldr	r2, [pc, #148]	; (8007584 <UART_Start_Receive_IT+0x250>)
 80074ee:	671a      	str	r2, [r3, #112]	; 0x70
 80074f0:	e002      	b.n	80074f8 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4a24      	ldr	r2, [pc, #144]	; (8007588 <UART_Start_Receive_IT+0x254>)
 80074f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2280      	movs	r2, #128	; 0x80
 80074fc:	2100      	movs	r1, #0
 80074fe:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007508:	f3ef 8310 	mrs	r3, PRIMASK
 800750c:	61fb      	str	r3, [r7, #28]
  return(result);
 800750e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007512:	2301      	movs	r3, #1
 8007514:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	46c0      	nop			; (mov r8, r8)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2190      	movs	r1, #144	; 0x90
 800752a:	0049      	lsls	r1, r1, #1
 800752c:	430a      	orrs	r2, r1
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	f383 8810 	msr	PRIMASK, r3
}
 800753a:	e018      	b.n	800756e <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753c:	f3ef 8310 	mrs	r3, PRIMASK
 8007540:	613b      	str	r3, [r7, #16]
  return(result);
 8007542:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007544:	653b      	str	r3, [r7, #80]	; 0x50
 8007546:	2301      	movs	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f383 8810 	msr	PRIMASK, r3
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2120      	movs	r1, #32
 800755e:	430a      	orrs	r2, r1
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	b018      	add	sp, #96	; 0x60
 8007576:	bd80      	pop	{r7, pc}
 8007578:	000001ff 	.word	0x000001ff
 800757c:	08007da9 	.word	0x08007da9
 8007580:	08007ac5 	.word	0x08007ac5
 8007584:	08007959 	.word	0x08007959
 8007588:	080077ed 	.word	0x080077ed

0800758c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08e      	sub	sp, #56	; 0x38
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007594:	f3ef 8310 	mrs	r3, PRIMASK
 8007598:	617b      	str	r3, [r7, #20]
  return(result);
 800759a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
 800759e:	2301      	movs	r3, #1
 80075a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f383 8810 	msr	PRIMASK, r3
}
 80075a8:	46c0      	nop			; (mov r8, r8)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4926      	ldr	r1, [pc, #152]	; (8007650 <UART_EndRxTransfer+0xc4>)
 80075b6:	400a      	ands	r2, r1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f383 8810 	msr	PRIMASK, r3
}
 80075c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ca:	623b      	str	r3, [r7, #32]
  return(result);
 80075cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075ce:	633b      	str	r3, [r7, #48]	; 0x30
 80075d0:	2301      	movs	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	f383 8810 	msr	PRIMASK, r3
}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	491b      	ldr	r1, [pc, #108]	; (8007654 <UART_EndRxTransfer+0xc8>)
 80075e8:	400a      	ands	r2, r1
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	f383 8810 	msr	PRIMASK, r3
}
 80075f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d118      	bne.n	8007632 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007600:	f3ef 8310 	mrs	r3, PRIMASK
 8007604:	60bb      	str	r3, [r7, #8]
  return(result);
 8007606:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800760a:	2301      	movs	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f383 8810 	msr	PRIMASK, r3
}
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2110      	movs	r1, #16
 8007622:	438a      	bics	r2, r1
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f383 8810 	msr	PRIMASK, r3
}
 8007630:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2288      	movs	r2, #136	; 0x88
 8007636:	2120      	movs	r1, #32
 8007638:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	46bd      	mov	sp, r7
 800764a:	b00e      	add	sp, #56	; 0x38
 800764c:	bd80      	pop	{r7, pc}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	fffffedf 	.word	0xfffffedf
 8007654:	effffffe 	.word	0xeffffffe

08007658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	225e      	movs	r2, #94	; 0x5e
 800766a:	2100      	movs	r1, #0
 800766c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2256      	movs	r2, #86	; 0x56
 8007672:	2100      	movs	r1, #0
 8007674:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	0018      	movs	r0, r3
 800767a:	f7ff f9bb 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	46bd      	mov	sp, r7
 8007682:	b004      	add	sp, #16
 8007684:	bd80      	pop	{r7, pc}

08007686 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007692:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007698:	2200      	movs	r2, #0
 800769a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d12d      	bne.n	800770a <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2256      	movs	r2, #86	; 0x56
 80076b2:	2100      	movs	r1, #0
 80076b4:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	225e      	movs	r2, #94	; 0x5e
 80076ba:	2100      	movs	r1, #0
 80076bc:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	228c      	movs	r2, #140	; 0x8c
 80076c2:	2100      	movs	r1, #0
 80076c4:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	220f      	movs	r2, #15
 80076cc:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80076d2:	2380      	movs	r3, #128	; 0x80
 80076d4:	059b      	lsls	r3, r3, #22
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d107      	bne.n	80076ea <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2110      	movs	r1, #16
 80076e6:	430a      	orrs	r2, r1
 80076e8:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2284      	movs	r2, #132	; 0x84
 80076ee:	2120      	movs	r1, #32
 80076f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2288      	movs	r2, #136	; 0x88
 80076f6:	2120      	movs	r1, #32
 80076f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	0018      	movs	r0, r3
 8007704:	f7ff f97e 	bl	8006a04 <HAL_UART_AbortCpltCallback>
 8007708:	e000      	b.n	800770c <UART_DMATxAbortCallback+0x86>
      return;
 800770a:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800770c:	46bd      	mov	sp, r7
 800770e:	b004      	add	sp, #16
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007724:	2200      	movs	r2, #0
 8007726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	2b00      	cmp	r3, #0
 8007738:	d127      	bne.n	800778a <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2256      	movs	r2, #86	; 0x56
 800773e:	2100      	movs	r1, #0
 8007740:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	225e      	movs	r2, #94	; 0x5e
 8007746:	2100      	movs	r1, #0
 8007748:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	228c      	movs	r2, #140	; 0x8c
 800774e:	2100      	movs	r1, #0
 8007750:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	220f      	movs	r2, #15
 8007758:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2108      	movs	r1, #8
 8007766:	430a      	orrs	r2, r1
 8007768:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2284      	movs	r2, #132	; 0x84
 800776e:	2120      	movs	r1, #32
 8007770:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2288      	movs	r2, #136	; 0x88
 8007776:	2120      	movs	r1, #32
 8007778:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	0018      	movs	r0, r3
 8007784:	f7ff f93e 	bl	8006a04 <HAL_UART_AbortCpltCallback>
 8007788:	e000      	b.n	800778c <UART_DMARxAbortCallback+0x7a>
      return;
 800778a:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800778c:	46bd      	mov	sp, r7
 800778e:	b004      	add	sp, #16
 8007790:	bd80      	pop	{r7, pc}

08007792 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
 800779e:	60bb      	str	r3, [r7, #8]
  return(result);
 80077a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	2301      	movs	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f383 8810 	msr	PRIMASK, r3
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2140      	movs	r1, #64	; 0x40
 80077bc:	438a      	bics	r2, r1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2284      	movs	r2, #132	; 0x84
 80077d0:	2120      	movs	r1, #32
 80077d2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f7ff f901 	bl	80069e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b006      	add	sp, #24
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b090      	sub	sp, #64	; 0x40
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077f4:	203e      	movs	r0, #62	; 0x3e
 80077f6:	183b      	adds	r3, r7, r0
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	2160      	movs	r1, #96	; 0x60
 80077fc:	5a52      	ldrh	r2, [r2, r1]
 80077fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2288      	movs	r2, #136	; 0x88
 8007804:	589b      	ldr	r3, [r3, r2]
 8007806:	2b22      	cmp	r3, #34	; 0x22
 8007808:	d000      	beq.n	800780c <UART_RxISR_8BIT+0x20>
 800780a:	e097      	b.n	800793c <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007812:	213c      	movs	r1, #60	; 0x3c
 8007814:	187b      	adds	r3, r7, r1
 8007816:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007818:	187b      	adds	r3, r7, r1
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b2da      	uxtb	r2, r3
 800781e:	183b      	adds	r3, r7, r0
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b2d9      	uxtb	r1, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007828:	400a      	ands	r2, r1
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	225e      	movs	r2, #94	; 0x5e
 800783c:	5a9b      	ldrh	r3, [r3, r2]
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b299      	uxth	r1, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	225e      	movs	r2, #94	; 0x5e
 8007848:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	225e      	movs	r2, #94	; 0x5e
 800784e:	5a9b      	ldrh	r3, [r3, r2]
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d000      	beq.n	8007858 <UART_RxISR_8BIT+0x6c>
 8007856:	e079      	b.n	800794c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007858:	f3ef 8310 	mrs	r3, PRIMASK
 800785c:	61bb      	str	r3, [r7, #24]
  return(result);
 800785e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007860:	63bb      	str	r3, [r7, #56]	; 0x38
 8007862:	2301      	movs	r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f383 8810 	msr	PRIMASK, r3
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4936      	ldr	r1, [pc, #216]	; (8007954 <UART_RxISR_8BIT+0x168>)
 800787a:	400a      	ands	r2, r1
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	f383 8810 	msr	PRIMASK, r3
}
 8007888:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788a:	f3ef 8310 	mrs	r3, PRIMASK
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007892:	637b      	str	r3, [r7, #52]	; 0x34
 8007894:	2301      	movs	r3, #1
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	f383 8810 	msr	PRIMASK, r3
}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2101      	movs	r1, #1
 80078ac:	438a      	bics	r2, r1
 80078ae:	609a      	str	r2, [r3, #8]
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	f383 8810 	msr	PRIMASK, r3
}
 80078ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2288      	movs	r2, #136	; 0x88
 80078c0:	2120      	movs	r1, #32
 80078c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d12f      	bne.n	8007932 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d8:	f3ef 8310 	mrs	r3, PRIMASK
 80078dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80078de:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30
 80078e2:	2301      	movs	r3, #1
 80078e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f383 8810 	msr	PRIMASK, r3
}
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2110      	movs	r1, #16
 80078fa:	438a      	bics	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f383 8810 	msr	PRIMASK, r3
}
 8007908:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	2210      	movs	r2, #16
 8007912:	4013      	ands	r3, r2
 8007914:	2b10      	cmp	r3, #16
 8007916:	d103      	bne.n	8007920 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2210      	movs	r2, #16
 800791e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	225c      	movs	r2, #92	; 0x5c
 8007924:	5a9a      	ldrh	r2, [r3, r2]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	0011      	movs	r1, r2
 800792a:	0018      	movs	r0, r3
 800792c:	f7ff f872 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007930:	e00c      	b.n	800794c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	0018      	movs	r0, r3
 8007936:	f7fa f979 	bl	8001c2c <HAL_UART_RxCpltCallback>
}
 800793a:	e007      	b.n	800794c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2108      	movs	r1, #8
 8007948:	430a      	orrs	r2, r1
 800794a:	619a      	str	r2, [r3, #24]
}
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b010      	add	sp, #64	; 0x40
 8007952:	bd80      	pop	{r7, pc}
 8007954:	fffffedf 	.word	0xfffffedf

08007958 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b090      	sub	sp, #64	; 0x40
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007960:	203e      	movs	r0, #62	; 0x3e
 8007962:	183b      	adds	r3, r7, r0
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	2160      	movs	r1, #96	; 0x60
 8007968:	5a52      	ldrh	r2, [r2, r1]
 800796a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2288      	movs	r2, #136	; 0x88
 8007970:	589b      	ldr	r3, [r3, r2]
 8007972:	2b22      	cmp	r3, #34	; 0x22
 8007974:	d000      	beq.n	8007978 <UART_RxISR_16BIT+0x20>
 8007976:	e097      	b.n	8007aa8 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800797e:	213c      	movs	r1, #60	; 0x3c
 8007980:	187b      	adds	r3, r7, r1
 8007982:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800798a:	187b      	adds	r3, r7, r1
 800798c:	183a      	adds	r2, r7, r0
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	8812      	ldrh	r2, [r2, #0]
 8007992:	4013      	ands	r3, r2
 8007994:	b29a      	uxth	r2, r3
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799e:	1c9a      	adds	r2, r3, #2
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	225e      	movs	r2, #94	; 0x5e
 80079a8:	5a9b      	ldrh	r3, [r3, r2]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b299      	uxth	r1, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	225e      	movs	r2, #94	; 0x5e
 80079b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	225e      	movs	r2, #94	; 0x5e
 80079ba:	5a9b      	ldrh	r3, [r3, r2]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d000      	beq.n	80079c4 <UART_RxISR_16BIT+0x6c>
 80079c2:	e079      	b.n	8007ab8 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c4:	f3ef 8310 	mrs	r3, PRIMASK
 80079c8:	617b      	str	r3, [r7, #20]
  return(result);
 80079ca:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
 80079ce:	2301      	movs	r3, #1
 80079d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f383 8810 	msr	PRIMASK, r3
}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4936      	ldr	r1, [pc, #216]	; (8007ac0 <UART_RxISR_16BIT+0x168>)
 80079e6:	400a      	ands	r2, r1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f383 8810 	msr	PRIMASK, r3
}
 80079f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079f6:	f3ef 8310 	mrs	r3, PRIMASK
 80079fa:	623b      	str	r3, [r7, #32]
  return(result);
 80079fc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007a00:	2301      	movs	r3, #1
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	f383 8810 	msr	PRIMASK, r3
}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2101      	movs	r1, #1
 8007a18:	438a      	bics	r2, r1
 8007a1a:	609a      	str	r2, [r3, #8]
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	f383 8810 	msr	PRIMASK, r3
}
 8007a26:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2288      	movs	r2, #136	; 0x88
 8007a2c:	2120      	movs	r1, #32
 8007a2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d12f      	bne.n	8007a9e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a44:	f3ef 8310 	mrs	r3, PRIMASK
 8007a48:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a4a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4e:	2301      	movs	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f383 8810 	msr	PRIMASK, r3
}
 8007a58:	46c0      	nop			; (mov r8, r8)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2110      	movs	r1, #16
 8007a66:	438a      	bics	r2, r1
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f383 8810 	msr	PRIMASK, r3
}
 8007a74:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2210      	movs	r2, #16
 8007a7e:	4013      	ands	r3, r2
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	d103      	bne.n	8007a8c <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2210      	movs	r2, #16
 8007a8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	225c      	movs	r2, #92	; 0x5c
 8007a90:	5a9a      	ldrh	r2, [r3, r2]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0011      	movs	r1, r2
 8007a96:	0018      	movs	r0, r3
 8007a98:	f7fe ffbc 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a9c:	e00c      	b.n	8007ab8 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7fa f8c3 	bl	8001c2c <HAL_UART_RxCpltCallback>
}
 8007aa6:	e007      	b.n	8007ab8 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2108      	movs	r1, #8
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	619a      	str	r2, [r3, #24]
}
 8007ab8:	46c0      	nop			; (mov r8, r8)
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b010      	add	sp, #64	; 0x40
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	fffffedf 	.word	0xfffffedf

08007ac4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b09c      	sub	sp, #112	; 0x70
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007acc:	236a      	movs	r3, #106	; 0x6a
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	2160      	movs	r1, #96	; 0x60
 8007ad4:	5a52      	ldrh	r2, [r2, r1]
 8007ad6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2288      	movs	r2, #136	; 0x88
 8007af4:	589b      	ldr	r3, [r3, r2]
 8007af6:	2b22      	cmp	r3, #34	; 0x22
 8007af8:	d000      	beq.n	8007afc <UART_RxISR_8BIT_FIFOEN+0x38>
 8007afa:	e141      	b.n	8007d80 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007afc:	235e      	movs	r3, #94	; 0x5e
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	2168      	movs	r1, #104	; 0x68
 8007b04:	5a52      	ldrh	r2, [r2, r1]
 8007b06:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b08:	e0e8      	b.n	8007cdc <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b10:	215c      	movs	r1, #92	; 0x5c
 8007b12:	187b      	adds	r3, r7, r1
 8007b14:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	236a      	movs	r3, #106	; 0x6a
 8007b1e:	18fb      	adds	r3, r7, r3
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b2d9      	uxtb	r1, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b28:	400a      	ands	r2, r1
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	225e      	movs	r2, #94	; 0x5e
 8007b3c:	5a9b      	ldrh	r3, [r3, r2]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b299      	uxth	r1, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	225e      	movs	r2, #94	; 0x5e
 8007b48:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b54:	2207      	movs	r2, #7
 8007b56:	4013      	ands	r3, r2
 8007b58:	d049      	beq.n	8007bee <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	4013      	ands	r3, r2
 8007b60:	d010      	beq.n	8007b84 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007b62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b64:	2380      	movs	r3, #128	; 0x80
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d00b      	beq.n	8007b84 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2201      	movs	r2, #1
 8007b72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	228c      	movs	r2, #140	; 0x8c
 8007b78:	589b      	ldr	r3, [r3, r2]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	218c      	movs	r1, #140	; 0x8c
 8007b82:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b86:	2202      	movs	r2, #2
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d00f      	beq.n	8007bac <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4013      	ands	r3, r2
 8007b92:	d00b      	beq.n	8007bac <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	228c      	movs	r2, #140	; 0x8c
 8007ba0:	589b      	ldr	r3, [r3, r2]
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	218c      	movs	r1, #140	; 0x8c
 8007baa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bae:	2204      	movs	r2, #4
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d00f      	beq.n	8007bd4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	4013      	ands	r3, r2
 8007bba:	d00b      	beq.n	8007bd4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2204      	movs	r2, #4
 8007bc2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	228c      	movs	r2, #140	; 0x8c
 8007bc8:	589b      	ldr	r3, [r3, r2]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	218c      	movs	r1, #140	; 0x8c
 8007bd2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	228c      	movs	r2, #140	; 0x8c
 8007bd8:	589b      	ldr	r3, [r3, r2]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	0018      	movs	r0, r3
 8007be2:	f7fe ff07 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	228c      	movs	r2, #140	; 0x8c
 8007bea:	2100      	movs	r1, #0
 8007bec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	225e      	movs	r2, #94	; 0x5e
 8007bf2:	5a9b      	ldrh	r3, [r3, r2]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d170      	bne.n	8007cdc <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8007bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c04:	2301      	movs	r3, #1
 8007c06:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	f383 8810 	msr	PRIMASK, r3
}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	495f      	ldr	r1, [pc, #380]	; (8007d98 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8007c1c:	400a      	ands	r2, r1
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	f383 8810 	msr	PRIMASK, r3
}
 8007c2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c30:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c34:	657b      	str	r3, [r7, #84]	; 0x54
 8007c36:	2301      	movs	r3, #1
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3c:	f383 8810 	msr	PRIMASK, r3
}
 8007c40:	46c0      	nop			; (mov r8, r8)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4953      	ldr	r1, [pc, #332]	; (8007d9c <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8007c4e:	400a      	ands	r2, r1
 8007c50:	609a      	str	r2, [r3, #8]
 8007c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c58:	f383 8810 	msr	PRIMASK, r3
}
 8007c5c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2288      	movs	r2, #136	; 0x88
 8007c62:	2120      	movs	r1, #32
 8007c64:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d12f      	bne.n	8007cd4 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c7e:	623b      	str	r3, [r7, #32]
  return(result);
 8007c80:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c82:	653b      	str	r3, [r7, #80]	; 0x50
 8007c84:	2301      	movs	r3, #1
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	f383 8810 	msr	PRIMASK, r3
}
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2110      	movs	r1, #16
 8007c9c:	438a      	bics	r2, r1
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	f383 8810 	msr	PRIMASK, r3
}
 8007caa:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	2210      	movs	r2, #16
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d103      	bne.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2210      	movs	r2, #16
 8007cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	225c      	movs	r2, #92	; 0x5c
 8007cc6:	5a9a      	ldrh	r2, [r3, r2]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	0011      	movs	r1, r2
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f7fe fea1 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
 8007cd2:	e003      	b.n	8007cdc <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7f9 ffa8 	bl	8001c2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cdc:	235e      	movs	r3, #94	; 0x5e
 8007cde:	18fb      	adds	r3, r7, r3
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8007ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce8:	2220      	movs	r2, #32
 8007cea:	4013      	ands	r3, r2
 8007cec:	d000      	beq.n	8007cf0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8007cee:	e70c      	b.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007cf0:	204e      	movs	r0, #78	; 0x4e
 8007cf2:	183b      	adds	r3, r7, r0
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	215e      	movs	r1, #94	; 0x5e
 8007cf8:	5a52      	ldrh	r2, [r2, r1]
 8007cfa:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007cfc:	0001      	movs	r1, r0
 8007cfe:	187b      	adds	r3, r7, r1
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d044      	beq.n	8007d90 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2268      	movs	r2, #104	; 0x68
 8007d0a:	5a9b      	ldrh	r3, [r3, r2]
 8007d0c:	187a      	adds	r2, r7, r1
 8007d0e:	8812      	ldrh	r2, [r2, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d23d      	bcs.n	8007d90 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d14:	f3ef 8310 	mrs	r3, PRIMASK
 8007d18:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d1e:	2301      	movs	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f383 8810 	msr	PRIMASK, r3
}
 8007d28:	46c0      	nop			; (mov r8, r8)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	491a      	ldr	r1, [pc, #104]	; (8007da0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007d36:	400a      	ands	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]
 8007d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f383 8810 	msr	PRIMASK, r3
}
 8007d44:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007d4a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d50:	617b      	str	r3, [r7, #20]
  return(result);
 8007d52:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d54:	647b      	str	r3, [r7, #68]	; 0x44
 8007d56:	2301      	movs	r3, #1
 8007d58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	f383 8810 	msr	PRIMASK, r3
}
 8007d60:	46c0      	nop			; (mov r8, r8)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2120      	movs	r1, #32
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f383 8810 	msr	PRIMASK, r3
}
 8007d7c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d7e:	e007      	b.n	8007d90 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2108      	movs	r1, #8
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	619a      	str	r2, [r3, #24]
}
 8007d90:	46c0      	nop			; (mov r8, r8)
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b01c      	add	sp, #112	; 0x70
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	fffffeff 	.word	0xfffffeff
 8007d9c:	effffffe 	.word	0xeffffffe
 8007da0:	efffffff 	.word	0xefffffff
 8007da4:	080077ed 	.word	0x080077ed

08007da8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b09e      	sub	sp, #120	; 0x78
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007db0:	2372      	movs	r3, #114	; 0x72
 8007db2:	18fb      	adds	r3, r7, r3
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	2160      	movs	r1, #96	; 0x60
 8007db8:	5a52      	ldrh	r2, [r2, r1]
 8007dba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2288      	movs	r2, #136	; 0x88
 8007dd8:	589b      	ldr	r3, [r3, r2]
 8007dda:	2b22      	cmp	r3, #34	; 0x22
 8007ddc:	d000      	beq.n	8007de0 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007dde:	e141      	b.n	8008064 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007de0:	2366      	movs	r3, #102	; 0x66
 8007de2:	18fb      	adds	r3, r7, r3
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	2168      	movs	r1, #104	; 0x68
 8007de8:	5a52      	ldrh	r2, [r2, r1]
 8007dea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dec:	e0e8      	b.n	8007fc0 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007df4:	2164      	movs	r1, #100	; 0x64
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfe:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e00:	187b      	adds	r3, r7, r1
 8007e02:	2272      	movs	r2, #114	; 0x72
 8007e04:	18ba      	adds	r2, r7, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	8812      	ldrh	r2, [r2, #0]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	1c9a      	adds	r2, r3, #2
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	225e      	movs	r2, #94	; 0x5e
 8007e20:	5a9b      	ldrh	r3, [r3, r2]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b299      	uxth	r1, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	225e      	movs	r2, #94	; 0x5e
 8007e2c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e38:	2207      	movs	r2, #7
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d049      	beq.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e40:	2201      	movs	r2, #1
 8007e42:	4013      	ands	r3, r2
 8007e44:	d010      	beq.n	8007e68 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007e46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	d00b      	beq.n	8007e68 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	228c      	movs	r2, #140	; 0x8c
 8007e5c:	589b      	ldr	r3, [r3, r2]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	431a      	orrs	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	218c      	movs	r1, #140	; 0x8c
 8007e66:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	d00f      	beq.n	8007e90 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e72:	2201      	movs	r2, #1
 8007e74:	4013      	ands	r3, r2
 8007e76:	d00b      	beq.n	8007e90 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	228c      	movs	r2, #140	; 0x8c
 8007e84:	589b      	ldr	r3, [r3, r2]
 8007e86:	2204      	movs	r2, #4
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	218c      	movs	r1, #140	; 0x8c
 8007e8e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e92:	2204      	movs	r2, #4
 8007e94:	4013      	ands	r3, r2
 8007e96:	d00f      	beq.n	8007eb8 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	d00b      	beq.n	8007eb8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	228c      	movs	r2, #140	; 0x8c
 8007eac:	589b      	ldr	r3, [r3, r2]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	218c      	movs	r1, #140	; 0x8c
 8007eb6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	228c      	movs	r2, #140	; 0x8c
 8007ebc:	589b      	ldr	r3, [r3, r2]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	f7fe fd95 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	228c      	movs	r2, #140	; 0x8c
 8007ece:	2100      	movs	r1, #0
 8007ed0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	225e      	movs	r2, #94	; 0x5e
 8007ed6:	5a9b      	ldrh	r3, [r3, r2]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d170      	bne.n	8007fc0 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ede:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee8:	2301      	movs	r3, #1
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	495f      	ldr	r1, [pc, #380]	; (800807c <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8007f00:	400a      	ands	r2, r1
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	f383 8810 	msr	PRIMASK, r3
}
 8007f0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f10:	f3ef 8310 	mrs	r3, PRIMASK
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f18:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f20:	f383 8810 	msr	PRIMASK, r3
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4953      	ldr	r1, [pc, #332]	; (8008080 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8007f32:	400a      	ands	r2, r1
 8007f34:	609a      	str	r2, [r3, #8]
 8007f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f3c:	f383 8810 	msr	PRIMASK, r3
}
 8007f40:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2288      	movs	r2, #136	; 0x88
 8007f46:	2120      	movs	r1, #32
 8007f48:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d12f      	bne.n	8007fb8 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f66:	657b      	str	r3, [r7, #84]	; 0x54
 8007f68:	2301      	movs	r3, #1
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	f383 8810 	msr	PRIMASK, r3
}
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2110      	movs	r1, #16
 8007f80:	438a      	bics	r2, r1
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	f383 8810 	msr	PRIMASK, r3
}
 8007f8e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	2210      	movs	r2, #16
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b10      	cmp	r3, #16
 8007f9c:	d103      	bne.n	8007fa6 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	225c      	movs	r2, #92	; 0x5c
 8007faa:	5a9a      	ldrh	r2, [r3, r2]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	0011      	movs	r1, r2
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f7fe fd2f 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
 8007fb6:	e003      	b.n	8007fc0 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f7f9 fe36 	bl	8001c2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fc0:	2366      	movs	r3, #102	; 0x66
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8007fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fcc:	2220      	movs	r2, #32
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d000      	beq.n	8007fd4 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8007fd2:	e70c      	b.n	8007dee <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007fd4:	2052      	movs	r0, #82	; 0x52
 8007fd6:	183b      	adds	r3, r7, r0
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	215e      	movs	r1, #94	; 0x5e
 8007fdc:	5a52      	ldrh	r2, [r2, r1]
 8007fde:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fe0:	0001      	movs	r1, r0
 8007fe2:	187b      	adds	r3, r7, r1
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d044      	beq.n	8008074 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2268      	movs	r2, #104	; 0x68
 8007fee:	5a9b      	ldrh	r3, [r3, r2]
 8007ff0:	187a      	adds	r2, r7, r1
 8007ff2:	8812      	ldrh	r2, [r2, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d23d      	bcs.n	8008074 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008002:	2301      	movs	r3, #1
 8008004:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f383 8810 	msr	PRIMASK, r3
}
 800800c:	46c0      	nop			; (mov r8, r8)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	491a      	ldr	r1, [pc, #104]	; (8008084 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800801a:	400a      	ands	r2, r1
 800801c:	609a      	str	r2, [r3, #8]
 800801e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f383 8810 	msr	PRIMASK, r3
}
 8008028:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a16      	ldr	r2, [pc, #88]	; (8008088 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800802e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008030:	f3ef 8310 	mrs	r3, PRIMASK
 8008034:	61bb      	str	r3, [r7, #24]
  return(result);
 8008036:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008038:	64bb      	str	r3, [r7, #72]	; 0x48
 800803a:	2301      	movs	r3, #1
 800803c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	f383 8810 	msr	PRIMASK, r3
}
 8008044:	46c0      	nop			; (mov r8, r8)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2120      	movs	r1, #32
 8008052:	430a      	orrs	r2, r1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008058:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	f383 8810 	msr	PRIMASK, r3
}
 8008060:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008062:	e007      	b.n	8008074 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2108      	movs	r1, #8
 8008070:	430a      	orrs	r2, r1
 8008072:	619a      	str	r2, [r3, #24]
}
 8008074:	46c0      	nop			; (mov r8, r8)
 8008076:	46bd      	mov	sp, r7
 8008078:	b01e      	add	sp, #120	; 0x78
 800807a:	bd80      	pop	{r7, pc}
 800807c:	fffffeff 	.word	0xfffffeff
 8008080:	effffffe 	.word	0xeffffffe
 8008084:	efffffff 	.word	0xefffffff
 8008088:	08007959 	.word	0x08007959

0800808c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008094:	46c0      	nop			; (mov r8, r8)
 8008096:	46bd      	mov	sp, r7
 8008098:	b002      	add	sp, #8
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080a4:	46c0      	nop			; (mov r8, r8)
 80080a6:	46bd      	mov	sp, r7
 80080a8:	b002      	add	sp, #8
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080b4:	46c0      	nop			; (mov r8, r8)
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b002      	add	sp, #8
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2280      	movs	r2, #128	; 0x80
 80080c8:	5c9b      	ldrb	r3, [r3, r2]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e027      	b.n	8008122 <HAL_UARTEx_DisableFifoMode+0x66>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2280      	movs	r2, #128	; 0x80
 80080d6:	2101      	movs	r1, #1
 80080d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2284      	movs	r2, #132	; 0x84
 80080de:	2124      	movs	r1, #36	; 0x24
 80080e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2101      	movs	r1, #1
 80080f6:	438a      	bics	r2, r1
 80080f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <HAL_UARTEx_DisableFifoMode+0x70>)
 80080fe:	4013      	ands	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2284      	movs	r2, #132	; 0x84
 8008114:	2120      	movs	r1, #32
 8008116:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2280      	movs	r2, #128	; 0x80
 800811c:	2100      	movs	r1, #0
 800811e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	0018      	movs	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	b004      	add	sp, #16
 8008128:	bd80      	pop	{r7, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	dfffffff 	.word	0xdfffffff

08008130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2280      	movs	r2, #128	; 0x80
 800813e:	5c9b      	ldrb	r3, [r3, r2]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008144:	2302      	movs	r3, #2
 8008146:	e02e      	b.n	80081a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2280      	movs	r2, #128	; 0x80
 800814c:	2101      	movs	r1, #1
 800814e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2284      	movs	r2, #132	; 0x84
 8008154:	2124      	movs	r1, #36	; 0x24
 8008156:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2101      	movs	r1, #1
 800816c:	438a      	bics	r2, r1
 800816e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	08d9      	lsrs	r1, r3, #3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	0018      	movs	r0, r3
 8008188:	f000 f854 	bl	8008234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2284      	movs	r2, #132	; 0x84
 8008198:	2120      	movs	r1, #32
 800819a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2280      	movs	r2, #128	; 0x80
 80081a0:	2100      	movs	r1, #0
 80081a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	0018      	movs	r0, r3
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b004      	add	sp, #16
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2280      	movs	r2, #128	; 0x80
 80081be:	5c9b      	ldrb	r3, [r3, r2]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e02f      	b.n	8008228 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2280      	movs	r2, #128	; 0x80
 80081cc:	2101      	movs	r1, #1
 80081ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2284      	movs	r2, #132	; 0x84
 80081d4:	2124      	movs	r1, #36	; 0x24
 80081d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2101      	movs	r1, #1
 80081ec:	438a      	bics	r2, r1
 80081ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	4a0e      	ldr	r2, [pc, #56]	; (8008230 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	0019      	movs	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	0018      	movs	r0, r3
 800820a:	f000 f813 	bl	8008234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2284      	movs	r2, #132	; 0x84
 800821a:	2120      	movs	r1, #32
 800821c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2280      	movs	r2, #128	; 0x80
 8008222:	2100      	movs	r1, #0
 8008224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	b004      	add	sp, #16
 800822e:	bd80      	pop	{r7, pc}
 8008230:	f1ffffff 	.word	0xf1ffffff

08008234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008240:	2b00      	cmp	r3, #0
 8008242:	d108      	bne.n	8008256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	226a      	movs	r2, #106	; 0x6a
 8008248:	2101      	movs	r1, #1
 800824a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2268      	movs	r2, #104	; 0x68
 8008250:	2101      	movs	r1, #1
 8008252:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008254:	e043      	b.n	80082de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008256:	260f      	movs	r6, #15
 8008258:	19bb      	adds	r3, r7, r6
 800825a:	2208      	movs	r2, #8
 800825c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800825e:	200e      	movs	r0, #14
 8008260:	183b      	adds	r3, r7, r0
 8008262:	2208      	movs	r2, #8
 8008264:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	0e5b      	lsrs	r3, r3, #25
 800826e:	b2da      	uxtb	r2, r3
 8008270:	240d      	movs	r4, #13
 8008272:	193b      	adds	r3, r7, r4
 8008274:	2107      	movs	r1, #7
 8008276:	400a      	ands	r2, r1
 8008278:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	0f5b      	lsrs	r3, r3, #29
 8008282:	b2da      	uxtb	r2, r3
 8008284:	250c      	movs	r5, #12
 8008286:	197b      	adds	r3, r7, r5
 8008288:	2107      	movs	r1, #7
 800828a:	400a      	ands	r2, r1
 800828c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800828e:	183b      	adds	r3, r7, r0
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	197a      	adds	r2, r7, r5
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	4914      	ldr	r1, [pc, #80]	; (80082e8 <UARTEx_SetNbDataToProcess+0xb4>)
 8008298:	5c8a      	ldrb	r2, [r1, r2]
 800829a:	435a      	muls	r2, r3
 800829c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800829e:	197b      	adds	r3, r7, r5
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	4a12      	ldr	r2, [pc, #72]	; (80082ec <UARTEx_SetNbDataToProcess+0xb8>)
 80082a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082a6:	0019      	movs	r1, r3
 80082a8:	f7f7 ffb8 	bl	800021c <__divsi3>
 80082ac:	0003      	movs	r3, r0
 80082ae:	b299      	uxth	r1, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	226a      	movs	r2, #106	; 0x6a
 80082b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082b6:	19bb      	adds	r3, r7, r6
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	193a      	adds	r2, r7, r4
 80082bc:	7812      	ldrb	r2, [r2, #0]
 80082be:	490a      	ldr	r1, [pc, #40]	; (80082e8 <UARTEx_SetNbDataToProcess+0xb4>)
 80082c0:	5c8a      	ldrb	r2, [r1, r2]
 80082c2:	435a      	muls	r2, r3
 80082c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80082c6:	193b      	adds	r3, r7, r4
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <UARTEx_SetNbDataToProcess+0xb8>)
 80082cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ce:	0019      	movs	r1, r3
 80082d0:	f7f7 ffa4 	bl	800021c <__divsi3>
 80082d4:	0003      	movs	r3, r0
 80082d6:	b299      	uxth	r1, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2268      	movs	r2, #104	; 0x68
 80082dc:	5299      	strh	r1, [r3, r2]
}
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	46bd      	mov	sp, r7
 80082e2:	b005      	add	sp, #20
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	08008460 	.word	0x08008460
 80082ec:	08008468 	.word	0x08008468

080082f0 <__libc_init_array>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	2600      	movs	r6, #0
 80082f4:	4d0c      	ldr	r5, [pc, #48]	; (8008328 <__libc_init_array+0x38>)
 80082f6:	4c0d      	ldr	r4, [pc, #52]	; (800832c <__libc_init_array+0x3c>)
 80082f8:	1b64      	subs	r4, r4, r5
 80082fa:	10a4      	asrs	r4, r4, #2
 80082fc:	42a6      	cmp	r6, r4
 80082fe:	d109      	bne.n	8008314 <__libc_init_array+0x24>
 8008300:	2600      	movs	r6, #0
 8008302:	f000 f821 	bl	8008348 <_init>
 8008306:	4d0a      	ldr	r5, [pc, #40]	; (8008330 <__libc_init_array+0x40>)
 8008308:	4c0a      	ldr	r4, [pc, #40]	; (8008334 <__libc_init_array+0x44>)
 800830a:	1b64      	subs	r4, r4, r5
 800830c:	10a4      	asrs	r4, r4, #2
 800830e:	42a6      	cmp	r6, r4
 8008310:	d105      	bne.n	800831e <__libc_init_array+0x2e>
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	00b3      	lsls	r3, r6, #2
 8008316:	58eb      	ldr	r3, [r5, r3]
 8008318:	4798      	blx	r3
 800831a:	3601      	adds	r6, #1
 800831c:	e7ee      	b.n	80082fc <__libc_init_array+0xc>
 800831e:	00b3      	lsls	r3, r6, #2
 8008320:	58eb      	ldr	r3, [r5, r3]
 8008322:	4798      	blx	r3
 8008324:	3601      	adds	r6, #1
 8008326:	e7f2      	b.n	800830e <__libc_init_array+0x1e>
 8008328:	08008478 	.word	0x08008478
 800832c:	08008478 	.word	0x08008478
 8008330:	08008478 	.word	0x08008478
 8008334:	0800847c 	.word	0x0800847c

08008338 <memset>:
 8008338:	0003      	movs	r3, r0
 800833a:	1882      	adds	r2, r0, r2
 800833c:	4293      	cmp	r3, r2
 800833e:	d100      	bne.n	8008342 <memset+0xa>
 8008340:	4770      	bx	lr
 8008342:	7019      	strb	r1, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	e7f9      	b.n	800833c <memset+0x4>

08008348 <_init>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr

08008354 <_fini>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835a:	bc08      	pop	{r3}
 800835c:	469e      	mov	lr, r3
 800835e:	4770      	bx	lr
