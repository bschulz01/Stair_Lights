
Receiver_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007790  08007790  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007798  08007798  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080077a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  20000034  080077d4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001df8  080077d4  00021df8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132d4  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002997  00000000  00000000  00033330  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  00035cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  00036e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a95f  00000000  00000000  00037f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f9a1  00000000  00000000  0005285f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abef0  00000000  00000000  00062200  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e0f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  0010e16c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800769c 	.word	0x0800769c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	0800769c 	.word	0x0800769c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8b1 	bl	80005b8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ac 	bl	80005b8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzdi2>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d103      	bne.n	80005c6 <__clzdi2+0xe>
 80005be:	f000 f807 	bl	80005d0 <__clzsi2>
 80005c2:	3020      	adds	r0, #32
 80005c4:	e002      	b.n	80005cc <__clzdi2+0x14>
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	f000 f802 	bl	80005d0 <__clzsi2>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__clzsi2>:
 80005d0:	211c      	movs	r1, #28
 80005d2:	2301      	movs	r3, #1
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d301      	bcc.n	80005de <__clzsi2+0xe>
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	3910      	subs	r1, #16
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d301      	bcc.n	80005e8 <__clzsi2+0x18>
 80005e4:	0a00      	lsrs	r0, r0, #8
 80005e6:	3908      	subs	r1, #8
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0x22>
 80005ee:	0900      	lsrs	r0, r0, #4
 80005f0:	3904      	subs	r1, #4
 80005f2:	a202      	add	r2, pc, #8	; (adr r2, 80005fc <__clzsi2+0x2c>)
 80005f4:	5c10      	ldrb	r0, [r2, r0]
 80005f6:	1840      	adds	r0, r0, r1
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	02020304 	.word	0x02020304
 8000600:	01010101 	.word	0x01010101
	...

0800060c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t dataSentFlag;


// Callback for when data transfer is complete
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(getLEDTimer(), TIM_CHANNEL);
 8000614:	f000 fbb4 	bl	8000d80 <getLEDTimer>
 8000618:	0003      	movs	r3, r0
 800061a:	2104      	movs	r1, #4
 800061c:	0018      	movs	r0, r3
 800061e:	f004 f90d 	bl	800483c <HAL_TIM_PWM_Stop_DMA>
	dataSentFlag = 1;
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200001d0 	.word	0x200001d0

08000634 <getLEDBuf>:

uint8_t* getLEDBuf(uint8_t led) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	0002      	movs	r2, r0
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	701a      	strb	r2, [r3, #0]
	return &LED_data[led*3];
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	0013      	movs	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	189a      	adds	r2, r3, r2
 800064a:	4b03      	ldr	r3, [pc, #12]	; (8000658 <getLEDBuf+0x24>)
 800064c:	18d3      	adds	r3, r2, r3
}
 800064e:	0018      	movs	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000050 	.word	0x20000050

0800065c <setLED>:

void setLED(uint32_t LED, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	000c      	movs	r4, r1
 8000666:	0010      	movs	r0, r2
 8000668:	0019      	movs	r1, r3
 800066a:	1cfb      	adds	r3, r7, #3
 800066c:	1c22      	adds	r2, r4, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	1cbb      	adds	r3, r7, #2
 8000672:	1c02      	adds	r2, r0, #0
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	1c7b      	adds	r3, r7, #1
 8000678:	1c0a      	adds	r2, r1, #0
 800067a:	701a      	strb	r2, [r3, #0]
	LED_data[LED*3] = Green;
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	0013      	movs	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	189b      	adds	r3, r3, r2
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <setLED+0x5c>)
 8000686:	1cb9      	adds	r1, r7, #2
 8000688:	7809      	ldrb	r1, [r1, #0]
 800068a:	54d1      	strb	r1, [r2, r3]
	LED_data[LED*3+1] = Red;
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	0013      	movs	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	189b      	adds	r3, r3, r2
 8000694:	3301      	adds	r3, #1
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <setLED+0x5c>)
 8000698:	1cf9      	adds	r1, r7, #3
 800069a:	7809      	ldrb	r1, [r1, #0]
 800069c:	54d1      	strb	r1, [r2, r3]
	LED_data[LED*3+2] = Blue;
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	0013      	movs	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	3302      	adds	r3, #2
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <setLED+0x5c>)
 80006aa:	1c79      	adds	r1, r7, #1
 80006ac:	7809      	ldrb	r1, [r1, #0]
 80006ae:	54d1      	strb	r1, [r2, r3]
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b003      	add	sp, #12
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	20000050 	.word	0x20000050

080006bc <clearLEDs>:


void clearLEDs()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	for (int index = 0; index < NUM_LEDS; index++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e008      	b.n	80006da <clearLEDs+0x1e>
	{
		setLED(index, 0, 0, 0);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	f7ff ffc4 	bl	800065c <setLED>
	for (int index = 0; index < NUM_LEDS; index++)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b7f      	cmp	r3, #127	; 0x7f
 80006de:	ddf3      	ble.n	80006c8 <clearLEDs+0xc>
	}
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <updateWS2812>:
//	}
//}


void updateWS2812()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
	uint32_t color;
	uint8_t mask = 0b00001111;
 80006ee:	1d7b      	adds	r3, r7, #5
 80006f0:	220f      	movs	r2, #15
 80006f2:	701a      	strb	r2, [r3, #0]

	uint16_t idx = 0;
 80006f4:	230e      	movs	r3, #14
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2200      	movs	r2, #0
 80006fa:	801a      	strh	r2, [r3, #0]
	// Load buffer with LED data
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	e058      	b.n	80007b4 <updateWS2812+0xcc>
	{
		// Generate bits to describe color
		// Shift an extra 4 bits since the relevant bits are the lower 4 bits
		color = ((LED_data[led*3] & mask) << 20) |
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	0013      	movs	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	189b      	adds	r3, r3, r2
 800070a:	4a40      	ldr	r2, [pc, #256]	; (800080c <updateWS2812+0x124>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	1d7a      	adds	r2, r7, #5
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	4013      	ands	r3, r2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	0519      	lsls	r1, r3, #20
				((LED_data[led*3+1] & mask) << 12) |
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	0013      	movs	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	189b      	adds	r3, r3, r2
 8000720:	3301      	adds	r3, #1
 8000722:	4a3a      	ldr	r2, [pc, #232]	; (800080c <updateWS2812+0x124>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	1d7a      	adds	r2, r7, #5
 8000728:	7812      	ldrb	r2, [r2, #0]
 800072a:	4013      	ands	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	031b      	lsls	r3, r3, #12
		color = ((LED_data[led*3] & mask) << 20) |
 8000730:	4319      	orrs	r1, r3
				((LED_data[led*3+2] & mask) << 4);
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	0013      	movs	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	189b      	adds	r3, r3, r2
 800073a:	3302      	adds	r3, #2
 800073c:	4a33      	ldr	r2, [pc, #204]	; (800080c <updateWS2812+0x124>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	1d7a      	adds	r2, r7, #5
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	4013      	ands	r3, r2
 8000746:	b2db      	uxtb	r3, r3
 8000748:	011b      	lsls	r3, r3, #4
				((LED_data[led*3+1] & mask) << 12) |
 800074a:	430b      	orrs	r3, r1
		color = ((LED_data[led*3] & mask) << 20) |
 800074c:	603b      	str	r3, [r7, #0]

		// Set the buffer for this LED
		// Send MSB to LSB
		for (int16_t bit = 23; bit >= 0; bit--)
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	2217      	movs	r2, #23
 8000752:	801a      	strh	r2, [r3, #0]
 8000754:	e026      	b.n	80007a4 <updateWS2812+0xbc>
		{
			//uint32_t idx = 24 * led + bit;
			if (color & (1<<bit))
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	2200      	movs	r2, #0
 800075a:	5e9b      	ldrsh	r3, [r3, r2]
 800075c:	2201      	movs	r2, #1
 800075e:	409a      	lsls	r2, r3
 8000760:	0013      	movs	r3, r2
 8000762:	001a      	movs	r2, r3
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	4013      	ands	r3, r2
 8000768:	d007      	beq.n	800077a <updateWS2812+0x92>
			{
				PWM_data[idx] = HIGH_TIME; // High bit
 800076a:	230e      	movs	r3, #14
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	881a      	ldrh	r2, [r3, #0]
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <updateWS2812+0x128>)
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	2136      	movs	r1, #54	; 0x36
 8000776:	52d1      	strh	r1, [r2, r3]
 8000778:	e006      	b.n	8000788 <updateWS2812+0xa0>
			}
			else
			{
				PWM_data[idx] = LOW_TIME; // Low bit
 800077a:	230e      	movs	r3, #14
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <updateWS2812+0x128>)
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	211b      	movs	r1, #27
 8000786:	52d1      	strh	r1, [r2, r3]
			}
			idx++;
 8000788:	210e      	movs	r1, #14
 800078a:	187b      	adds	r3, r7, r1
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	187b      	adds	r3, r7, r1
 8000790:	3201      	adds	r2, #1
 8000792:	801a      	strh	r2, [r3, #0]
		for (int16_t bit = 23; bit >= 0; bit--)
 8000794:	1dbb      	adds	r3, r7, #6
 8000796:	2200      	movs	r2, #0
 8000798:	5e9b      	ldrsh	r3, [r3, r2]
 800079a:	b29b      	uxth	r3, r3
 800079c:	3b01      	subs	r3, #1
 800079e:	b29a      	uxth	r2, r3
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	801a      	strh	r2, [r3, #0]
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	2200      	movs	r2, #0
 80007a8:	5e9b      	ldrsh	r3, [r3, r2]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dad3      	bge.n	8000756 <updateWS2812+0x6e>
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2b7f      	cmp	r3, #127	; 0x7f
 80007b8:	d9a3      	bls.n	8000702 <updateWS2812+0x1a>
		}
	}

	// Reset the communication line to signify end of transmission
	while (idx < BUFFER_LENGTH)
 80007ba:	e00b      	b.n	80007d4 <updateWS2812+0xec>
	{
		PWM_data[idx] = 0;
 80007bc:	200e      	movs	r0, #14
 80007be:	183b      	adds	r3, r7, r0
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <updateWS2812+0x128>)
 80007c4:	0052      	lsls	r2, r2, #1
 80007c6:	2100      	movs	r1, #0
 80007c8:	52d1      	strh	r1, [r2, r3]
		idx++;
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	881a      	ldrh	r2, [r3, #0]
 80007ce:	183b      	adds	r3, r7, r0
 80007d0:	3201      	adds	r2, #1
 80007d2:	801a      	strh	r2, [r3, #0]
	while (idx < BUFFER_LENGTH)
 80007d4:	230e      	movs	r3, #14
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <updateWS2812+0x12c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d9ed      	bls.n	80007bc <updateWS2812+0xd4>
	}

	// Begin transfer of data
	HAL_TIM_PWM_Start_DMA(getLEDTimer(), TIM_CHANNEL, (uint32_t *)PWM_data, idx);
 80007e0:	f000 face 	bl	8000d80 <getLEDTimer>
 80007e4:	230e      	movs	r3, #14
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <updateWS2812+0x128>)
 80007ec:	2104      	movs	r1, #4
 80007ee:	f003 fe3f 	bl	8004470 <HAL_TIM_PWM_Start_DMA>

	while(!dataSentFlag)
 80007f2:	e000      	b.n	80007f6 <updateWS2812+0x10e>
		continue;
 80007f4:	46c0      	nop			; (mov r8, r8)
	while(!dataSentFlag)
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <updateWS2812+0x130>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0fa      	beq.n	80007f4 <updateWS2812+0x10c>

	dataSentFlag = 0;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <updateWS2812+0x130>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b004      	add	sp, #16
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000050 	.word	0x20000050
 8000810:	200001d4 	.word	0x200001d4
 8000814:	00000c31 	.word	0x00000c31
 8000818:	200001d0 	.word	0x200001d0

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f001 f984 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f822 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 fa5a 	bl	8000ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 800082c:	f000 fa32 	bl	8000c94 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000830:	f000 f9ae 	bl	8000b90 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000834:	f000 f9fa 	bl	8000c2c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000838:	f000 f896 	bl	8000968 <MX_ADC1_Init>
  MX_TIM1_Init();
 800083c:	f000 f8fe 	bl	8000a3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  receiveIT();
 8000840:	f000 fdea 	bl	8001418 <receiveIT>
  clearSensorHistory();
 8000844:	f000 ffb6 	bl	80017b4 <clearSensorHistory>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (cmdReady()) {
 8000848:	f000 fe0a 	bl	8001460 <cmdReady>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d0fb      	beq.n	8000848 <main+0x2c>
		  abortIT();
 8000850:	f000 fdd0 	bl	80013f4 <abortIT>
		  processCommand();
 8000854:	f000 feb0 	bl	80015b8 <processCommand>
		  // Update LEDs if needed
		  if (updateLEDs()) {
 8000858:	f000 fdba 	bl	80013d0 <updateLEDs>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <main+0x48>
			  updateWS2812();
 8000860:	f7ff ff42 	bl	80006e8 <updateWS2812>
		  }
		  receiveIT();
 8000864:	f000 fdd8 	bl	8001418 <receiveIT>
	  if (cmdReady()) {
 8000868:	e7ee      	b.n	8000848 <main+0x2c>
	...

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b0a1      	sub	sp, #132	; 0x84
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	2448      	movs	r4, #72	; 0x48
 8000874:	193b      	adds	r3, r7, r4
 8000876:	0018      	movs	r0, r3
 8000878:	2338      	movs	r3, #56	; 0x38
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f006 ff05 	bl	800768c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000882:	2338      	movs	r3, #56	; 0x38
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0018      	movs	r0, r3
 8000888:	2310      	movs	r3, #16
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f006 fefd 	bl	800768c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000892:	003b      	movs	r3, r7
 8000894:	0018      	movs	r0, r3
 8000896:	2338      	movs	r3, #56	; 0x38
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f006 fef6 	bl	800768c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fe9b 	bl	80035e0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2202      	movs	r2, #2
 80008ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0052      	lsls	r2, r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2202      	movs	r2, #2
 80008ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2202      	movs	r2, #2
 80008d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2208      	movs	r2, #8
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	0292      	lsls	r2, r2, #10
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	0492      	lsls	r2, r2, #18
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	0592      	lsls	r2, r2, #22
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 febd 	bl	8003678 <HAL_RCC_OscConfig>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000902:	f000 fa5d 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	2138      	movs	r1, #56	; 0x38
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2207      	movs	r2, #7
 800090c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2202      	movs	r2, #2
 8000912:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2102      	movs	r1, #2
 8000924:	0018      	movs	r0, r3
 8000926:	f003 f9c7 	bl	8003cb8 <HAL_RCC_ClockConfig>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800092e:	f000 fa47 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC
 8000932:	003b      	movs	r3, r7
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <SystemClock_Config+0xf8>)
 8000936:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000938:	003b      	movs	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800093e:	003b      	movs	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8000944:	003b      	movs	r3, r7
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	03d2      	lsls	r2, r2, #15
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	003b      	movs	r3, r7
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fb5c 	bl	800400c <HAL_RCCEx_PeriphCLKConfig>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000958:	f000 fa32 	bl	8000dc0 <Error_Handler>
  }
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b021      	add	sp, #132	; 0x84
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	00204001 	.word	0x00204001

08000968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	0018      	movs	r0, r3
 8000972:	230c      	movs	r3, #12
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f006 fe88 	bl	800768c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_ADC1_Init+0xcc>)
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_ADC1_Init+0xd0>)
 8000980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	05d2      	lsls	r2, r2, #23
 8000988:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <MX_ADC1_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_ADC1_Init+0xcc>)
 800099e:	2204      	movs	r2, #4
 80009a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009bc:	2220      	movs	r2, #32
 80009be:	2100      	movs	r1, #0
 80009c0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009d0:	222c      	movs	r2, #44	; 0x2c
 80009d2:	2100      	movs	r1, #0
 80009d4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009ea:	223c      	movs	r2, #60	; 0x3c
 80009ec:	2100      	movs	r1, #0
 80009ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ADC1_Init+0xcc>)
 80009f8:	0018      	movs	r0, r3
 80009fa:	f001 fa85 	bl	8001f08 <HAL_ADC_Init>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a02:	f000 f9dd 	bl	8000dc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	1d3a      	adds	r2, r7, #4
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_ADC1_Init+0xcc>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fd72 	bl	8002508 <HAL_ADC_ConfigChannel>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000a28:	f000 f9ca 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b004      	add	sp, #16
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20001bdc 	.word	0x20001bdc
 8000a38:	40012400 	.word	0x40012400

08000a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b098      	sub	sp, #96	; 0x60
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	2354      	movs	r3, #84	; 0x54
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	230c      	movs	r3, #12
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f006 fe1d 	bl	800768c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	2338      	movs	r3, #56	; 0x38
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	231c      	movs	r3, #28
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f006 fe15 	bl	800768c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2334      	movs	r3, #52	; 0x34
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f006 fe0e 	bl	800768c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a70:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a72:	4a46      	ldr	r2, [pc, #280]	; (8000b8c <MX_TIM1_Init+0x150>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80;
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a84:	2250      	movs	r2, #80	; 0x50
 8000a86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8e:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 fc8f 	bl	80043c0 <HAL_TIM_PWM_Init>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 f98b 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2154      	movs	r1, #84	; 0x54
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000abe:	187a      	adds	r2, r7, r1
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f004 fcd3 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ace:	f000 f977 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad2:	2138      	movs	r1, #56	; 0x38
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2260      	movs	r2, #96	; 0x60
 8000ad8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000afe:	1879      	adds	r1, r7, r1
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	0018      	movs	r0, r3
 8000b06:	f003 ff71 	bl	80049ec <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b0e:	f000 f957 	bl	8000dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	0192      	lsls	r2, r2, #6
 8000b36:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	0492      	lsls	r2, r2, #18
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b64:	1d3a      	adds	r2, r7, #4
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f004 fcee 	bl	800554c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000b74:	f000 f924 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <MX_TIM1_Init+0x14c>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 faa2 	bl	80010c4 <HAL_TIM_MspPostInit>

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b018      	add	sp, #96	; 0x60
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20001cd0 	.word	0x20001cd0
 8000b8c:	40012c00 	.word	0x40012c00

08000b90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <MX_USART1_UART_Init+0x98>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000b9c:	22e1      	movs	r2, #225	; 0xe1
 8000b9e:	0252      	lsls	r2, r2, #9
 8000ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f004 fd5c 	bl	8005698 <HAL_UART_Init>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 f8ec 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f006 fc3d 	bl	800746c <HAL_UARTEx_SetTxFifoThreshold>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 f8e3 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f006 fc74 	bl	80074ec <HAL_UARTEx_SetRxFifoThreshold>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f000 f8da 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f006 fbf2 	bl	80073f8 <HAL_UARTEx_DisableFifoMode>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f000 f8d2 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20001c40 	.word	0x20001c40
 8000c28:	40013800 	.word	0x40013800

08000c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <MX_USART3_UART_Init+0x64>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c38:	22e1      	movs	r2, #225	; 0xe1
 8000c3a:	0252      	lsls	r2, r2, #9
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f004 fd0e 	bl	8005698 <HAL_UART_Init>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f000 f89e 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	20001a38 	.word	0x20001a38
 8000c90:	40004800 	.word	0x40004800

08000c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_DMA_Init+0x48>)
 8000c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_DMA_Init+0x48>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_DMA_Init+0x48>)
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2009      	movs	r0, #9
 8000cb8:	f001 ffbe 	bl	8002c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cbc:	2009      	movs	r0, #9
 8000cbe:	f001 ffd0 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	f001 ffb6 	bl	8002c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f001 ffc8 	bl	8002c62 <HAL_NVIC_EnableIRQ>

}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	240c      	movs	r4, #12
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	0018      	movs	r0, r3
 8000cec:	2314      	movs	r3, #20
 8000cee:	001a      	movs	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f006 fccb 	bl	800768c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	2202      	movs	r2, #2
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_GPIO_Init+0x98>)
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	2204      	movs	r2, #4
 8000d38:	4013      	ands	r3, r2
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	2140      	movs	r1, #64	; 0x40
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fc2d 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d4a:	0021      	movs	r1, r4
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <MX_GPIO_Init+0x9c>)
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	f002 fab6 	bl	80032dc <HAL_GPIO_Init>

}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b009      	add	sp, #36	; 0x24
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	50000800 	.word	0x50000800

08000d80 <getLEDTimer>:

/* USER CODE BEGIN 4 */
TIM_HandleTypeDef* getLEDTimer() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	return &htim1;
 8000d84:	4b01      	ldr	r3, [pc, #4]	; (8000d8c <getLEDTimer+0xc>)
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20001cd0 	.word	0x20001cd0

08000d90 <getADCPtr>:
ADC_HandleTypeDef* getADCPtr() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	return &hadc1;
 8000d94:	4b01      	ldr	r3, [pc, #4]	; (8000d9c <getADCPtr+0xc>)
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20001bdc 	.word	0x20001bdc

08000da0 <getUFP>:
UART_HandleTypeDef* getUFP() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	return &huart1;
 8000da4:	4b01      	ldr	r3, [pc, #4]	; (8000dac <getUFP+0xc>)
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20001c40 	.word	0x20001c40

08000db0 <getDFP>:
UART_HandleTypeDef* getDFP() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	return &huart3;
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <getDFP+0xc>)
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20001a38 	.word	0x20001a38

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <Error_Handler+0x6>

08000dc8 <mapSensor>:
		ADC_CHANNEL_8,
		ADC_CHANNEL_9,
};

// Maps the sensor index to the correct location
uint8_t mapSensor(uint8_t idx) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	0002      	movs	r2, r0
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	701a      	strb	r2, [r3, #0]
		return idx - 1;
	} else {
		return idx;
	}
#else
	if (idx == 0) {
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <mapSensor+0x18>
		return 5;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	e00e      	b.n	8000dfe <mapSensor+0x36>
	} else if (idx < 5) {
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d805      	bhi.n	8000df4 <mapSensor+0x2c>
		return 10 - idx;
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	220a      	movs	r2, #10
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	e004      	b.n	8000dfe <mapSensor+0x36>
	} else {
		return 9 - idx;
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2209      	movs	r2, #9
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	b2db      	uxtb	r3, r3
	}
#endif
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <getNewReadings>:

//. collect new readings from the sensors
uint16_t* getNewReadings()
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	for (int sensor = 0; sensor < SENSORS_PER_BOARD; sensor++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e013      	b.n	8000e3c <getNewReadings+0x34>
		prev_readings[mapSensor(sensor)] = readSensor(sensor);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	b2dd      	uxtb	r5, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffd3 	bl	8000dc8 <mapSensor>
 8000e22:	0003      	movs	r3, r0
 8000e24:	001c      	movs	r4, r3
 8000e26:	0028      	movs	r0, r5
 8000e28:	f000 f81a 	bl	8000e60 <readSensor>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	0019      	movs	r1, r3
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <getNewReadings+0x44>)
 8000e32:	0062      	lsls	r2, r4, #1
 8000e34:	52d1      	strh	r1, [r2, r3]
	for (int sensor = 0; sensor < SENSORS_PER_BOARD; sensor++) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b09      	cmp	r3, #9
 8000e40:	dde8      	ble.n	8000e14 <getNewReadings+0xc>
	}
	return prev_readings;
 8000e42:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <getNewReadings+0x44>)
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4c:	20001d34 	.word	0x20001d34

08000e50 <getLastReadings>:


// retrieve most recent sensor readings
uint16_t* getLastReadings()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	return prev_readings;
 8000e54:	4b01      	ldr	r3, [pc, #4]	; (8000e5c <getLastReadings+0xc>)
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20001d34 	.word	0x20001d34

08000e60 <readSensor>:

uint16_t readSensor(uint8_t sensor)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	0002      	movs	r2, r0
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	701a      	strb	r2, [r3, #0]
	// Do not use the 9th sensor for the reversed side
#ifdef REVERSE_ORDER
	if (sensor == 9) {
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b09      	cmp	r3, #9
 8000e72:	d101      	bne.n	8000e78 <readSensor+0x18>
		return 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e008      	b.n	8000e8a <readSensor+0x2a>
	}
#endif
	return readADC(ADC_channels[sensor]);;
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <readSensor+0x34>)
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	58d3      	ldr	r3, [r2, r3]
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 f808 	bl	8000e98 <readADC>
 8000e88:	0003      	movs	r3, r0
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	20000000 	.word	0x20000000

08000e98 <readADC>:


uint16_t readADC(uint32_t channel)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]


	ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8000ea0:	240c      	movs	r4, #12
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	f006 fbee 	bl	800768c <memset>
	ADC_HandleTypeDef *adcPtr = getADCPtr(); //this is a pointer to your hal_adc
 8000eb0:	f7ff ff6e 	bl	8000d90 <getADCPtr>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61fb      	str	r3, [r7, #28]
	//this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

	//this picks the IR direction to choose the right ADC.
	sConfig.Channel = channel;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]

	// make sure everything was set up correctly
	if (HAL_ADC_ConfigChannel(adcPtr, &sConfig) != HAL_OK)
 8000eca:	193a      	adds	r2, r7, r4
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 fb19 	bl	8002508 <HAL_ADC_ConfigChannel>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <readADC+0x46>
	{
		return 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e016      	b.n	8000f0c <readADC+0x74>
	}

	HAL_ADC_Start(adcPtr);
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 f9ed 	bl	80022c0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(adcPtr, 1);
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fa72 	bl	80023d4 <HAL_ADC_PollForConversion>

	uint16_t val = HAL_ADC_GetValue(adcPtr);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 fafc 	bl	80024f0 <HAL_ADC_GetValue>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	241a      	movs	r4, #26
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(adcPtr);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	0018      	movs	r0, r3
 8000f04:	f001 fa2a 	bl	800235c <HAL_ADC_Stop>

	return val;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	881b      	ldrh	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b009      	add	sp, #36	; 0x24
 8000f12:	bd90      	pop	{r4, r7, pc}

08000f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	0549      	lsls	r1, r1, #21
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	055b      	lsls	r3, r3, #21
 8000f48:	4013      	ands	r3, r2
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fe70 	bl	8001c38 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b08b      	sub	sp, #44	; 0x2c
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	2314      	movs	r3, #20
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	0018      	movs	r0, r3
 8000f72:	2314      	movs	r3, #20
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f006 fb88 	bl	800768c <memset>
  if(hadc->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a26      	ldr	r2, [pc, #152]	; (800101c <HAL_ADC_MspInit+0xb8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d145      	bne.n	8001012 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	0349      	lsls	r1, r1, #13
 8000f90:	430a      	orrs	r2, r1
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	035b      	lsls	r3, r3, #13
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000fa8:	2101      	movs	r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fd2:	2414      	movs	r4, #20
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	2203      	movs	r2, #3
 8000fde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	193a      	adds	r2, r7, r4
 8000fe8:	23a0      	movs	r3, #160	; 0xa0
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f002 f974 	bl	80032dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	193b      	adds	r3, r7, r4
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	193b      	adds	r3, r7, r4
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_ADC_MspInit+0xc0>)
 800100a:	0019      	movs	r1, r3
 800100c:	0010      	movs	r0, r2
 800100e:	f002 f965 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b00b      	add	sp, #44	; 0x2c
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40012400 	.word	0x40012400
 8001020:	40021000 	.word	0x40021000
 8001024:	50000400 	.word	0x50000400

08001028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d138      	bne.n	80010ac <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_TIM_PWM_MspInit+0x90>)
 800103c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_TIM_PWM_MspInit+0x90>)
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	0109      	lsls	r1, r1, #4
 8001044:	430a      	orrs	r2, r1
 8001046:	641a      	str	r2, [r3, #64]	; 0x40
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_TIM_PWM_MspInit+0x90>)
 800104a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel1;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_TIM_PWM_MspInit+0x98>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 800105e:	2215      	movs	r2, #21
 8001060:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 8001064:	2210      	movs	r2, #16
 8001066:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	0052      	lsls	r2, r2, #1
 800107a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 8001092:	0018      	movs	r0, r3
 8001094:	f001 fe02 	bl	8002c9c <HAL_DMA_Init>
 8001098:	1e03      	subs	r3, r0, #0
 800109a:	d001      	beq.n	80010a0 <HAL_TIM_PWM_MspInit+0x78>
    {
      Error_Handler();
 800109c:	f7ff fe90 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_TIM_PWM_MspInit+0x94>)
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	20001ac8 	.word	0x20001ac8
 80010c0:	40020008 	.word	0x40020008

080010c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	230c      	movs	r3, #12
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	0018      	movs	r0, r3
 80010d2:	2314      	movs	r3, #20
 80010d4:	001a      	movs	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	f006 fad8 	bl	800768c <memset>
  if(htim->Instance==TIM1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a15      	ldr	r2, [pc, #84]	; (8001138 <HAL_TIM_MspPostInit+0x74>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d123      	bne.n	800112e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_TIM_MspPostInit+0x78>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_TIM_MspPostInit+0x78>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_TIM_MspPostInit+0x78>)
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010fe:	210c      	movs	r1, #12
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2202      	movs	r2, #2
 800110c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2202      	movs	r2, #2
 800111e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	187a      	adds	r2, r7, r1
 8001122:	23a0      	movs	r3, #160	; 0xa0
 8001124:	05db      	lsls	r3, r3, #23
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f002 f8d7 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b008      	add	sp, #32
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40012c00 	.word	0x40012c00
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	231c      	movs	r3, #28
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	0018      	movs	r0, r3
 800114e:	2314      	movs	r3, #20
 8001150:	001a      	movs	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	f006 fa9a 	bl	800768c <memset>
  if(huart->Instance==USART1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a67      	ldr	r2, [pc, #412]	; (80012fc <HAL_UART_MspInit+0x1bc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d161      	bne.n	8001226 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	01c9      	lsls	r1, r1, #7
 800116c:	430a      	orrs	r2, r1
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
 8001170:	4b63      	ldr	r3, [pc, #396]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b60      	ldr	r3, [pc, #384]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001184:	2102      	movs	r1, #2
 8001186:	430a      	orrs	r2, r1
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 800118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001196:	211c      	movs	r1, #28
 8001198:	187b      	adds	r3, r7, r1
 800119a:	22c0      	movs	r2, #192	; 0xc0
 800119c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2202      	movs	r2, #2
 80011a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_UART_MspInit+0x1c4>)
 80011ba:	0019      	movs	r1, r3
 80011bc:	0010      	movs	r0, r2
 80011be:	f002 f88d 	bl	80032dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80011c2:	4b51      	ldr	r3, [pc, #324]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_UART_MspInit+0x1cc>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80011c8:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011ca:	2233      	movs	r2, #51	; 0x33
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ce:	4b4e      	ldr	r3, [pc, #312]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011d0:	2210      	movs	r2, #16
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e0:	4b49      	ldr	r3, [pc, #292]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e6:	4b48      	ldr	r3, [pc, #288]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011f8:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f001 fd4e 	bl	8002c9c <HAL_DMA_Init>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001204:	f7ff fddc 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3f      	ldr	r2, [pc, #252]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 800120c:	679a      	str	r2, [r3, #120]	; 0x78
 800120e:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <HAL_UART_MspInit+0x1c8>)
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	201b      	movs	r0, #27
 800121a:	f001 fd0d 	bl	8002c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121e:	201b      	movs	r0, #27
 8001220:	f001 fd1f 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001224:	e066      	b.n	80012f4 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a39      	ldr	r2, [pc, #228]	; (8001310 <HAL_UART_MspInit+0x1d0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d161      	bne.n	80012f4 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001236:	2180      	movs	r1, #128	; 0x80
 8001238:	02c9      	lsls	r1, r1, #11
 800123a:	430a      	orrs	r2, r1
 800123c:	63da      	str	r2, [r3, #60]	; 0x3c
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	02db      	lsls	r3, r3, #11
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 800124e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 8001252:	2102      	movs	r1, #2
 8001254:	430a      	orrs	r2, r1
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_UART_MspInit+0x1c0>)
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001264:	211c      	movs	r1, #28
 8001266:	187b      	adds	r3, r7, r1
 8001268:	22c0      	movs	r2, #192	; 0xc0
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2202      	movs	r2, #2
 8001272:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2204      	movs	r2, #4
 8001284:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	187b      	adds	r3, r7, r1
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_UART_MspInit+0x1c4>)
 800128a:	0019      	movs	r1, r3
 800128c:	0010      	movs	r0, r2
 800128e:	f002 f825 	bl	80032dc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 8001294:	4a20      	ldr	r2, [pc, #128]	; (8001318 <HAL_UART_MspInit+0x1d8>)
 8001296:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 800129a:	2237      	movs	r2, #55	; 0x37
 800129c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012a0:	2210      	movs	r2, #16
 80012a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f001 fce6 	bl	8002c9c <HAL_DMA_Init>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_UART_MspInit+0x198>
      Error_Handler();
 80012d4:	f7ff fd74 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012dc:	679a      	str	r2, [r3, #120]	; 0x78
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_UART_MspInit+0x1d4>)
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	201d      	movs	r0, #29
 80012ea:	f001 fca5 	bl	8002c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80012ee:	201d      	movs	r0, #29
 80012f0:	f001 fcb7 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b00c      	add	sp, #48	; 0x30
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013800 	.word	0x40013800
 8001300:	40021000 	.word	0x40021000
 8001304:	50000400 	.word	0x50000400
 8001308:	20001b80 	.word	0x20001b80
 800130c:	4002001c 	.word	0x4002001c
 8001310:	40004800 	.word	0x40004800
 8001314:	20001b24 	.word	0x20001b24
 8001318:	40020030 	.word	0x40020030

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 fc5e 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <DMA1_Channel1_IRQHandler+0x14>)
 8001352:	0018      	movs	r0, r3
 8001354:	f001 fe80 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	20001ac8 	.word	0x20001ac8

08001364 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800136a:	0018      	movs	r0, r3
 800136c:	f001 fe74 	bl	8003058 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001372:	0018      	movs	r0, r3
 8001374:	f001 fe70 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	20001b80 	.word	0x20001b80
 8001384:	20001b24 	.word	0x20001b24

08001388 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <USART1_IRQHandler+0x14>)
 800138e:	0018      	movs	r0, r3
 8001390:	f004 fc92 	bl	8005cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	20001c40 	.word	0x20001c40

080013a0 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <USART3_4_LPUART1_IRQHandler+0x14>)
 80013a6:	0018      	movs	r0, r3
 80013a8:	f004 fc86 	bl	8005cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	20001a38 	.word	0x20001a38

080013b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <SystemInit+0x14>)
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	609a      	str	r2, [r3, #8]
#endif
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <updateLEDs>:
uint8_t display_sense;

uint8_t led_state;

// Returns whether LEDs should be updated
uint8_t updateLEDs() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	if (update_leds) {
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <updateLEDs+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <updateLEDs+0x16>
		update_leds = 0;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <updateLEDs+0x20>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
		return 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <updateLEDs+0x18>
	} else {
		return 0;
 80013e6:	2300      	movs	r3, #0
	}
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20001d4a 	.word	0x20001d4a

080013f4 <abortIT>:

void abortIT() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(getUFP());
 80013f8:	f7ff fcd2 	bl	8000da0 <getUFP>
 80013fc:	0003      	movs	r3, r0
 80013fe:	0018      	movs	r0, r3
 8001400:	f004 fb80 	bl	8005b04 <HAL_UART_Abort_IT>
	HAL_UART_Abort_IT(getDFP());
 8001404:	f7ff fcd4 	bl	8000db0 <getDFP>
 8001408:	0003      	movs	r3, r0
 800140a:	0018      	movs	r0, r3
 800140c:	f004 fb7a 	bl	8005b04 <HAL_UART_Abort_IT>
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <receiveIT>:

// initialize polling for data from UFP
void receiveIT() {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	cmd_ready = 0;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <receiveIT+0x3c>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
	cmd = 0;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <receiveIT+0x40>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
	dfp_cmd = 0;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <receiveIT+0x44>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
	abortIT();
 800142e:	f7ff ffe1 	bl	80013f4 <abortIT>
	HAL_UART_Receive_IT(getUFP(), &cmd, 1);
 8001432:	f7ff fcb5 	bl	8000da0 <getUFP>
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <receiveIT+0x40>)
 8001438:	2201      	movs	r2, #1
 800143a:	0019      	movs	r1, r3
 800143c:	f004 fb20 	bl	8005a80 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(getDFP(), &dfp_cmd, 1);
 8001440:	f7ff fcb6 	bl	8000db0 <getDFP>
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <receiveIT+0x44>)
 8001446:	2201      	movs	r2, #1
 8001448:	0019      	movs	r1, r3
 800144a:	f004 fb19 	bl	8005a80 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(getDFP(), sensor_buf, SENSOR_BUF_LEN);
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20001d48 	.word	0x20001d48
 8001458:	20001d78 	.word	0x20001d78
 800145c:	20001d4b 	.word	0x20001d4b

08001460 <cmdReady>:

uint8_t cmdReady() {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	return cmd_ready;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <cmdReady+0x10>)
 8001466:	781b      	ldrb	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	20001d48 	.word	0x20001d48

08001474 <sendACK>:

// Send ACK
void sendACK(UART_HandleTypeDef* huart) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	uint8_t data = ACK;
 800147c:	210f      	movs	r1, #15
 800147e:	187b      	adds	r3, r7, r1
 8001480:	222a      	movs	r2, #42	; 0x2a
 8001482:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &data, 1, SEND_TIMEOUT);
 8001484:	1879      	adds	r1, r7, r1
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	2302      	movs	r3, #2
 800148a:	2201      	movs	r2, #1
 800148c:	f004 f95a 	bl	8005744 <HAL_UART_Transmit>
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b004      	add	sp, #16
 8001496:	bd80      	pop	{r7, pc}

08001498 <sendCommand>:

comm_stat_t sendCommand(UART_HandleTypeDef* huart, cmd_t cmd) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	000a      	movs	r2, r1
 80014a2:	1cfb      	adds	r3, r7, #3
 80014a4:	701a      	strb	r2, [r3, #0]
	// Retry if needed, then give up after too many attempts
	HAL_StatusTypeDef ret = HAL_ERROR;
 80014a6:	2317      	movs	r3, #23
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
	int numAttempts = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
	uint8_t rec = 0;
 80014b2:	230f      	movs	r3, #15
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 80014ba:	e013      	b.n	80014e4 <sendCommand+0x4c>
		// Transmit command
		HAL_UART_Transmit(huart, &cmd, sizeof(cmd), SEND_TIMEOUT);
 80014bc:	1cf9      	adds	r1, r7, #3
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	2302      	movs	r3, #2
 80014c2:	2201      	movs	r2, #1
 80014c4:	f004 f93e 	bl	8005744 <HAL_UART_Transmit>
		// Wait for ACK
		ret = HAL_UART_Receive(huart, &rec, sizeof(rec), ACK_TIMEOUT);
 80014c8:	2317      	movs	r3, #23
 80014ca:	18fc      	adds	r4, r7, r3
 80014cc:	230f      	movs	r3, #15
 80014ce:	18f9      	adds	r1, r7, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	2302      	movs	r3, #2
 80014d4:	2201      	movs	r2, #1
 80014d6:	f004 f9e1 	bl	800589c <HAL_UART_Receive>
 80014da:	0003      	movs	r3, r0
 80014dc:	7023      	strb	r3, [r4, #0]
		numAttempts++;
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	3301      	adds	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 80014e4:	2317      	movs	r3, #23
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <sendCommand+0x5c>
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	dde3      	ble.n	80014bc <sendCommand+0x24>
	}
	if (rec != ACK) {
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b2a      	cmp	r3, #42	; 0x2a
 80014fc:	d001      	beq.n	8001502 <sendCommand+0x6a>
		return COMM_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <sendCommand+0x6c>
	} else {
		return COMM_OK;
 8001502:	2300      	movs	r3, #0
	}
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b007      	add	sp, #28
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <registerReadings>:

// Adds this boards readings into the send buffer (buffer 1)
void registerReadings() {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
	// Get most recent readings
	uint16_t* readings = getLastReadings();
 8001512:	f7ff fc9d 	bl	8000e50 <getLastReadings>
 8001516:	0003      	movs	r3, r0
 8001518:	607b      	str	r3, [r7, #4]
	// Add data to the buffer
	for (int i = 0; i < SENSORS_PER_BOARD; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	e00f      	b.n	8001540 <registerReadings+0x34>
		sensor_buf[i] = (uint8_t) (readings[i] / 16);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	18d3      	adds	r3, r2, r3
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2d9      	uxtb	r1, r3
 8001530:	4a10      	ldr	r2, [pc, #64]	; (8001574 <registerReadings+0x68>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	18d3      	adds	r3, r2, r3
 8001536:	1c0a      	adds	r2, r1, #0
 8001538:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SENSORS_PER_BOARD; i++) {
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b09      	cmp	r3, #9
 8001544:	ddec      	ble.n	8001520 <registerReadings+0x14>
	}
	for (int i = 0; i < NUM_SENSORS; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	e00b      	b.n	8001564 <registerReadings+0x58>
		registerReading(i, sensor_buf[i]);
 800154c:	4a09      	ldr	r2, [pc, #36]	; (8001574 <registerReadings+0x68>)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f949 	bl	80017f0 <registerReading>
	for (int i = 0; i < NUM_SENSORS; i++) {
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3301      	adds	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b27      	cmp	r3, #39	; 0x27
 8001568:	ddf0      	ble.n	800154c <registerReadings+0x40>
	}
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b004      	add	sp, #16
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20001d50 	.word	0x20001d50

08001578 <toggleLED>:
	} else {
		return 0;
	}
}

void toggleLED() {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	if (led_state) {
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <toggleLED+0x38>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <toggleLED+0x20>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <toggleLED+0x3c>)
 8001586:	2200      	movs	r2, #0
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	0018      	movs	r0, r3
 800158c:	f002 f80a 	bl	80035a4 <HAL_GPIO_WritePin>
	  led_state = 0;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <toggleLED+0x38>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	} else {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	  led_state = 1;
	}
}
 8001596:	e008      	b.n	80015aa <toggleLED+0x32>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <toggleLED+0x3c>)
 800159a:	2201      	movs	r2, #1
 800159c:	2140      	movs	r1, #64	; 0x40
 800159e:	0018      	movs	r0, r3
 80015a0:	f002 f800 	bl	80035a4 <HAL_GPIO_WritePin>
	  led_state = 1;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <toggleLED+0x38>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20001d49 	.word	0x20001d49
 80015b4:	50000800 	.word	0x50000800

080015b8 <processCommand>:

// Reads command from hub in order to see if action needs to be taken
HAL_StatusTypeDef processCommand() {
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 80015be:	2317      	movs	r3, #23
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
	if (cmd == UPDATE_COMPLETE) {
 80015c6:	4b6d      	ldr	r3, [pc, #436]	; (800177c <processCommand+0x1c4>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d111      	bne.n	80015f2 <processCommand+0x3a>
		toggleLED();
 80015ce:	f7ff ffd3 	bl	8001578 <toggleLED>
		// Update the LED strips if an object was sensed
		if (display_sense && sense_state == OBJECT_SENSED) {
 80015d2:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <processCommand+0x1c8>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <processCommand+0x32>
 80015da:	4b6a      	ldr	r3, [pc, #424]	; (8001784 <processCommand+0x1cc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b45      	cmp	r3, #69	; 0x45
 80015e0:	d103      	bne.n	80015ea <processCommand+0x32>
			clearLEDs();
 80015e2:	f7ff f86b 	bl	80006bc <clearLEDs>
			displaySense();
 80015e6:	f000 f969 	bl	80018bc <displaySense>
		}
		update_leds = 1;
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <processCommand+0x1d0>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	e0bd      	b.n	800176e <processCommand+0x1b6>
	} else if (cmd == SEND_SENSOR_DATA) {
 80015f2:	4b62      	ldr	r3, [pc, #392]	; (800177c <processCommand+0x1c4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10a      	bne.n	8001610 <processCommand+0x58>
		// Send data once ACK is received
		HAL_UART_Transmit(getUFP(), sensor_activations, NUM_SENSORS, SENSOR_UPDATE_TIMEOUT);
 80015fa:	f7ff fbd1 	bl	8000da0 <getUFP>
 80015fe:	4963      	ldr	r1, [pc, #396]	; (800178c <processCommand+0x1d4>)
 8001600:	234b      	movs	r3, #75	; 0x4b
 8001602:	2228      	movs	r2, #40	; 0x28
 8001604:	f004 f89e 	bl	8005744 <HAL_UART_Transmit>
		display_sense = 1;
 8001608:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <processCommand+0x1c8>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e0ae      	b.n	800176e <processCommand+0x1b6>
	} else if (dfp_cmd == SENSOR_UPDATE) {
 8001610:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <processCommand+0x1d8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b06      	cmp	r3, #6
 8001616:	d126      	bne.n	8001666 <processCommand+0xae>
		// Send ACK to dfp
		sendACK(getDFP());
 8001618:	f7ff fbca 	bl	8000db0 <getDFP>
 800161c:	0003      	movs	r3, r0
 800161e:	0018      	movs	r0, r3
 8001620:	f7ff ff28 	bl	8001474 <sendACK>
		// Get updated sensor values from dfp
		HAL_UART_Receive(getDFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
 8001624:	f7ff fbc4 	bl	8000db0 <getDFP>
 8001628:	495a      	ldr	r1, [pc, #360]	; (8001794 <processCommand+0x1dc>)
 800162a:	234b      	movs	r3, #75	; 0x4b
 800162c:	2228      	movs	r2, #40	; 0x28
 800162e:	f004 f935 	bl	800589c <HAL_UART_Receive>
		// Get new readings
		getNewReadings();
 8001632:	f7ff fbe9 	bl	8000e08 <getNewReadings>
		// Scale all the sensor readings
		registerReadings();
 8001636:	f7ff ff69 	bl	800150c <registerReadings>

		// Process sensor values to determine if an object was sensed
		sense_state = OBJECT_NOT_SENSED;
 800163a:	4b52      	ldr	r3, [pc, #328]	; (8001784 <processCommand+0x1cc>)
 800163c:	2260      	movs	r2, #96	; 0x60
 800163e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	e00b      	b.n	800165e <processCommand+0xa6>
			if (sensor_activations[i] > 0) {
 8001646:	4a51      	ldr	r2, [pc, #324]	; (800178c <processCommand+0x1d4>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <processCommand+0xa0>
				sense_state = OBJECT_SENSED;
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <processCommand+0x1cc>)
 8001654:	2245      	movs	r2, #69	; 0x45
 8001656:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	3301      	adds	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b27      	cmp	r3, #39	; 0x27
 8001662:	ddf0      	ble.n	8001646 <processCommand+0x8e>
 8001664:	e083      	b.n	800176e <processCommand+0x1b6>
			}
		}
	} else if (cmd == ENABLE_SENSE) {
 8001666:	4b45      	ldr	r3, [pc, #276]	; (800177c <processCommand+0x1c4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b12      	cmp	r3, #18
 800166c:	d109      	bne.n	8001682 <processCommand+0xca>
		sendACK(getUFP());
 800166e:	f7ff fb97 	bl	8000da0 <getUFP>
 8001672:	0003      	movs	r3, r0
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff fefd 	bl	8001474 <sendACK>
		display_sense = 1;
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <processCommand+0x1c8>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e075      	b.n	800176e <processCommand+0x1b6>
	} else if (cmd == DISABLE_SENSE) {
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <processCommand+0x1c4>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b1b      	cmp	r3, #27
 8001688:	d109      	bne.n	800169e <processCommand+0xe6>
		sendACK(getUFP());
 800168a:	f7ff fb89 	bl	8000da0 <getUFP>
 800168e:	0003      	movs	r3, r0
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff feef 	bl	8001474 <sendACK>
		display_sense = 0;
 8001696:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <processCommand+0x1c8>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e067      	b.n	800176e <processCommand+0x1b6>
	} else if (cmd == RECALIBRATE) {
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <processCommand+0x1c4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d108      	bne.n	80016b8 <processCommand+0x100>
		// Send ACK to UFP
		sendACK(getUFP());
 80016a6:	f7ff fb7b 	bl	8000da0 <getUFP>
 80016aa:	0003      	movs	r3, r0
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fee1 	bl	8001474 <sendACK>
		// recalibrate the sensors
		clearSensorHistory();
 80016b2:	f000 f87f 	bl	80017b4 <clearSensorHistory>
 80016b6:	e05a      	b.n	800176e <processCommand+0x1b6>
	} else if (cmd == CLEAR_LEDS) {
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <processCommand+0x1c4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d114      	bne.n	80016ea <processCommand+0x132>
		// Send ACK to UFP
		sendACK(getUFP());
 80016c0:	f7ff fb6e 	bl	8000da0 <getUFP>
 80016c4:	0003      	movs	r3, r0
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff fed4 	bl	8001474 <sendACK>
		// Pass data to downstream port
		sendCommand(getDFP(), cmd);
 80016cc:	f7ff fb70 	bl	8000db0 <getDFP>
 80016d0:	0002      	movs	r2, r0
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <processCommand+0x1c4>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	0019      	movs	r1, r3
 80016d8:	0010      	movs	r0, r2
 80016da:	f7ff fedd 	bl	8001498 <sendCommand>
		// Clear LEDs and update strips
		clearLEDs();
 80016de:	f7fe ffed 	bl	80006bc <clearLEDs>
		update_leds = 1;
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <processCommand+0x1d0>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e041      	b.n	800176e <processCommand+0x1b6>
	} else if (cmd == SET_LED_VALS) {
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <processCommand+0x1c4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d13d      	bne.n	800176e <processCommand+0x1b6>
		// Begin waiting for LED data from UFP
		uint8_t info[2] = {0, 0};
 80016f2:	003b      	movs	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	003b      	movs	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	705a      	strb	r2, [r3, #1]
		// Return an ACK to begin handshake
		sendACK(getUFP());
 80016fe:	f7ff fb4f 	bl	8000da0 <getUFP>
 8001702:	0003      	movs	r3, r0
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff feb5 	bl	8001474 <sendACK>
		// Receive info about the data transfer
		HAL_UART_Receive(getUFP(), info, sizeof(info), INFO_TIMEOUT);
 800170a:	f7ff fb49 	bl	8000da0 <getUFP>
 800170e:	0039      	movs	r1, r7
 8001710:	2305      	movs	r3, #5
 8001712:	2202      	movs	r2, #2
 8001714:	f004 f8c2 	bl	800589c <HAL_UART_Receive>
		int led = info[0];
 8001718:	003b      	movs	r3, r7
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
		int bytes = info[1]*3;
 800171e:	003b      	movs	r3, r7
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	001a      	movs	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	189b      	adds	r3, r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
		// Send ack back to UFP to begin transmission of data
		sendACK(getUFP());
 800172c:	f7ff fb38 	bl	8000da0 <getUFP>
 8001730:	0003      	movs	r3, r0
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff fe9e 	bl	8001474 <sendACK>
		// Get data
		uint8_t* ledBufPtr = getLEDBuf(led);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	0018      	movs	r0, r3
 800173e:	f7fe ff79 	bl	8000634 <getLEDBuf>
 8001742:	0003      	movs	r3, r0
 8001744:	607b      	str	r3, [r7, #4]
		ret = HAL_UART_Receive(getUFP(), ledBufPtr, bytes, LED_UPDATE_TIMEOUT);
 8001746:	f7ff fb2b 	bl	8000da0 <getUFP>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	b29a      	uxth	r2, r3
 800174e:	2517      	movs	r5, #23
 8001750:	197c      	adds	r4, r7, r5
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	231e      	movs	r3, #30
 8001756:	f004 f8a1 	bl	800589c <HAL_UART_Receive>
 800175a:	0003      	movs	r3, r0
 800175c:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 800175e:	197b      	adds	r3, r7, r5
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <processCommand+0x1b6>
			return ret;
 8001766:	2317      	movs	r3, #23
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	e002      	b.n	8001774 <processCommand+0x1bc>
		}
	}
	return ret;
 800176e:	2317      	movs	r3, #23
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	781b      	ldrb	r3, [r3, #0]
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b006      	add	sp, #24
 800177a:	bdb0      	pop	{r4, r5, r7, pc}
 800177c:	20001d78 	.word	0x20001d78
 8001780:	20001d4c 	.word	0x20001d4c
 8001784:	20001d4d 	.word	0x20001d4d
 8001788:	20001d4a 	.word	0x20001d4a
 800178c:	20001d7c 	.word	0x20001d7c
 8001790:	20001d4b 	.word	0x20001d4b
 8001794:	20001d50 	.word	0x20001d50

08001798 <HAL_UART_RxCpltCallback>:

// Pass received data through
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	cmd_ready = 1;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_UART_RxCpltCallback+0x18>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	20001d48 	.word	0x20001d48

080017b4 <clearSensorHistory>:

uint8_t min_readings[NUM_SENSORS];
uint8_t max_readings[NUM_SENSORS];
uint8_t sensor_activations[NUM_SENSORS];

void clearSensorHistory() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_SENSORS; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e00c      	b.n	80017da <clearSensorHistory+0x26>
		min_readings[i] = 255;
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <clearSensorHistory+0x34>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	18d3      	adds	r3, r2, r3
 80017c6:	22ff      	movs	r2, #255	; 0xff
 80017c8:	701a      	strb	r2, [r3, #0]
		max_readings[i] = 50;
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <clearSensorHistory+0x38>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	2232      	movs	r2, #50	; 0x32
 80017d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_SENSORS; i++) {
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b27      	cmp	r3, #39	; 0x27
 80017de:	ddef      	ble.n	80017c0 <clearSensorHistory+0xc>
	}
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20001dcc 	.word	0x20001dcc
 80017ec:	20001da4 	.word	0x20001da4

080017f0 <registerReading>:

void registerReading(int sensor, uint8_t reading) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	000a      	movs	r2, r1
 80017fa:	1cfb      	adds	r3, r7, #3
 80017fc:	701a      	strb	r2, [r3, #0]
	// update the min and max readings for this sensor
	if (reading < min_readings[sensor]) {
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <registerReading+0xc0>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	18d3      	adds	r3, r2, r3
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	1cfa      	adds	r2, r7, #3
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d21e      	bcs.n	800184c <registerReading+0x5c>
		min_readings[sensor] = reading;
 800180e:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <registerReading+0xc0>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	18d3      	adds	r3, r2, r3
 8001814:	1cfa      	adds	r2, r7, #3
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	701a      	strb	r2, [r3, #0]
		// Make the max reading no less than 50 more than the min reading
		max_readings[sensor] = max_readings[sensor] - 50 > reading ?
 800181a:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <registerReading+0xc4>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	18d3      	adds	r3, r2, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3b32      	subs	r3, #50	; 0x32
 8001824:	001a      	movs	r2, r3
 8001826:	1cfb      	adds	r3, r7, #3
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	dd04      	ble.n	8001838 <registerReading+0x48>
 800182e:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <registerReading+0xc4>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	18d3      	adds	r3, r2, r3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	e005      	b.n	8001844 <registerReading+0x54>
				max_readings[sensor] :
				min_readings[sensor] + 50;
 8001838:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <registerReading+0xc0>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	18d3      	adds	r3, r2, r3
 800183e:	781b      	ldrb	r3, [r3, #0]
		max_readings[sensor] = max_readings[sensor] - 50 > reading ?
 8001840:	3332      	adds	r3, #50	; 0x32
 8001842:	b2db      	uxtb	r3, r3
 8001844:	491b      	ldr	r1, [pc, #108]	; (80018b4 <registerReading+0xc4>)
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	188a      	adds	r2, r1, r2
 800184a:	7013      	strb	r3, [r2, #0]
	}
	if (reading > max_readings[sensor]) {
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <registerReading+0xc4>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	18d3      	adds	r3, r2, r3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	1cfa      	adds	r2, r7, #3
 8001856:	7812      	ldrb	r2, [r2, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d905      	bls.n	8001868 <registerReading+0x78>
		max_readings[sensor] = reading;
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <registerReading+0xc4>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	1cfa      	adds	r2, r7, #3
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	701a      	strb	r2, [r3, #0]
	}
	// Update the sensor activations
	if (reading > min_readings[sensor] + 20) {
 8001868:	1cfb      	adds	r3, r7, #3
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4910      	ldr	r1, [pc, #64]	; (80018b0 <registerReading+0xc0>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	18cb      	adds	r3, r1, r3
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3314      	adds	r3, #20
 8001876:	429a      	cmp	r2, r3
 8001878:	dd05      	ble.n	8001886 <registerReading+0x96>
		sensor_activations[sensor] = ON_TIME;
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <registerReading+0xc8>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	18d3      	adds	r3, r2, r3
 8001880:	221e      	movs	r2, #30
 8001882:	701a      	strb	r2, [r3, #0]
	} else if (sensor_activations[sensor] > 0) {
		sensor_activations[sensor]--;
	}
}
 8001884:	e010      	b.n	80018a8 <registerReading+0xb8>
	} else if (sensor_activations[sensor] > 0) {
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <registerReading+0xc8>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <registerReading+0xb8>
		sensor_activations[sensor]--;
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <registerReading+0xc8>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	18d3      	adds	r3, r2, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	b2d9      	uxtb	r1, r3
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <registerReading+0xc8>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	18d3      	adds	r3, r2, r3
 80018a4:	1c0a      	adds	r2, r1, #0
 80018a6:	701a      	strb	r2, [r3, #0]
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b002      	add	sp, #8
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20001dcc 	.word	0x20001dcc
 80018b4:	20001da4 	.word	0x20001da4
 80018b8:	20001d7c 	.word	0x20001d7c

080018bc <displaySense>:


void displaySense() {
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	af02      	add	r7, sp, #8
	int numSensors = (1 + NUM_CHILDREN) * SENSORS_PER_BOARD;
 80018c2:	2328      	movs	r3, #40	; 0x28
 80018c4:	617b      	str	r3, [r7, #20]
	int ledsPerSensor = NUM_LEDS / numSensors;
 80018c6:	6979      	ldr	r1, [r7, #20]
 80018c8:	2080      	movs	r0, #128	; 0x80
 80018ca:	f7fe fca7 	bl	800021c <__divsi3>
 80018ce:	0003      	movs	r3, r0
 80018d0:	613b      	str	r3, [r7, #16]
	int extraLEDs = NUM_LEDS - numSensors * ledsPerSensor;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4353      	muls	r3, r2
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	60fb      	str	r3, [r7, #12]
	int extraInterval = numSensors / extraLEDs;
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	6978      	ldr	r0, [r7, #20]
 80018e2:	f7fe fc9b 	bl	800021c <__divsi3>
 80018e6:	0003      	movs	r3, r0
 80018e8:	60bb      	str	r3, [r7, #8]
	// Iterate through each sensor
	for (int sensor = 0; sensor < numSensors; sensor++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e058      	b.n	80019a2 <displaySense+0xe6>
		uint8_t r = 0;
 80018f0:	1cfb      	adds	r3, r7, #3
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
		uint8_t g = 0;
 80018f6:	1cbb      	adds	r3, r7, #2
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
		uint8_t b = 0;
 80018fc:	1c7b      	adds	r3, r7, #1
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		// Determine if sensor is activated by reading the correct bit in the activation bitmap
		if (sensor_activations[sensor]) {
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <displaySense+0xf8>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	18d3      	adds	r3, r2, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00e      	beq.n	800192c <displaySense+0x70>
			generateRGB(sensor_activations[sensor], ON_TIME, 200, &r, &g, &b);
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <displaySense+0xf8>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	18d3      	adds	r3, r2, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	1cfa      	adds	r2, r7, #3
 800191a:	1c7b      	adds	r3, r7, #1
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	1cbb      	adds	r3, r7, #2
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	0013      	movs	r3, r2
 8001924:	22c8      	movs	r2, #200	; 0xc8
 8001926:	211e      	movs	r1, #30
 8001928:	f000 f846 	bl	80019b8 <generateRGB>
		}
		int startIndex = ledsPerSensor * sensor + sensor / extraInterval;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	435a      	muls	r2, r3
 8001932:	0014      	movs	r4, r2
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	69f8      	ldr	r0, [r7, #28]
 8001938:	f7fe fc70 	bl	800021c <__divsi3>
 800193c:	0003      	movs	r3, r0
 800193e:	18e3      	adds	r3, r4, r3
 8001940:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < ledsPerSensor; i++) {
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	e00e      	b.n	8001966 <displaySense+0xaa>
			setLED(startIndex + i, r, g, b);
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	18d3      	adds	r3, r2, r3
 800194e:	0018      	movs	r0, r3
 8001950:	1cfb      	adds	r3, r7, #3
 8001952:	7819      	ldrb	r1, [r3, #0]
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	1c7b      	adds	r3, r7, #1
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	f7fe fe7e 	bl	800065c <setLED>
		for (int i = 0; i < ledsPerSensor; i++) {
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	3301      	adds	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	429a      	cmp	r2, r3
 800196c:	dbec      	blt.n	8001948 <displaySense+0x8c>
		}
		// Control an additional LED if this sensor is mapped to an extra LED
		if (sensor % extraInterval == (extraInterval - 1)) {
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	0018      	movs	r0, r3
 8001974:	f7fe fd38 	bl	80003e8 <__aeabi_idivmod>
 8001978:	000b      	movs	r3, r1
 800197a:	001a      	movs	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3b01      	subs	r3, #1
 8001980:	429a      	cmp	r2, r3
 8001982:	d10b      	bne.n	800199c <displaySense+0xe0>
			setLED(startIndex + ledsPerSensor, r, g, b);
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	18d3      	adds	r3, r2, r3
 800198a:	0018      	movs	r0, r3
 800198c:	1cfb      	adds	r3, r7, #3
 800198e:	7819      	ldrb	r1, [r3, #0]
 8001990:	1cbb      	adds	r3, r7, #2
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	1c7b      	adds	r3, r7, #1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f7fe fe60 	bl	800065c <setLED>
	for (int sensor = 0; sensor < numSensors; sensor++) {
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	3301      	adds	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	dba2      	blt.n	80018f0 <displaySense+0x34>
		}
	}
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b009      	add	sp, #36	; 0x24
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	20001d7c 	.word	0x20001d7c

080019b8 <generateRGB>:


void generateRGB(uint32_t index, uint32_t maxIndex, uint8_t brightness, uint8_t* r, uint8_t* g, uint8_t* b)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	701a      	strb	r2, [r3, #0]
//	{
//		*b = (uint8_t) cos1;
//	}

	// Choose one of 6 colors
	uint8_t div = maxIndex / 6;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2106      	movs	r1, #6
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7fe fb9b 	bl	8000108 <__udivsi3>
 80019d2:	0003      	movs	r3, r0
 80019d4:	001a      	movs	r2, r3
 80019d6:	2117      	movs	r1, #23
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	701a      	strb	r2, [r3, #0]
	if (index < div) {
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d20a      	bcs.n	80019fc <generateRGB+0x44>
		*r = 0;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
		*g = brightness;
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	1dfa      	adds	r2, r7, #7
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	701a      	strb	r2, [r3, #0]
		*b = 0;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
	} else {
		*r = 0;
		*g = brightness/2;
		*b = brightness/2;
	}
}
 80019fa:	e068      	b.n	8001ace <generateRGB+0x116>
	} else if (index < 2*div) {
 80019fc:	2317      	movs	r3, #23
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	001a      	movs	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d20f      	bcs.n	8001a2c <generateRGB+0x74>
		*r = brightness/2;
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
}
 8001a2a:	e050      	b.n	8001ace <generateRGB+0x116>
	} else if (index < 3*div) {
 8001a2c:	2317      	movs	r3, #23
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	0013      	movs	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	189b      	adds	r3, r3, r2
 8001a38:	001a      	movs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d20a      	bcs.n	8001a56 <generateRGB+0x9e>
		*r = brightness;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	1dfa      	adds	r2, r7, #7
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	e03b      	b.n	8001ace <generateRGB+0x116>
	} else if (index < 4*div) {
 8001a56:	2317      	movs	r3, #23
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	001a      	movs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d20f      	bcs.n	8001a86 <generateRGB+0xce>
		*r = brightness/2;
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	701a      	strb	r2, [r3, #0]
}
 8001a84:	e023      	b.n	8001ace <generateRGB+0x116>
	} else if (index < 5*div) {
 8001a86:	2317      	movs	r3, #23
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	189b      	adds	r3, r3, r2
 8001a92:	001a      	movs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d20a      	bcs.n	8001ab0 <generateRGB+0xf8>
		*r = 0;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
		*b = brightness;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	1dfa      	adds	r2, r7, #7
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
}
 8001aae:	e00e      	b.n	8001ace <generateRGB+0x116>
		*r = 0;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	701a      	strb	r2, [r3, #0]
}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b006      	add	sp, #24
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ada:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001adc:	f7ff fc6c 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	; (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	; (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b06:	f005 fd9d 	bl	8007644 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b0a:	f7fe fe87 	bl	800081c <main>

08001b0e <LoopForever>:

LoopForever:
  b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   r0, =_estack
 8001b10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001b1c:	080077a0 	.word	0x080077a0
  ldr r2, =_sbss
 8001b20:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001b24:	20001df8 	.word	0x20001df8

08001b28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_COMP_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_Init+0x3c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Init+0x3c>)
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	0049      	lsls	r1, r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f810 	bl	8001b6c <HAL_InitTick>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b50:	1dfb      	adds	r3, r7, #7
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e001      	b.n	8001b5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff f9dc 	bl	8000f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	781b      	ldrb	r3, [r3, #0]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40022000 	.word	0x40022000

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	230f      	movs	r3, #15
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_InitTick+0x88>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d02b      	beq.n	8001bdc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_InitTick+0x8c>)
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_InitTick+0x88>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	23fa      	movs	r3, #250	; 0xfa
 8001b90:	0098      	lsls	r0, r3, #2
 8001b92:	f7fe fab9 	bl	8000108 <__udivsi3>
 8001b96:	0003      	movs	r3, r0
 8001b98:	0019      	movs	r1, r3
 8001b9a:	0020      	movs	r0, r4
 8001b9c:	f7fe fab4 	bl	8000108 <__udivsi3>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f001 f86d 	bl	8002c82 <HAL_SYSTICK_Config>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d112      	bne.n	8001bd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d80a      	bhi.n	8001bc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	425b      	negs	r3, r3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f001 f83c 	bl	8002c38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_InitTick+0x90>)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e00d      	b.n	8001be4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001bc8:	230f      	movs	r3, #15
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e008      	b.n	8001be4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e003      	b.n	8001be4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001be4:	230f      	movs	r3, #15
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b005      	add	sp, #20
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000030 	.word	0x20000030
 8001bf8:	20000028 	.word	0x20000028
 8001bfc:	2000002c 	.word	0x2000002c

08001c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	001a      	movs	r2, r3
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_IncTick+0x20>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	18d2      	adds	r2, r2, r3
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_IncTick+0x20>)
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	20000030 	.word	0x20000030
 8001c20:	20001df4 	.word	0x20001df4

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <HAL_GetTick+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	20001df4 	.word	0x20001df4

08001c38 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	fffff9ff 	.word	0xfffff9ff

08001c64 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001c74:	401a      	ands	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	fe3fffff 	.word	0xfe3fffff

08001c8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	23e0      	movs	r3, #224	; 0xe0
 8001c9a:	045b      	lsls	r3, r3, #17
 8001c9c:	4013      	ands	r3, r2
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	2104      	movs	r1, #4
 8001cba:	400a      	ands	r2, r1
 8001cbc:	2107      	movs	r1, #7
 8001cbe:	4091      	lsls	r1, r2
 8001cc0:	000a      	movs	r2, r1
 8001cc2:	43d2      	mvns	r2, r2
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2104      	movs	r1, #4
 8001cca:	400b      	ands	r3, r1
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4099      	lsls	r1, r3
 8001cd0:	000b      	movs	r3, r1
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	211f      	movs	r1, #31
 8001d16:	400a      	ands	r2, r1
 8001d18:	210f      	movs	r1, #15
 8001d1a:	4091      	lsls	r1, r2
 8001d1c:	000a      	movs	r2, r1
 8001d1e:	43d2      	mvns	r2, r2
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	210f      	movs	r1, #15
 8001d28:	4019      	ands	r1, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	201f      	movs	r0, #31
 8001d2e:	4003      	ands	r3, r0
 8001d30:	4099      	lsls	r1, r3
 8001d32:	000b      	movs	r3, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	035b      	lsls	r3, r3, #13
 8001d54:	0b5b      	lsrs	r3, r3, #13
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	0352      	lsls	r2, r2, #13
 8001d76:	0b52      	lsrs	r2, r2, #13
 8001d78:	43d2      	mvns	r2, r2
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	0212      	lsls	r2, r2, #8
 8001d9c:	43d2      	mvns	r2, r2
 8001d9e:	401a      	ands	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	400b      	ands	r3, r1
 8001da8:	4904      	ldr	r1, [pc, #16]	; (8001dbc <LL_ADC_SetChannelSamplingTime+0x34>)
 8001daa:	400b      	ands	r3, r1
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b004      	add	sp, #16
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	07ffff00 	.word	0x07ffff00

08001dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	0552      	lsls	r2, r2, #21
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	6fffffe8 	.word	0x6fffffe8

08001de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	055b      	lsls	r3, r3, #21
 8001df8:	401a      	ands	r2, r3
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	055b      	lsls	r3, r3, #21
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <LL_ADC_Enable+0x20>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2201      	movs	r2, #1
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	7fffffe8 	.word	0x7fffffe8

08001e34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <LL_ADC_Disable+0x20>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	2202      	movs	r2, #2
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b002      	add	sp, #8
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	7fffffe8 	.word	0x7fffffe8

08001e58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <LL_ADC_IsEnabled+0x18>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <LL_ADC_IsEnabled+0x1a>
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b002      	add	sp, #8
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d101      	bne.n	8001e92 <LL_ADC_IsDisableOngoing+0x18>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_ADC_IsDisableOngoing+0x1a>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <LL_ADC_REG_StartConversion+0x20>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2204      	movs	r2, #4
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	7fffffe8 	.word	0x7fffffe8

08001ec0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <LL_ADC_REG_StopConversion+0x20>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b002      	add	sp, #8
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	7fffffe8 	.word	0x7fffffe8

08001ee4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d101      	bne.n	8001efc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	0018      	movs	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b002      	add	sp, #8
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f10:	231f      	movs	r3, #31
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e1ad      	b.n	800228a <HAL_ADC_Init+0x382>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff f813 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2254      	movs	r2, #84	; 0x54
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ff49 	bl	8001de8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d114      	bne.n	8001f84 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff ff2e 	bl	8001dc0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f64:	4bcb      	ldr	r3, [pc, #812]	; (8002294 <HAL_ADC_Init+0x38c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	49cb      	ldr	r1, [pc, #812]	; (8002298 <HAL_ADC_Init+0x390>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7fe f8cc 	bl	8000108 <__udivsi3>
 8001f70:	0003      	movs	r3, r0
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f76:	e002      	b.n	8001f7e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff ff2d 	bl	8001de8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	2210      	movs	r2, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff ff94 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d000      	beq.n	8001fcc <HAL_ADC_Init+0xc4>
 8001fca:	e151      	b.n	8002270 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d000      	beq.n	8001fd4 <HAL_ADC_Init+0xcc>
 8001fd2:	e14d      	b.n	8002270 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4ab0      	ldr	r2, [pc, #704]	; (800229c <HAL_ADC_Init+0x394>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2202      	movs	r2, #2
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff ff35 	bl	8001e58 <LL_ADC_IsEnabled>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d151      	bne.n	8002096 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2218      	movs	r2, #24
 8001ffa:	4393      	bics	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0f9b      	lsrs	r3, r3, #30
 8002010:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002016:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 800201c:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8002022:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8002028:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	223c      	movs	r2, #60	; 0x3c
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d103      	bne.n	8002042 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2201      	movs	r2, #1
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a95      	ldr	r2, [pc, #596]	; (80022a0 <HAL_ADC_Init+0x398>)
 800204a:	4013      	ands	r3, r2
 800204c:	0019      	movs	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	430a      	orrs	r2, r1
 8002056:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	23c0      	movs	r3, #192	; 0xc0
 800205e:	061b      	lsls	r3, r3, #24
 8002060:	429a      	cmp	r2, r3
 8002062:	d018      	beq.n	8002096 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	429a      	cmp	r2, r3
 800206e:	d012      	beq.n	8002096 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	061b      	lsls	r3, r3, #24
 8002078:	429a      	cmp	r2, r3
 800207a:	d00c      	beq.n	8002096 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800207c:	4b89      	ldr	r3, [pc, #548]	; (80022a4 <HAL_ADC_Init+0x39c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a89      	ldr	r2, [pc, #548]	; (80022a8 <HAL_ADC_Init+0x3a0>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	23f0      	movs	r3, #240	; 0xf0
 800208c:	039b      	lsls	r3, r3, #14
 800208e:	401a      	ands	r2, r3
 8002090:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <HAL_ADC_Init+0x39c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7e1b      	ldrb	r3, [r3, #24]
 800209a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7e5b      	ldrb	r3, [r3, #25]
 80020a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7e9b      	ldrb	r3, [r3, #26]
 80020a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80020aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_ADC_Init+0x1b2>
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	e000      	b.n	80020bc <HAL_ADC_Init+0x1b4>
 80020ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80020bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80020c2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da04      	bge.n	80020d6 <HAL_ADC_Init+0x1ce>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	e001      	b.n	80020da <HAL_ADC_Init+0x1d2>
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80020da:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	5c5b      	ldrb	r3, [r3, r1]
 80020e2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80020e4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d115      	bne.n	8002122 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7e9b      	ldrb	r3, [r3, #26]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	0252      	lsls	r2, r2, #9
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e00b      	b.n	8002122 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	2220      	movs	r2, #32
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211a:	2201      	movs	r2, #1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212e:	23e0      	movs	r3, #224	; 0xe0
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002138:	4313      	orrs	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4a59      	ldr	r2, [pc, #356]	; (80022ac <HAL_ADC_Init+0x3a4>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	430a      	orrs	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_ADC_Init+0x3a8>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	430a      	orrs	r2, r1
 800216a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	001a      	movs	r2, r3
 8002176:	2100      	movs	r1, #0
 8002178:	f7ff fd95 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	494b      	ldr	r1, [pc, #300]	; (80022b4 <HAL_ADC_Init+0x3ac>)
 8002186:	001a      	movs	r2, r3
 8002188:	f7ff fd8d 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2110      	movs	r1, #16
 80021a0:	4249      	negs	r1, r1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
 80021a6:	e03c      	b.n	8002222 <HAL_ADC_Init+0x31a>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	039b      	lsls	r3, r3, #14
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d136      	bne.n	8002222 <HAL_ADC_Init+0x31a>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	e00c      	b.n	80021d4 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	40da      	lsrs	r2, r3
 80021c4:	0013      	movs	r3, r2
 80021c6:	220f      	movs	r2, #15
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	d006      	beq.n	80021dc <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	3301      	adds	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b07      	cmp	r3, #7
 80021d8:	d9ef      	bls.n	80021ba <HAL_ADC_Init+0x2b2>
 80021da:	e000      	b.n	80021de <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 80021dc:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2110      	movs	r1, #16
 80021f0:	4249      	negs	r1, r1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
 80021f6:	e014      	b.n	8002222 <HAL_ADC_Init+0x31a>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <HAL_ADC_Init+0x3b0>)
 8002204:	4694      	mov	ip, r2
 8002206:	4463      	add	r3, ip
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	221c      	movs	r2, #28
 800220c:	4013      	ands	r3, r2
 800220e:	2210      	movs	r2, #16
 8002210:	4252      	negs	r2, r2
 8002212:	409a      	lsls	r2, r3
 8002214:	0011      	movs	r1, r2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a24      	ldr	r2, [pc, #144]	; (80022bc <HAL_ADC_Init+0x3b4>)
 800222a:	4013      	ands	r3, r2
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	429a      	cmp	r2, r3
 8002230:	d10b      	bne.n	800224a <HAL_ADC_Init+0x342>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	2203      	movs	r2, #3
 800223e:	4393      	bics	r3, r2
 8002240:	2201      	movs	r2, #1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002248:	e01c      	b.n	8002284 <HAL_ADC_Init+0x37c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	2212      	movs	r2, #18
 8002250:	4393      	bics	r3, r2
 8002252:	2210      	movs	r2, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2201      	movs	r2, #1
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002266:	231f      	movs	r3, #31
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800226e:	e009      	b.n	8002284 <HAL_ADC_Init+0x37c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	2210      	movs	r2, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800227c:	231f      	movs	r3, #31
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002284:	231f      	movs	r3, #31
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b008      	add	sp, #32
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	20000028 	.word	0x20000028
 8002298:	00030d40 	.word	0x00030d40
 800229c:	fffffefd 	.word	0xfffffefd
 80022a0:	1ffffc02 	.word	0x1ffffc02
 80022a4:	40012708 	.word	0x40012708
 80022a8:	ffc3ffff 	.word	0xffc3ffff
 80022ac:	fffe0219 	.word	0xfffe0219
 80022b0:	dffffc02 	.word	0xdffffc02
 80022b4:	07ffff04 	.word	0x07ffff04
 80022b8:	3fffffff 	.word	0x3fffffff
 80022bc:	833fffe7 	.word	0x833fffe7

080022c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fe09 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d135      	bne.n	8002342 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2254      	movs	r2, #84	; 0x54
 80022da:	5c9b      	ldrb	r3, [r3, r2]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_Start+0x24>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e035      	b.n	8002350 <HAL_ADC_Start+0x90>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2254      	movs	r2, #84	; 0x54
 80022e8:	2101      	movs	r1, #1
 80022ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022ec:	250f      	movs	r5, #15
 80022ee:	197c      	adds	r4, r7, r5
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 fb1e 	bl	8002934 <ADC_Enable>
 80022f8:	0003      	movs	r3, r0
 80022fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022fc:	197b      	adds	r3, r7, r5
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d119      	bne.n	8002338 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_ADC_Start+0x98>)
 800230a:	4013      	ands	r3, r2
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	0052      	lsls	r2, r2, #1
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	221c      	movs	r2, #28
 8002322:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2254      	movs	r2, #84	; 0x54
 8002328:	2100      	movs	r1, #0
 800232a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff fdb3 	bl	8001e9c <LL_ADC_REG_StartConversion>
 8002336:	e008      	b.n	800234a <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2254      	movs	r2, #84	; 0x54
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]
 8002340:	e003      	b.n	800234a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2202      	movs	r2, #2
 8002348:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800234a:	230f      	movs	r3, #15
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	781b      	ldrb	r3, [r3, #0]
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bdb0      	pop	{r4, r5, r7, pc}
 8002358:	fffff0fe 	.word	0xfffff0fe

0800235c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800235c:	b5b0      	push	{r4, r5, r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2254      	movs	r2, #84	; 0x54
 8002368:	5c9b      	ldrb	r3, [r3, r2]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADC_Stop+0x16>
 800236e:	2302      	movs	r3, #2
 8002370:	e02a      	b.n	80023c8 <HAL_ADC_Stop+0x6c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2254      	movs	r2, #84	; 0x54
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800237a:	250f      	movs	r5, #15
 800237c:	197c      	adds	r4, r7, r5
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fa9b 	bl	80028bc <ADC_ConversionStop>
 8002386:	0003      	movs	r3, r0
 8002388:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800238a:	197b      	adds	r3, r7, r5
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <HAL_ADC_Stop+0x5e>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002392:	250f      	movs	r5, #15
 8002394:	197c      	adds	r4, r7, r5
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fb49 	bl	8002a30 <ADC_Disable>
 800239e:	0003      	movs	r3, r0
 80023a0:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023a2:	197b      	adds	r3, r7, r5
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_Stop+0x5e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_ADC_Stop+0x74>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	2201      	movs	r2, #1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2254      	movs	r2, #84	; 0x54
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	781b      	ldrb	r3, [r3, #0]
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	fffffefe 	.word	0xfffffefe

080023d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023e6:	2308      	movs	r3, #8
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e00f      	b.n	800240c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	2220      	movs	r2, #32
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e06c      	b.n	80024e2 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002408:	2304      	movs	r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800240c:	f7ff fc0a 	bl	8001c24 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002414:	e019      	b.n	800244a <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	d016      	beq.n	800244a <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800241c:	f7ff fc02 	bl	8001c24 <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d302      	bcc.n	8002432 <HAL_ADC_PollForConversion+0x5e>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	2204      	movs	r2, #4
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2254      	movs	r2, #84	; 0x54
 8002442:	2100      	movs	r1, #0
 8002444:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e04b      	b.n	80024e2 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	d0df      	beq.n	8002416 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0018      	movs	r0, r3
 800246a:	f7ff fc39 	bl	8001ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d02e      	beq.n	80024d0 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7e9b      	ldrb	r3, [r3, #26]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d12a      	bne.n	80024d0 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2208      	movs	r2, #8
 8002482:	4013      	ands	r3, r2
 8002484:	2b08      	cmp	r3, #8
 8002486:	d123      	bne.n	80024d0 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff fd29 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d110      	bne.n	80024b8 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	210c      	movs	r1, #12
 80024a2:	438a      	bics	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_ADC_PollForConversion+0x118>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	2201      	movs	r2, #1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	659a      	str	r2, [r3, #88]	; 0x58
 80024b6:	e00b      	b.n	80024d0 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	2220      	movs	r2, #32
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2201      	movs	r2, #1
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7e1b      	ldrb	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	220c      	movs	r2, #12
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b004      	add	sp, #16
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	fffffefe 	.word	0xfffffefe

080024f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002512:	2317      	movs	r3, #23
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2254      	movs	r2, #84	; 0x54
 8002522:	5c9b      	ldrb	r3, [r3, r2]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x24>
 8002528:	2302      	movs	r3, #2
 800252a:	e1c2      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x3aa>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2254      	movs	r2, #84	; 0x54
 8002530:	2101      	movs	r1, #1
 8002532:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff fcd3 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d000      	beq.n	8002544 <HAL_ADC_ConfigChannel+0x3c>
 8002542:	e1a5      	b.n	8002890 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d100      	bne.n	800254e <HAL_ADC_ConfigChannel+0x46>
 800254c:	e144      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	429a      	cmp	r2, r3
 8002558:	d004      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800255e:	4ac2      	ldr	r2, [pc, #776]	; (8002868 <HAL_ADC_ConfigChannel+0x360>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d108      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0019      	movs	r1, r3
 800256e:	0010      	movs	r0, r2
 8002570:	f7ff fbe7 	bl	8001d42 <LL_ADC_REG_SetSequencerChAdd>
 8002574:	e0c9      	b.n	800270a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	211f      	movs	r1, #31
 8002580:	400b      	ands	r3, r1
 8002582:	210f      	movs	r1, #15
 8002584:	4099      	lsls	r1, r3
 8002586:	000b      	movs	r3, r1
 8002588:	43db      	mvns	r3, r3
 800258a:	4013      	ands	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	035b      	lsls	r3, r3, #13
 8002594:	0b5b      	lsrs	r3, r3, #13
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x9c>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	221f      	movs	r2, #31
 80025a0:	4013      	ands	r3, r2
 80025a2:	e098      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	d000      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0xa8>
 80025ae:	e091      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x1cc>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2202      	movs	r2, #2
 80025b6:	4013      	ands	r3, r2
 80025b8:	d000      	beq.n	80025bc <HAL_ADC_ConfigChannel+0xb4>
 80025ba:	e089      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x1c8>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2204      	movs	r2, #4
 80025c2:	4013      	ands	r3, r2
 80025c4:	d000      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0xc0>
 80025c6:	e081      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1c4>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	4013      	ands	r3, r2
 80025d0:	d000      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0xcc>
 80025d2:	e079      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1c0>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2210      	movs	r2, #16
 80025da:	4013      	ands	r3, r2
 80025dc:	d000      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0xd8>
 80025de:	e071      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x1bc>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2220      	movs	r2, #32
 80025e6:	4013      	ands	r3, r2
 80025e8:	d000      	beq.n	80025ec <HAL_ADC_ConfigChannel+0xe4>
 80025ea:	e069      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x1b8>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2240      	movs	r2, #64	; 0x40
 80025f2:	4013      	ands	r3, r2
 80025f4:	d000      	beq.n	80025f8 <HAL_ADC_ConfigChannel+0xf0>
 80025f6:	e061      	b.n	80026bc <HAL_ADC_ConfigChannel+0x1b4>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	4013      	ands	r3, r2
 8002600:	d000      	beq.n	8002604 <HAL_ADC_ConfigChannel+0xfc>
 8002602:	e059      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x1b0>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4013      	ands	r3, r2
 800260e:	d151      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x1ac>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4013      	ands	r3, r2
 800261a:	d149      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1a8>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4013      	ands	r3, r2
 8002626:	d141      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1a4>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d139      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1a0>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	015b      	lsls	r3, r3, #5
 800263c:	4013      	ands	r3, r2
 800263e:	d131      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x19c>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	4013      	ands	r3, r2
 800264a:	d129      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x198>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	01db      	lsls	r3, r3, #7
 8002654:	4013      	ands	r3, r2
 8002656:	d121      	bne.n	800269c <HAL_ADC_ConfigChannel+0x194>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	4013      	ands	r3, r2
 8002662:	d119      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x190>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	025b      	lsls	r3, r3, #9
 800266c:	4013      	ands	r3, r2
 800266e:	d111      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x18c>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	4013      	ands	r3, r2
 800267a:	d109      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x188>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	02db      	lsls	r3, r3, #11
 8002684:	4013      	ands	r3, r2
 8002686:	d001      	beq.n	800268c <HAL_ADC_ConfigChannel+0x184>
 8002688:	2312      	movs	r3, #18
 800268a:	e024      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 800268c:	2300      	movs	r3, #0
 800268e:	e022      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 8002690:	2311      	movs	r3, #17
 8002692:	e020      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 8002694:	2310      	movs	r3, #16
 8002696:	e01e      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 8002698:	230f      	movs	r3, #15
 800269a:	e01c      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 800269c:	230e      	movs	r3, #14
 800269e:	e01a      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026a0:	230d      	movs	r3, #13
 80026a2:	e018      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026a4:	230c      	movs	r3, #12
 80026a6:	e016      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026a8:	230b      	movs	r3, #11
 80026aa:	e014      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026ac:	230a      	movs	r3, #10
 80026ae:	e012      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026b0:	2309      	movs	r3, #9
 80026b2:	e010      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026b4:	2308      	movs	r3, #8
 80026b6:	e00e      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026b8:	2307      	movs	r3, #7
 80026ba:	e00c      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026bc:	2306      	movs	r3, #6
 80026be:	e00a      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026c0:	2305      	movs	r3, #5
 80026c2:	e008      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e006      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026c8:	2303      	movs	r3, #3
 80026ca:	e004      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ce>
 80026d4:	2300      	movs	r3, #0
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	6852      	ldr	r2, [r2, #4]
 80026da:	201f      	movs	r0, #31
 80026dc:	4002      	ands	r2, r0
 80026de:	4093      	lsls	r3, r2
 80026e0:	000a      	movs	r2, r1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d808      	bhi.n	800270a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	001a      	movs	r2, r3
 8002706:	f7ff fafc 	bl	8001d02 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	001a      	movs	r2, r3
 8002718:	f7ff fb36 	bl	8001d88 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db00      	blt.n	8002726 <HAL_ADC_ConfigChannel+0x21e>
 8002724:	e0be      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff faaf 	bl	8001c8c <LL_ADC_GetCommonPathInternalCh>
 800272e:	0003      	movs	r3, r0
 8002730:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a4e      	ldr	r2, [pc, #312]	; (8002870 <HAL_ADC_ConfigChannel+0x368>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d123      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002744:	d11e      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	0412      	lsls	r2, r2, #16
 800274c:	4313      	orrs	r3, r2
 800274e:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 8002750:	0019      	movs	r1, r3
 8002752:	0010      	movs	r0, r2
 8002754:	f7ff fa86 	bl	8001c64 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002758:	4b46      	ldr	r3, [pc, #280]	; (8002874 <HAL_ADC_ConfigChannel+0x36c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4946      	ldr	r1, [pc, #280]	; (8002878 <HAL_ADC_ConfigChannel+0x370>)
 800275e:	0018      	movs	r0, r3
 8002760:	f7fd fcd2 	bl	8000108 <__udivsi3>
 8002764:	0003      	movs	r3, r0
 8002766:	001a      	movs	r2, r3
 8002768:	0013      	movs	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	189b      	adds	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	3301      	adds	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002774:	e002      	b.n	800277c <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3b01      	subs	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002782:	e08f      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3c      	ldr	r2, [pc, #240]	; (800287c <HAL_ADC_ConfigChannel+0x374>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10e      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x2a4>
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	045b      	lsls	r3, r3, #17
 8002794:	4013      	ands	r3, r2
 8002796:	d109      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0452      	lsls	r2, r2, #17
 800279e:	4313      	orrs	r3, r2
 80027a0:	4a32      	ldr	r2, [pc, #200]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 80027a2:	0019      	movs	r1, r3
 80027a4:	0010      	movs	r0, r2
 80027a6:	f7ff fa5d 	bl	8001c64 <LL_ADC_SetCommonPathInternalCh>
 80027aa:	e07b      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a33      	ldr	r2, [pc, #204]	; (8002880 <HAL_ADC_ConfigChannel+0x378>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d000      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x2b0>
 80027b6:	e075      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	03db      	lsls	r3, r3, #15
 80027be:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027c0:	d000      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x2bc>
 80027c2:	e06f      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	03d2      	lsls	r2, r2, #15
 80027ca:	4313      	orrs	r3, r2
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 80027ce:	0019      	movs	r1, r3
 80027d0:	0010      	movs	r0, r2
 80027d2:	f7ff fa47 	bl	8001c64 <LL_ADC_SetCommonPathInternalCh>
 80027d6:	e065      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	061b      	lsls	r3, r3, #24
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027e8:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_ADC_ConfigChannel+0x360>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d107      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f7ff fab3 	bl	8001d64 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	da4e      	bge.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 8002808:	0018      	movs	r0, r3
 800280a:	f7ff fa3f 	bl	8001c8c <LL_ADC_GetCommonPathInternalCh>
 800280e:	0003      	movs	r3, r0
 8002810:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_ADC_ConfigChannel+0x368>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <HAL_ADC_ConfigChannel+0x37c>)
 8002820:	4013      	ands	r3, r2
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 8002824:	0019      	movs	r1, r3
 8002826:	0010      	movs	r0, r2
 8002828:	f7ff fa1c 	bl	8001c64 <LL_ADC_SetCommonPathInternalCh>
 800282c:	e03a      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_ADC_ConfigChannel+0x374>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d108      	bne.n	800284a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_ADC_ConfigChannel+0x380>)
 800283c:	4013      	ands	r3, r2
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 8002840:	0019      	movs	r1, r3
 8002842:	0010      	movs	r0, r2
 8002844:	f7ff fa0e 	bl	8001c64 <LL_ADC_SetCommonPathInternalCh>
 8002848:	e02c      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <HAL_ADC_ConfigChannel+0x378>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d127      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4a0d      	ldr	r2, [pc, #52]	; (800288c <HAL_ADC_ConfigChannel+0x384>)
 8002858:	4013      	ands	r3, r2
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_ADC_ConfigChannel+0x364>)
 800285c:	0019      	movs	r1, r3
 800285e:	0010      	movs	r0, r2
 8002860:	f7ff fa00 	bl	8001c64 <LL_ADC_SetCommonPathInternalCh>
 8002864:	e01e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x39c>
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	80000004 	.word	0x80000004
 800286c:	40012708 	.word	0x40012708
 8002870:	b0001000 	.word	0xb0001000
 8002874:	20000028 	.word	0x20000028
 8002878:	00030d40 	.word	0x00030d40
 800287c:	b8004000 	.word	0xb8004000
 8002880:	b4002000 	.word	0xb4002000
 8002884:	ff7fffff 	.word	0xff7fffff
 8002888:	feffffff 	.word	0xfeffffff
 800288c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	2220      	movs	r2, #32
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800289c:	2317      	movs	r3, #23
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2254      	movs	r2, #84	; 0x54
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80028ac:	2317      	movs	r3, #23
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	781b      	ldrb	r3, [r3, #0]
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b006      	add	sp, #24
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)

080028bc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff fb0b 	bl	8001ee4 <LL_ADC_REG_IsConversionOngoing>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d02b      	beq.n	800292a <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff facf 	bl	8001e7a <LL_ADC_IsDisableOngoing>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d104      	bne.n	80028ea <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff faeb 	bl	8001ec0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ea:	f7ff f99b 	bl	8001c24 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80028f2:	e014      	b.n	800291e <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028f4:	f7ff f996 	bl	8001c24 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d90d      	bls.n	800291e <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	2210      	movs	r2, #16
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2201      	movs	r2, #1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e006      	b.n	800292c <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2204      	movs	r2, #4
 8002926:	4013      	ands	r3, r2
 8002928:	d1e4      	bne.n	80028f4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b004      	add	sp, #16
 8002932:	bd80      	pop	{r7, pc}

08002934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0018      	movs	r0, r3
 8002946:	f7ff fa87 	bl	8001e58 <LL_ADC_IsEnabled>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d162      	bne.n	8002a14 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a32      	ldr	r2, [pc, #200]	; (8002a20 <ADC_Enable+0xec>)
 8002956:	4013      	ands	r3, r2
 8002958:	d00d      	beq.n	8002976 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	2210      	movs	r2, #16
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	2201      	movs	r2, #1
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e04f      	b.n	8002a16 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0018      	movs	r0, r3
 800297c:	f7ff fa48 	bl	8001e10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002980:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <ADC_Enable+0xf0>)
 8002982:	0018      	movs	r0, r3
 8002984:	f7ff f982 	bl	8001c8c <LL_ADC_GetCommonPathInternalCh>
 8002988:	0002      	movs	r2, r0
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	4013      	ands	r3, r2
 8002990:	d00f      	beq.n	80029b2 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002992:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <ADC_Enable+0xf4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4925      	ldr	r1, [pc, #148]	; (8002a2c <ADC_Enable+0xf8>)
 8002998:	0018      	movs	r0, r3
 800299a:	f7fd fbb5 	bl	8000108 <__udivsi3>
 800299e:	0003      	movs	r3, r0
 80029a0:	3301      	adds	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029a4:	e002      	b.n	80029ac <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7e5b      	ldrb	r3, [r3, #25]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d02c      	beq.n	8002a14 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80029ba:	f7ff f933 	bl	8001c24 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c2:	e020      	b.n	8002a06 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff fa45 	bl	8001e58 <LL_ADC_IsEnabled>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d104      	bne.n	80029dc <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff fa1a 	bl	8001e10 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029dc:	f7ff f922 	bl	8001c24 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d90d      	bls.n	8002a06 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	2210      	movs	r2, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2201      	movs	r2, #1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e007      	b.n	8002a16 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d1d7      	bne.n	80029c4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	80000017 	.word	0x80000017
 8002a24:	40012708 	.word	0x40012708
 8002a28:	20000028 	.word	0x20000028
 8002a2c:	00030d40 	.word	0x00030d40

08002a30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fa1c 	bl	8001e7a <LL_ADC_IsDisableOngoing>
 8002a42:	0003      	movs	r3, r0
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7ff fa04 	bl	8001e58 <LL_ADC_IsEnabled>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d040      	beq.n	8002ad6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d13d      	bne.n	8002ad6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2205      	movs	r2, #5
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10d      	bne.n	8002a84 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff f9e1 	bl	8001e34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2203      	movs	r2, #3
 8002a78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a7a:	f7ff f8d3 	bl	8001c24 <HAL_GetTick>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a82:	e022      	b.n	8002aca <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	2210      	movs	r2, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2201      	movs	r2, #1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e01b      	b.n	8002ad8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aa0:	f7ff f8c0 	bl	8001c24 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d90d      	bls.n	8002aca <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	2201      	movs	r2, #1
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e006      	b.n	8002ad8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d1e4      	bne.n	8002aa0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	1dfb      	adds	r3, r7, #7
 8002aea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b7f      	cmp	r3, #127	; 0x7f
 8002af2:	d809      	bhi.n	8002b08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	001a      	movs	r2, r3
 8002afa:	231f      	movs	r3, #31
 8002afc:	401a      	ands	r2, r3
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <__NVIC_EnableIRQ+0x30>)
 8002b00:	2101      	movs	r1, #1
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b7f      	cmp	r3, #127	; 0x7f
 8002b28:	d828      	bhi.n	8002b7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <__NVIC_SetPriority+0xd4>)
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	33c0      	adds	r3, #192	; 0xc0
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	589b      	ldr	r3, [r3, r2]
 8002b3a:	1dfa      	adds	r2, r7, #7
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	0011      	movs	r1, r2
 8002b40:	2203      	movs	r2, #3
 8002b42:	400a      	ands	r2, r1
 8002b44:	00d2      	lsls	r2, r2, #3
 8002b46:	21ff      	movs	r1, #255	; 0xff
 8002b48:	4091      	lsls	r1, r2
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	43d2      	mvns	r2, r2
 8002b4e:	401a      	ands	r2, r3
 8002b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	22ff      	movs	r2, #255	; 0xff
 8002b58:	401a      	ands	r2, r3
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	2303      	movs	r3, #3
 8002b62:	4003      	ands	r3, r0
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b68:	481f      	ldr	r0, [pc, #124]	; (8002be8 <__NVIC_SetPriority+0xd4>)
 8002b6a:	1dfb      	adds	r3, r7, #7
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	430a      	orrs	r2, r1
 8002b74:	33c0      	adds	r3, #192	; 0xc0
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b7a:	e031      	b.n	8002be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <__NVIC_SetPriority+0xd8>)
 8002b7e:	1dfb      	adds	r3, r7, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	0019      	movs	r1, r3
 8002b84:	230f      	movs	r3, #15
 8002b86:	400b      	ands	r3, r1
 8002b88:	3b08      	subs	r3, #8
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3306      	adds	r3, #6
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	3304      	adds	r3, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	1dfa      	adds	r2, r7, #7
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	00d2      	lsls	r2, r2, #3
 8002ba2:	21ff      	movs	r1, #255	; 0xff
 8002ba4:	4091      	lsls	r1, r2
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	43d2      	mvns	r2, r2
 8002baa:	401a      	ands	r2, r3
 8002bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	22ff      	movs	r2, #255	; 0xff
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	1dfb      	adds	r3, r7, #7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	4003      	ands	r3, r0
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bc4:	4809      	ldr	r0, [pc, #36]	; (8002bec <__NVIC_SetPriority+0xd8>)
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	001c      	movs	r4, r3
 8002bcc:	230f      	movs	r3, #15
 8002bce:	4023      	ands	r3, r4
 8002bd0:	3b08      	subs	r3, #8
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	3306      	adds	r3, #6
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	18c3      	adds	r3, r0, r3
 8002bdc:	3304      	adds	r3, #4
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b003      	add	sp, #12
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <SysTick_Config+0x40>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e010      	b.n	8002c28 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <SysTick_Config+0x44>)
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	425b      	negs	r3, r3
 8002c12:	2103      	movs	r1, #3
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff ff7d 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <SysTick_Config+0x44>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <SysTick_Config+0x44>)
 8002c22:	2207      	movs	r2, #7
 8002c24:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	00ffffff 	.word	0x00ffffff
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	210f      	movs	r1, #15
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	1c02      	adds	r2, r0, #0
 8002c48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	0011      	movs	r1, r2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	0002      	movs	r2, r0
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff ff33 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff ffaf 	bl	8002bf0 <SysTick_Config>
 8002c92:	0003      	movs	r3, r0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e077      	b.n	8002d9e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <HAL_DMA_Init+0x10c>)
 8002cb4:	4694      	mov	ip, r2
 8002cb6:	4463      	add	r3, ip
 8002cb8:	2114      	movs	r1, #20
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7fd fa24 	bl	8000108 <__udivsi3>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	009a      	lsls	r2, r3, #2
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2225      	movs	r2, #37	; 0x25
 8002ccc:	2102      	movs	r1, #2
 8002cce:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4934      	ldr	r1, [pc, #208]	; (8002dac <HAL_DMA_Init+0x110>)
 8002cdc:	400a      	ands	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 fa8f 	bl	800323c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	01db      	lsls	r3, r3, #7
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d102      	bne.n	8002d30 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	213f      	movs	r1, #63	; 0x3f
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <HAL_DMA_Init+0xd8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d80d      	bhi.n	8002d74 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fa9a 	bl	8003294 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	e008      	b.n	8002d86 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2225      	movs	r2, #37	; 0x25
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	2100      	movs	r1, #0
 8002d9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b002      	add	sp, #8
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	bffdfff8 	.word	0xbffdfff8
 8002dac:	ffff800f 	.word	0xffff800f

08002db0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2317      	movs	r3, #23
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2224      	movs	r2, #36	; 0x24
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_DMA_Start_IT+0x24>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e06f      	b.n	8002eb4 <HAL_DMA_Start_IT+0x104>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	2101      	movs	r1, #1
 8002dda:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2225      	movs	r2, #37	; 0x25
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d157      	bne.n	8002e98 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2225      	movs	r2, #37	; 0x25
 8002dec:	2102      	movs	r1, #2
 8002dee:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	438a      	bics	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f9d5 	bl	80031bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	210e      	movs	r1, #14
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e00f      	b.n	8002e4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2104      	movs	r1, #4
 8002e38:	438a      	bics	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	210a      	movs	r1, #10
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	025b      	lsls	r3, r3, #9
 8002e56:	4013      	ands	r3, r2
 8002e58:	d008      	beq.n	8002e6c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	0049      	lsls	r1, r1, #1
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0049      	lsls	r1, r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e00a      	b.n	8002eae <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2224      	movs	r2, #36	; 0x24
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002ea6:	2317      	movs	r3, #23
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002eae:	2317      	movs	r3, #23
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b006      	add	sp, #24
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e050      	b.n	8002f70 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2225      	movs	r2, #37	; 0x25
 8002ed2:	5c9b      	ldrb	r3, [r3, r2]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d008      	beq.n	8002eec <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e041      	b.n	8002f70 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	210e      	movs	r1, #14
 8002ef8:	438a      	bics	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	491c      	ldr	r1, [pc, #112]	; (8002f78 <HAL_DMA_Abort+0xbc>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	438a      	bics	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_DMA_Abort+0xc0>)
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	221c      	movs	r2, #28
 8002f26:	4013      	ands	r3, r2
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_DMA_Abort+0xc0>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f3a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_DMA_Abort+0xbc>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f5c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2225      	movs	r2, #37	; 0x25
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2224      	movs	r2, #36	; 0x24
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	fffffeff 	.word	0xfffffeff
 8002f7c:	40020000 	.word	0x40020000

08002f80 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2225      	movs	r2, #37	; 0x25
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d007      	beq.n	8002fac <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e049      	b.n	8003040 <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	210e      	movs	r1, #14
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	491e      	ldr	r1, [pc, #120]	; (8003050 <HAL_DMA_Abort_IT+0xd0>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_DMA_Abort_IT+0xd4>)
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	221c      	movs	r2, #28
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2201      	movs	r2, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_DMA_Abort_IT+0xd4>)
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ffa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00c      	beq.n	800301e <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300e:	4910      	ldr	r1, [pc, #64]	; (8003050 <HAL_DMA_Abort_IT+0xd0>)
 8003010:	400a      	ands	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800301c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2225      	movs	r2, #37	; 0x25
 8003022:	2101      	movs	r1, #1
 8003024:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2224      	movs	r2, #36	; 0x24
 800302a:	2100      	movs	r1, #0
 800302c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	0010      	movs	r0, r2
 800303e:	4798      	blx	r3
    }
  }
  return status;
 8003040:	230f      	movs	r3, #15
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	781b      	ldrb	r3, [r3, #0]
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	fffffeff 	.word	0xfffffeff
 8003054:	40020000 	.word	0x40020000

08003058 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003060:	4b55      	ldr	r3, [pc, #340]	; (80031b8 <HAL_DMA_IRQHandler+0x160>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	221c      	movs	r2, #28
 8003074:	4013      	ands	r3, r2
 8003076:	2204      	movs	r2, #4
 8003078:	409a      	lsls	r2, r3
 800307a:	0013      	movs	r3, r2
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	d027      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x7a>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2204      	movs	r2, #4
 8003086:	4013      	ands	r3, r2
 8003088:	d023      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2220      	movs	r2, #32
 8003092:	4013      	ands	r3, r2
 8003094:	d107      	bne.n	80030a6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2104      	movs	r1, #4
 80030a2:	438a      	bics	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_DMA_IRQHandler+0x160>)
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	221c      	movs	r2, #28
 80030b0:	4013      	ands	r3, r2
 80030b2:	2204      	movs	r2, #4
 80030b4:	409a      	lsls	r2, r3
 80030b6:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <HAL_DMA_IRQHandler+0x160>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d100      	bne.n	80030c6 <HAL_DMA_IRQHandler+0x6e>
 80030c4:	e073      	b.n	80031ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	0010      	movs	r0, r2
 80030ce:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80030d0:	e06d      	b.n	80031ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	221c      	movs	r2, #28
 80030d8:	4013      	ands	r3, r2
 80030da:	2202      	movs	r2, #2
 80030dc:	409a      	lsls	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4013      	ands	r3, r2
 80030e4:	d02e      	beq.n	8003144 <HAL_DMA_IRQHandler+0xec>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d02a      	beq.n	8003144 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2220      	movs	r2, #32
 80030f6:	4013      	ands	r3, r2
 80030f8:	d10b      	bne.n	8003112 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	210a      	movs	r1, #10
 8003106:	438a      	bics	r2, r1
 8003108:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2225      	movs	r2, #37	; 0x25
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_DMA_IRQHandler+0x160>)
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	221c      	movs	r2, #28
 800311c:	4013      	ands	r3, r2
 800311e:	2202      	movs	r2, #2
 8003120:	409a      	lsls	r2, r3
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_DMA_IRQHandler+0x160>)
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03a      	beq.n	80031ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	0010      	movs	r0, r2
 8003140:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003142:	e034      	b.n	80031ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	221c      	movs	r2, #28
 800314a:	4013      	ands	r3, r2
 800314c:	2208      	movs	r2, #8
 800314e:	409a      	lsls	r2, r3
 8003150:	0013      	movs	r3, r2
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	d02b      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x158>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2208      	movs	r2, #8
 800315c:	4013      	ands	r3, r2
 800315e:	d027      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	210e      	movs	r1, #14
 800316c:	438a      	bics	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_DMA_IRQHandler+0x160>)
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	221c      	movs	r2, #28
 800317a:	4013      	ands	r3, r2
 800317c:	2201      	movs	r2, #1
 800317e:	409a      	lsls	r2, r3
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_DMA_IRQHandler+0x160>)
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2225      	movs	r2, #37	; 0x25
 8003190:	2101      	movs	r1, #1
 8003192:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	0010      	movs	r0, r2
 80031ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46c0      	nop			; (mov r8, r8)
}
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40020000 	.word	0x40020000

080031bc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80031e4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <DMA_SetConfig+0x7c>)
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	221c      	movs	r2, #28
 80031f0:	4013      	ands	r3, r2
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <DMA_SetConfig+0x7c>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b10      	cmp	r3, #16
 800320a:	d108      	bne.n	800321e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800321c:	e007      	b.n	800322e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	60da      	str	r2, [r3, #12]
}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b004      	add	sp, #16
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	40020000 	.word	0x40020000

0800323c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800324c:	4694      	mov	ip, r2
 800324e:	4463      	add	r3, ip
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	001a      	movs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	001a      	movs	r2, r3
 800325e:	23ff      	movs	r3, #255	; 0xff
 8003260:	4013      	ands	r3, r2
 8003262:	3b08      	subs	r3, #8
 8003264:	2114      	movs	r1, #20
 8003266:	0018      	movs	r0, r3
 8003268:	f7fc ff4e 	bl	8000108 <__udivsi3>
 800326c:	0003      	movs	r3, r0
 800326e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003274:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	221f      	movs	r2, #31
 800327a:	4013      	ands	r3, r2
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}
 800328c:	10008200 	.word	0x10008200
 8003290:	40020880 	.word	0x40020880

08003294 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	223f      	movs	r2, #63	; 0x3f
 80032a2:	4013      	ands	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80032aa:	4694      	mov	ip, r2
 80032ac:	4463      	add	r3, ip
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	001a      	movs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3b01      	subs	r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	4013      	ands	r3, r2
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	1000823f 	.word	0x1000823f
 80032d8:	40020940 	.word	0x40020940

080032dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	e147      	b.n	800357c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4091      	lsls	r1, r2
 80032f6:	000a      	movs	r2, r1
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d100      	bne.n	8003304 <HAL_GPIO_Init+0x28>
 8003302:	e138      	b.n	8003576 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d00b      	beq.n	8003324 <HAL_GPIO_Init+0x48>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d007      	beq.n	8003324 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003318:	2b11      	cmp	r3, #17
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b12      	cmp	r3, #18
 8003322:	d130      	bne.n	8003386 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	409a      	lsls	r2, r3
 8003332:	0013      	movs	r3, r2
 8003334:	43da      	mvns	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	409a      	lsls	r2, r3
 8003346:	0013      	movs	r3, r2
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335a:	2201      	movs	r2, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	409a      	lsls	r2, r3
 8003360:	0013      	movs	r3, r2
 8003362:	43da      	mvns	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	2201      	movs	r2, #1
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
 8003378:	0013      	movs	r3, r2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	409a      	lsls	r2, r3
 8003394:	0013      	movs	r3, r2
 8003396:	43da      	mvns	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	0013      	movs	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0xea>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b12      	cmp	r3, #18
 80033c4:	d123      	bne.n	800340e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	08da      	lsrs	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3208      	adds	r2, #8
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	58d3      	ldr	r3, [r2, r3]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2207      	movs	r2, #7
 80033d8:	4013      	ands	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	409a      	lsls	r2, r3
 80033e0:	0013      	movs	r3, r2
 80033e2:	43da      	mvns	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2107      	movs	r1, #7
 80033f2:	400b      	ands	r3, r1
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	409a      	lsls	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	0092      	lsls	r2, r2, #2
 800340a:	6939      	ldr	r1, [r7, #16]
 800340c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	409a      	lsls	r2, r3
 800341c:	0013      	movs	r3, r2
 800341e:	43da      	mvns	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	401a      	ands	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	0013      	movs	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	055b      	lsls	r3, r3, #21
 800344a:	4013      	ands	r3, r2
 800344c:	d100      	bne.n	8003450 <HAL_GPIO_Init+0x174>
 800344e:	e092      	b.n	8003576 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003450:	4a50      	ldr	r2, [pc, #320]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3318      	adds	r3, #24
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	589b      	ldr	r3, [r3, r2]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2203      	movs	r2, #3
 8003462:	4013      	ands	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	220f      	movs	r2, #15
 8003468:	409a      	lsls	r2, r3
 800346a:	0013      	movs	r3, r2
 800346c:	43da      	mvns	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	23a0      	movs	r3, #160	; 0xa0
 8003478:	05db      	lsls	r3, r3, #23
 800347a:	429a      	cmp	r2, r3
 800347c:	d013      	beq.n	80034a6 <HAL_GPIO_Init+0x1ca>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a45      	ldr	r2, [pc, #276]	; (8003598 <HAL_GPIO_Init+0x2bc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00d      	beq.n	80034a2 <HAL_GPIO_Init+0x1c6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a44      	ldr	r2, [pc, #272]	; (800359c <HAL_GPIO_Init+0x2c0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <HAL_GPIO_Init+0x1c2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a43      	ldr	r2, [pc, #268]	; (80035a0 <HAL_GPIO_Init+0x2c4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_GPIO_Init+0x1be>
 8003496:	2303      	movs	r3, #3
 8003498:	e006      	b.n	80034a8 <HAL_GPIO_Init+0x1cc>
 800349a:	2305      	movs	r3, #5
 800349c:	e004      	b.n	80034a8 <HAL_GPIO_Init+0x1cc>
 800349e:	2302      	movs	r3, #2
 80034a0:	e002      	b.n	80034a8 <HAL_GPIO_Init+0x1cc>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_GPIO_Init+0x1cc>
 80034a6:	2300      	movs	r3, #0
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	2103      	movs	r1, #3
 80034ac:	400a      	ands	r2, r1
 80034ae:	00d2      	lsls	r2, r2, #3
 80034b0:	4093      	lsls	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80034b8:	4936      	ldr	r1, [pc, #216]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	3318      	adds	r3, #24
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034c6:	4a33      	ldr	r2, [pc, #204]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	58d3      	ldr	r3, [r2, r3]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	025b      	lsls	r3, r3, #9
 80034e0:	4013      	ands	r3, r2
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ec:	4929      	ldr	r1, [pc, #164]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 80034f6:	2384      	movs	r3, #132	; 0x84
 80034f8:	58d3      	ldr	r3, [r2, r3]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	4013      	ands	r3, r2
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800351a:	491e      	ldr	r1, [pc, #120]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 800351c:	2284      	movs	r2, #132	; 0x84
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43da      	mvns	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	035b      	lsls	r3, r3, #13
 800353a:	4013      	ands	r3, r2
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43da      	mvns	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	039b      	lsls	r3, r3, #14
 8003564:	4013      	ands	r3, r2
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_GPIO_Init+0x2b8>)
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	3301      	adds	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	40da      	lsrs	r2, r3
 8003584:	1e13      	subs	r3, r2, #0
 8003586:	d000      	beq.n	800358a <HAL_GPIO_Init+0x2ae>
 8003588:	e6b0      	b.n	80032ec <HAL_GPIO_Init+0x10>
  }
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b006      	add	sp, #24
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	40021800 	.word	0x40021800
 8003598:	50000400 	.word	0x50000400
 800359c:	50000800 	.word	0x50000800
 80035a0:	50000c00 	.word	0x50000c00

080035a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	0008      	movs	r0, r1
 80035ae:	0011      	movs	r1, r2
 80035b0:	1cbb      	adds	r3, r7, #2
 80035b2:	1c02      	adds	r2, r0, #0
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	1c7b      	adds	r3, r7, #1
 80035b8:	1c0a      	adds	r2, r1, #0
 80035ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035bc:	1c7b      	adds	r3, r7, #1
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035c4:	1cbb      	adds	r3, r7, #2
 80035c6:	881a      	ldrh	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035cc:	e003      	b.n	80035d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ce:	1cbb      	adds	r3, r7, #2
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d11f      	bne.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	0013      	movs	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	189b      	adds	r3, r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4912      	ldr	r1, [pc, #72]	; (800365c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003612:	0018      	movs	r0, r3
 8003614:	f7fc fd78 	bl	8000108 <__udivsi3>
 8003618:	0003      	movs	r3, r0
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800361e:	e008      	b.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3b01      	subs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e001      	b.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e009      	b.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	401a      	ands	r2, r3
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	429a      	cmp	r2, r3
 8003642:	d0ed      	beq.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	40007000 	.word	0x40007000
 8003654:	fffff9ff 	.word	0xfffff9ff
 8003658:	20000028 	.word	0x20000028
 800365c:	000f4240 	.word	0x000f4240

08003660 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	23e0      	movs	r3, #224	; 0xe0
 800366a:	01db      	lsls	r3, r3, #7
 800366c:	4013      	ands	r3, r2
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000

08003678 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e304      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2201      	movs	r2, #1
 8003690:	4013      	ands	r3, r2
 8003692:	d100      	bne.n	8003696 <HAL_RCC_OscConfig+0x1e>
 8003694:	e07c      	b.n	8003790 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003696:	4bc3      	ldr	r3, [pc, #780]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2238      	movs	r2, #56	; 0x38
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a0:	4bc0      	ldr	r3, [pc, #768]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2203      	movs	r2, #3
 80036a6:	4013      	ands	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3e>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_OscConfig+0x44>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	4bb9      	ldr	r3, [pc, #740]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	4013      	ands	r3, r2
 80036c6:	d062      	beq.n	800378e <HAL_RCC_OscConfig+0x116>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d15e      	bne.n	800378e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e2df      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	025b      	lsls	r3, r3, #9
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x78>
 80036e0:	4bb0      	ldr	r3, [pc, #704]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4baf      	ldr	r3, [pc, #700]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	0249      	lsls	r1, r1, #9
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e020      	b.n	8003732 <HAL_RCC_OscConfig+0xba>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	23a0      	movs	r3, #160	; 0xa0
 80036f6:	02db      	lsls	r3, r3, #11
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d10e      	bne.n	800371a <HAL_RCC_OscConfig+0xa2>
 80036fc:	4ba9      	ldr	r3, [pc, #676]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4ba8      	ldr	r3, [pc, #672]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	02c9      	lsls	r1, r1, #11
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	4ba6      	ldr	r3, [pc, #664]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4ba5      	ldr	r3, [pc, #660]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	0249      	lsls	r1, r1, #9
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e00b      	b.n	8003732 <HAL_RCC_OscConfig+0xba>
 800371a:	4ba2      	ldr	r3, [pc, #648]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4ba1      	ldr	r3, [pc, #644]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003720:	49a1      	ldr	r1, [pc, #644]	; (80039a8 <HAL_RCC_OscConfig+0x330>)
 8003722:	400a      	ands	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	4b9f      	ldr	r3, [pc, #636]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800372c:	499f      	ldr	r1, [pc, #636]	; (80039ac <HAL_RCC_OscConfig+0x334>)
 800372e:	400a      	ands	r2, r1
 8003730:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d014      	beq.n	8003764 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fe fa73 	bl	8001c24 <HAL_GetTick>
 800373e:	0003      	movs	r3, r0
 8003740:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe fa6e 	bl	8001c24 <HAL_GetTick>
 8003748:	0002      	movs	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e29e      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003756:	4b93      	ldr	r3, [pc, #588]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	4013      	ands	r3, r2
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0xcc>
 8003762:	e015      	b.n	8003790 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fa5e 	bl	8001c24 <HAL_GetTick>
 8003768:	0003      	movs	r3, r0
 800376a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800376e:	f7fe fa59 	bl	8001c24 <HAL_GetTick>
 8003772:	0002      	movs	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b64      	cmp	r3, #100	; 0x64
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e289      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003780:	4b88      	ldr	r3, [pc, #544]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	4013      	ands	r3, r2
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0xf6>
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2202      	movs	r2, #2
 8003796:	4013      	ands	r3, r2
 8003798:	d100      	bne.n	800379c <HAL_RCC_OscConfig+0x124>
 800379a:	e099      	b.n	80038d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379c:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2238      	movs	r2, #56	; 0x38
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a6:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2203      	movs	r2, #3
 80037ac:	4013      	ands	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d102      	bne.n	80037bc <HAL_RCC_OscConfig+0x144>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d002      	beq.n	80037c2 <HAL_RCC_OscConfig+0x14a>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d135      	bne.n	800382e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c2:	4b78      	ldr	r3, [pc, #480]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4013      	ands	r3, r2
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x162>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e25c      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b72      	ldr	r3, [pc, #456]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a74      	ldr	r2, [pc, #464]	; (80039b0 <HAL_RCC_OscConfig+0x338>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	021a      	lsls	r2, r3, #8
 80037ea:	4b6e      	ldr	r3, [pc, #440]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d112      	bne.n	800381c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037f6:	4b6b      	ldr	r3, [pc, #428]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <HAL_RCC_OscConfig+0x33c>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800380a:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0adb      	lsrs	r3, r3, #11
 8003810:	2207      	movs	r2, #7
 8003812:	4013      	ands	r3, r2
 8003814:	4a68      	ldr	r2, [pc, #416]	; (80039b8 <HAL_RCC_OscConfig+0x340>)
 8003816:	40da      	lsrs	r2, r3
 8003818:	4b68      	ldr	r3, [pc, #416]	; (80039bc <HAL_RCC_OscConfig+0x344>)
 800381a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <HAL_RCC_OscConfig+0x348>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0018      	movs	r0, r3
 8003822:	f7fe f9a3 	bl	8001b6c <HAL_InitTick>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d051      	beq.n	80038ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e232      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d030      	beq.n	8003898 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003836:	4b5b      	ldr	r3, [pc, #364]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5e      	ldr	r2, [pc, #376]	; (80039b4 <HAL_RCC_OscConfig+0x33c>)
 800383c:	4013      	ands	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800384a:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0049      	lsls	r1, r1, #1
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fe f9e4 	bl	8001c24 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe f9df 	bl	8001c24 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e20f      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003874:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4013      	ands	r3, r2
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b48      	ldr	r3, [pc, #288]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a4a      	ldr	r2, [pc, #296]	; (80039b0 <HAL_RCC_OscConfig+0x338>)
 8003886:	4013      	ands	r3, r2
 8003888:	0019      	movs	r1, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	021a      	lsls	r2, r3, #8
 8003890:	4b44      	ldr	r3, [pc, #272]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e01b      	b.n	80038d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003898:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800389e:	4949      	ldr	r1, [pc, #292]	; (80039c4 <HAL_RCC_OscConfig+0x34c>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe f9be 	bl	8001c24 <HAL_GetTick>
 80038a8:	0003      	movs	r3, r0
 80038aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ae:	f7fe f9b9 	bl	8001c24 <HAL_GetTick>
 80038b2:	0002      	movs	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e1e9      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c0:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4013      	ands	r3, r2
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x236>
 80038cc:	e000      	b.n	80038d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2208      	movs	r2, #8
 80038d6:	4013      	ands	r3, r2
 80038d8:	d047      	beq.n	800396a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038da:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2238      	movs	r2, #56	; 0x38
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b18      	cmp	r3, #24
 80038e4:	d10a      	bne.n	80038fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80038e6:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	2202      	movs	r2, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	d03c      	beq.n	800396a <HAL_RCC_OscConfig+0x2f2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d138      	bne.n	800396a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e1cb      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d019      	beq.n	8003938 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003906:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800390a:	2101      	movs	r1, #1
 800390c:	430a      	orrs	r2, r1
 800390e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe f988 	bl	8001c24 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391a:	f7fe f983 	bl	8001c24 <HAL_GetTick>
 800391e:	0002      	movs	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e1b3      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	2202      	movs	r2, #2
 8003932:	4013      	ands	r3, r2
 8003934:	d0f1      	beq.n	800391a <HAL_RCC_OscConfig+0x2a2>
 8003936:	e018      	b.n	800396a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800393a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe f96e 	bl	8001c24 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394e:	f7fe f969 	bl	8001c24 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e199      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	d1f1      	bne.n	800394e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2204      	movs	r2, #4
 8003970:	4013      	ands	r3, r2
 8003972:	d100      	bne.n	8003976 <HAL_RCC_OscConfig+0x2fe>
 8003974:	e0c6      	b.n	8003b04 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003976:	231f      	movs	r3, #31
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2238      	movs	r2, #56	; 0x38
 8003984:	4013      	ands	r3, r2
 8003986:	2b20      	cmp	r3, #32
 8003988:	d11e      	bne.n	80039c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_OscConfig+0x32c>)
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	2202      	movs	r2, #2
 8003990:	4013      	ands	r3, r2
 8003992:	d100      	bne.n	8003996 <HAL_RCC_OscConfig+0x31e>
 8003994:	e0b6      	b.n	8003b04 <HAL_RCC_OscConfig+0x48c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d000      	beq.n	80039a0 <HAL_RCC_OscConfig+0x328>
 800399e:	e0b1      	b.n	8003b04 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e177      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
 80039a4:	40021000 	.word	0x40021000
 80039a8:	fffeffff 	.word	0xfffeffff
 80039ac:	fffbffff 	.word	0xfffbffff
 80039b0:	ffff80ff 	.word	0xffff80ff
 80039b4:	ffffc7ff 	.word	0xffffc7ff
 80039b8:	00f42400 	.word	0x00f42400
 80039bc:	20000028 	.word	0x20000028
 80039c0:	2000002c 	.word	0x2000002c
 80039c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039c8:	4bb4      	ldr	r3, [pc, #720]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	055b      	lsls	r3, r3, #21
 80039d0:	4013      	ands	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_OscConfig+0x360>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x362>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d011      	beq.n	8003a02 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4baf      	ldr	r3, [pc, #700]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 80039e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e2:	4bae      	ldr	r3, [pc, #696]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	0549      	lsls	r1, r1, #21
 80039e8:	430a      	orrs	r2, r1
 80039ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ec:	4bab      	ldr	r3, [pc, #684]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 80039ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	055b      	lsls	r3, r3, #21
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80039fa:	231f      	movs	r3, #31
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a02:	4ba7      	ldr	r3, [pc, #668]	; (8003ca0 <HAL_RCC_OscConfig+0x628>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d11a      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a0e:	4ba4      	ldr	r3, [pc, #656]	; (8003ca0 <HAL_RCC_OscConfig+0x628>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4ba3      	ldr	r3, [pc, #652]	; (8003ca0 <HAL_RCC_OscConfig+0x628>)
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	0049      	lsls	r1, r1, #1
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe f902 	bl	8001c24 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fe f8fd 	bl	8001c24 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e12d      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a38:	4b99      	ldr	r3, [pc, #612]	; (8003ca0 <HAL_RCC_OscConfig+0x628>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4013      	ands	r3, r2
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCC_OscConfig+0x3e2>
 8003a4c:	4b93      	ldr	r3, [pc, #588]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a50:	4b92      	ldr	r3, [pc, #584]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a52:	2101      	movs	r1, #1
 8003a54:	430a      	orrs	r2, r1
 8003a56:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x41c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x404>
 8003a62:	4b8e      	ldr	r3, [pc, #568]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a66:	4b8d      	ldr	r3, [pc, #564]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a68:	2104      	movs	r1, #4
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a6e:	4b8b      	ldr	r3, [pc, #556]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a72:	4b8a      	ldr	r3, [pc, #552]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	430a      	orrs	r2, r1
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0x41c>
 8003a7c:	4b87      	ldr	r3, [pc, #540]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a80:	4b86      	ldr	r3, [pc, #536]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	438a      	bics	r2, r1
 8003a86:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a88:	4b84      	ldr	r3, [pc, #528]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a8c:	4b83      	ldr	r3, [pc, #524]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003a8e:	2104      	movs	r1, #4
 8003a90:	438a      	bics	r2, r1
 8003a92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d014      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f8c2 	bl	8001c24 <HAL_GetTick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa4:	e009      	b.n	8003aba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe f8bd 	bl	8001c24 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	4a7c      	ldr	r2, [pc, #496]	; (8003ca4 <HAL_RCC_OscConfig+0x62c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e0ec      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aba:	4b78      	ldr	r3, [pc, #480]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2202      	movs	r2, #2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x42e>
 8003ac4:	e013      	b.n	8003aee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fe f8ad 	bl	8001c24 <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ace:	e009      	b.n	8003ae4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f8a8 	bl	8001c24 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	4a72      	ldr	r2, [pc, #456]	; (8003ca4 <HAL_RCC_OscConfig+0x62c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0d7      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae4:	4b6d      	ldr	r3, [pc, #436]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003aee:	231f      	movs	r3, #31
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b68      	ldr	r3, [pc, #416]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003afc:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003afe:	496a      	ldr	r1, [pc, #424]	; (8003ca8 <HAL_RCC_OscConfig+0x630>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d100      	bne.n	8003b0e <HAL_RCC_OscConfig+0x496>
 8003b0c:	e0c1      	b.n	8003c92 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b0e:	4b63      	ldr	r3, [pc, #396]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2238      	movs	r2, #56	; 0x38
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d100      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4a4>
 8003b1a:	e081      	b.n	8003c20 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d156      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b24:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b5c      	ldr	r3, [pc, #368]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b2a:	4960      	ldr	r1, [pc, #384]	; (8003cac <HAL_RCC_OscConfig+0x634>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe f878 	bl	8001c24 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3a:	f7fe f873 	bl	8001c24 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0a3      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	049b      	lsls	r3, r3, #18
 8003b54:	4013      	ands	r3, r2
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b58:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a54      	ldr	r2, [pc, #336]	; (8003cb0 <HAL_RCC_OscConfig+0x638>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	431a      	orrs	r2, r3
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b92:	2180      	movs	r1, #128	; 0x80
 8003b94:	0449      	lsls	r1, r1, #17
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b9a:	4b40      	ldr	r3, [pc, #256]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003ba0:	2180      	movs	r1, #128	; 0x80
 8003ba2:	0549      	lsls	r1, r1, #21
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f83c 	bl	8001c24 <HAL_GetTick>
 8003bac:	0003      	movs	r3, r0
 8003bae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe f837 	bl	8001c24 <HAL_GetTick>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e067      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	049b      	lsls	r3, r3, #18
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x53a>
 8003bd0:	e05f      	b.n	8003c92 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003bd8:	4934      	ldr	r1, [pc, #208]	; (8003cac <HAL_RCC_OscConfig+0x634>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003bde:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003be4:	2103      	movs	r1, #3
 8003be6:	438a      	bics	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003bea:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003bf0:	4930      	ldr	r1, [pc, #192]	; (8003cb4 <HAL_RCC_OscConfig+0x63c>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fe f815 	bl	8001c24 <HAL_GetTick>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe f810 	bl	8001c24 <HAL_GetTick>
 8003c04:	0002      	movs	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e040      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c12:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	049b      	lsls	r3, r3, #18
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x588>
 8003c1e:	e038      	b.n	8003c92 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e033      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x624>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2203      	movs	r2, #3
 8003c36:	401a      	ands	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d126      	bne.n	8003c8e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2270      	movs	r2, #112	; 0x70
 8003c44:	401a      	ands	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11f      	bne.n	8003c8e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	23fe      	movs	r3, #254	; 0xfe
 8003c52:	01db      	lsls	r3, r3, #7
 8003c54:	401a      	ands	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d116      	bne.n	8003c8e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	23f8      	movs	r3, #248	; 0xf8
 8003c64:	039b      	lsls	r3, r3, #14
 8003c66:	401a      	ands	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d10e      	bne.n	8003c8e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	23e0      	movs	r3, #224	; 0xe0
 8003c74:	051b      	lsls	r3, r3, #20
 8003c76:	401a      	ands	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	0f5b      	lsrs	r3, r3, #29
 8003c84:	075a      	lsls	r2, r3, #29
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b008      	add	sp, #32
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	00001388 	.word	0x00001388
 8003ca8:	efffffff 	.word	0xefffffff
 8003cac:	feffffff 	.word	0xfeffffff
 8003cb0:	11c1808c 	.word	0x11c1808c
 8003cb4:	eefeffff 	.word	0xeefeffff

08003cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0e9      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d91e      	bls.n	8003d18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b73      	ldr	r3, [pc, #460]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2207      	movs	r2, #7
 8003ce0:	4393      	bics	r3, r2
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cec:	f7fd ff9a 	bl	8001c24 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cf4:	e009      	b.n	8003d0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf6:	f7fd ff95 	bl	8001c24 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	4a6a      	ldr	r2, [pc, #424]	; (8003eac <HAL_RCC_ClockConfig+0x1f4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0ca      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2207      	movs	r2, #7
 8003d10:	4013      	ands	r3, r2
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1ee      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d015      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2204      	movs	r2, #4
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d006      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d2c:	4b60      	ldr	r3, [pc, #384]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	4b5f      	ldr	r3, [pc, #380]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d32:	21e0      	movs	r1, #224	; 0xe0
 8003d34:	01c9      	lsls	r1, r1, #7
 8003d36:	430a      	orrs	r2, r1
 8003d38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	0019      	movs	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	4013      	ands	r3, r2
 8003d56:	d057      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d60:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d12b      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e097      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d78:	4b4d      	ldr	r3, [pc, #308]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	049b      	lsls	r3, r3, #18
 8003d80:	4013      	ands	r3, r2
 8003d82:	d11f      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e08b      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d90:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d113      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e07f      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da8:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	2202      	movs	r2, #2
 8003dae:	4013      	ands	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e074      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2202      	movs	r2, #2
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e06d      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc4:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2207      	movs	r2, #7
 8003dca:	4393      	bics	r3, r2
 8003dcc:	0019      	movs	r1, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fd ff24 	bl	8001c24 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de0:	e009      	b.n	8003df6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de2:	f7fd ff1f 	bl	8001c24 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	4a2f      	ldr	r2, [pc, #188]	; (8003eac <HAL_RCC_ClockConfig+0x1f4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e054      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2238      	movs	r2, #56	; 0x38
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1ec      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	4013      	ands	r3, r2
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d21e      	bcs.n	8003e54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2207      	movs	r2, #7
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e28:	f7fd fefc 	bl	8001c24 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e30:	e009      	b.n	8003e46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e32:	f7fd fef7 	bl	8001c24 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <HAL_RCC_ClockConfig+0x1f4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e02c      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e46:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2207      	movs	r2, #7
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1ee      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <HAL_RCC_ClockConfig+0x200>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e72:	f000 f829 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e76:	0001      	movs	r1, r0
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	220f      	movs	r2, #15
 8003e80:	401a      	ands	r2, r3
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <HAL_RCC_ClockConfig+0x204>)
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	58d3      	ldr	r3, [r2, r3]
 8003e88:	221f      	movs	r2, #31
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	000a      	movs	r2, r1
 8003e8e:	40da      	lsrs	r2, r3
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_ClockConfig+0x208>)
 8003e92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCC_ClockConfig+0x20c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7fd fe67 	bl	8001b6c <HAL_InitTick>
 8003e9e:	0003      	movs	r3, r0
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b004      	add	sp, #16
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	00001388 	.word	0x00001388
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	fffff0ff 	.word	0xfffff0ff
 8003eb8:	ffff8fff 	.word	0xffff8fff
 8003ebc:	080076c4 	.word	0x080076c4
 8003ec0:	20000028 	.word	0x20000028
 8003ec4:	2000002c 	.word	0x2000002c

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ece:	4b3c      	ldr	r3, [pc, #240]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2238      	movs	r2, #56	; 0x38
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ed8:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0adb      	lsrs	r3, r3, #11
 8003ede:	2207      	movs	r2, #7
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	0013      	movs	r3, r2
 8003ee8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003eea:	6839      	ldr	r1, [r7, #0]
 8003eec:	4835      	ldr	r0, [pc, #212]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003eee:	f7fc f90b 	bl	8000108 <__udivsi3>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	e05d      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2238      	movs	r2, #56	; 0x38
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f04:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e054      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2238      	movs	r2, #56	; 0x38
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d138      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f16:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f20:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	2207      	movs	r2, #7
 8003f28:	4013      	ands	r3, r2
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	4824      	ldr	r0, [pc, #144]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f38:	f7fc f8e6 	bl	8000108 <__udivsi3>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	0019      	movs	r1, r3
 8003f40:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0a1b      	lsrs	r3, r3, #8
 8003f46:	227f      	movs	r2, #127	; 0x7f
 8003f48:	4013      	ands	r3, r2
 8003f4a:	434b      	muls	r3, r1
 8003f4c:	617b      	str	r3, [r7, #20]
        break;
 8003f4e:	e00d      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	481c      	ldr	r0, [pc, #112]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f54:	f7fc f8d8 	bl	8000108 <__udivsi3>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	227f      	movs	r2, #127	; 0x7f
 8003f64:	4013      	ands	r3, r2
 8003f66:	434b      	muls	r3, r1
 8003f68:	617b      	str	r3, [r7, #20]
        break;
 8003f6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003f6c:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0f5b      	lsrs	r3, r3, #29
 8003f72:	2207      	movs	r2, #7
 8003f74:	4013      	ands	r3, r2
 8003f76:	3301      	adds	r3, #1
 8003f78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	6978      	ldr	r0, [r7, #20]
 8003f7e:	f7fc f8c3 	bl	8000108 <__udivsi3>
 8003f82:	0003      	movs	r3, r0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	e015      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2238      	movs	r2, #56	; 0x38
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d103      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2238      	movs	r2, #56	; 0x38
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b18      	cmp	r3, #24
 8003fa6:	d103      	bne.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003fa8:	23fa      	movs	r3, #250	; 0xfa
 8003faa:	01db      	lsls	r3, r3, #7
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	e001      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fb4:	693b      	ldr	r3, [r7, #16]
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b006      	add	sp, #24
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	007a1200 	.word	0x007a1200

08003fcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	20000028 	.word	0x20000028

08003fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe0:	b5b0      	push	{r4, r5, r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003fe4:	f7ff fff2 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8003fe8:	0004      	movs	r4, r0
 8003fea:	f7ff fb39 	bl	8003660 <LL_RCC_GetAPB1Prescaler>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	0b1a      	lsrs	r2, r3, #12
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ff4:	0092      	lsls	r2, r2, #2
 8003ff6:	58d3      	ldr	r3, [r2, r3]
 8003ff8:	221f      	movs	r2, #31
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	40dc      	lsrs	r4, r3
 8003ffe:	0023      	movs	r3, r4
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	bdb0      	pop	{r4, r5, r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	08007704 	.word	0x08007704

0800400c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004014:	2313      	movs	r3, #19
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800401c:	2312      	movs	r3, #18
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	4013      	ands	r3, r2
 800402e:	d100      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004030:	e0af      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004032:	2311      	movs	r3, #17
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b48      	ldr	r3, [pc, #288]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800403c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	055b      	lsls	r3, r3, #21
 8004042:	4013      	ands	r3, r2
 8004044:	d111      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	4b45      	ldr	r3, [pc, #276]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404a:	4b44      	ldr	r3, [pc, #272]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	0549      	lsls	r1, r1, #21
 8004050:	430a      	orrs	r2, r1
 8004052:	63da      	str	r2, [r3, #60]	; 0x3c
 8004054:	4b41      	ldr	r3, [pc, #260]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	055b      	lsls	r3, r3, #21
 800405c:	4013      	ands	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004062:	2311      	movs	r3, #17
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406a:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b3c      	ldr	r3, [pc, #240]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	0049      	lsls	r1, r1, #1
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004078:	f7fd fdd4 	bl	8001c24 <HAL_GetTick>
 800407c:	0003      	movs	r3, r0
 800407e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004080:	e00b      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fd fdcf 	bl	8001c24 <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d904      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004090:	2313      	movs	r3, #19
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	2203      	movs	r2, #3
 8004096:	701a      	strb	r2, [r3, #0]
        break;
 8004098:	e005      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800409a:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d0ed      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80040a6:	2313      	movs	r3, #19
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d15f      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040b0:	4b2a      	ldr	r3, [pc, #168]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040b4:	23c0      	movs	r3, #192	; 0xc0
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4013      	ands	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d019      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d014      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040cc:	4b23      	ldr	r3, [pc, #140]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d0:	4a24      	ldr	r2, [pc, #144]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040da:	4b20      	ldr	r3, [pc, #128]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040dc:	2180      	movs	r1, #128	; 0x80
 80040de:	0249      	lsls	r1, r1, #9
 80040e0:	430a      	orrs	r2, r1
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040e4:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040ea:	491f      	ldr	r1, [pc, #124]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	d016      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7fd fd91 	bl	8001c24 <HAL_GetTick>
 8004102:	0003      	movs	r3, r0
 8004104:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	e00c      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fd fd8c 	bl	8001c24 <HAL_GetTick>
 800410c:	0002      	movs	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a16      	ldr	r2, [pc, #88]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d904      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004118:	2313      	movs	r3, #19
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2203      	movs	r2, #3
 800411e:	701a      	strb	r2, [r3, #0]
            break;
 8004120:	e004      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	2202      	movs	r2, #2
 8004128:	4013      	ands	r3, r2
 800412a:	d0ed      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800412c:	2313      	movs	r3, #19
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800413c:	4013      	ands	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004146:	430a      	orrs	r2, r1
 8004148:	65da      	str	r2, [r3, #92]	; 0x5c
 800414a:	e017      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414c:	2312      	movs	r3, #18
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2213      	movs	r2, #19
 8004152:	18ba      	adds	r2, r7, r2
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e010      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x170>
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	40021000 	.word	0x40021000
 8004160:	40007000 	.word	0x40007000
 8004164:	fffffcff 	.word	0xfffffcff
 8004168:	fffeffff 	.word	0xfffeffff
 800416c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	2312      	movs	r3, #18
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2213      	movs	r2, #19
 8004176:	18ba      	adds	r2, r7, r2
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800417c:	2311      	movs	r3, #17
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4b84      	ldr	r3, [pc, #528]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418a:	4b83      	ldr	r3, [pc, #524]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800418c:	4983      	ldr	r1, [pc, #524]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800418e:	400a      	ands	r2, r1
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2201      	movs	r2, #1
 8004198:	4013      	ands	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419c:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	2203      	movs	r2, #3
 80041a2:	4393      	bics	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4b7b      	ldr	r3, [pc, #492]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80041ac:	430a      	orrs	r2, r1
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2202      	movs	r2, #2
 80041b6:	4013      	ands	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ba:	4b77      	ldr	r3, [pc, #476]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	220c      	movs	r2, #12
 80041c0:	4393      	bics	r3, r2
 80041c2:	0019      	movs	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	4b73      	ldr	r3, [pc, #460]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80041ca:	430a      	orrs	r2, r1
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2210      	movs	r2, #16
 80041d4:	4013      	ands	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d8:	4b6f      	ldr	r3, [pc, #444]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	4a70      	ldr	r2, [pc, #448]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80041de:	4013      	ands	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80041e8:	430a      	orrs	r2, r1
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4013      	ands	r3, r2
 80041f6:	d009      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f8:	4b67      	ldr	r3, [pc, #412]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	4a69      	ldr	r2, [pc, #420]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80041fe:	4013      	ands	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	4b64      	ldr	r3, [pc, #400]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004208:	430a      	orrs	r2, r1
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4013      	ands	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004218:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	4a62      	ldr	r2, [pc, #392]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800421e:	4013      	ands	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	4b5c      	ldr	r3, [pc, #368]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004228:	430a      	orrs	r2, r1
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2220      	movs	r2, #32
 8004232:	4013      	ands	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004236:	4b58      	ldr	r3, [pc, #352]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	4a5c      	ldr	r2, [pc, #368]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	4b54      	ldr	r3, [pc, #336]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004246:	430a      	orrs	r2, r1
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	02db      	lsls	r3, r3, #11
 8004252:	4013      	ands	r3, r2
 8004254:	d016      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004256:	4b50      	ldr	r3, [pc, #320]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	4a55      	ldr	r2, [pc, #340]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800425c:	4013      	ands	r3, r2
 800425e:	0019      	movs	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	4b4c      	ldr	r3, [pc, #304]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004266:	430a      	orrs	r2, r1
 8004268:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	23c0      	movs	r3, #192	; 0xc0
 8004270:	051b      	lsls	r3, r3, #20
 8004272:	429a      	cmp	r2, r3
 8004274:	d106      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004276:	4b48      	ldr	r3, [pc, #288]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800427c:	2180      	movs	r1, #128	; 0x80
 800427e:	0449      	lsls	r1, r1, #17
 8004280:	430a      	orrs	r2, r1
 8004282:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	4013      	ands	r3, r2
 800428e:	d015      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004290:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	0899      	lsrs	r1, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800429c:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	05db      	lsls	r3, r3, #23
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d106      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	4b39      	ldr	r3, [pc, #228]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042b4:	2180      	movs	r1, #128	; 0x80
 80042b6:	0249      	lsls	r1, r1, #9
 80042b8:	430a      	orrs	r2, r1
 80042ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	4013      	ands	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	2240      	movs	r2, #64	; 0x40
 80042ce:	4393      	bics	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042d8:	430a      	orrs	r2, r1
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	039b      	lsls	r3, r3, #14
 80042e4:	4013      	ands	r3, r2
 80042e6:	d016      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	4a31      	ldr	r2, [pc, #196]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042f8:	430a      	orrs	r2, r1
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	03db      	lsls	r3, r3, #15
 8004304:	429a      	cmp	r2, r3
 8004306:	d106      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004308:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	4b22      	ldr	r3, [pc, #136]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	0449      	lsls	r1, r1, #17
 8004312:	430a      	orrs	r2, r1
 8004314:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	03db      	lsls	r3, r3, #15
 800431e:	4013      	ands	r3, r2
 8004320:	d016      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	4a24      	ldr	r2, [pc, #144]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004328:	4013      	ands	r3, r2
 800432a:	0019      	movs	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004332:	430a      	orrs	r2, r1
 8004334:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	045b      	lsls	r3, r3, #17
 800433e:	429a      	cmp	r2, r3
 8004340:	d106      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	0449      	lsls	r1, r1, #17
 800434c:	430a      	orrs	r2, r1
 800434e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4013      	ands	r3, r2
 800435a:	d016      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800435c:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004362:	4013      	ands	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800436c:	430a      	orrs	r2, r1
 800436e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	01db      	lsls	r3, r3, #7
 8004378:	429a      	cmp	r2, r3
 800437a:	d106      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004382:	2180      	movs	r1, #128	; 0x80
 8004384:	0249      	lsls	r1, r1, #9
 8004386:	430a      	orrs	r2, r1
 8004388:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800438a:	2312      	movs	r3, #18
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	781b      	ldrb	r3, [r3, #0]
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b006      	add	sp, #24
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	efffffff 	.word	0xefffffff
 80043a0:	fffff3ff 	.word	0xfffff3ff
 80043a4:	fff3ffff 	.word	0xfff3ffff
 80043a8:	ffcfffff 	.word	0xffcfffff
 80043ac:	ffffcfff 	.word	0xffffcfff
 80043b0:	f3ffffff 	.word	0xf3ffffff
 80043b4:	ffbfffff 	.word	0xffbfffff
 80043b8:	feffffff 	.word	0xfeffffff
 80043bc:	ffff3fff 	.word	0xffff3fff

080043c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e04a      	b.n	8004468 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	223d      	movs	r2, #61	; 0x3d
 80043d6:	5c9b      	ldrb	r3, [r3, r2]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	223c      	movs	r2, #60	; 0x3c
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7fc fe1d 	bl	8001028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	223d      	movs	r2, #61	; 0x3d
 80043f2:	2102      	movs	r1, #2
 80043f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	0019      	movs	r1, r3
 8004400:	0010      	movs	r0, r2
 8004402:	f000 fccd 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2248      	movs	r2, #72	; 0x48
 800440a:	2101      	movs	r1, #1
 800440c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	223e      	movs	r2, #62	; 0x3e
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	223f      	movs	r2, #63	; 0x3f
 800441a:	2101      	movs	r1, #1
 800441c:	5499      	strb	r1, [r3, r2]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2240      	movs	r2, #64	; 0x40
 8004422:	2101      	movs	r1, #1
 8004424:	5499      	strb	r1, [r3, r2]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2241      	movs	r2, #65	; 0x41
 800442a:	2101      	movs	r1, #1
 800442c:	5499      	strb	r1, [r3, r2]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2242      	movs	r2, #66	; 0x42
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2243      	movs	r2, #67	; 0x43
 800443a:	2101      	movs	r1, #1
 800443c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2244      	movs	r2, #68	; 0x44
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2245      	movs	r2, #69	; 0x45
 800444a:	2101      	movs	r1, #1
 800444c:	5499      	strb	r1, [r3, r2]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2246      	movs	r2, #70	; 0x46
 8004452:	2101      	movs	r1, #1
 8004454:	5499      	strb	r1, [r3, r2]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2247      	movs	r2, #71	; 0x47
 800445a:	2101      	movs	r1, #1
 800445c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	223d      	movs	r2, #61	; 0x3d
 8004462:	2101      	movs	r1, #1
 8004464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	001a      	movs	r2, r3
 800447e:	1cbb      	adds	r3, r7, #2
 8004480:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d108      	bne.n	800449a <HAL_TIM_PWM_Start_DMA+0x2a>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	223e      	movs	r2, #62	; 0x3e
 800448c:	5c9b      	ldrb	r3, [r3, r2]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3b02      	subs	r3, #2
 8004492:	425a      	negs	r2, r3
 8004494:	4153      	adcs	r3, r2
 8004496:	b2db      	uxtb	r3, r3
 8004498:	e037      	b.n	800450a <HAL_TIM_PWM_Start_DMA+0x9a>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d108      	bne.n	80044b2 <HAL_TIM_PWM_Start_DMA+0x42>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	223f      	movs	r2, #63	; 0x3f
 80044a4:	5c9b      	ldrb	r3, [r3, r2]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	3b02      	subs	r3, #2
 80044aa:	425a      	negs	r2, r3
 80044ac:	4153      	adcs	r3, r2
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e02b      	b.n	800450a <HAL_TIM_PWM_Start_DMA+0x9a>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d108      	bne.n	80044ca <HAL_TIM_PWM_Start_DMA+0x5a>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2240      	movs	r2, #64	; 0x40
 80044bc:	5c9b      	ldrb	r3, [r3, r2]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	3b02      	subs	r3, #2
 80044c2:	425a      	negs	r2, r3
 80044c4:	4153      	adcs	r3, r2
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e01f      	b.n	800450a <HAL_TIM_PWM_Start_DMA+0x9a>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d108      	bne.n	80044e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2241      	movs	r2, #65	; 0x41
 80044d4:	5c9b      	ldrb	r3, [r3, r2]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3b02      	subs	r3, #2
 80044da:	425a      	negs	r2, r3
 80044dc:	4153      	adcs	r3, r2
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e013      	b.n	800450a <HAL_TIM_PWM_Start_DMA+0x9a>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d108      	bne.n	80044fa <HAL_TIM_PWM_Start_DMA+0x8a>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2242      	movs	r2, #66	; 0x42
 80044ec:	5c9b      	ldrb	r3, [r3, r2]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3b02      	subs	r3, #2
 80044f2:	425a      	negs	r2, r3
 80044f4:	4153      	adcs	r3, r2
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e007      	b.n	800450a <HAL_TIM_PWM_Start_DMA+0x9a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2243      	movs	r2, #67	; 0x43
 80044fe:	5c9b      	ldrb	r3, [r3, r2]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	3b02      	subs	r3, #2
 8004504:	425a      	negs	r2, r3
 8004506:	4153      	adcs	r3, r2
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_TIM_PWM_Start_DMA+0xa2>
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	e17e      	b.n	8004810 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d108      	bne.n	800452a <HAL_TIM_PWM_Start_DMA+0xba>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	223e      	movs	r2, #62	; 0x3e
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	425a      	negs	r2, r3
 8004524:	4153      	adcs	r3, r2
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e037      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0x12a>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d108      	bne.n	8004542 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	223f      	movs	r2, #63	; 0x3f
 8004534:	5c9b      	ldrb	r3, [r3, r2]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	425a      	negs	r2, r3
 800453c:	4153      	adcs	r3, r2
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e02b      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0x12a>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d108      	bne.n	800455a <HAL_TIM_PWM_Start_DMA+0xea>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	5c9b      	ldrb	r3, [r3, r2]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	425a      	negs	r2, r3
 8004554:	4153      	adcs	r3, r2
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e01f      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0x12a>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d108      	bne.n	8004572 <HAL_TIM_PWM_Start_DMA+0x102>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2241      	movs	r2, #65	; 0x41
 8004564:	5c9b      	ldrb	r3, [r3, r2]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	425a      	negs	r2, r3
 800456c:	4153      	adcs	r3, r2
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e013      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0x12a>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b10      	cmp	r3, #16
 8004576:	d108      	bne.n	800458a <HAL_TIM_PWM_Start_DMA+0x11a>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2242      	movs	r2, #66	; 0x42
 800457c:	5c9b      	ldrb	r3, [r3, r2]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	425a      	negs	r2, r3
 8004584:	4153      	adcs	r3, r2
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e007      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0x12a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2243      	movs	r2, #67	; 0x43
 800458e:	5c9b      	ldrb	r3, [r3, r2]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	425a      	negs	r2, r3
 8004596:	4153      	adcs	r3, r2
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d035      	beq.n	800460a <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    if ((pData == NULL) && (Length > 0U))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_TIM_PWM_Start_DMA+0x140>
 80045a4:	1cbb      	adds	r3, r7, #2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_TIM_PWM_Start_DMA+0x140>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e12f      	b.n	8004810 <HAL_TIM_PWM_Start_DMA+0x3a0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <HAL_TIM_PWM_Start_DMA+0x150>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	223e      	movs	r2, #62	; 0x3e
 80045ba:	2102      	movs	r1, #2
 80045bc:	5499      	strb	r1, [r3, r2]
 80045be:	e026      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x19e>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d104      	bne.n	80045d0 <HAL_TIM_PWM_Start_DMA+0x160>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	223f      	movs	r2, #63	; 0x3f
 80045ca:	2102      	movs	r1, #2
 80045cc:	5499      	strb	r1, [r3, r2]
 80045ce:	e01e      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x19e>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d104      	bne.n	80045e0 <HAL_TIM_PWM_Start_DMA+0x170>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2240      	movs	r2, #64	; 0x40
 80045da:	2102      	movs	r1, #2
 80045dc:	5499      	strb	r1, [r3, r2]
 80045de:	e016      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x19e>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d104      	bne.n	80045f0 <HAL_TIM_PWM_Start_DMA+0x180>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2241      	movs	r2, #65	; 0x41
 80045ea:	2102      	movs	r1, #2
 80045ec:	5499      	strb	r1, [r3, r2]
 80045ee:	e00e      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x19e>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d104      	bne.n	8004600 <HAL_TIM_PWM_Start_DMA+0x190>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2242      	movs	r2, #66	; 0x42
 80045fa:	2102      	movs	r1, #2
 80045fc:	5499      	strb	r1, [r3, r2]
 80045fe:	e006      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x19e>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2243      	movs	r2, #67	; 0x43
 8004604:	2102      	movs	r1, #2
 8004606:	5499      	strb	r1, [r3, r2]
 8004608:	e001      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x19e>
    }
  }
  else
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e100      	b.n	8004810 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }

  switch (Channel)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d02e      	beq.n	8004672 <HAL_TIM_PWM_Start_DMA+0x202>
 8004614:	d802      	bhi.n	800461c <HAL_TIM_PWM_Start_DMA+0x1ac>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d006      	beq.n	8004628 <HAL_TIM_PWM_Start_DMA+0x1b8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 800461a:	e099      	b.n	8004750 <HAL_TIM_PWM_Start_DMA+0x2e0>
  switch (Channel)
 800461c:	2b08      	cmp	r3, #8
 800461e:	d04d      	beq.n	80046bc <HAL_TIM_PWM_Start_DMA+0x24c>
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d100      	bne.n	8004626 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8004624:	e06f      	b.n	8004706 <HAL_TIM_PWM_Start_DMA+0x296>
      break;
 8004626:	e093      	b.n	8004750 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	4a7a      	ldr	r2, [pc, #488]	; (8004818 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	4a79      	ldr	r2, [pc, #484]	; (800481c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	4a78      	ldr	r2, [pc, #480]	; (8004820 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800463e:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3334      	adds	r3, #52	; 0x34
 800464c:	001a      	movs	r2, r3
 800464e:	1cbb      	adds	r3, r7, #2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	f7fe fbad 	bl	8002db0 <HAL_DMA_Start_IT>
 8004656:	1e03      	subs	r3, r0, #0
 8004658:	d001      	beq.n	800465e <HAL_TIM_PWM_Start_DMA+0x1ee>
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0d8      	b.n	8004810 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	0089      	lsls	r1, r1, #2
 800466c:	430a      	orrs	r2, r1
 800466e:	60da      	str	r2, [r3, #12]
      break;
 8004670:	e06e      	b.n	8004750 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	4a68      	ldr	r2, [pc, #416]	; (8004818 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	4a67      	ldr	r2, [pc, #412]	; (800481c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	4a66      	ldr	r2, [pc, #408]	; (8004820 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8004688:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3338      	adds	r3, #56	; 0x38
 8004696:	001a      	movs	r2, r3
 8004698:	1cbb      	adds	r3, r7, #2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	f7fe fb88 	bl	8002db0 <HAL_DMA_Start_IT>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_PWM_Start_DMA+0x238>
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0b3      	b.n	8004810 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2180      	movs	r1, #128	; 0x80
 80046b4:	00c9      	lsls	r1, r1, #3
 80046b6:	430a      	orrs	r2, r1
 80046b8:	60da      	str	r2, [r3, #12]
      break;
 80046ba:	e049      	b.n	8004750 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4a55      	ldr	r2, [pc, #340]	; (8004818 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a54      	ldr	r2, [pc, #336]	; (800481c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4a53      	ldr	r2, [pc, #332]	; (8004820 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80046d2:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	333c      	adds	r3, #60	; 0x3c
 80046e0:	001a      	movs	r2, r3
 80046e2:	1cbb      	adds	r3, r7, #2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	f7fe fb63 	bl	8002db0 <HAL_DMA_Start_IT>
 80046ea:	1e03      	subs	r3, r0, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x282>
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e08e      	b.n	8004810 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	0109      	lsls	r1, r1, #4
 8004700:	430a      	orrs	r2, r1
 8004702:	60da      	str	r2, [r3, #12]
      break;
 8004704:	e024      	b.n	8004750 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4a43      	ldr	r2, [pc, #268]	; (8004818 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a42      	ldr	r2, [pc, #264]	; (800481c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a41      	ldr	r2, [pc, #260]	; (8004820 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800471c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3340      	adds	r3, #64	; 0x40
 800472a:	001a      	movs	r2, r3
 800472c:	1cbb      	adds	r3, r7, #2
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	f7fe fb3e 	bl	8002db0 <HAL_DMA_Start_IT>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <HAL_TIM_PWM_Start_DMA+0x2cc>
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e069      	b.n	8004810 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	0149      	lsls	r1, r1, #5
 800474a:	430a      	orrs	r2, r1
 800474c:	60da      	str	r2, [r3, #12]
      break;
 800474e:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	2201      	movs	r2, #1
 8004758:	0018      	movs	r0, r3
 800475a:	f000 fe65 	bl	8005428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a30      	ldr	r2, [pc, #192]	; (8004824 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_TIM_PWM_Start_DMA+0x316>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2e      	ldr	r2, [pc, #184]	; (8004828 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_TIM_PWM_Start_DMA+0x316>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2d      	ldr	r2, [pc, #180]	; (800482c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_TIM_PWM_Start_DMA+0x316>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <HAL_TIM_PWM_Start_DMA+0x31a>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_TIM_PWM_Start_DMA+0x31c>
 800478a:	2300      	movs	r3, #0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_TIM_PWM_Start_DMA+0x332>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	0209      	lsls	r1, r1, #8
 800479e:	430a      	orrs	r2, r1
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00f      	beq.n	80047cc <HAL_TIM_PWM_Start_DMA+0x35c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	05db      	lsls	r3, r3, #23
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d009      	beq.n	80047cc <HAL_TIM_PWM_Start_DMA+0x35c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_PWM_Start_DMA+0x35c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d116      	bne.n	80047fa <HAL_TIM_PWM_Start_DMA+0x38a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d016      	beq.n	800480c <HAL_TIM_PWM_Start_DMA+0x39c>
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	025b      	lsls	r3, r3, #9
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d011      	beq.n	800480c <HAL_TIM_PWM_Start_DMA+0x39c>
    {
      __HAL_TIM_ENABLE(htim);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2101      	movs	r1, #1
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f8:	e008      	b.n	800480c <HAL_TIM_PWM_Start_DMA+0x39c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2101      	movs	r1, #1
 8004806:	430a      	orrs	r2, r1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e000      	b.n	800480e <HAL_TIM_PWM_Start_DMA+0x39e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b006      	add	sp, #24
 8004816:	bd80      	pop	{r7, pc}
 8004818:	08004c8d 	.word	0x08004c8d
 800481c:	08004d37 	.word	0x08004d37
 8004820:	08004bf9 	.word	0x08004bf9
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800
 8004834:	40000400 	.word	0x40000400
 8004838:	00010007 	.word	0x00010007

0800483c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d016      	beq.n	800487a <HAL_TIM_PWM_Stop_DMA+0x3e>
 800484c:	d802      	bhi.n	8004854 <HAL_TIM_PWM_Stop_DMA+0x18>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_TIM_PWM_Stop_DMA+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 8004852:	e03c      	b.n	80048ce <HAL_TIM_PWM_Stop_DMA+0x92>
  switch (Channel)
 8004854:	2b08      	cmp	r3, #8
 8004856:	d01e      	beq.n	8004896 <HAL_TIM_PWM_Stop_DMA+0x5a>
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d02a      	beq.n	80048b2 <HAL_TIM_PWM_Stop_DMA+0x76>
      break;
 800485c:	e037      	b.n	80048ce <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4955      	ldr	r1, [pc, #340]	; (80049c0 <HAL_TIM_PWM_Stop_DMA+0x184>)
 800486a:	400a      	ands	r2, r1
 800486c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	0018      	movs	r0, r3
 8004874:	f7fe fb84 	bl	8002f80 <HAL_DMA_Abort_IT>
      break;
 8004878:	e029      	b.n	80048ce <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	494f      	ldr	r1, [pc, #316]	; (80049c4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004886:	400a      	ands	r2, r1
 8004888:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	0018      	movs	r0, r3
 8004890:	f7fe fb76 	bl	8002f80 <HAL_DMA_Abort_IT>
      break;
 8004894:	e01b      	b.n	80048ce <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4949      	ldr	r1, [pc, #292]	; (80049c8 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	0018      	movs	r0, r3
 80048ac:	f7fe fb68 	bl	8002f80 <HAL_DMA_Abort_IT>
      break;
 80048b0:	e00d      	b.n	80048ce <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4943      	ldr	r1, [pc, #268]	; (80049cc <HAL_TIM_PWM_Stop_DMA+0x190>)
 80048be:	400a      	ands	r2, r1
 80048c0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fe fb5a 	bl	8002f80 <HAL_DMA_Abort_IT>
      break;
 80048cc:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	2200      	movs	r2, #0
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 fda6 	bl	8005428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3b      	ldr	r2, [pc, #236]	; (80049d0 <HAL_TIM_PWM_Stop_DMA+0x194>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3a      	ldr	r2, [pc, #232]	; (80049d4 <HAL_TIM_PWM_Stop_DMA+0x198>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a38      	ldr	r2, [pc, #224]	; (80049d8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a37      	ldr	r2, [pc, #220]	; (80049dc <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_TIM_PWM_Stop_DMA+0xcc>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_TIM_PWM_Stop_DMA+0xce>
 8004908:	2300      	movs	r3, #0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d013      	beq.n	8004936 <HAL_TIM_PWM_Stop_DMA+0xfa>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8004916:	4013      	ands	r3, r2
 8004918:	d10d      	bne.n	8004936 <HAL_TIM_PWM_Stop_DMA+0xfa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8004922:	4013      	ands	r3, r2
 8004924:	d107      	bne.n	8004936 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	492d      	ldr	r1, [pc, #180]	; (80049e8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8004932:	400a      	ands	r2, r1
 8004934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 800493e:	4013      	ands	r3, r2
 8004940:	d10d      	bne.n	800495e <HAL_TIM_PWM_Stop_DMA+0x122>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 800494a:	4013      	ands	r3, r2
 800494c:	d107      	bne.n	800495e <HAL_TIM_PWM_Stop_DMA+0x122>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	438a      	bics	r2, r1
 800495c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Stop_DMA+0x132>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	223e      	movs	r2, #62	; 0x3e
 8004968:	2101      	movs	r1, #1
 800496a:	5499      	strb	r1, [r3, r2]
 800496c:	e023      	b.n	80049b6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Stop_DMA+0x142>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	223f      	movs	r2, #63	; 0x3f
 8004978:	2101      	movs	r1, #1
 800497a:	5499      	strb	r1, [r3, r2]
 800497c:	e01b      	b.n	80049b6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d104      	bne.n	800498e <HAL_TIM_PWM_Stop_DMA+0x152>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2240      	movs	r2, #64	; 0x40
 8004988:	2101      	movs	r1, #1
 800498a:	5499      	strb	r1, [r3, r2]
 800498c:	e013      	b.n	80049b6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d104      	bne.n	800499e <HAL_TIM_PWM_Stop_DMA+0x162>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2241      	movs	r2, #65	; 0x41
 8004998:	2101      	movs	r1, #1
 800499a:	5499      	strb	r1, [r3, r2]
 800499c:	e00b      	b.n	80049b6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_PWM_Stop_DMA+0x172>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2242      	movs	r2, #66	; 0x42
 80049a8:	2101      	movs	r1, #1
 80049aa:	5499      	strb	r1, [r3, r2]
 80049ac:	e003      	b.n	80049b6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2243      	movs	r2, #67	; 0x43
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	fffffdff 	.word	0xfffffdff
 80049c4:	fffffbff 	.word	0xfffffbff
 80049c8:	fffff7ff 	.word	0xfffff7ff
 80049cc:	ffffefff 	.word	0xffffefff
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800
 80049e0:	00001111 	.word	0x00001111
 80049e4:	00000444 	.word	0x00000444
 80049e8:	ffff7fff 	.word	0xffff7fff

080049ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	223c      	movs	r2, #60	; 0x3c
 80049fc:	5c9b      	ldrb	r3, [r3, r2]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0df      	b.n	8004bc6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	223c      	movs	r2, #60	; 0x3c
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b14      	cmp	r3, #20
 8004a12:	d900      	bls.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004a14:	e0d1      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	009a      	lsls	r2, r3, #2
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8004a1c:	18d3      	adds	r3, r2, r3
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0011      	movs	r1, r2
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 fa38 	bl	8004ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2108      	movs	r1, #8
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6999      	ldr	r1, [r3, #24]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	619a      	str	r2, [r3, #24]
      break;
 8004a62:	e0ab      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 faa1 	bl	8004fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	0109      	lsls	r1, r1, #4
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4951      	ldr	r1, [pc, #324]	; (8004bd4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]
      break;
 8004aa8:	e088      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	0011      	movs	r1, r2
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fb02 	bl	80050bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2108      	movs	r1, #8
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69d9      	ldr	r1, [r3, #28]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	61da      	str	r2, [r3, #28]
      break;
 8004aea:	e067      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	0011      	movs	r1, r2
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 fb69 	bl	80051cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2180      	movs	r1, #128	; 0x80
 8004b06:	0109      	lsls	r1, r1, #4
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	492f      	ldr	r1, [pc, #188]	; (8004bd4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69d9      	ldr	r1, [r3, #28]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	61da      	str	r2, [r3, #28]
      break;
 8004b30:	e044      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 fbb0 	bl	80052a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2108      	movs	r1, #8
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b72:	e023      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fbef 	bl	8005360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	0109      	lsls	r1, r1, #4
 8004b90:	430a      	orrs	r2, r1
 8004b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	490d      	ldr	r1, [pc, #52]	; (8004bd4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bb8:	e000      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8004bba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	223c      	movs	r2, #60	; 0x3c
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b004      	add	sp, #16
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	08007724 	.word	0x08007724
 8004bd4:	fffffbff 	.word	0xfffffbff

08004bd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b002      	add	sp, #8
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d107      	bne.n	8004c20 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	223e      	movs	r2, #62	; 0x3e
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]
 8004c1e:	e02a      	b.n	8004c76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d107      	bne.n	8004c3a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	223f      	movs	r2, #63	; 0x3f
 8004c34:	2101      	movs	r1, #1
 8004c36:	5499      	strb	r1, [r3, r2]
 8004c38:	e01d      	b.n	8004c76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d107      	bne.n	8004c54 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2204      	movs	r2, #4
 8004c48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2240      	movs	r2, #64	; 0x40
 8004c4e:	2101      	movs	r1, #1
 8004c50:	5499      	strb	r1, [r3, r2]
 8004c52:	e010      	b.n	8004c76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d107      	bne.n	8004c6e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2241      	movs	r2, #65	; 0x41
 8004c68:	2101      	movs	r1, #1
 8004c6a:	5499      	strb	r1, [r3, r2]
 8004c6c:	e003      	b.n	8004c76 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	223d      	movs	r2, #61	; 0x3d
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7ff ffb5 	bl	8004be8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b004      	add	sp, #16
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d10b      	bne.n	8004cbc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d136      	bne.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	223e      	movs	r2, #62	; 0x3e
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	5499      	strb	r1, [r3, r2]
 8004cba:	e031      	b.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10b      	bne.n	8004cde <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d125      	bne.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	223f      	movs	r2, #63	; 0x3f
 8004cd8:	2101      	movs	r1, #1
 8004cda:	5499      	strb	r1, [r3, r2]
 8004cdc:	e020      	b.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d10b      	bne.n	8004d00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2204      	movs	r2, #4
 8004cec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d114      	bne.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	5499      	strb	r1, [r3, r2]
 8004cfe:	e00f      	b.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10a      	bne.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2241      	movs	r2, #65	; 0x41
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7fb fc72 	bl	800060c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	771a      	strb	r2, [r3, #28]
}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d103      	bne.n	8004d56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]
 8004d54:	e019      	b.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d103      	bne.n	8004d68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2202      	movs	r2, #2
 8004d64:	771a      	strb	r2, [r3, #28]
 8004d66:	e010      	b.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d103      	bne.n	8004d7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2204      	movs	r2, #4
 8004d76:	771a      	strb	r2, [r3, #28]
 8004d78:	e007      	b.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d102      	bne.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2208      	movs	r2, #8
 8004d88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7ff ff23 	bl	8004bd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b004      	add	sp, #16
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <TIM_Base_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d008      	beq.n	8004dca <TIM_Base_SetConfig+0x2a>
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	05db      	lsls	r3, r3, #23
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d003      	beq.n	8004dca <TIM_Base_SetConfig+0x2a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a30      	ldr	r2, [pc, #192]	; (8004e88 <TIM_Base_SetConfig+0xe8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2270      	movs	r2, #112	; 0x70
 8004dce:	4393      	bics	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <TIM_Base_SetConfig+0xe4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d018      	beq.n	8004e16 <TIM_Base_SetConfig+0x76>
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	05db      	lsls	r3, r3, #23
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d013      	beq.n	8004e16 <TIM_Base_SetConfig+0x76>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a25      	ldr	r2, [pc, #148]	; (8004e88 <TIM_Base_SetConfig+0xe8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00f      	beq.n	8004e16 <TIM_Base_SetConfig+0x76>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a24      	ldr	r2, [pc, #144]	; (8004e8c <TIM_Base_SetConfig+0xec>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_Base_SetConfig+0x76>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <TIM_Base_SetConfig+0xf0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <TIM_Base_SetConfig+0x76>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <TIM_Base_SetConfig+0xf4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_Base_SetConfig+0x76>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <TIM_Base_SetConfig+0xf8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d108      	bne.n	8004e28 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <TIM_Base_SetConfig+0xfc>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2280      	movs	r2, #128	; 0x80
 8004e2c:	4393      	bics	r3, r2
 8004e2e:	001a      	movs	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <TIM_Base_SetConfig+0xe4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0xce>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a0d      	ldr	r2, [pc, #52]	; (8004e90 <TIM_Base_SetConfig+0xf0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0xce>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a0c      	ldr	r2, [pc, #48]	; (8004e94 <TIM_Base_SetConfig+0xf4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0xce>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a0b      	ldr	r2, [pc, #44]	; (8004e98 <TIM_Base_SetConfig+0xf8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d103      	bne.n	8004e76 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	615a      	str	r2, [r3, #20]
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b004      	add	sp, #16
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40002000 	.word	0x40002000
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800
 8004e9c:	fffffcff 	.word	0xfffffcff

08004ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	4393      	bics	r3, r2
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a32      	ldr	r2, [pc, #200]	; (8004f98 <TIM_OC1_SetConfig+0xf8>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	4393      	bics	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	4393      	bics	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a28      	ldr	r2, [pc, #160]	; (8004f9c <TIM_OC1_SetConfig+0xfc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_OC1_SetConfig+0x76>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a27      	ldr	r2, [pc, #156]	; (8004fa0 <TIM_OC1_SetConfig+0x100>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_OC1_SetConfig+0x76>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <TIM_OC1_SetConfig+0x104>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_OC1_SetConfig+0x76>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <TIM_OC1_SetConfig+0x108>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d10c      	bne.n	8004f30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	4393      	bics	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	4393      	bics	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <TIM_OC1_SetConfig+0xfc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <TIM_OC1_SetConfig+0xb0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC1_SetConfig+0x100>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_OC1_SetConfig+0xb0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <TIM_OC1_SetConfig+0x104>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC1_SetConfig+0xb0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC1_SetConfig+0x108>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d111      	bne.n	8004f74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <TIM_OC1_SetConfig+0x10c>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <TIM_OC1_SetConfig+0x110>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b006      	add	sp, #24
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	fffeff8f 	.word	0xfffeff8f
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	fffffeff 	.word	0xfffffeff
 8004fb0:	fffffdff 	.word	0xfffffdff

08004fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	4393      	bics	r3, r2
 8004fc6:	001a      	movs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	; (800509c <TIM_OC2_SetConfig+0xe8>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	; (80050a0 <TIM_OC2_SetConfig+0xec>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	4393      	bics	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <TIM_OC2_SetConfig+0xf0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10d      	bne.n	8005032 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	4393      	bics	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2240      	movs	r2, #64	; 0x40
 800502e:	4393      	bics	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <TIM_OC2_SetConfig+0xf0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_OC2_SetConfig+0x9e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <TIM_OC2_SetConfig+0xf4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_OC2_SetConfig+0x9e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <TIM_OC2_SetConfig+0xf8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC2_SetConfig+0x9e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <TIM_OC2_SetConfig+0xfc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d113      	bne.n	800507a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <TIM_OC2_SetConfig+0x100>)
 8005056:	4013      	ands	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <TIM_OC2_SetConfig+0x104>)
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	b006      	add	sp, #24
 800509a:	bd80      	pop	{r7, pc}
 800509c:	feff8fff 	.word	0xfeff8fff
 80050a0:	fffffcff 	.word	0xfffffcff
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800
 80050b4:	fffffbff 	.word	0xfffffbff
 80050b8:	fffff7ff 	.word	0xfffff7ff

080050bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	4a35      	ldr	r2, [pc, #212]	; (80051a0 <TIM_OC3_SetConfig+0xe4>)
 80050cc:	401a      	ands	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4a2f      	ldr	r2, [pc, #188]	; (80051a4 <TIM_OC3_SetConfig+0xe8>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2203      	movs	r2, #3
 80050f0:	4393      	bics	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <TIM_OC3_SetConfig+0xec>)
 8005102:	4013      	ands	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a25      	ldr	r2, [pc, #148]	; (80051ac <TIM_OC3_SetConfig+0xf0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <TIM_OC3_SetConfig+0xf4>)
 800511e:	4013      	ands	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <TIM_OC3_SetConfig+0xf8>)
 8005132:	4013      	ands	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <TIM_OC3_SetConfig+0xf0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_OC3_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <TIM_OC3_SetConfig+0xfc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_OC3_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1c      	ldr	r2, [pc, #112]	; (80051bc <TIM_OC3_SetConfig+0x100>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_OC3_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <TIM_OC3_SetConfig+0x104>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d113      	bne.n	800517e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <TIM_OC3_SetConfig+0x108>)
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <TIM_OC3_SetConfig+0x10c>)
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b006      	add	sp, #24
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	fffffeff 	.word	0xfffffeff
 80051a4:	fffeff8f 	.word	0xfffeff8f
 80051a8:	fffffdff 	.word	0xfffffdff
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	fffff7ff 	.word	0xfffff7ff
 80051b4:	fffffbff 	.word	0xfffffbff
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800
 80051c4:	ffffefff 	.word	0xffffefff
 80051c8:	ffffdfff 	.word	0xffffdfff

080051cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a28      	ldr	r2, [pc, #160]	; (800527c <TIM_OC4_SetConfig+0xb0>)
 80051dc:	401a      	ands	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a22      	ldr	r2, [pc, #136]	; (8005280 <TIM_OC4_SetConfig+0xb4>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a21      	ldr	r2, [pc, #132]	; (8005284 <TIM_OC4_SetConfig+0xb8>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <TIM_OC4_SetConfig+0xbc>)
 8005214:	4013      	ands	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	031b      	lsls	r3, r3, #12
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a19      	ldr	r2, [pc, #100]	; (800528c <TIM_OC4_SetConfig+0xc0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00b      	beq.n	8005244 <TIM_OC4_SetConfig+0x78>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <TIM_OC4_SetConfig+0xc4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_OC4_SetConfig+0x78>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <TIM_OC4_SetConfig+0xc8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC4_SetConfig+0x78>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <TIM_OC4_SetConfig+0xcc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d109      	bne.n	8005258 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <TIM_OC4_SetConfig+0xd0>)
 8005248:	4013      	ands	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	46bd      	mov	sp, r7
 8005276:	b006      	add	sp, #24
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	ffffefff 	.word	0xffffefff
 8005280:	feff8fff 	.word	0xfeff8fff
 8005284:	fffffcff 	.word	0xfffffcff
 8005288:	ffffdfff 	.word	0xffffdfff
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800
 800529c:	ffffbfff 	.word	0xffffbfff

080052a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4a25      	ldr	r2, [pc, #148]	; (8005344 <TIM_OC5_SetConfig+0xa4>)
 80052b0:	401a      	ands	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4a1f      	ldr	r2, [pc, #124]	; (8005348 <TIM_OC5_SetConfig+0xa8>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <TIM_OC5_SetConfig+0xac>)
 80052de:	4013      	ands	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a17      	ldr	r2, [pc, #92]	; (8005350 <TIM_OC5_SetConfig+0xb0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_OC5_SetConfig+0x6e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <TIM_OC5_SetConfig+0xb4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_OC5_SetConfig+0x6e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <TIM_OC5_SetConfig+0xb8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC5_SetConfig+0x6e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a14      	ldr	r2, [pc, #80]	; (800535c <TIM_OC5_SetConfig+0xbc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d109      	bne.n	8005322 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <TIM_OC5_SetConfig+0xa4>)
 8005312:	4013      	ands	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	621a      	str	r2, [r3, #32]
}
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	46bd      	mov	sp, r7
 8005340:	b006      	add	sp, #24
 8005342:	bd80      	pop	{r7, pc}
 8005344:	fffeffff 	.word	0xfffeffff
 8005348:	fffeff8f 	.word	0xfffeff8f
 800534c:	fffdffff 	.word	0xfffdffff
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800

08005360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a26      	ldr	r2, [pc, #152]	; (8005408 <TIM_OC6_SetConfig+0xa8>)
 8005370:	401a      	ands	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a20      	ldr	r2, [pc, #128]	; (800540c <TIM_OC6_SetConfig+0xac>)
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <TIM_OC6_SetConfig+0xb0>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	051b      	lsls	r3, r3, #20
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <TIM_OC6_SetConfig+0xb4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <TIM_OC6_SetConfig+0x70>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <TIM_OC6_SetConfig+0xb8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d007      	beq.n	80053d0 <TIM_OC6_SetConfig+0x70>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a16      	ldr	r2, [pc, #88]	; (800541c <TIM_OC6_SetConfig+0xbc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC6_SetConfig+0x70>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a15      	ldr	r2, [pc, #84]	; (8005420 <TIM_OC6_SetConfig+0xc0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d109      	bne.n	80053e4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4a14      	ldr	r2, [pc, #80]	; (8005424 <TIM_OC6_SetConfig+0xc4>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b006      	add	sp, #24
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	ffefffff 	.word	0xffefffff
 800540c:	feff8fff 	.word	0xfeff8fff
 8005410:	ffdfffff 	.word	0xffdfffff
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800
 8005424:	fffbffff 	.word	0xfffbffff

08005428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	221f      	movs	r2, #31
 8005438:	4013      	ands	r3, r2
 800543a:	2201      	movs	r2, #1
 800543c:	409a      	lsls	r2, r3
 800543e:	0013      	movs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	43d2      	mvns	r2, r2
 800544a:	401a      	ands	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	211f      	movs	r1, #31
 8005458:	400b      	ands	r3, r1
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4099      	lsls	r1, r3
 800545e:	000b      	movs	r3, r1
 8005460:	431a      	orrs	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	46bd      	mov	sp, r7
 800546a:	b006      	add	sp, #24
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	223c      	movs	r2, #60	; 0x3c
 800547e:	5c9b      	ldrb	r3, [r3, r2]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e055      	b.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	223c      	movs	r2, #60	; 0x3c
 800548c:	2101      	movs	r1, #1
 800548e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	223d      	movs	r2, #61	; 0x3d
 8005494:	2102      	movs	r1, #2
 8005496:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a23      	ldr	r2, [pc, #140]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2270      	movs	r2, #112	; 0x70
 80054c8:	4393      	bics	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	05db      	lsls	r3, r3, #23
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d009      	beq.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a12      	ldr	r2, [pc, #72]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a11      	ldr	r2, [pc, #68]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10c      	bne.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	4393      	bics	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	4313      	orrs	r3, r2
 8005518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	223d      	movs	r2, #61	; 0x3d
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	223c      	movs	r2, #60	; 0x3c
 800552e:	2100      	movs	r1, #0
 8005530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b004      	add	sp, #16
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40012c00 	.word	0x40012c00
 8005540:	ff0fffff 	.word	0xff0fffff
 8005544:	40000400 	.word	0x40000400
 8005548:	40014000 	.word	0x40014000

0800554c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	223c      	movs	r2, #60	; 0x3c
 800555e:	5c9b      	ldrb	r3, [r3, r2]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005564:	2302      	movs	r3, #2
 8005566:	e079      	b.n	800565c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	223c      	movs	r2, #60	; 0x3c
 800556c:	2101      	movs	r1, #1
 800556e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	22ff      	movs	r2, #255	; 0xff
 8005574:	4393      	bics	r3, r2
 8005576:	001a      	movs	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a38      	ldr	r2, [pc, #224]	; (8005664 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005584:	401a      	ands	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a35      	ldr	r2, [pc, #212]	; (8005668 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005592:	401a      	ands	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a33      	ldr	r2, [pc, #204]	; (800566c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80055a0:	401a      	ands	r2, r3
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a30      	ldr	r2, [pc, #192]	; (8005670 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80055ae:	401a      	ands	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80055bc:	401a      	ands	r2, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a2b      	ldr	r2, [pc, #172]	; (8005678 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80055ca:	401a      	ands	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a29      	ldr	r2, [pc, #164]	; (800567c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80055d8:	401a      	ands	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a25      	ldr	r2, [pc, #148]	; (8005680 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d106      	bne.n	80055fc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4a24      	ldr	r2, [pc, #144]	; (8005684 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80055f2:	401a      	ands	r2, r3
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d121      	bne.n	800564a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800560a:	401a      	ands	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	051b      	lsls	r3, r3, #20
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800561a:	401a      	ands	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005628:	401a      	ands	r2, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a12      	ldr	r2, [pc, #72]	; (8005680 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d106      	bne.n	800564a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005640:	401a      	ands	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	223c      	movs	r2, #60	; 0x3c
 8005656:	2100      	movs	r1, #0
 8005658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	0018      	movs	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	b004      	add	sp, #16
 8005662:	bd80      	pop	{r7, pc}
 8005664:	fffffcff 	.word	0xfffffcff
 8005668:	fffffbff 	.word	0xfffffbff
 800566c:	fffff7ff 	.word	0xfffff7ff
 8005670:	ffffefff 	.word	0xffffefff
 8005674:	ffffdfff 	.word	0xffffdfff
 8005678:	ffffbfff 	.word	0xffffbfff
 800567c:	fff0ffff 	.word	0xfff0ffff
 8005680:	40012c00 	.word	0x40012c00
 8005684:	efffffff 	.word	0xefffffff
 8005688:	ff0fffff 	.word	0xff0fffff
 800568c:	feffffff 	.word	0xfeffffff
 8005690:	fdffffff 	.word	0xfdffffff
 8005694:	dfffffff 	.word	0xdfffffff

08005698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e046      	b.n	8005738 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2284      	movs	r2, #132	; 0x84
 80056ae:	589b      	ldr	r3, [r3, r2]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d107      	bne.n	80056c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	2100      	movs	r1, #0
 80056ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	0018      	movs	r0, r3
 80056c0:	f7fb fd3e 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2284      	movs	r2, #132	; 0x84
 80056c8:	2124      	movs	r1, #36	; 0x24
 80056ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2101      	movs	r1, #1
 80056d8:	438a      	bics	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	0018      	movs	r0, r3
 80056e0:	f000 fd4a 	bl	8006178 <UART_SetConfig>
 80056e4:	0003      	movs	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e024      	b.n	8005738 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f001 f81d 	bl	8006738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	490d      	ldr	r1, [pc, #52]	; (8005740 <HAL_UART_Init+0xa8>)
 800570a:	400a      	ands	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	212a      	movs	r1, #42	; 0x2a
 800571a:	438a      	bics	r2, r1
 800571c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f001 f8b5 	bl	80068a0 <UART_CheckIdleState>
 8005736:	0003      	movs	r3, r0
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b002      	add	sp, #8
 800573e:	bd80      	pop	{r7, pc}
 8005740:	ffffb7ff 	.word	0xffffb7ff

08005744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	1dbb      	adds	r3, r7, #6
 8005752:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2284      	movs	r2, #132	; 0x84
 8005758:	589b      	ldr	r3, [r3, r2]
 800575a:	2b20      	cmp	r3, #32
 800575c:	d000      	beq.n	8005760 <HAL_UART_Transmit+0x1c>
 800575e:	e097      	b.n	8005890 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_UART_Transmit+0x2a>
 8005766:	1dbb      	adds	r3, r7, #6
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e08f      	b.n	8005892 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	015b      	lsls	r3, r3, #5
 800577a:	429a      	cmp	r2, r3
 800577c:	d109      	bne.n	8005792 <HAL_UART_Transmit+0x4e>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2201      	movs	r2, #1
 800578a:	4013      	ands	r3, r2
 800578c:	d001      	beq.n	8005792 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e07f      	b.n	8005892 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2280      	movs	r2, #128	; 0x80
 8005796:	5c9b      	ldrb	r3, [r3, r2]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_UART_Transmit+0x5c>
 800579c:	2302      	movs	r3, #2
 800579e:	e078      	b.n	8005892 <HAL_UART_Transmit+0x14e>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2280      	movs	r2, #128	; 0x80
 80057a4:	2101      	movs	r1, #1
 80057a6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	228c      	movs	r2, #140	; 0x8c
 80057ac:	2100      	movs	r1, #0
 80057ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2284      	movs	r2, #132	; 0x84
 80057b4:	2121      	movs	r1, #33	; 0x21
 80057b6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057b8:	f7fc fa34 	bl	8001c24 <HAL_GetTick>
 80057bc:	0003      	movs	r3, r0
 80057be:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1dba      	adds	r2, r7, #6
 80057c4:	2154      	movs	r1, #84	; 0x54
 80057c6:	8812      	ldrh	r2, [r2, #0]
 80057c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1dba      	adds	r2, r7, #6
 80057ce:	2156      	movs	r1, #86	; 0x56
 80057d0:	8812      	ldrh	r2, [r2, #0]
 80057d2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	015b      	lsls	r3, r3, #5
 80057dc:	429a      	cmp	r2, r3
 80057de:	d108      	bne.n	80057f2 <HAL_UART_Transmit+0xae>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e003      	b.n	80057fa <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2280      	movs	r2, #128	; 0x80
 80057fe:	2100      	movs	r1, #0
 8005800:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005802:	e02c      	b.n	800585e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	0013      	movs	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	f001 f891 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 8005816:	1e03      	subs	r3, r0, #0
 8005818:	d001      	beq.n	800581e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e039      	b.n	8005892 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	001a      	movs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	05d2      	lsls	r2, r2, #23
 8005830:	0dd2      	lsrs	r2, r2, #23
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3302      	adds	r3, #2
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e007      	b.n	800584c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2256      	movs	r2, #86	; 0x56
 8005850:	5a9b      	ldrh	r3, [r3, r2]
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b299      	uxth	r1, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2256      	movs	r2, #86	; 0x56
 800585c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2256      	movs	r2, #86	; 0x56
 8005862:	5a9b      	ldrh	r3, [r3, r2]
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1cc      	bne.n	8005804 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	0013      	movs	r3, r2
 8005874:	2200      	movs	r2, #0
 8005876:	2140      	movs	r1, #64	; 0x40
 8005878:	f001 f85e 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 800587c:	1e03      	subs	r3, r0, #0
 800587e:	d001      	beq.n	8005884 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e006      	b.n	8005892 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2284      	movs	r2, #132	; 0x84
 8005888:	2120      	movs	r1, #32
 800588a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	0018      	movs	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	b008      	add	sp, #32
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	1dbb      	adds	r3, r7, #6
 80058aa:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2288      	movs	r2, #136	; 0x88
 80058b0:	589b      	ldr	r3, [r3, r2]
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d000      	beq.n	80058b8 <HAL_UART_Receive+0x1c>
 80058b6:	e0db      	b.n	8005a70 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_Receive+0x2a>
 80058be:	1dbb      	adds	r3, r7, #6
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0d3      	b.n	8005a72 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	015b      	lsls	r3, r3, #5
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d109      	bne.n	80058ea <HAL_UART_Receive+0x4e>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2201      	movs	r2, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	d001      	beq.n	80058ea <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0c3      	b.n	8005a72 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	5c9b      	ldrb	r3, [r3, r2]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Receive+0x5c>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e0bc      	b.n	8005a72 <HAL_UART_Receive+0x1d6>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	2101      	movs	r1, #1
 80058fe:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	228c      	movs	r2, #140	; 0x8c
 8005904:	2100      	movs	r1, #0
 8005906:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2288      	movs	r2, #136	; 0x88
 800590c:	2122      	movs	r1, #34	; 0x22
 800590e:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005916:	f7fc f985 	bl	8001c24 <HAL_GetTick>
 800591a:	0003      	movs	r3, r0
 800591c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1dba      	adds	r2, r7, #6
 8005922:	215c      	movs	r1, #92	; 0x5c
 8005924:	8812      	ldrh	r2, [r2, #0]
 8005926:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	1dba      	adds	r2, r7, #6
 800592c:	215e      	movs	r1, #94	; 0x5e
 800592e:	8812      	ldrh	r2, [r2, #0]
 8005930:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	015b      	lsls	r3, r3, #5
 800593a:	429a      	cmp	r2, r3
 800593c:	d10d      	bne.n	800595a <HAL_UART_Receive+0xbe>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <HAL_UART_Receive+0xb4>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2260      	movs	r2, #96	; 0x60
 800594a:	494c      	ldr	r1, [pc, #304]	; (8005a7c <HAL_UART_Receive+0x1e0>)
 800594c:	5299      	strh	r1, [r3, r2]
 800594e:	e02e      	b.n	80059ae <HAL_UART_Receive+0x112>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2260      	movs	r2, #96	; 0x60
 8005954:	21ff      	movs	r1, #255	; 0xff
 8005956:	5299      	strh	r1, [r3, r2]
 8005958:	e029      	b.n	80059ae <HAL_UART_Receive+0x112>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10d      	bne.n	800597e <HAL_UART_Receive+0xe2>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_UART_Receive+0xd8>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2260      	movs	r2, #96	; 0x60
 800596e:	21ff      	movs	r1, #255	; 0xff
 8005970:	5299      	strh	r1, [r3, r2]
 8005972:	e01c      	b.n	80059ae <HAL_UART_Receive+0x112>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2260      	movs	r2, #96	; 0x60
 8005978:	217f      	movs	r1, #127	; 0x7f
 800597a:	5299      	strh	r1, [r3, r2]
 800597c:	e017      	b.n	80059ae <HAL_UART_Receive+0x112>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	055b      	lsls	r3, r3, #21
 8005986:	429a      	cmp	r2, r3
 8005988:	d10d      	bne.n	80059a6 <HAL_UART_Receive+0x10a>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <HAL_UART_Receive+0x100>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2260      	movs	r2, #96	; 0x60
 8005996:	217f      	movs	r1, #127	; 0x7f
 8005998:	5299      	strh	r1, [r3, r2]
 800599a:	e008      	b.n	80059ae <HAL_UART_Receive+0x112>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2260      	movs	r2, #96	; 0x60
 80059a0:	213f      	movs	r1, #63	; 0x3f
 80059a2:	5299      	strh	r1, [r3, r2]
 80059a4:	e003      	b.n	80059ae <HAL_UART_Receive+0x112>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2260      	movs	r2, #96	; 0x60
 80059aa:	2100      	movs	r1, #0
 80059ac:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80059ae:	2312      	movs	r3, #18
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	2160      	movs	r1, #96	; 0x60
 80059b6:	5a52      	ldrh	r2, [r2, r1]
 80059b8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	015b      	lsls	r3, r3, #5
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d108      	bne.n	80059d8 <HAL_UART_Receive+0x13c>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e003      	b.n	80059e0 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	2100      	movs	r1, #0
 80059e6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80059e8:	e036      	b.n	8005a58 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	0013      	movs	r3, r2
 80059f4:	2200      	movs	r2, #0
 80059f6:	2120      	movs	r1, #32
 80059f8:	f000 ff9e 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 80059fc:	1e03      	subs	r3, r0, #0
 80059fe:	d001      	beq.n	8005a04 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e036      	b.n	8005a72 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10e      	bne.n	8005a28 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2212      	movs	r2, #18
 8005a14:	18ba      	adds	r2, r7, r2
 8005a16:	8812      	ldrh	r2, [r2, #0]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	3302      	adds	r3, #2
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	e00e      	b.n	8005a46 <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2212      	movs	r2, #18
 8005a32:	18ba      	adds	r2, r7, r2
 8005a34:	8812      	ldrh	r2, [r2, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	4013      	ands	r3, r2
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	225e      	movs	r2, #94	; 0x5e
 8005a4a:	5a9b      	ldrh	r3, [r3, r2]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b299      	uxth	r1, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	225e      	movs	r2, #94	; 0x5e
 8005a56:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	225e      	movs	r2, #94	; 0x5e
 8005a5c:	5a9b      	ldrh	r3, [r3, r2]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1c2      	bne.n	80059ea <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2288      	movs	r2, #136	; 0x88
 8005a68:	2120      	movs	r1, #32
 8005a6a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
  }
}
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b008      	add	sp, #32
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	000001ff 	.word	0x000001ff

08005a80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	1dbb      	adds	r3, r7, #6
 8005a8c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2288      	movs	r2, #136	; 0x88
 8005a92:	589b      	ldr	r3, [r3, r2]
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d12f      	bne.n	8005af8 <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_UART_Receive_IT+0x26>
 8005a9e:	1dbb      	adds	r3, r7, #6
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e027      	b.n	8005afa <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	015b      	lsls	r3, r3, #5
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d109      	bne.n	8005aca <HAL_UART_Receive_IT+0x4a>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d105      	bne.n	8005aca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d001      	beq.n	8005aca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e017      	b.n	8005afa <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	5c9b      	ldrb	r3, [r3, r2]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UART_Receive_IT+0x58>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e010      	b.n	8005afa <HAL_UART_Receive_IT+0x7a>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	2101      	movs	r1, #1
 8005ade:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005ae6:	1dbb      	adds	r3, r7, #6
 8005ae8:	881a      	ldrh	r2, [r3, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 ffa4 	bl	8006a3c <UART_Start_Receive_IT>
 8005af4:	0003      	movs	r3, r0
 8005af6:	e000      	b.n	8005afa <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	0018      	movs	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b004      	add	sp, #16
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Disable interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4963      	ldr	r1, [pc, #396]	; (8005ca8 <HAL_UART_Abort_IT+0x1a4>)
 8005b1c:	400a      	ands	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]
                                   USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4960      	ldr	r1, [pc, #384]	; (8005cac <HAL_UART_Abort_IT+0x1a8>)
 8005b2c:	400a      	ands	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d107      	bne.n	8005b48 <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2110      	movs	r1, #16
 8005b44:	438a      	bics	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00f      	beq.n	8005b70 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d104      	bne.n	8005b68 <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b62:	4a53      	ldr	r2, [pc, #332]	; (8005cb0 <HAL_UART_Abort_IT+0x1ac>)
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
 8005b66:	e003      	b.n	8005b70 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00f      	beq.n	8005b98 <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2240      	movs	r2, #64	; 0x40
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d104      	bne.n	8005b90 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8a:	4a4a      	ldr	r2, [pc, #296]	; (8005cb4 <HAL_UART_Abort_IT+0x1b0>)
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b8e:	e003      	b.n	8005b98 <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b94:	2200      	movs	r2, #0
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2280      	movs	r2, #128	; 0x80
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d119      	bne.n	8005bda <HAL_UART_Abort_IT+0xd6>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2180      	movs	r1, #128	; 0x80
 8005bb2:	438a      	bics	r2, r1
 8005bb4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <HAL_UART_Abort_IT+0xd6>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7fd f9dc 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005bc8:	1e03      	subs	r3, r0, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_UART_Abort_IT+0xd2>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8005bd4:	e001      	b.n	8005bda <HAL_UART_Abort_IT+0xd6>
      }
      else
      {
        abortcplt = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2240      	movs	r2, #64	; 0x40
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d11b      	bne.n	8005c20 <HAL_UART_Abort_IT+0x11c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2140      	movs	r1, #64	; 0x40
 8005bf4:	438a      	bics	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00f      	beq.n	8005c20 <HAL_UART_Abort_IT+0x11c>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7fd f9bb 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005c0a:	1e03      	subs	r3, r0, #0
 8005c0c:	d006      	beq.n	8005c1c <HAL_UART_Abort_IT+0x118>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c12:	2200      	movs	r2, #0
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8005c16:	2301      	movs	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e001      	b.n	8005c20 <HAL_UART_Abort_IT+0x11c>
      }
      else
      {
        abortcplt = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d13a      	bne.n	8005c9c <HAL_UART_Abort_IT+0x198>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2256      	movs	r2, #86	; 0x56
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	225e      	movs	r2, #94	; 0x5e
 8005c32:	2100      	movs	r1, #0
 8005c34:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	228c      	movs	r2, #140	; 0x8c
 8005c46:	2100      	movs	r1, #0
 8005c48:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	220f      	movs	r2, #15
 8005c50:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d107      	bne.n	8005c6e <HAL_UART_Abort_IT+0x16a>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2110      	movs	r1, #16
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2108      	movs	r1, #8
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2284      	movs	r2, #132	; 0x84
 8005c82:	2120      	movs	r1, #32
 8005c84:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2288      	movs	r2, #136	; 0x88
 8005c8a:	2120      	movs	r1, #32
 8005c8c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 fa5a 	bl	8006150 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b004      	add	sp, #16
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	fffffe1f 	.word	0xfffffe1f
 8005cac:	ef7ffffe 	.word	0xef7ffffe
 8005cb0:	08006c5f 	.word	0x08006c5f
 8005cb4:	08006ceb 	.word	0x08006ceb

08005cb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4abc      	ldr	r2, [pc, #752]	; (8005fcc <HAL_UART_IRQHandler+0x314>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d117      	bne.n	8005d16 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	4013      	ands	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d104      	bne.n	8005d00 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	055b      	lsls	r3, r3, #21
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d00a      	beq.n	8005d16 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d100      	bne.n	8005d0a <HAL_UART_IRQHandler+0x52>
 8005d08:	e202      	b.n	8006110 <HAL_UART_IRQHandler+0x458>
      {
        huart->RxISR(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	0010      	movs	r0, r2
 8005d12:	4798      	blx	r3
      }
      return;
 8005d14:	e1fc      	b.n	8006110 <HAL_UART_IRQHandler+0x458>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d100      	bne.n	8005d1e <HAL_UART_IRQHandler+0x66>
 8005d1c:	e0de      	b.n	8005edc <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4aab      	ldr	r2, [pc, #684]	; (8005fd0 <HAL_UART_IRQHandler+0x318>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	d104      	bne.n	8005d30 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	4aaa      	ldr	r2, [pc, #680]	; (8005fd4 <HAL_UART_IRQHandler+0x31c>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_UART_IRQHandler+0x78>
 8005d2e:	e0d5      	b.n	8005edc <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2201      	movs	r2, #1
 8005d34:	4013      	ands	r3, r2
 8005d36:	d010      	beq.n	8005d5a <HAL_UART_IRQHandler+0xa2>
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2201      	movs	r2, #1
 8005d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	228c      	movs	r2, #140	; 0x8c
 8005d4e:	589b      	ldr	r3, [r3, r2]
 8005d50:	2201      	movs	r2, #1
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	218c      	movs	r1, #140	; 0x8c
 8005d58:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d00f      	beq.n	8005d82 <HAL_UART_IRQHandler+0xca>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2201      	movs	r2, #1
 8005d66:	4013      	ands	r3, r2
 8005d68:	d00b      	beq.n	8005d82 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	228c      	movs	r2, #140	; 0x8c
 8005d76:	589b      	ldr	r3, [r3, r2]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	218c      	movs	r1, #140	; 0x8c
 8005d80:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2204      	movs	r2, #4
 8005d86:	4013      	ands	r3, r2
 8005d88:	d00f      	beq.n	8005daa <HAL_UART_IRQHandler+0xf2>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d00b      	beq.n	8005daa <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2204      	movs	r2, #4
 8005d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	228c      	movs	r2, #140	; 0x8c
 8005d9e:	589b      	ldr	r3, [r3, r2]
 8005da0:	2202      	movs	r2, #2
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	218c      	movs	r1, #140	; 0x8c
 8005da8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2208      	movs	r2, #8
 8005dae:	4013      	ands	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2220      	movs	r2, #32
 8005db6:	4013      	ands	r3, r2
 8005db8:	d103      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4a84      	ldr	r2, [pc, #528]	; (8005fd0 <HAL_UART_IRQHandler+0x318>)
 8005dbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	228c      	movs	r2, #140	; 0x8c
 8005dce:	589b      	ldr	r3, [r3, r2]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	218c      	movs	r1, #140	; 0x8c
 8005dd8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	4013      	ands	r3, r2
 8005de2:	d011      	beq.n	8005e08 <HAL_UART_IRQHandler+0x150>
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	04db      	lsls	r3, r3, #19
 8005dea:	4013      	ands	r3, r2
 8005dec:	d00c      	beq.n	8005e08 <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	0112      	lsls	r2, r2, #4
 8005df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	228c      	movs	r2, #140	; 0x8c
 8005dfc:	589b      	ldr	r3, [r3, r2]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	218c      	movs	r1, #140	; 0x8c
 8005e06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	228c      	movs	r2, #140	; 0x8c
 8005e0c:	589b      	ldr	r3, [r3, r2]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d100      	bne.n	8005e14 <HAL_UART_IRQHandler+0x15c>
 8005e12:	e17f      	b.n	8006114 <HAL_UART_IRQHandler+0x45c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2220      	movs	r2, #32
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d011      	beq.n	8005e40 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	4013      	ands	r3, r2
 8005e22:	d104      	bne.n	8005e2e <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	055b      	lsls	r3, r3, #21
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d008      	beq.n	8005e40 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	0010      	movs	r0, r2
 8005e3e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	228c      	movs	r2, #140	; 0x8c
 8005e44:	589b      	ldr	r3, [r3, r2]
 8005e46:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2240      	movs	r2, #64	; 0x40
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	d003      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2228      	movs	r2, #40	; 0x28
 8005e5a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e5c:	d033      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f000 feb3 	bl	8006bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2240      	movs	r2, #64	; 0x40
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d123      	bne.n	8005ebc <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2140      	movs	r1, #64	; 0x40
 8005e80:	438a      	bics	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d012      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e90:	4a51      	ldr	r2, [pc, #324]	; (8005fd8 <HAL_UART_IRQHandler+0x320>)
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7fd f871 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005e9e:	1e03      	subs	r3, r0, #0
 8005ea0:	d01a      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eac:	0018      	movs	r0, r3
 8005eae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	e012      	b.n	8005ed8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f000 f943 	bl	8006140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eba:	e00d      	b.n	8005ed8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f000 f93e 	bl	8006140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e008      	b.n	8005ed8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 f939 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	228c      	movs	r2, #140	; 0x8c
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005ed6:	e11d      	b.n	8006114 <HAL_UART_IRQHandler+0x45c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	46c0      	nop			; (mov r8, r8)
    return;
 8005eda:	e11b      	b.n	8006114 <HAL_UART_IRQHandler+0x45c>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d000      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x22e>
 8005ee4:	e0bf      	b.n	8006066 <HAL_UART_IRQHandler+0x3ae>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2210      	movs	r2, #16
 8005eea:	4013      	ands	r3, r2
 8005eec:	d100      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x238>
 8005eee:	e0ba      	b.n	8006066 <HAL_UART_IRQHandler+0x3ae>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2210      	movs	r2, #16
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d100      	bne.n	8005efa <HAL_UART_IRQHandler+0x242>
 8005ef8:	e0b5      	b.n	8006066 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2210      	movs	r2, #16
 8005f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2240      	movs	r2, #64	; 0x40
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d167      	bne.n	8005fe0 <HAL_UART_IRQHandler+0x328>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	2108      	movs	r1, #8
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d100      	bne.n	8005f28 <HAL_UART_IRQHandler+0x270>
 8005f26:	e0f7      	b.n	8006118 <HAL_UART_IRQHandler+0x460>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	225c      	movs	r2, #92	; 0x5c
 8005f2c:	5a9b      	ldrh	r3, [r3, r2]
 8005f2e:	2208      	movs	r2, #8
 8005f30:	18ba      	adds	r2, r7, r2
 8005f32:	8812      	ldrh	r2, [r2, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d300      	bcc.n	8005f3a <HAL_UART_IRQHandler+0x282>
 8005f38:	e0ee      	b.n	8006118 <HAL_UART_IRQHandler+0x460>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	18ba      	adds	r2, r7, r2
 8005f40:	215e      	movs	r1, #94	; 0x5e
 8005f42:	8812      	ldrh	r2, [r2, #0]
 8005f44:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	4013      	ands	r3, r2
 8005f52:	d12b      	bne.n	8005fac <HAL_UART_IRQHandler+0x2f4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	491f      	ldr	r1, [pc, #124]	; (8005fdc <HAL_UART_IRQHandler+0x324>)
 8005f60:	400a      	ands	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2101      	movs	r1, #1
 8005f70:	438a      	bics	r2, r1
 8005f72:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2140      	movs	r1, #64	; 0x40
 8005f80:	438a      	bics	r2, r1
 8005f82:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2288      	movs	r2, #136	; 0x88
 8005f88:	2120      	movs	r1, #32
 8005f8a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2110      	movs	r1, #16
 8005f9e:	438a      	bics	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fc ff88 	bl	8002ebc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	225c      	movs	r2, #92	; 0x5c
 8005fb0:	5a9a      	ldrh	r2, [r3, r2]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	215e      	movs	r1, #94	; 0x5e
 8005fb6:	5a5b      	ldrh	r3, [r3, r1]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0011      	movs	r1, r2
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 f8cc 	bl	8006160 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fc8:	e0a6      	b.n	8006118 <HAL_UART_IRQHandler+0x460>
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	0000080f 	.word	0x0000080f
 8005fd0:	10000001 	.word	0x10000001
 8005fd4:	04000120 	.word	0x04000120
 8005fd8:	08006c31 	.word	0x08006c31
 8005fdc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	225c      	movs	r2, #92	; 0x5c
 8005fe4:	5a99      	ldrh	r1, [r3, r2]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	225e      	movs	r2, #94	; 0x5e
 8005fea:	5a9b      	ldrh	r3, [r3, r2]
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	230a      	movs	r3, #10
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	1a8a      	subs	r2, r1, r2
 8005ff4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	225e      	movs	r2, #94	; 0x5e
 8005ffa:	5a9b      	ldrh	r3, [r3, r2]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d100      	bne.n	8006004 <HAL_UART_IRQHandler+0x34c>
 8006002:	e08b      	b.n	800611c <HAL_UART_IRQHandler+0x464>
          &&(nb_rx_data > 0U) )
 8006004:	230a      	movs	r3, #10
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d100      	bne.n	8006010 <HAL_UART_IRQHandler+0x358>
 800600e:	e085      	b.n	800611c <HAL_UART_IRQHandler+0x464>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4943      	ldr	r1, [pc, #268]	; (8006128 <HAL_UART_IRQHandler+0x470>)
 800601c:	400a      	ands	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4940      	ldr	r1, [pc, #256]	; (800612c <HAL_UART_IRQHandler+0x474>)
 800602c:	400a      	ands	r2, r1
 800602e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2288      	movs	r2, #136	; 0x88
 8006034:	2120      	movs	r1, #32
 8006036:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2110      	movs	r1, #16
 8006050:	438a      	bics	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006054:	230a      	movs	r3, #10
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	881a      	ldrh	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	0011      	movs	r1, r2
 800605e:	0018      	movs	r0, r3
 8006060:	f000 f87e 	bl	8006160 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006064:	e05a      	b.n	800611c <HAL_UART_IRQHandler+0x464>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	035b      	lsls	r3, r3, #13
 800606c:	4013      	ands	r3, r2
 800606e:	d00e      	beq.n	800608e <HAL_UART_IRQHandler+0x3d6>
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	03db      	lsls	r3, r3, #15
 8006076:	4013      	ands	r3, r2
 8006078:	d009      	beq.n	800608e <HAL_UART_IRQHandler+0x3d6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	0352      	lsls	r2, r2, #13
 8006082:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	0018      	movs	r0, r3
 8006088:	f001 f99e 	bl	80073c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800608c:	e049      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2280      	movs	r2, #128	; 0x80
 8006092:	4013      	ands	r3, r2
 8006094:	d012      	beq.n	80060bc <HAL_UART_IRQHandler+0x404>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2280      	movs	r2, #128	; 0x80
 800609a:	4013      	ands	r3, r2
 800609c:	d104      	bne.n	80060a8 <HAL_UART_IRQHandler+0x3f0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	041b      	lsls	r3, r3, #16
 80060a4:	4013      	ands	r3, r2
 80060a6:	d009      	beq.n	80060bc <HAL_UART_IRQHandler+0x404>
  {
    if (huart->TxISR != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d037      	beq.n	8006120 <HAL_UART_IRQHandler+0x468>
    {
      huart->TxISR(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	0010      	movs	r0, r2
 80060b8:	4798      	blx	r3
    }
    return;
 80060ba:	e031      	b.n	8006120 <HAL_UART_IRQHandler+0x468>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2240      	movs	r2, #64	; 0x40
 80060c0:	4013      	ands	r3, r2
 80060c2:	d008      	beq.n	80060d6 <HAL_UART_IRQHandler+0x41e>
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2240      	movs	r2, #64	; 0x40
 80060c8:	4013      	ands	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_UART_IRQHandler+0x41e>
  {
    UART_EndTransmit_IT(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 fe4b 	bl	8006d6a <UART_EndTransmit_IT>
    return;
 80060d4:	e025      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	4013      	ands	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_UART_IRQHandler+0x43c>
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	05db      	lsls	r3, r3, #23
 80060e6:	4013      	ands	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_UART_IRQHandler+0x43c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f001 f97b 	bl	80073e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060f2:	e016      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	045b      	lsls	r3, r3, #17
 80060fa:	4013      	ands	r3, r2
 80060fc:	d011      	beq.n	8006122 <HAL_UART_IRQHandler+0x46a>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	da0e      	bge.n	8006122 <HAL_UART_IRQHandler+0x46a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	0018      	movs	r0, r3
 8006108:	f001 f966 	bl	80073d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800610c:	46c0      	nop			; (mov r8, r8)
 800610e:	e008      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
      return;
 8006110:	46c0      	nop			; (mov r8, r8)
 8006112:	e006      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
    return;
 8006114:	46c0      	nop			; (mov r8, r8)
 8006116:	e004      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
      return;
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	e002      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
      return;
 800611c:	46c0      	nop			; (mov r8, r8)
 800611e:	e000      	b.n	8006122 <HAL_UART_IRQHandler+0x46a>
    return;
 8006120:	46c0      	nop			; (mov r8, r8)
  }
}
 8006122:	46bd      	mov	sp, r7
 8006124:	b008      	add	sp, #32
 8006126:	bd80      	pop	{r7, pc}
 8006128:	fffffedf 	.word	0xfffffedf
 800612c:	effffffe 	.word	0xeffffffe

08006130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b002      	add	sp, #8
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b002      	add	sp, #8
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006158:	46c0      	nop			; (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b002      	add	sp, #8
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	000a      	movs	r2, r1
 800616a:	1cbb      	adds	r3, r7, #2
 800616c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	46bd      	mov	sp, r7
 8006172:	b002      	add	sp, #8
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617a:	b091      	sub	sp, #68	; 0x44
 800617c:	af00      	add	r7, sp, #0
 800617e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006180:	231a      	movs	r3, #26
 8006182:	2220      	movs	r2, #32
 8006184:	4694      	mov	ip, r2
 8006186:	44bc      	add	ip, r7
 8006188:	4463      	add	r3, ip
 800618a:	2200      	movs	r2, #0
 800618c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	431a      	orrs	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	431a      	orrs	r2, r3
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061ac:	4313      	orrs	r3, r2
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4ab8      	ldr	r2, [pc, #736]	; (8006498 <UART_SetConfig+0x320>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	0019      	movs	r1, r3
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c2:	430b      	orrs	r3, r1
 80061c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4ab3      	ldr	r2, [pc, #716]	; (800649c <UART_SetConfig+0x324>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	0018      	movs	r0, r3
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	68d9      	ldr	r1, [r3, #12]
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	0003      	movs	r3, r0
 80061dc:	430b      	orrs	r3, r1
 80061de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4aad      	ldr	r2, [pc, #692]	; (80064a0 <UART_SetConfig+0x328>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061f6:	4313      	orrs	r3, r2
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4aa8      	ldr	r2, [pc, #672]	; (80064a4 <UART_SetConfig+0x32c>)
 8006202:	4013      	ands	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	430b      	orrs	r3, r1
 800620e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	220f      	movs	r2, #15
 8006218:	4393      	bics	r3, r2
 800621a:	0018      	movs	r0, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	0003      	movs	r3, r0
 8006226:	430b      	orrs	r3, r1
 8006228:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a9e      	ldr	r2, [pc, #632]	; (80064a8 <UART_SetConfig+0x330>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d134      	bne.n	800629e <UART_SetConfig+0x126>
 8006234:	4b9d      	ldr	r3, [pc, #628]	; (80064ac <UART_SetConfig+0x334>)
 8006236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006238:	2203      	movs	r2, #3
 800623a:	4013      	ands	r3, r2
 800623c:	2b01      	cmp	r3, #1
 800623e:	d015      	beq.n	800626c <UART_SetConfig+0xf4>
 8006240:	d304      	bcc.n	800624c <UART_SetConfig+0xd4>
 8006242:	2b02      	cmp	r3, #2
 8006244:	d00a      	beq.n	800625c <UART_SetConfig+0xe4>
 8006246:	2b03      	cmp	r3, #3
 8006248:	d018      	beq.n	800627c <UART_SetConfig+0x104>
 800624a:	e01f      	b.n	800628c <UART_SetConfig+0x114>
 800624c:	231b      	movs	r3, #27
 800624e:	2220      	movs	r2, #32
 8006250:	4694      	mov	ip, r2
 8006252:	44bc      	add	ip, r7
 8006254:	4463      	add	r3, ip
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e0c5      	b.n	80063e8 <UART_SetConfig+0x270>
 800625c:	231b      	movs	r3, #27
 800625e:	2220      	movs	r2, #32
 8006260:	4694      	mov	ip, r2
 8006262:	44bc      	add	ip, r7
 8006264:	4463      	add	r3, ip
 8006266:	2202      	movs	r2, #2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e0bd      	b.n	80063e8 <UART_SetConfig+0x270>
 800626c:	231b      	movs	r3, #27
 800626e:	2220      	movs	r2, #32
 8006270:	4694      	mov	ip, r2
 8006272:	44bc      	add	ip, r7
 8006274:	4463      	add	r3, ip
 8006276:	2204      	movs	r2, #4
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e0b5      	b.n	80063e8 <UART_SetConfig+0x270>
 800627c:	231b      	movs	r3, #27
 800627e:	2220      	movs	r2, #32
 8006280:	4694      	mov	ip, r2
 8006282:	44bc      	add	ip, r7
 8006284:	4463      	add	r3, ip
 8006286:	2208      	movs	r2, #8
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	e0ad      	b.n	80063e8 <UART_SetConfig+0x270>
 800628c:	231b      	movs	r3, #27
 800628e:	2220      	movs	r2, #32
 8006290:	4694      	mov	ip, r2
 8006292:	44bc      	add	ip, r7
 8006294:	4463      	add	r3, ip
 8006296:	2210      	movs	r2, #16
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	e0a4      	b.n	80063e8 <UART_SetConfig+0x270>
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a83      	ldr	r2, [pc, #524]	; (80064b0 <UART_SetConfig+0x338>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d137      	bne.n	8006318 <UART_SetConfig+0x1a0>
 80062a8:	4b80      	ldr	r3, [pc, #512]	; (80064ac <UART_SetConfig+0x334>)
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	220c      	movs	r2, #12
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d018      	beq.n	80062e6 <UART_SetConfig+0x16e>
 80062b4:	d802      	bhi.n	80062bc <UART_SetConfig+0x144>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <UART_SetConfig+0x14e>
 80062ba:	e024      	b.n	8006306 <UART_SetConfig+0x18e>
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d00a      	beq.n	80062d6 <UART_SetConfig+0x15e>
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d018      	beq.n	80062f6 <UART_SetConfig+0x17e>
 80062c4:	e01f      	b.n	8006306 <UART_SetConfig+0x18e>
 80062c6:	231b      	movs	r3, #27
 80062c8:	2220      	movs	r2, #32
 80062ca:	4694      	mov	ip, r2
 80062cc:	44bc      	add	ip, r7
 80062ce:	4463      	add	r3, ip
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e088      	b.n	80063e8 <UART_SetConfig+0x270>
 80062d6:	231b      	movs	r3, #27
 80062d8:	2220      	movs	r2, #32
 80062da:	4694      	mov	ip, r2
 80062dc:	44bc      	add	ip, r7
 80062de:	4463      	add	r3, ip
 80062e0:	2202      	movs	r2, #2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e080      	b.n	80063e8 <UART_SetConfig+0x270>
 80062e6:	231b      	movs	r3, #27
 80062e8:	2220      	movs	r2, #32
 80062ea:	4694      	mov	ip, r2
 80062ec:	44bc      	add	ip, r7
 80062ee:	4463      	add	r3, ip
 80062f0:	2204      	movs	r2, #4
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e078      	b.n	80063e8 <UART_SetConfig+0x270>
 80062f6:	231b      	movs	r3, #27
 80062f8:	2220      	movs	r2, #32
 80062fa:	4694      	mov	ip, r2
 80062fc:	44bc      	add	ip, r7
 80062fe:	4463      	add	r3, ip
 8006300:	2208      	movs	r2, #8
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e070      	b.n	80063e8 <UART_SetConfig+0x270>
 8006306:	231b      	movs	r3, #27
 8006308:	2220      	movs	r2, #32
 800630a:	4694      	mov	ip, r2
 800630c:	44bc      	add	ip, r7
 800630e:	4463      	add	r3, ip
 8006310:	2210      	movs	r2, #16
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	46c0      	nop			; (mov r8, r8)
 8006316:	e067      	b.n	80063e8 <UART_SetConfig+0x270>
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a65      	ldr	r2, [pc, #404]	; (80064b4 <UART_SetConfig+0x33c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d107      	bne.n	8006332 <UART_SetConfig+0x1ba>
 8006322:	231b      	movs	r3, #27
 8006324:	2220      	movs	r2, #32
 8006326:	4694      	mov	ip, r2
 8006328:	44bc      	add	ip, r7
 800632a:	4463      	add	r3, ip
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e05a      	b.n	80063e8 <UART_SetConfig+0x270>
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a60      	ldr	r2, [pc, #384]	; (80064b8 <UART_SetConfig+0x340>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d107      	bne.n	800634c <UART_SetConfig+0x1d4>
 800633c:	231b      	movs	r3, #27
 800633e:	2220      	movs	r2, #32
 8006340:	4694      	mov	ip, r2
 8006342:	44bc      	add	ip, r7
 8006344:	4463      	add	r3, ip
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e04d      	b.n	80063e8 <UART_SetConfig+0x270>
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a53      	ldr	r2, [pc, #332]	; (80064a0 <UART_SetConfig+0x328>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d141      	bne.n	80063da <UART_SetConfig+0x262>
 8006356:	4b55      	ldr	r3, [pc, #340]	; (80064ac <UART_SetConfig+0x334>)
 8006358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800635a:	23c0      	movs	r3, #192	; 0xc0
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	4013      	ands	r3, r2
 8006360:	2280      	movs	r2, #128	; 0x80
 8006362:	00d2      	lsls	r2, r2, #3
 8006364:	4293      	cmp	r3, r2
 8006366:	d01f      	beq.n	80063a8 <UART_SetConfig+0x230>
 8006368:	2280      	movs	r2, #128	; 0x80
 800636a:	00d2      	lsls	r2, r2, #3
 800636c:	4293      	cmp	r3, r2
 800636e:	d802      	bhi.n	8006376 <UART_SetConfig+0x1fe>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <UART_SetConfig+0x210>
 8006374:	e028      	b.n	80063c8 <UART_SetConfig+0x250>
 8006376:	2280      	movs	r2, #128	; 0x80
 8006378:	0112      	lsls	r2, r2, #4
 800637a:	4293      	cmp	r3, r2
 800637c:	d00c      	beq.n	8006398 <UART_SetConfig+0x220>
 800637e:	22c0      	movs	r2, #192	; 0xc0
 8006380:	0112      	lsls	r2, r2, #4
 8006382:	4293      	cmp	r3, r2
 8006384:	d018      	beq.n	80063b8 <UART_SetConfig+0x240>
 8006386:	e01f      	b.n	80063c8 <UART_SetConfig+0x250>
 8006388:	231b      	movs	r3, #27
 800638a:	2220      	movs	r2, #32
 800638c:	4694      	mov	ip, r2
 800638e:	44bc      	add	ip, r7
 8006390:	4463      	add	r3, ip
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e027      	b.n	80063e8 <UART_SetConfig+0x270>
 8006398:	231b      	movs	r3, #27
 800639a:	2220      	movs	r2, #32
 800639c:	4694      	mov	ip, r2
 800639e:	44bc      	add	ip, r7
 80063a0:	4463      	add	r3, ip
 80063a2:	2202      	movs	r2, #2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e01f      	b.n	80063e8 <UART_SetConfig+0x270>
 80063a8:	231b      	movs	r3, #27
 80063aa:	2220      	movs	r2, #32
 80063ac:	4694      	mov	ip, r2
 80063ae:	44bc      	add	ip, r7
 80063b0:	4463      	add	r3, ip
 80063b2:	2204      	movs	r2, #4
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e017      	b.n	80063e8 <UART_SetConfig+0x270>
 80063b8:	231b      	movs	r3, #27
 80063ba:	2220      	movs	r2, #32
 80063bc:	4694      	mov	ip, r2
 80063be:	44bc      	add	ip, r7
 80063c0:	4463      	add	r3, ip
 80063c2:	2208      	movs	r2, #8
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	e00f      	b.n	80063e8 <UART_SetConfig+0x270>
 80063c8:	231b      	movs	r3, #27
 80063ca:	2220      	movs	r2, #32
 80063cc:	4694      	mov	ip, r2
 80063ce:	44bc      	add	ip, r7
 80063d0:	4463      	add	r3, ip
 80063d2:	2210      	movs	r2, #16
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	e006      	b.n	80063e8 <UART_SetConfig+0x270>
 80063da:	231b      	movs	r3, #27
 80063dc:	2220      	movs	r2, #32
 80063de:	4694      	mov	ip, r2
 80063e0:	44bc      	add	ip, r7
 80063e2:	4463      	add	r3, ip
 80063e4:	2210      	movs	r2, #16
 80063e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <UART_SetConfig+0x328>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d000      	beq.n	80063f4 <UART_SetConfig+0x27c>
 80063f2:	e0aa      	b.n	800654a <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063f4:	231b      	movs	r3, #27
 80063f6:	2220      	movs	r2, #32
 80063f8:	4694      	mov	ip, r2
 80063fa:	44bc      	add	ip, r7
 80063fc:	4463      	add	r3, ip
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d00d      	beq.n	8006420 <UART_SetConfig+0x2a8>
 8006404:	dc02      	bgt.n	800640c <UART_SetConfig+0x294>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <UART_SetConfig+0x29e>
 800640a:	e015      	b.n	8006438 <UART_SetConfig+0x2c0>
 800640c:	2b04      	cmp	r3, #4
 800640e:	d00a      	beq.n	8006426 <UART_SetConfig+0x2ae>
 8006410:	2b08      	cmp	r3, #8
 8006412:	d00d      	beq.n	8006430 <UART_SetConfig+0x2b8>
 8006414:	e010      	b.n	8006438 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006416:	f7fd fde3 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 800641a:	0003      	movs	r3, r0
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800641e:	e015      	b.n	800644c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006420:	4b26      	ldr	r3, [pc, #152]	; (80064bc <UART_SetConfig+0x344>)
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006424:	e012      	b.n	800644c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006426:	f7fd fd4f 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 800642a:	0003      	movs	r3, r0
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800642e:	e00d      	b.n	800644c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006430:	2380      	movs	r3, #128	; 0x80
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006436:	e009      	b.n	800644c <UART_SetConfig+0x2d4>
      default:
        pclk = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800643c:	231a      	movs	r3, #26
 800643e:	2220      	movs	r2, #32
 8006440:	4694      	mov	ip, r2
 8006442:	44bc      	add	ip, r7
 8006444:	4463      	add	r3, ip
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]
        break;
 800644a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644e:	2b00      	cmp	r3, #0
 8006450:	d100      	bne.n	8006454 <UART_SetConfig+0x2dc>
 8006452:	e14f      	b.n	80066f4 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006458:	4b19      	ldr	r3, [pc, #100]	; (80064c0 <UART_SetConfig+0x348>)
 800645a:	0052      	lsls	r2, r2, #1
 800645c:	5ad3      	ldrh	r3, [r2, r3]
 800645e:	0019      	movs	r1, r3
 8006460:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006462:	f7f9 fe51 	bl	8000108 <__udivsi3>
 8006466:	0003      	movs	r3, r0
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	0013      	movs	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	189b      	adds	r3, r3, r2
 8006474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006476:	429a      	cmp	r2, r3
 8006478:	d305      	bcc.n	8006486 <UART_SetConfig+0x30e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006482:	429a      	cmp	r2, r3
 8006484:	d91e      	bls.n	80064c4 <UART_SetConfig+0x34c>
      {
        ret = HAL_ERROR;
 8006486:	231a      	movs	r3, #26
 8006488:	2220      	movs	r2, #32
 800648a:	4694      	mov	ip, r2
 800648c:	44bc      	add	ip, r7
 800648e:	4463      	add	r3, ip
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e12e      	b.n	80066f4 <UART_SetConfig+0x57c>
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	cfff69f3 	.word	0xcfff69f3
 800649c:	ffffcfff 	.word	0xffffcfff
 80064a0:	40008000 	.word	0x40008000
 80064a4:	11fff4ff 	.word	0x11fff4ff
 80064a8:	40013800 	.word	0x40013800
 80064ac:	40021000 	.word	0x40021000
 80064b0:	40004400 	.word	0x40004400
 80064b4:	40004800 	.word	0x40004800
 80064b8:	40004c00 	.word	0x40004c00
 80064bc:	00f42400 	.word	0x00f42400
 80064c0:	08007778 	.word	0x08007778
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064d0:	4b94      	ldr	r3, [pc, #592]	; (8006724 <UART_SetConfig+0x5ac>)
 80064d2:	0052      	lsls	r2, r2, #1
 80064d4:	5ad3      	ldrh	r3, [r2, r3]
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	69b8      	ldr	r0, [r7, #24]
 80064e2:	69f9      	ldr	r1, [r7, #28]
 80064e4:	f7f9 ff86 	bl	80003f4 <__aeabi_uldivmod>
 80064e8:	0003      	movs	r3, r0
 80064ea:	000c      	movs	r4, r1
 80064ec:	0e1a      	lsrs	r2, r3, #24
 80064ee:	0226      	lsls	r6, r4, #8
 80064f0:	4316      	orrs	r6, r2
 80064f2:	021d      	lsls	r5, r3, #8
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68b8      	ldr	r0, [r7, #8]
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	1940      	adds	r0, r0, r5
 8006506:	4171      	adcs	r1, r6
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f7f9 ff6d 	bl	80003f4 <__aeabi_uldivmod>
 800651a:	0003      	movs	r3, r0
 800651c:	000c      	movs	r4, r1
 800651e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	4a81      	ldr	r2, [pc, #516]	; (8006728 <UART_SetConfig+0x5b0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d908      	bls.n	800653a <UART_SetConfig+0x3c2>
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	4a80      	ldr	r2, [pc, #512]	; (800672c <UART_SetConfig+0x5b4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d804      	bhi.n	800653a <UART_SetConfig+0x3c2>
        {
          huart->Instance->BRR = usartdiv;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006536:	60da      	str	r2, [r3, #12]
 8006538:	e0dc      	b.n	80066f4 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 800653a:	231a      	movs	r3, #26
 800653c:	2220      	movs	r2, #32
 800653e:	4694      	mov	ip, r2
 8006540:	44bc      	add	ip, r7
 8006542:	4463      	add	r3, ip
 8006544:	2201      	movs	r2, #1
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	e0d4      	b.n	80066f4 <UART_SetConfig+0x57c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	429a      	cmp	r2, r3
 8006554:	d000      	beq.n	8006558 <UART_SetConfig+0x3e0>
 8006556:	e073      	b.n	8006640 <UART_SetConfig+0x4c8>
  {
    switch (clocksource)
 8006558:	231b      	movs	r3, #27
 800655a:	2220      	movs	r2, #32
 800655c:	4694      	mov	ip, r2
 800655e:	44bc      	add	ip, r7
 8006560:	4463      	add	r3, ip
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d00d      	beq.n	8006584 <UART_SetConfig+0x40c>
 8006568:	dc02      	bgt.n	8006570 <UART_SetConfig+0x3f8>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <UART_SetConfig+0x402>
 800656e:	e015      	b.n	800659c <UART_SetConfig+0x424>
 8006570:	2b04      	cmp	r3, #4
 8006572:	d00a      	beq.n	800658a <UART_SetConfig+0x412>
 8006574:	2b08      	cmp	r3, #8
 8006576:	d00d      	beq.n	8006594 <UART_SetConfig+0x41c>
 8006578:	e010      	b.n	800659c <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800657a:	f7fd fd31 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 800657e:	0003      	movs	r3, r0
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006582:	e015      	b.n	80065b0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006584:	4b6a      	ldr	r3, [pc, #424]	; (8006730 <UART_SetConfig+0x5b8>)
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006588:	e012      	b.n	80065b0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658a:	f7fd fc9d 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 800658e:	0003      	movs	r3, r0
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006592:	e00d      	b.n	80065b0 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800659a:	e009      	b.n	80065b0 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80065a0:	231a      	movs	r3, #26
 80065a2:	2220      	movs	r2, #32
 80065a4:	4694      	mov	ip, r2
 80065a6:	44bc      	add	ip, r7
 80065a8:	4463      	add	r3, ip
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
        break;
 80065ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d100      	bne.n	80065b8 <UART_SetConfig+0x440>
 80065b6:	e09d      	b.n	80066f4 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065bc:	4b59      	ldr	r3, [pc, #356]	; (8006724 <UART_SetConfig+0x5ac>)
 80065be:	0052      	lsls	r2, r2, #1
 80065c0:	5ad3      	ldrh	r3, [r2, r3]
 80065c2:	0019      	movs	r1, r3
 80065c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80065c6:	f7f9 fd9f 	bl	8000108 <__udivsi3>
 80065ca:	0003      	movs	r3, r0
 80065cc:	005a      	lsls	r2, r3, #1
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	18d2      	adds	r2, r2, r3
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	0019      	movs	r1, r3
 80065dc:	0010      	movs	r0, r2
 80065de:	f7f9 fd93 	bl	8000108 <__udivsi3>
 80065e2:	0003      	movs	r3, r0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d920      	bls.n	8006630 <UART_SetConfig+0x4b8>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	4a50      	ldr	r2, [pc, #320]	; (8006734 <UART_SetConfig+0x5bc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d81c      	bhi.n	8006630 <UART_SetConfig+0x4b8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	200e      	movs	r0, #14
 80065fc:	2420      	movs	r4, #32
 80065fe:	193b      	adds	r3, r7, r4
 8006600:	181b      	adds	r3, r3, r0
 8006602:	210f      	movs	r1, #15
 8006604:	438a      	bics	r2, r1
 8006606:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	b29b      	uxth	r3, r3
 800660e:	2207      	movs	r2, #7
 8006610:	4013      	ands	r3, r2
 8006612:	b299      	uxth	r1, r3
 8006614:	193b      	adds	r3, r7, r4
 8006616:	181b      	adds	r3, r3, r0
 8006618:	193a      	adds	r2, r7, r4
 800661a:	1812      	adds	r2, r2, r0
 800661c:	8812      	ldrh	r2, [r2, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	193a      	adds	r2, r7, r4
 8006628:	1812      	adds	r2, r2, r0
 800662a:	8812      	ldrh	r2, [r2, #0]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	e061      	b.n	80066f4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8006630:	231a      	movs	r3, #26
 8006632:	2220      	movs	r2, #32
 8006634:	4694      	mov	ip, r2
 8006636:	44bc      	add	ip, r7
 8006638:	4463      	add	r3, ip
 800663a:	2201      	movs	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e059      	b.n	80066f4 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006640:	231b      	movs	r3, #27
 8006642:	2220      	movs	r2, #32
 8006644:	4694      	mov	ip, r2
 8006646:	44bc      	add	ip, r7
 8006648:	4463      	add	r3, ip
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d00d      	beq.n	800666c <UART_SetConfig+0x4f4>
 8006650:	dc02      	bgt.n	8006658 <UART_SetConfig+0x4e0>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <UART_SetConfig+0x4ea>
 8006656:	e015      	b.n	8006684 <UART_SetConfig+0x50c>
 8006658:	2b04      	cmp	r3, #4
 800665a:	d00a      	beq.n	8006672 <UART_SetConfig+0x4fa>
 800665c:	2b08      	cmp	r3, #8
 800665e:	d00d      	beq.n	800667c <UART_SetConfig+0x504>
 8006660:	e010      	b.n	8006684 <UART_SetConfig+0x50c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006662:	f7fd fcbd 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8006666:	0003      	movs	r3, r0
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800666a:	e015      	b.n	8006698 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800666c:	4b30      	ldr	r3, [pc, #192]	; (8006730 <UART_SetConfig+0x5b8>)
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006670:	e012      	b.n	8006698 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006672:	f7fd fc29 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8006676:	0003      	movs	r3, r0
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800667a:	e00d      	b.n	8006698 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667c:	2380      	movs	r3, #128	; 0x80
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006682:	e009      	b.n	8006698 <UART_SetConfig+0x520>
      default:
        pclk = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006688:	231a      	movs	r3, #26
 800668a:	2220      	movs	r2, #32
 800668c:	4694      	mov	ip, r2
 800668e:	44bc      	add	ip, r7
 8006690:	4463      	add	r3, ip
 8006692:	2201      	movs	r2, #1
 8006694:	701a      	strb	r2, [r3, #0]
        break;
 8006696:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02a      	beq.n	80066f4 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066a2:	4b20      	ldr	r3, [pc, #128]	; (8006724 <UART_SetConfig+0x5ac>)
 80066a4:	0052      	lsls	r2, r2, #1
 80066a6:	5ad3      	ldrh	r3, [r2, r3]
 80066a8:	0019      	movs	r1, r3
 80066aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066ac:	f7f9 fd2c 	bl	8000108 <__udivsi3>
 80066b0:	0003      	movs	r3, r0
 80066b2:	001a      	movs	r2, r3
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	18d2      	adds	r2, r2, r3
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	0019      	movs	r1, r3
 80066c2:	0010      	movs	r0, r2
 80066c4:	f7f9 fd20 	bl	8000108 <__udivsi3>
 80066c8:	0003      	movs	r3, r0
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b0f      	cmp	r3, #15
 80066d2:	d908      	bls.n	80066e6 <UART_SetConfig+0x56e>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	4a17      	ldr	r2, [pc, #92]	; (8006734 <UART_SetConfig+0x5bc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d804      	bhi.n	80066e6 <UART_SetConfig+0x56e>
      {
        huart->Instance->BRR = usartdiv;
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	e006      	b.n	80066f4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 80066e6:	231a      	movs	r3, #26
 80066e8:	2220      	movs	r2, #32
 80066ea:	4694      	mov	ip, r2
 80066ec:	44bc      	add	ip, r7
 80066ee:	4463      	add	r3, ip
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	226a      	movs	r2, #106	; 0x6a
 80066f8:	2101      	movs	r1, #1
 80066fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	2268      	movs	r2, #104	; 0x68
 8006700:	2101      	movs	r1, #1
 8006702:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	2200      	movs	r2, #0
 8006708:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	2200      	movs	r2, #0
 800670e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006710:	231a      	movs	r3, #26
 8006712:	2220      	movs	r2, #32
 8006714:	4694      	mov	ip, r2
 8006716:	44bc      	add	ip, r7
 8006718:	4463      	add	r3, ip
 800671a:	781b      	ldrb	r3, [r3, #0]
}
 800671c:	0018      	movs	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	b011      	add	sp, #68	; 0x44
 8006722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006724:	08007778 	.word	0x08007778
 8006728:	000002ff 	.word	0x000002ff
 800672c:	000fffff 	.word	0x000fffff
 8006730:	00f42400 	.word	0x00f42400
 8006734:	0000ffff 	.word	0x0000ffff

08006738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	d00b      	beq.n	8006762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4a4a      	ldr	r2, [pc, #296]	; (800687c <UART_AdvFeatureConfig+0x144>)
 8006752:	4013      	ands	r3, r2
 8006754:	0019      	movs	r1, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	2202      	movs	r2, #2
 8006768:	4013      	ands	r3, r2
 800676a:	d00b      	beq.n	8006784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4a43      	ldr	r2, [pc, #268]	; (8006880 <UART_AdvFeatureConfig+0x148>)
 8006774:	4013      	ands	r3, r2
 8006776:	0019      	movs	r1, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	2204      	movs	r2, #4
 800678a:	4013      	ands	r3, r2
 800678c:	d00b      	beq.n	80067a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	4a3b      	ldr	r2, [pc, #236]	; (8006884 <UART_AdvFeatureConfig+0x14c>)
 8006796:	4013      	ands	r3, r2
 8006798:	0019      	movs	r1, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	2208      	movs	r2, #8
 80067ac:	4013      	ands	r3, r2
 80067ae:	d00b      	beq.n	80067c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4a34      	ldr	r2, [pc, #208]	; (8006888 <UART_AdvFeatureConfig+0x150>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	0019      	movs	r1, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	2210      	movs	r2, #16
 80067ce:	4013      	ands	r3, r2
 80067d0:	d00b      	beq.n	80067ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	4a2c      	ldr	r2, [pc, #176]	; (800688c <UART_AdvFeatureConfig+0x154>)
 80067da:	4013      	ands	r3, r2
 80067dc:	0019      	movs	r1, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ee:	2220      	movs	r2, #32
 80067f0:	4013      	ands	r3, r2
 80067f2:	d00b      	beq.n	800680c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4a25      	ldr	r2, [pc, #148]	; (8006890 <UART_AdvFeatureConfig+0x158>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	0019      	movs	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	2240      	movs	r2, #64	; 0x40
 8006812:	4013      	ands	r3, r2
 8006814:	d01d      	beq.n	8006852 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <UART_AdvFeatureConfig+0x15c>)
 800681e:	4013      	ands	r3, r2
 8006820:	0019      	movs	r1, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006832:	2380      	movs	r3, #128	; 0x80
 8006834:	035b      	lsls	r3, r3, #13
 8006836:	429a      	cmp	r2, r3
 8006838:	d10b      	bne.n	8006852 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4a15      	ldr	r2, [pc, #84]	; (8006898 <UART_AdvFeatureConfig+0x160>)
 8006842:	4013      	ands	r3, r2
 8006844:	0019      	movs	r1, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	2280      	movs	r2, #128	; 0x80
 8006858:	4013      	ands	r3, r2
 800685a:	d00b      	beq.n	8006874 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <UART_AdvFeatureConfig+0x164>)
 8006864:	4013      	ands	r3, r2
 8006866:	0019      	movs	r1, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }
}
 8006874:	46c0      	nop			; (mov r8, r8)
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}
 800687c:	fffdffff 	.word	0xfffdffff
 8006880:	fffeffff 	.word	0xfffeffff
 8006884:	fffbffff 	.word	0xfffbffff
 8006888:	ffff7fff 	.word	0xffff7fff
 800688c:	ffffefff 	.word	0xffffefff
 8006890:	ffffdfff 	.word	0xffffdfff
 8006894:	ffefffff 	.word	0xffefffff
 8006898:	ff9fffff 	.word	0xff9fffff
 800689c:	fff7ffff 	.word	0xfff7ffff

080068a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	228c      	movs	r2, #140	; 0x8c
 80068ac:	2100      	movs	r1, #0
 80068ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068b0:	f7fb f9b8 	bl	8001c24 <HAL_GetTick>
 80068b4:	0003      	movs	r3, r0
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2208      	movs	r2, #8
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d10d      	bne.n	80068e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	0399      	lsls	r1, r3, #14
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4b19      	ldr	r3, [pc, #100]	; (8006934 <UART_CheckIdleState+0x94>)
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	0013      	movs	r3, r2
 80068d4:	2200      	movs	r2, #0
 80068d6:	f000 f82f 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d001      	beq.n	80068e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e024      	b.n	800692c <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2204      	movs	r2, #4
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d10d      	bne.n	800690c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	03d9      	lsls	r1, r3, #15
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <UART_CheckIdleState+0x94>)
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	0013      	movs	r3, r2
 80068fe:	2200      	movs	r2, #0
 8006900:	f000 f81a 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 8006904:	1e03      	subs	r3, r0, #0
 8006906:	d001      	beq.n	800690c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e00f      	b.n	800692c <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2284      	movs	r2, #132	; 0x84
 8006910:	2120      	movs	r1, #32
 8006912:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2288      	movs	r2, #136	; 0x88
 8006918:	2120      	movs	r1, #32
 800691a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2280      	movs	r2, #128	; 0x80
 8006926:	2100      	movs	r1, #0
 8006928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b004      	add	sp, #16
 8006932:	bd80      	pop	{r7, pc}
 8006934:	01ffffff 	.word	0x01ffffff

08006938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	1dfb      	adds	r3, r7, #7
 8006946:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006948:	e062      	b.n	8006a10 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	3301      	adds	r3, #1
 800694e:	d05f      	beq.n	8006a10 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006950:	f7fb f968 	bl	8001c24 <HAL_GetTick>
 8006954:	0002      	movs	r2, r0
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	429a      	cmp	r2, r3
 800695e:	d302      	bcc.n	8006966 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d11d      	bne.n	80069a2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4931      	ldr	r1, [pc, #196]	; (8006a38 <UART_WaitOnFlagUntilTimeout+0x100>)
 8006972:	400a      	ands	r2, r1
 8006974:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2101      	movs	r1, #1
 8006982:	438a      	bics	r2, r1
 8006984:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2284      	movs	r2, #132	; 0x84
 800698a:	2120      	movs	r1, #32
 800698c:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2288      	movs	r2, #136	; 0x88
 8006992:	2120      	movs	r1, #32
 8006994:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2280      	movs	r2, #128	; 0x80
 800699a:	2100      	movs	r1, #0
 800699c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e046      	b.n	8006a30 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2204      	movs	r2, #4
 80069aa:	4013      	ands	r3, r2
 80069ac:	d030      	beq.n	8006a10 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	401a      	ands	r2, r3
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	429a      	cmp	r2, r3
 80069c0:	d126      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	0112      	lsls	r2, r2, #4
 80069ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4918      	ldr	r1, [pc, #96]	; (8006a38 <UART_WaitOnFlagUntilTimeout+0x100>)
 80069d8:	400a      	ands	r2, r1
 80069da:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2101      	movs	r1, #1
 80069e8:	438a      	bics	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2284      	movs	r2, #132	; 0x84
 80069f0:	2120      	movs	r1, #32
 80069f2:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2288      	movs	r2, #136	; 0x88
 80069f8:	2120      	movs	r1, #32
 80069fa:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	228c      	movs	r2, #140	; 0x8c
 8006a00:	2120      	movs	r1, #32
 8006a02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2280      	movs	r2, #128	; 0x80
 8006a08:	2100      	movs	r1, #0
 8006a0a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e00f      	b.n	8006a30 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	425a      	negs	r2, r3
 8006a20:	4153      	adcs	r3, r2
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	001a      	movs	r2, r3
 8006a26:	1dfb      	adds	r3, r7, #7
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d08d      	beq.n	800694a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b004      	add	sp, #16
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	fffffe5f 	.word	0xfffffe5f

08006a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	1dbb      	adds	r3, r7, #6
 8006a48:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	1dba      	adds	r2, r7, #6
 8006a54:	215c      	movs	r1, #92	; 0x5c
 8006a56:	8812      	ldrh	r2, [r2, #0]
 8006a58:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1dba      	adds	r2, r7, #6
 8006a5e:	215e      	movs	r1, #94	; 0x5e
 8006a60:	8812      	ldrh	r2, [r2, #0]
 8006a62:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	2380      	movs	r3, #128	; 0x80
 8006a70:	015b      	lsls	r3, r3, #5
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d10d      	bne.n	8006a92 <UART_Start_Receive_IT+0x56>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d104      	bne.n	8006a88 <UART_Start_Receive_IT+0x4c>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2260      	movs	r2, #96	; 0x60
 8006a82:	494d      	ldr	r1, [pc, #308]	; (8006bb8 <UART_Start_Receive_IT+0x17c>)
 8006a84:	5299      	strh	r1, [r3, r2]
 8006a86:	e02e      	b.n	8006ae6 <UART_Start_Receive_IT+0xaa>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2260      	movs	r2, #96	; 0x60
 8006a8c:	21ff      	movs	r1, #255	; 0xff
 8006a8e:	5299      	strh	r1, [r3, r2]
 8006a90:	e029      	b.n	8006ae6 <UART_Start_Receive_IT+0xaa>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <UART_Start_Receive_IT+0x7a>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <UART_Start_Receive_IT+0x70>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2260      	movs	r2, #96	; 0x60
 8006aa6:	21ff      	movs	r1, #255	; 0xff
 8006aa8:	5299      	strh	r1, [r3, r2]
 8006aaa:	e01c      	b.n	8006ae6 <UART_Start_Receive_IT+0xaa>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2260      	movs	r2, #96	; 0x60
 8006ab0:	217f      	movs	r1, #127	; 0x7f
 8006ab2:	5299      	strh	r1, [r3, r2]
 8006ab4:	e017      	b.n	8006ae6 <UART_Start_Receive_IT+0xaa>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	2380      	movs	r3, #128	; 0x80
 8006abc:	055b      	lsls	r3, r3, #21
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d10d      	bne.n	8006ade <UART_Start_Receive_IT+0xa2>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d104      	bne.n	8006ad4 <UART_Start_Receive_IT+0x98>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2260      	movs	r2, #96	; 0x60
 8006ace:	217f      	movs	r1, #127	; 0x7f
 8006ad0:	5299      	strh	r1, [r3, r2]
 8006ad2:	e008      	b.n	8006ae6 <UART_Start_Receive_IT+0xaa>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2260      	movs	r2, #96	; 0x60
 8006ad8:	213f      	movs	r1, #63	; 0x3f
 8006ada:	5299      	strh	r1, [r3, r2]
 8006adc:	e003      	b.n	8006ae6 <UART_Start_Receive_IT+0xaa>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2260      	movs	r2, #96	; 0x60
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	228c      	movs	r2, #140	; 0x8c
 8006aea:	2100      	movs	r1, #0
 8006aec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2288      	movs	r2, #136	; 0x88
 8006af2:	2122      	movs	r1, #34	; 0x22
 8006af4:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2101      	movs	r1, #1
 8006b02:	430a      	orrs	r2, r1
 8006b04:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006b0a:	2380      	movs	r3, #128	; 0x80
 8006b0c:	059b      	lsls	r3, r3, #22
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d12e      	bne.n	8006b70 <UART_Start_Receive_IT+0x134>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2268      	movs	r2, #104	; 0x68
 8006b16:	5a9b      	ldrh	r3, [r3, r2]
 8006b18:	1dba      	adds	r2, r7, #6
 8006b1a:	8812      	ldrh	r2, [r2, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d327      	bcc.n	8006b70 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	015b      	lsls	r3, r3, #5
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d107      	bne.n	8006b3c <UART_Start_Receive_IT+0x100>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <UART_Start_Receive_IT+0x180>)
 8006b38:	671a      	str	r2, [r3, #112]	; 0x70
 8006b3a:	e002      	b.n	8006b42 <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4a20      	ldr	r2, [pc, #128]	; (8006bc0 <UART_Start_Receive_IT+0x184>)
 8006b40:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	2100      	movs	r1, #0
 8006b48:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2180      	movs	r1, #128	; 0x80
 8006b56:	0049      	lsls	r1, r1, #1
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2180      	movs	r1, #128	; 0x80
 8006b68:	0549      	lsls	r1, r1, #21
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	e01d      	b.n	8006bac <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	015b      	lsls	r3, r3, #5
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d107      	bne.n	8006b8c <UART_Start_Receive_IT+0x150>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a0f      	ldr	r2, [pc, #60]	; (8006bc4 <UART_Start_Receive_IT+0x188>)
 8006b88:	671a      	str	r2, [r3, #112]	; 0x70
 8006b8a:	e002      	b.n	8006b92 <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4a0e      	ldr	r2, [pc, #56]	; (8006bc8 <UART_Start_Receive_IT+0x18c>)
 8006b90:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	2100      	movs	r1, #0
 8006b98:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2190      	movs	r1, #144	; 0x90
 8006ba6:	0049      	lsls	r1, r1, #1
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b004      	add	sp, #16
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	000001ff 	.word	0x000001ff
 8006bbc:	080071a5 	.word	0x080071a5
 8006bc0:	08006f81 	.word	0x08006f81
 8006bc4:	08006e91 	.word	0x08006e91
 8006bc8:	08006da1 	.word	0x08006da1

08006bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4912      	ldr	r1, [pc, #72]	; (8006c28 <UART_EndRxTransfer+0x5c>)
 8006be0:	400a      	ands	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	490f      	ldr	r1, [pc, #60]	; (8006c2c <UART_EndRxTransfer+0x60>)
 8006bf0:	400a      	ands	r2, r1
 8006bf2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d107      	bne.n	8006c0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2110      	movs	r1, #16
 8006c08:	438a      	bics	r2, r1
 8006c0a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2288      	movs	r2, #136	; 0x88
 8006c10:	2120      	movs	r1, #32
 8006c12:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006c20:	46c0      	nop			; (mov r8, r8)
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b002      	add	sp, #8
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	fffffedf 	.word	0xfffffedf
 8006c2c:	effffffe 	.word	0xeffffffe

08006c30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	225e      	movs	r2, #94	; 0x5e
 8006c42:	2100      	movs	r1, #0
 8006c44:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2256      	movs	r2, #86	; 0x56
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	0018      	movs	r0, r3
 8006c52:	f7ff fa75 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b004      	add	sp, #16
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c70:	2200      	movs	r2, #0
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d12d      	bne.n	8006ce2 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2256      	movs	r2, #86	; 0x56
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	225e      	movs	r2, #94	; 0x5e
 8006c92:	2100      	movs	r1, #0
 8006c94:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	228c      	movs	r2, #140	; 0x8c
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	220f      	movs	r2, #15
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	059b      	lsls	r3, r3, #22
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d107      	bne.n	8006cc2 <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699a      	ldr	r2, [r3, #24]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2110      	movs	r1, #16
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2284      	movs	r2, #132	; 0x84
 8006cc6:	2120      	movs	r1, #32
 8006cc8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2288      	movs	r2, #136	; 0x88
 8006cce:	2120      	movs	r1, #32
 8006cd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f7ff fa38 	bl	8006150 <HAL_UART_AbortCpltCallback>
 8006ce0:	e000      	b.n	8006ce4 <UART_DMATxAbortCallback+0x86>
      return;
 8006ce2:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b004      	add	sp, #16
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d127      	bne.n	8006d62 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2256      	movs	r2, #86	; 0x56
 8006d16:	2100      	movs	r1, #0
 8006d18:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	225e      	movs	r2, #94	; 0x5e
 8006d1e:	2100      	movs	r1, #0
 8006d20:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	228c      	movs	r2, #140	; 0x8c
 8006d26:	2100      	movs	r1, #0
 8006d28:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	220f      	movs	r2, #15
 8006d30:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2108      	movs	r1, #8
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2284      	movs	r2, #132	; 0x84
 8006d46:	2120      	movs	r1, #32
 8006d48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2288      	movs	r2, #136	; 0x88
 8006d4e:	2120      	movs	r1, #32
 8006d50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f7ff f9f8 	bl	8006150 <HAL_UART_AbortCpltCallback>
 8006d60:	e000      	b.n	8006d64 <UART_DMARxAbortCallback+0x7a>
      return;
 8006d62:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b004      	add	sp, #16
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2140      	movs	r1, #64	; 0x40
 8006d7e:	438a      	bics	r2, r1
 8006d80:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2284      	movs	r2, #132	; 0x84
 8006d86:	2120      	movs	r1, #32
 8006d88:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f7ff f9cc 	bl	8006130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b002      	add	sp, #8
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006da8:	230e      	movs	r3, #14
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	2160      	movs	r1, #96	; 0x60
 8006db0:	5a52      	ldrh	r2, [r2, r1]
 8006db2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2288      	movs	r2, #136	; 0x88
 8006db8:	589b      	ldr	r3, [r3, r2]
 8006dba:	2b22      	cmp	r3, #34	; 0x22
 8006dbc:	d159      	bne.n	8006e72 <UART_RxISR_8BIT+0xd2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dc4:	210c      	movs	r1, #12
 8006dc6:	187b      	adds	r3, r7, r1
 8006dc8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dca:	187b      	adds	r3, r7, r1
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	230e      	movs	r3, #14
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b2d9      	uxtb	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ddc:	400a      	ands	r2, r1
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	225e      	movs	r2, #94	; 0x5e
 8006df0:	5a9b      	ldrh	r3, [r3, r2]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b299      	uxth	r1, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	225e      	movs	r2, #94	; 0x5e
 8006dfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	225e      	movs	r2, #94	; 0x5e
 8006e02:	5a9b      	ldrh	r3, [r3, r2]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d13b      	bne.n	8006e82 <UART_RxISR_8BIT+0xe2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	491d      	ldr	r1, [pc, #116]	; (8006e8c <UART_RxISR_8BIT+0xec>)
 8006e16:	400a      	ands	r2, r1
 8006e18:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2101      	movs	r1, #1
 8006e26:	438a      	bics	r2, r1
 8006e28:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2288      	movs	r2, #136	; 0x88
 8006e2e:	2120      	movs	r1, #32
 8006e30:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d110      	bne.n	8006e62 <UART_RxISR_8BIT+0xc2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2110      	movs	r1, #16
 8006e4c:	438a      	bics	r2, r1
 8006e4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	225c      	movs	r2, #92	; 0x5c
 8006e54:	5a9a      	ldrh	r2, [r3, r2]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0011      	movs	r1, r2
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7ff f980 	bl	8006160 <HAL_UARTEx_RxEventCallback>
 8006e60:	e003      	b.n	8006e6a <UART_RxISR_8BIT+0xca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f7fa fc97 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e70:	e007      	b.n	8006e82 <UART_RxISR_8BIT+0xe2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2108      	movs	r1, #8
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	619a      	str	r2, [r3, #24]
}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	46bd      	mov	sp, r7
 8006e86:	b004      	add	sp, #16
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	fffffedf 	.word	0xfffffedf

08006e90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e98:	230e      	movs	r3, #14
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	2160      	movs	r1, #96	; 0x60
 8006ea0:	5a52      	ldrh	r2, [r2, r1]
 8006ea2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2288      	movs	r2, #136	; 0x88
 8006ea8:	589b      	ldr	r3, [r3, r2]
 8006eaa:	2b22      	cmp	r3, #34	; 0x22
 8006eac:	d159      	bne.n	8006f62 <UART_RxISR_16BIT+0xd2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eb4:	210c      	movs	r1, #12
 8006eb6:	187b      	adds	r3, r7, r1
 8006eb8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebe:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ec0:	187b      	adds	r3, r7, r1
 8006ec2:	220e      	movs	r2, #14
 8006ec4:	18ba      	adds	r2, r7, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	8812      	ldrh	r2, [r2, #0]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	1c9a      	adds	r2, r3, #2
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	225e      	movs	r2, #94	; 0x5e
 8006ee0:	5a9b      	ldrh	r3, [r3, r2]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b299      	uxth	r1, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	225e      	movs	r2, #94	; 0x5e
 8006eec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	225e      	movs	r2, #94	; 0x5e
 8006ef2:	5a9b      	ldrh	r3, [r3, r2]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d13b      	bne.n	8006f72 <UART_RxISR_16BIT+0xe2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	491d      	ldr	r1, [pc, #116]	; (8006f7c <UART_RxISR_16BIT+0xec>)
 8006f06:	400a      	ands	r2, r1
 8006f08:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2101      	movs	r1, #1
 8006f16:	438a      	bics	r2, r1
 8006f18:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2288      	movs	r2, #136	; 0x88
 8006f1e:	2120      	movs	r1, #32
 8006f20:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d110      	bne.n	8006f52 <UART_RxISR_16BIT+0xc2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2110      	movs	r1, #16
 8006f3c:	438a      	bics	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	225c      	movs	r2, #92	; 0x5c
 8006f44:	5a9a      	ldrh	r2, [r3, r2]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	0011      	movs	r1, r2
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f7ff f908 	bl	8006160 <HAL_UARTEx_RxEventCallback>
 8006f50:	e003      	b.n	8006f5a <UART_RxISR_16BIT+0xca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7fa fc1f 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f60:	e007      	b.n	8006f72 <UART_RxISR_16BIT+0xe2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699a      	ldr	r2, [r3, #24]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2108      	movs	r1, #8
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	619a      	str	r2, [r3, #24]
}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b004      	add	sp, #16
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	fffffedf 	.word	0xfffffedf

08006f80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f88:	231a      	movs	r3, #26
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	2160      	movs	r1, #96	; 0x60
 8006f90:	5a52      	ldrh	r2, [r2, r1]
 8006f92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2288      	movs	r2, #136	; 0x88
 8006fb0:	589b      	ldr	r3, [r3, r2]
 8006fb2:	2b22      	cmp	r3, #34	; 0x22
 8006fb4:	d000      	beq.n	8006fb8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006fb6:	e0e1      	b.n	800717c <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fb8:	230e      	movs	r3, #14
 8006fba:	18fb      	adds	r3, r7, r3
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	2168      	movs	r1, #104	; 0x68
 8006fc0:	5a52      	ldrh	r2, [r2, r1]
 8006fc2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fc4:	e0aa      	b.n	800711c <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fcc:	210c      	movs	r1, #12
 8006fce:	187b      	adds	r3, r7, r1
 8006fd0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	231a      	movs	r3, #26
 8006fda:	18fb      	adds	r3, r7, r3
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b2d9      	uxtb	r1, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe4:	400a      	ands	r2, r1
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	225e      	movs	r2, #94	; 0x5e
 8006ff8:	5a9b      	ldrh	r3, [r3, r2]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b299      	uxth	r1, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	225e      	movs	r2, #94	; 0x5e
 8007004:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	2207      	movs	r2, #7
 8007012:	4013      	ands	r3, r2
 8007014:	d049      	beq.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2201      	movs	r2, #1
 800701a:	4013      	ands	r3, r2
 800701c:	d010      	beq.n	8007040 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	4013      	ands	r3, r2
 8007026:	d00b      	beq.n	8007040 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2201      	movs	r2, #1
 800702e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	228c      	movs	r2, #140	; 0x8c
 8007034:	589b      	ldr	r3, [r3, r2]
 8007036:	2201      	movs	r2, #1
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	218c      	movs	r1, #140	; 0x8c
 800703e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2202      	movs	r2, #2
 8007044:	4013      	ands	r3, r2
 8007046:	d00f      	beq.n	8007068 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2201      	movs	r2, #1
 800704c:	4013      	ands	r3, r2
 800704e:	d00b      	beq.n	8007068 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2202      	movs	r2, #2
 8007056:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	228c      	movs	r2, #140	; 0x8c
 800705c:	589b      	ldr	r3, [r3, r2]
 800705e:	2204      	movs	r2, #4
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	218c      	movs	r1, #140	; 0x8c
 8007066:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	2204      	movs	r2, #4
 800706c:	4013      	ands	r3, r2
 800706e:	d00f      	beq.n	8007090 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2201      	movs	r2, #1
 8007074:	4013      	ands	r3, r2
 8007076:	d00b      	beq.n	8007090 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2204      	movs	r2, #4
 800707e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	228c      	movs	r2, #140	; 0x8c
 8007084:	589b      	ldr	r3, [r3, r2]
 8007086:	2202      	movs	r2, #2
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	218c      	movs	r1, #140	; 0x8c
 800708e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	228c      	movs	r2, #140	; 0x8c
 8007094:	589b      	ldr	r3, [r3, r2]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	0018      	movs	r0, r3
 800709e:	f7ff f84f 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	228c      	movs	r2, #140	; 0x8c
 80070a6:	2100      	movs	r1, #0
 80070a8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	225e      	movs	r2, #94	; 0x5e
 80070ae:	5a9b      	ldrh	r3, [r3, r2]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d132      	bne.n	800711c <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4934      	ldr	r1, [pc, #208]	; (8007194 <UART_RxISR_8BIT_FIFOEN+0x214>)
 80070c2:	400a      	ands	r2, r1
 80070c4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4931      	ldr	r1, [pc, #196]	; (8007198 <UART_RxISR_8BIT_FIFOEN+0x218>)
 80070d2:	400a      	ands	r2, r1
 80070d4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2288      	movs	r2, #136	; 0x88
 80070da:	2120      	movs	r1, #32
 80070dc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d110      	bne.n	800710e <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2110      	movs	r1, #16
 80070f8:	438a      	bics	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	225c      	movs	r2, #92	; 0x5c
 8007100:	5a9a      	ldrh	r2, [r3, r2]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0011      	movs	r1, r2
 8007106:	0018      	movs	r0, r3
 8007108:	f7ff f82a 	bl	8006160 <HAL_UARTEx_RxEventCallback>
 800710c:	e003      	b.n	8007116 <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	0018      	movs	r0, r3
 8007112:	f7fa fb41 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800711c:	230e      	movs	r3, #14
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	2220      	movs	r2, #32
 800712a:	4013      	ands	r3, r2
 800712c:	d000      	beq.n	8007130 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 800712e:	e74a      	b.n	8006fc6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007130:	200a      	movs	r0, #10
 8007132:	183b      	adds	r3, r7, r0
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	215e      	movs	r1, #94	; 0x5e
 8007138:	5a52      	ldrh	r2, [r2, r1]
 800713a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800713c:	183b      	adds	r3, r7, r0
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d023      	beq.n	800718c <UART_RxISR_8BIT_FIFOEN+0x20c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2268      	movs	r2, #104	; 0x68
 8007148:	5a9b      	ldrh	r3, [r3, r2]
 800714a:	220a      	movs	r2, #10
 800714c:	18ba      	adds	r2, r7, r2
 800714e:	8812      	ldrh	r2, [r2, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d21b      	bcs.n	800718c <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	490f      	ldr	r1, [pc, #60]	; (800719c <UART_RxISR_8BIT_FIFOEN+0x21c>)
 8007160:	400a      	ands	r2, r1
 8007162:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a0e      	ldr	r2, [pc, #56]	; (80071a0 <UART_RxISR_8BIT_FIFOEN+0x220>)
 8007168:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2120      	movs	r1, #32
 8007176:	430a      	orrs	r2, r1
 8007178:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800717a:	e007      	b.n	800718c <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2108      	movs	r1, #8
 8007188:	430a      	orrs	r2, r1
 800718a:	619a      	str	r2, [r3, #24]
}
 800718c:	46c0      	nop			; (mov r8, r8)
 800718e:	46bd      	mov	sp, r7
 8007190:	b008      	add	sp, #32
 8007192:	bd80      	pop	{r7, pc}
 8007194:	fffffeff 	.word	0xfffffeff
 8007198:	effffffe 	.word	0xeffffffe
 800719c:	efffffff 	.word	0xefffffff
 80071a0:	08006da1 	.word	0x08006da1

080071a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071ac:	2322      	movs	r3, #34	; 0x22
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	2160      	movs	r1, #96	; 0x60
 80071b4:	5a52      	ldrh	r2, [r2, r1]
 80071b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2288      	movs	r2, #136	; 0x88
 80071d4:	589b      	ldr	r3, [r3, r2]
 80071d6:	2b22      	cmp	r3, #34	; 0x22
 80071d8:	d000      	beq.n	80071dc <UART_RxISR_16BIT_FIFOEN+0x38>
 80071da:	e0e1      	b.n	80073a0 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071dc:	2316      	movs	r3, #22
 80071de:	18fb      	adds	r3, r7, r3
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	2168      	movs	r1, #104	; 0x68
 80071e4:	5a52      	ldrh	r2, [r2, r1]
 80071e6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071e8:	e0aa      	b.n	8007340 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071f0:	2114      	movs	r1, #20
 80071f2:	187b      	adds	r3, r7, r1
 80071f4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	2222      	movs	r2, #34	; 0x22
 8007200:	18ba      	adds	r2, r7, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	8812      	ldrh	r2, [r2, #0]
 8007206:	4013      	ands	r3, r2
 8007208:	b29a      	uxth	r2, r3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007212:	1c9a      	adds	r2, r3, #2
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	225e      	movs	r2, #94	; 0x5e
 800721c:	5a9b      	ldrh	r3, [r3, r2]
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b299      	uxth	r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	225e      	movs	r2, #94	; 0x5e
 8007228:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	2207      	movs	r2, #7
 8007236:	4013      	ands	r3, r2
 8007238:	d049      	beq.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	2201      	movs	r2, #1
 800723e:	4013      	ands	r3, r2
 8007240:	d010      	beq.n	8007264 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	4013      	ands	r3, r2
 800724a:	d00b      	beq.n	8007264 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2201      	movs	r2, #1
 8007252:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	228c      	movs	r2, #140	; 0x8c
 8007258:	589b      	ldr	r3, [r3, r2]
 800725a:	2201      	movs	r2, #1
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	218c      	movs	r1, #140	; 0x8c
 8007262:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	2202      	movs	r2, #2
 8007268:	4013      	ands	r3, r2
 800726a:	d00f      	beq.n	800728c <UART_RxISR_16BIT_FIFOEN+0xe8>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2201      	movs	r2, #1
 8007270:	4013      	ands	r3, r2
 8007272:	d00b      	beq.n	800728c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2202      	movs	r2, #2
 800727a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	228c      	movs	r2, #140	; 0x8c
 8007280:	589b      	ldr	r3, [r3, r2]
 8007282:	2204      	movs	r2, #4
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	218c      	movs	r1, #140	; 0x8c
 800728a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	2204      	movs	r2, #4
 8007290:	4013      	ands	r3, r2
 8007292:	d00f      	beq.n	80072b4 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2201      	movs	r2, #1
 8007298:	4013      	ands	r3, r2
 800729a:	d00b      	beq.n	80072b4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2204      	movs	r2, #4
 80072a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	228c      	movs	r2, #140	; 0x8c
 80072a8:	589b      	ldr	r3, [r3, r2]
 80072aa:	2202      	movs	r2, #2
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	218c      	movs	r1, #140	; 0x8c
 80072b2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	228c      	movs	r2, #140	; 0x8c
 80072b8:	589b      	ldr	r3, [r3, r2]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0018      	movs	r0, r3
 80072c2:	f7fe ff3d 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	228c      	movs	r2, #140	; 0x8c
 80072ca:	2100      	movs	r1, #0
 80072cc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	225e      	movs	r2, #94	; 0x5e
 80072d2:	5a9b      	ldrh	r3, [r3, r2]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d132      	bne.n	8007340 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4934      	ldr	r1, [pc, #208]	; (80073b8 <UART_RxISR_16BIT_FIFOEN+0x214>)
 80072e6:	400a      	ands	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4931      	ldr	r1, [pc, #196]	; (80073bc <UART_RxISR_16BIT_FIFOEN+0x218>)
 80072f6:	400a      	ands	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2288      	movs	r2, #136	; 0x88
 80072fe:	2120      	movs	r1, #32
 8007300:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d110      	bne.n	8007332 <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2110      	movs	r1, #16
 800731c:	438a      	bics	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	225c      	movs	r2, #92	; 0x5c
 8007324:	5a9a      	ldrh	r2, [r3, r2]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0011      	movs	r1, r2
 800732a:	0018      	movs	r0, r3
 800732c:	f7fe ff18 	bl	8006160 <HAL_UARTEx_RxEventCallback>
 8007330:	e003      	b.n	800733a <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	0018      	movs	r0, r3
 8007336:	f7fa fa2f 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007340:	2316      	movs	r3, #22
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	2220      	movs	r2, #32
 800734e:	4013      	ands	r3, r2
 8007350:	d000      	beq.n	8007354 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8007352:	e74a      	b.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007354:	200e      	movs	r0, #14
 8007356:	183b      	adds	r3, r7, r0
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	215e      	movs	r1, #94	; 0x5e
 800735c:	5a52      	ldrh	r2, [r2, r1]
 800735e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007360:	183b      	adds	r3, r7, r0
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d023      	beq.n	80073b0 <UART_RxISR_16BIT_FIFOEN+0x20c>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2268      	movs	r2, #104	; 0x68
 800736c:	5a9b      	ldrh	r3, [r3, r2]
 800736e:	220e      	movs	r2, #14
 8007370:	18ba      	adds	r2, r7, r2
 8007372:	8812      	ldrh	r2, [r2, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d21b      	bcs.n	80073b0 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	490f      	ldr	r1, [pc, #60]	; (80073c0 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8007384:	400a      	ands	r2, r1
 8007386:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a0e      	ldr	r2, [pc, #56]	; (80073c4 <UART_RxISR_16BIT_FIFOEN+0x220>)
 800738c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2120      	movs	r1, #32
 800739a:	430a      	orrs	r2, r1
 800739c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800739e:	e007      	b.n	80073b0 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2108      	movs	r1, #8
 80073ac:	430a      	orrs	r2, r1
 80073ae:	619a      	str	r2, [r3, #24]
}
 80073b0:	46c0      	nop			; (mov r8, r8)
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b00a      	add	sp, #40	; 0x28
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	fffffeff 	.word	0xfffffeff
 80073bc:	effffffe 	.word	0xeffffffe
 80073c0:	efffffff 	.word	0xefffffff
 80073c4:	08006e91 	.word	0x08006e91

080073c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073d0:	46c0      	nop			; (mov r8, r8)
 80073d2:	46bd      	mov	sp, r7
 80073d4:	b002      	add	sp, #8
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073e0:	46c0      	nop			; (mov r8, r8)
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b002      	add	sp, #8
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073f0:	46c0      	nop			; (mov r8, r8)
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b002      	add	sp, #8
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2280      	movs	r2, #128	; 0x80
 8007404:	5c9b      	ldrb	r3, [r3, r2]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_UARTEx_DisableFifoMode+0x16>
 800740a:	2302      	movs	r3, #2
 800740c:	e027      	b.n	800745e <HAL_UARTEx_DisableFifoMode+0x66>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2280      	movs	r2, #128	; 0x80
 8007412:	2101      	movs	r1, #1
 8007414:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2284      	movs	r2, #132	; 0x84
 800741a:	2124      	movs	r1, #36	; 0x24
 800741c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2101      	movs	r1, #1
 8007432:	438a      	bics	r2, r1
 8007434:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4a0b      	ldr	r2, [pc, #44]	; (8007468 <HAL_UARTEx_DisableFifoMode+0x70>)
 800743a:	4013      	ands	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2284      	movs	r2, #132	; 0x84
 8007450:	2120      	movs	r1, #32
 8007452:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	2100      	movs	r1, #0
 800745a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	0018      	movs	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	b004      	add	sp, #16
 8007464:	bd80      	pop	{r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	dfffffff 	.word	0xdfffffff

0800746c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2280      	movs	r2, #128	; 0x80
 800747a:	5c9b      	ldrb	r3, [r3, r2]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007480:	2302      	movs	r3, #2
 8007482:	e02e      	b.n	80074e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2280      	movs	r2, #128	; 0x80
 8007488:	2101      	movs	r1, #1
 800748a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2284      	movs	r2, #132	; 0x84
 8007490:	2124      	movs	r1, #36	; 0x24
 8007492:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2101      	movs	r1, #1
 80074a8:	438a      	bics	r2, r1
 80074aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	08d9      	lsrs	r1, r3, #3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	0018      	movs	r0, r3
 80074c4:	f000 f854 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2284      	movs	r2, #132	; 0x84
 80074d4:	2120      	movs	r1, #32
 80074d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	2100      	movs	r1, #0
 80074de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	0018      	movs	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	b004      	add	sp, #16
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2280      	movs	r2, #128	; 0x80
 80074fa:	5c9b      	ldrb	r3, [r3, r2]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007500:	2302      	movs	r3, #2
 8007502:	e02f      	b.n	8007564 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	2101      	movs	r1, #1
 800750a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2284      	movs	r2, #132	; 0x84
 8007510:	2124      	movs	r1, #36	; 0x24
 8007512:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2101      	movs	r1, #1
 8007528:	438a      	bics	r2, r1
 800752a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4a0e      	ldr	r2, [pc, #56]	; (800756c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007534:	4013      	ands	r3, r2
 8007536:	0019      	movs	r1, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	0018      	movs	r0, r3
 8007546:	f000 f813 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2284      	movs	r2, #132	; 0x84
 8007556:	2120      	movs	r1, #32
 8007558:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2280      	movs	r2, #128	; 0x80
 800755e:	2100      	movs	r1, #0
 8007560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	0018      	movs	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	b004      	add	sp, #16
 800756a:	bd80      	pop	{r7, pc}
 800756c:	f1ffffff 	.word	0xf1ffffff

08007570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	b089      	sub	sp, #36	; 0x24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007578:	2314      	movs	r3, #20
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	4a2f      	ldr	r2, [pc, #188]	; (800763c <UARTEx_SetNbDataToProcess+0xcc>)
 800757e:	ca03      	ldmia	r2!, {r0, r1}
 8007580:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007582:	230c      	movs	r3, #12
 8007584:	18fb      	adds	r3, r7, r3
 8007586:	4a2e      	ldr	r2, [pc, #184]	; (8007640 <UARTEx_SetNbDataToProcess+0xd0>)
 8007588:	ca03      	ldmia	r2!, {r0, r1}
 800758a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007590:	2b00      	cmp	r3, #0
 8007592:	d108      	bne.n	80075a6 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	226a      	movs	r2, #106	; 0x6a
 8007598:	2101      	movs	r1, #1
 800759a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2268      	movs	r2, #104	; 0x68
 80075a0:	2101      	movs	r1, #1
 80075a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075a4:	e046      	b.n	8007634 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075a6:	261f      	movs	r6, #31
 80075a8:	19bb      	adds	r3, r7, r6
 80075aa:	2208      	movs	r2, #8
 80075ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075ae:	201e      	movs	r0, #30
 80075b0:	183b      	adds	r3, r7, r0
 80075b2:	2208      	movs	r2, #8
 80075b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	0e5b      	lsrs	r3, r3, #25
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	241d      	movs	r4, #29
 80075c2:	193b      	adds	r3, r7, r4
 80075c4:	2107      	movs	r1, #7
 80075c6:	400a      	ands	r2, r1
 80075c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	0f5b      	lsrs	r3, r3, #29
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	251c      	movs	r5, #28
 80075d6:	197b      	adds	r3, r7, r5
 80075d8:	2107      	movs	r1, #7
 80075da:	400a      	ands	r2, r1
 80075dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075de:	183b      	adds	r3, r7, r0
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	197a      	adds	r2, r7, r5
 80075e4:	7812      	ldrb	r2, [r2, #0]
 80075e6:	2114      	movs	r1, #20
 80075e8:	1879      	adds	r1, r7, r1
 80075ea:	5c8a      	ldrb	r2, [r1, r2]
 80075ec:	435a      	muls	r2, r3
 80075ee:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80075f0:	197b      	adds	r3, r7, r5
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	250c      	movs	r5, #12
 80075f6:	197a      	adds	r2, r7, r5
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075fa:	0019      	movs	r1, r3
 80075fc:	f7f8 fe0e 	bl	800021c <__divsi3>
 8007600:	0003      	movs	r3, r0
 8007602:	b299      	uxth	r1, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	226a      	movs	r2, #106	; 0x6a
 8007608:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800760a:	19bb      	adds	r3, r7, r6
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	193a      	adds	r2, r7, r4
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	2114      	movs	r1, #20
 8007614:	1879      	adds	r1, r7, r1
 8007616:	5c8a      	ldrb	r2, [r1, r2]
 8007618:	435a      	muls	r2, r3
 800761a:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800761c:	193b      	adds	r3, r7, r4
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	197a      	adds	r2, r7, r5
 8007622:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007624:	0019      	movs	r1, r3
 8007626:	f7f8 fdf9 	bl	800021c <__divsi3>
 800762a:	0003      	movs	r3, r0
 800762c:	b299      	uxth	r1, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2268      	movs	r2, #104	; 0x68
 8007632:	5299      	strh	r1, [r3, r2]
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b009      	add	sp, #36	; 0x24
 800763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763c:	080076b4 	.word	0x080076b4
 8007640:	080076bc 	.word	0x080076bc

08007644 <__libc_init_array>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	2600      	movs	r6, #0
 8007648:	4d0c      	ldr	r5, [pc, #48]	; (800767c <__libc_init_array+0x38>)
 800764a:	4c0d      	ldr	r4, [pc, #52]	; (8007680 <__libc_init_array+0x3c>)
 800764c:	1b64      	subs	r4, r4, r5
 800764e:	10a4      	asrs	r4, r4, #2
 8007650:	42a6      	cmp	r6, r4
 8007652:	d109      	bne.n	8007668 <__libc_init_array+0x24>
 8007654:	2600      	movs	r6, #0
 8007656:	f000 f821 	bl	800769c <_init>
 800765a:	4d0a      	ldr	r5, [pc, #40]	; (8007684 <__libc_init_array+0x40>)
 800765c:	4c0a      	ldr	r4, [pc, #40]	; (8007688 <__libc_init_array+0x44>)
 800765e:	1b64      	subs	r4, r4, r5
 8007660:	10a4      	asrs	r4, r4, #2
 8007662:	42a6      	cmp	r6, r4
 8007664:	d105      	bne.n	8007672 <__libc_init_array+0x2e>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	00b3      	lsls	r3, r6, #2
 800766a:	58eb      	ldr	r3, [r5, r3]
 800766c:	4798      	blx	r3
 800766e:	3601      	adds	r6, #1
 8007670:	e7ee      	b.n	8007650 <__libc_init_array+0xc>
 8007672:	00b3      	lsls	r3, r6, #2
 8007674:	58eb      	ldr	r3, [r5, r3]
 8007676:	4798      	blx	r3
 8007678:	3601      	adds	r6, #1
 800767a:	e7f2      	b.n	8007662 <__libc_init_array+0x1e>
 800767c:	08007798 	.word	0x08007798
 8007680:	08007798 	.word	0x08007798
 8007684:	08007798 	.word	0x08007798
 8007688:	0800779c 	.word	0x0800779c

0800768c <memset>:
 800768c:	0003      	movs	r3, r0
 800768e:	1812      	adds	r2, r2, r0
 8007690:	4293      	cmp	r3, r2
 8007692:	d100      	bne.n	8007696 <memset+0xa>
 8007694:	4770      	bx	lr
 8007696:	7019      	strb	r1, [r3, #0]
 8007698:	3301      	adds	r3, #1
 800769a:	e7f9      	b.n	8007690 <memset+0x4>

0800769c <_init>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr

080076a8 <_fini>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr
