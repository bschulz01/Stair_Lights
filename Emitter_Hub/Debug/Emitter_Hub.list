
Emitter_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006584  08006584  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006584  08006584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800658c  0800658c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800658c  0800658c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  2000000c  080065a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc8  080065a0  00021cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d31  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002560  00000000  00000000  00030d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00034228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019379  00000000  00000000  00035090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da45  00000000  00000000  0004e409  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2027  00000000  00000000  0005be4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fde75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003704  00000000  00000000  000fdef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006490 	.word	0x08006490

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006490 	.word	0x08006490

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8cf 	bl	80005f4 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ca 	bl	80005f4 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzsi2>:
 80005b8:	211c      	movs	r1, #28
 80005ba:	2301      	movs	r3, #1
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	4298      	cmp	r0, r3
 80005c0:	d301      	bcc.n	80005c6 <__clzsi2+0xe>
 80005c2:	0c00      	lsrs	r0, r0, #16
 80005c4:	3910      	subs	r1, #16
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	4298      	cmp	r0, r3
 80005ca:	d301      	bcc.n	80005d0 <__clzsi2+0x18>
 80005cc:	0a00      	lsrs	r0, r0, #8
 80005ce:	3908      	subs	r1, #8
 80005d0:	091b      	lsrs	r3, r3, #4
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0x22>
 80005d6:	0900      	lsrs	r0, r0, #4
 80005d8:	3904      	subs	r1, #4
 80005da:	a202      	add	r2, pc, #8	; (adr r2, 80005e4 <__clzsi2+0x2c>)
 80005dc:	5c10      	ldrb	r0, [r2, r0]
 80005de:	1840      	adds	r0, r0, r1
 80005e0:	4770      	bx	lr
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	02020304 	.word	0x02020304
 80005e8:	01010101 	.word	0x01010101
	...

080005f4 <__clzdi2>:
 80005f4:	b510      	push	{r4, lr}
 80005f6:	2900      	cmp	r1, #0
 80005f8:	d103      	bne.n	8000602 <__clzdi2+0xe>
 80005fa:	f7ff ffdd 	bl	80005b8 <__clzsi2>
 80005fe:	3020      	adds	r0, #32
 8000600:	e002      	b.n	8000608 <__clzdi2+0x14>
 8000602:	1c08      	adds	r0, r1, #0
 8000604:	f7ff ffd8 	bl	80005b8 <__clzsi2>
 8000608:	bd10      	pop	{r4, pc}
 800060a:	46c0      	nop			; (mov r8, r8)

0800060c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t dataSentFlag;


// Callback for when data transfer is complete
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(getLEDTimer(), TIM_CHANNEL);
 8000614:	f000 fb44 	bl	8000ca0 <getLEDTimer>
 8000618:	0003      	movs	r3, r0
 800061a:	2104      	movs	r1, #4
 800061c:	0018      	movs	r0, r3
 800061e:	f003 f807 	bl	8003630 <HAL_TIM_PWM_Stop_DMA>
	dataSentFlag = 1;
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200001a8 	.word	0x200001a8

08000634 <getLEDBuf>:

uint8_t* getLEDBuf(uint8_t led) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	0002      	movs	r2, r0
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	701a      	strb	r2, [r3, #0]
	return &LED_data[led*3];
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	0013      	movs	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	189a      	adds	r2, r3, r2
 800064a:	4b03      	ldr	r3, [pc, #12]	; (8000658 <getLEDBuf+0x24>)
 800064c:	18d3      	adds	r3, r2, r3
}
 800064e:	0018      	movs	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000028 	.word	0x20000028

0800065c <setLED>:

void setLED(uint32_t LED, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	000c      	movs	r4, r1
 8000666:	0010      	movs	r0, r2
 8000668:	0019      	movs	r1, r3
 800066a:	1cfb      	adds	r3, r7, #3
 800066c:	1c22      	adds	r2, r4, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	1cbb      	adds	r3, r7, #2
 8000672:	1c02      	adds	r2, r0, #0
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	1c7b      	adds	r3, r7, #1
 8000678:	1c0a      	adds	r2, r1, #0
 800067a:	701a      	strb	r2, [r3, #0]
	LED_data[LED*3] = Green;
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	0013      	movs	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	189b      	adds	r3, r3, r2
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <setLED+0x5c>)
 8000686:	1cb9      	adds	r1, r7, #2
 8000688:	7809      	ldrb	r1, [r1, #0]
 800068a:	54d1      	strb	r1, [r2, r3]
	LED_data[LED*3+1] = Red;
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	0013      	movs	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	189b      	adds	r3, r3, r2
 8000694:	3301      	adds	r3, #1
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <setLED+0x5c>)
 8000698:	1cf9      	adds	r1, r7, #3
 800069a:	7809      	ldrb	r1, [r1, #0]
 800069c:	54d1      	strb	r1, [r2, r3]
	LED_data[LED*3+2] = Blue;
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	0013      	movs	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	3302      	adds	r3, #2
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <setLED+0x5c>)
 80006aa:	1c79      	adds	r1, r7, #1
 80006ac:	7809      	ldrb	r1, [r1, #0]
 80006ae:	54d1      	strb	r1, [r2, r3]
//	if (LED < NUM_LEDS) {
//		LED_Data[LED][0] = Green;
//		LED_Data[LED][1] = Red;
//		LED_Data[LED][2] = Blue;
//	}
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b003      	add	sp, #12
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	20000028 	.word	0x20000028

080006bc <clearLEDs>:


void clearLEDs()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	for (int index = 0; index < NUM_LEDS; index++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e008      	b.n	80006da <clearLEDs+0x1e>
	{
		setLED(index, 0, 0, 0);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	f7ff ffc4 	bl	800065c <setLED>
	for (int index = 0; index < NUM_LEDS; index++)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b7f      	cmp	r3, #127	; 0x7f
 80006de:	ddf3      	ble.n	80006c8 <clearLEDs+0xc>
	}
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <updateWS2812>:
//	}
//}


void updateWS2812()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
	uint32_t color;

	uint16_t idx = 0;
 80006ee:	230e      	movs	r3, #14
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	2200      	movs	r2, #0
 80006f4:	801a      	strh	r2, [r3, #0]
	uint8_t mask = 0b11110000;
 80006f6:	1d7b      	adds	r3, r7, #5
 80006f8:	22f0      	movs	r2, #240	; 0xf0
 80006fa:	701a      	strb	r2, [r3, #0]
	// Load buffer with LED data
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	e057      	b.n	80007b2 <updateWS2812+0xca>
	{
		// Generate bits to describe color
		color = ((LED_data[led*3] & mask) << 16) |
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	0013      	movs	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	189b      	adds	r3, r3, r2
 800070a:	4a3f      	ldr	r2, [pc, #252]	; (8000808 <updateWS2812+0x120>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	1d7a      	adds	r2, r7, #5
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	4013      	ands	r3, r2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	0419      	lsls	r1, r3, #16
				((LED_data[led*3+1] & mask) << 8) |
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	0013      	movs	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	189b      	adds	r3, r3, r2
 8000720:	3301      	adds	r3, #1
 8000722:	4a39      	ldr	r2, [pc, #228]	; (8000808 <updateWS2812+0x120>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	1d7a      	adds	r2, r7, #5
 8000728:	7812      	ldrb	r2, [r2, #0]
 800072a:	4013      	ands	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	021b      	lsls	r3, r3, #8
		color = ((LED_data[led*3] & mask) << 16) |
 8000730:	4319      	orrs	r1, r3
				(LED_data[led*3+2] & mask);
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	0013      	movs	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	189b      	adds	r3, r3, r2
 800073a:	3302      	adds	r3, #2
 800073c:	4a32      	ldr	r2, [pc, #200]	; (8000808 <updateWS2812+0x120>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	1d7a      	adds	r2, r7, #5
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	4013      	ands	r3, r2
 8000746:	b2db      	uxtb	r3, r3
				((LED_data[led*3+1] & mask) << 8) |
 8000748:	430b      	orrs	r3, r1
		color = ((LED_data[led*3] & mask) << 16) |
 800074a:	603b      	str	r3, [r7, #0]

		// Set the buffer for this LED
		// Send MSB to LSB
		for (int16_t bit = 23; bit >= 0; bit--)
 800074c:	1dbb      	adds	r3, r7, #6
 800074e:	2217      	movs	r2, #23
 8000750:	801a      	strh	r2, [r3, #0]
 8000752:	e026      	b.n	80007a2 <updateWS2812+0xba>
		{
			if (color & (1<<bit))
 8000754:	1dbb      	adds	r3, r7, #6
 8000756:	2200      	movs	r2, #0
 8000758:	5e9b      	ldrsh	r3, [r3, r2]
 800075a:	2201      	movs	r2, #1
 800075c:	409a      	lsls	r2, r3
 800075e:	0013      	movs	r3, r2
 8000760:	001a      	movs	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	d007      	beq.n	8000778 <updateWS2812+0x90>
			{
				PWM_data[idx] = HIGH_TIME; // High bit
 8000768:	230e      	movs	r3, #14
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	881a      	ldrh	r2, [r3, #0]
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <updateWS2812+0x124>)
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	2136      	movs	r1, #54	; 0x36
 8000774:	52d1      	strh	r1, [r2, r3]
 8000776:	e006      	b.n	8000786 <updateWS2812+0x9e>
			}
			else
			{
				PWM_data[idx] = LOW_TIME; // Low bit
 8000778:	230e      	movs	r3, #14
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <updateWS2812+0x124>)
 8000780:	0052      	lsls	r2, r2, #1
 8000782:	211b      	movs	r1, #27
 8000784:	52d1      	strh	r1, [r2, r3]
			}
			idx++;
 8000786:	210e      	movs	r1, #14
 8000788:	187b      	adds	r3, r7, r1
 800078a:	881a      	ldrh	r2, [r3, #0]
 800078c:	187b      	adds	r3, r7, r1
 800078e:	3201      	adds	r2, #1
 8000790:	801a      	strh	r2, [r3, #0]
		for (int16_t bit = 23; bit >= 0; bit--)
 8000792:	1dbb      	adds	r3, r7, #6
 8000794:	2200      	movs	r2, #0
 8000796:	5e9b      	ldrsh	r3, [r3, r2]
 8000798:	b29b      	uxth	r3, r3
 800079a:	3b01      	subs	r3, #1
 800079c:	b29a      	uxth	r2, r3
 800079e:	1dbb      	adds	r3, r7, #6
 80007a0:	801a      	strh	r2, [r3, #0]
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	2200      	movs	r2, #0
 80007a6:	5e9b      	ldrsh	r3, [r3, r2]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	dad3      	bge.n	8000754 <updateWS2812+0x6c>
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	2b7f      	cmp	r3, #127	; 0x7f
 80007b6:	d9a4      	bls.n	8000702 <updateWS2812+0x1a>
		}
	}

	// Reset the communication line to signify end of transmission
	while (idx < BUFFER_LENGTH)
 80007b8:	e00b      	b.n	80007d2 <updateWS2812+0xea>
	{
		PWM_data[idx] = 0;
 80007ba:	200e      	movs	r0, #14
 80007bc:	183b      	adds	r3, r7, r0
 80007be:	881a      	ldrh	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <updateWS2812+0x124>)
 80007c2:	0052      	lsls	r2, r2, #1
 80007c4:	2100      	movs	r1, #0
 80007c6:	52d1      	strh	r1, [r2, r3]
		idx++;
 80007c8:	183b      	adds	r3, r7, r0
 80007ca:	881a      	ldrh	r2, [r3, #0]
 80007cc:	183b      	adds	r3, r7, r0
 80007ce:	3201      	adds	r2, #1
 80007d0:	801a      	strh	r2, [r3, #0]
	while (idx < BUFFER_LENGTH)
 80007d2:	230e      	movs	r3, #14
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <updateWS2812+0x128>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d9ed      	bls.n	80007ba <updateWS2812+0xd2>
	}

	// Begin transfer of data
	dataSentFlag = 0;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <updateWS2812+0x12c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(getLEDTimer(), TIM_CHANNEL, (uint32_t *)PWM_data, idx);
 80007e4:	f000 fa5c 	bl	8000ca0 <getLEDTimer>
 80007e8:	230e      	movs	r3, #14
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	4a07      	ldr	r2, [pc, #28]	; (800080c <updateWS2812+0x124>)
 80007f0:	2104      	movs	r1, #4
 80007f2:	f002 fd37 	bl	8003264 <HAL_TIM_PWM_Start_DMA>

//	int counter = 0;
	while(!dataSentFlag) {
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <updateWS2812+0x12c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0fb      	beq.n	80007f8 <updateWS2812+0x110>
//			HAL_TIM_PWM_Stop_DMA(getLEDTimer(), TIM_CHANNEL);
//			dataSentFlag = 1;
//		}
//		counter++;
	}
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b004      	add	sp, #16
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000028 	.word	0x20000028
 800080c:	200001ac 	.word	0x200001ac
 8000810:	00000c31 	.word	0x00000c31
 8000814:	200001a8 	.word	0x200001a8

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 ffbe 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f820 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 f9ec 	bl	8000c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000828:	f000 f9c4 	bl	8000bb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800082c:	f000 f940 	bl	8000ab0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000830:	f000 f98c 	bl	8000b4c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000834:	f000 f892 	bl	800095c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  receiveIT();
 8000838:	f000 fc36 	bl	80010a8 <receiveIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (cmdReady()) {
 800083c:	f000 fc60 	bl	8001100 <cmdReady>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d0fb      	beq.n	800083c <main+0x24>
		  processCommand();
 8000844:	f000 fcc8 	bl	80011d8 <processCommand>
		  // Update LEDs if requested
		  if (updateLEDs()) {
 8000848:	f000 fc48 	bl	80010dc <updateLEDs>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d005      	beq.n	800085c <main+0x44>
			  sendAllLEDs();
 8000850:	f000 fdd2 	bl	80013f8 <sendAllLEDs>
			  updateWS2812();
 8000854:	f7ff ff48 	bl	80006e8 <updateWS2812>
			  // Clear LEDs before receiving new data
			  clearLEDs();
 8000858:	f7ff ff30 	bl	80006bc <clearLEDs>
		  }
		  // Resume receiving interrupts
		  receiveIT();
 800085c:	f000 fc24 	bl	80010a8 <receiveIT>
	  if (cmdReady()) {
 8000860:	e7ec      	b.n	800083c <main+0x24>
	...

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b0a1      	sub	sp, #132	; 0x84
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	2448      	movs	r4, #72	; 0x48
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2338      	movs	r3, #56	; 0x38
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f005 fe03 	bl	8006480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087a:	2338      	movs	r3, #56	; 0x38
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	0018      	movs	r0, r3
 8000880:	2310      	movs	r3, #16
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f005 fdfb 	bl	8006480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088a:	003b      	movs	r3, r7
 800088c:	0018      	movs	r0, r3
 800088e:	2338      	movs	r3, #56	; 0x38
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f005 fdf4 	bl	8006480 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fd99 	bl	80023d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0052      	lsls	r2, r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008b0:	0021      	movs	r1, r4
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2240      	movs	r2, #64	; 0x40
 80008bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2202      	movs	r2, #2
 80008c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2202      	movs	r2, #2
 80008c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2208      	movs	r2, #8
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0292      	lsls	r2, r2, #10
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	0492      	lsls	r2, r2, #18
 80008e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	0592      	lsls	r2, r2, #22
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 fdbb 	bl	800246c <HAL_RCC_OscConfig>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fa:	f000 f9e9 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	2138      	movs	r1, #56	; 0x38
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2207      	movs	r2, #7
 8000904:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2202      	movs	r2, #2
 800090a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2102      	movs	r1, #2
 800091c:	0018      	movs	r0, r3
 800091e:	f002 f8c5 	bl	8002aac <HAL_RCC_ClockConfig>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000926:	f000 f9d3 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800092a:	003b      	movs	r3, r7
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <SystemClock_Config+0xf4>)
 800092e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000930:	003b      	movs	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8000936:	003b      	movs	r3, r7
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	03d2      	lsls	r2, r2, #15
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	f002 fa5d 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800094a:	f000 f9c1 	bl	8000cd0 <Error_Handler>
  }
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b021      	add	sp, #132	; 0x84
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	00200001 	.word	0x00200001

0800095c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b098      	sub	sp, #96	; 0x60
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	2354      	movs	r3, #84	; 0x54
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	0018      	movs	r0, r3
 8000968:	230c      	movs	r3, #12
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f005 fd87 	bl	8006480 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	2338      	movs	r3, #56	; 0x38
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	0018      	movs	r0, r3
 8000978:	231c      	movs	r3, #28
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f005 fd7f 	bl	8006480 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	0018      	movs	r0, r3
 8000986:	2334      	movs	r3, #52	; 0x34
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f005 fd78 	bl	8006480 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000990:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 8000992:	4a46      	ldr	r2, [pc, #280]	; (8000aac <MX_TIM1_Init+0x150>)
 8000994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000996:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80;
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 80009a4:	2250      	movs	r2, #80	; 0x50
 80009a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ae:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f002 fbf9 	bl	80031b4 <HAL_TIM_PWM_Init>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 f983 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2154      	movs	r1, #84	; 0x54
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009de:	187a      	adds	r2, r7, r1
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f003 fc3d 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ee:	f000 f96f 	bl	8000cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2138      	movs	r1, #56	; 0x38
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2260      	movs	r2, #96	; 0x60
 80009f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1e:	1879      	adds	r1, r7, r1
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	0018      	movs	r0, r3
 8000a26:	f002 fedb 	bl	80037e0 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a2e:	f000 f94f 	bl	8000cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	0192      	lsls	r2, r2, #6
 8000a56:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	0492      	lsls	r2, r2, #18
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a84:	1d3a      	adds	r2, r7, #4
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f003 fc58 	bl	8004340 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000a94:	f000 f91c 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <MX_TIM1_Init+0x14c>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f992 	bl	8000dc4 <HAL_TIM_MspPostInit>

}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b018      	add	sp, #96	; 0x60
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20001c44 	.word	0x20001c44
 8000aac:	40012c00 	.word	0x40012c00

08000ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ab6:	4a24      	ldr	r2, [pc, #144]	; (8000b48 <MX_USART1_UART_Init+0x98>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000abc:	22e1      	movs	r2, #225	; 0xe1
 8000abe:	0252      	lsls	r2, r2, #9
 8000ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f003 fcc6 	bl	800448c <HAL_UART_Init>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 f8e4 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f005 fba7 	bl	8006260 <HAL_UARTEx_SetTxFifoThreshold>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b16:	f000 f8db 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f005 fbde 	bl	80062e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 f8d2 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f005 fb5c 	bl	80061ec <HAL_UARTEx_DisableFifoMode>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f000 f8ca 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20001bb4 	.word	0x20001bb4
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <MX_USART3_UART_Init+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b58:	22e1      	movs	r2, #225	; 0xe1
 8000b5a:	0252      	lsls	r2, r2, #9
 8000b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <MX_USART3_UART_Init+0x60>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f003 fc78 	bl	800448c <HAL_UART_Init>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f000 f896 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	20001a10 	.word	0x20001a10
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_DMA_Init+0x48>)
 8000bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_DMA_Init+0x48>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <MX_DMA_Init+0x48>)
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2009      	movs	r0, #9
 8000bd8:	f000 ff28 	bl	8001a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bdc:	2009      	movs	r0, #9
 8000bde:	f000 ff3a 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	200a      	movs	r0, #10
 8000be8:	f000 ff20 	bl	8001a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 ff32 	bl	8001a56 <HAL_NVIC_EnableIRQ>

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	240c      	movs	r4, #12
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	f005 fc35 	bl	8006480 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2202      	movs	r2, #2
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_GPIO_Init+0x98>)
 8000c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c56:	2204      	movs	r2, #4
 8000c58:	4013      	ands	r3, r2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_GPIO_Init+0x9c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 fb97 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c6a:	0021      	movs	r1, r4
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2240      	movs	r2, #64	; 0x40
 8000c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2201      	movs	r2, #1
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <MX_GPIO_Init+0x9c>)
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0010      	movs	r0, r2
 8000c8c:	f001 fa20 	bl	80020d0 <HAL_GPIO_Init>

}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b009      	add	sp, #36	; 0x24
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	50000800 	.word	0x50000800

08000ca0 <getLEDTimer>:

/* USER CODE BEGIN 4 */
TIM_HandleTypeDef* getLEDTimer() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	return &htim1;
 8000ca4:	4b01      	ldr	r3, [pc, #4]	; (8000cac <getLEDTimer+0xc>)
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20001c44 	.word	0x20001c44

08000cb0 <getUFP>:
UART_HandleTypeDef* getUFP() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	return &huart1;
 8000cb4:	4b01      	ldr	r3, [pc, #4]	; (8000cbc <getUFP+0xc>)
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20001bb4 	.word	0x20001bb4

08000cc0 <getDFP>:
UART_HandleTypeDef* getDFP() {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	return &huart3;
 8000cc4:	4b01      	ldr	r3, [pc, #4]	; (8000ccc <getDFP+0xc>)
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20001a10 	.word	0x20001a10

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <Error_Handler+0x6>

08000cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0549      	lsls	r1, r1, #21
 8000d00:	430a      	orrs	r2, r1
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	055b      	lsls	r3, r3, #21
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fdc6 	bl	80018a8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d138      	bne.n	8000dac <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_TIM_PWM_MspInit+0x90>)
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_TIM_PWM_MspInit+0x90>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0109      	lsls	r1, r1, #4
 8000d44:	430a      	orrs	r2, r1
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_TIM_PWM_MspInit+0x90>)
 8000d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel1;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d58:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_TIM_PWM_MspInit+0x98>)
 8000d5a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d5e:	2215      	movs	r2, #21
 8000d60:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d64:	2210      	movs	r2, #16
 8000d66:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	0052      	lsls	r2, r2, #1
 8000d7a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fe7c 	bl	8001a90 <HAL_DMA_Init>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_TIM_PWM_MspInit+0x78>
    {
      Error_Handler();
 8000d9c:	f7ff ff98 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_TIM_PWM_MspInit+0x94>)
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b004      	add	sp, #16
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	20001aa0 	.word	0x20001aa0
 8000dc0:	40020008 	.word	0x40020008

08000dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	230c      	movs	r3, #12
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f005 fb52 	bl	8006480 <memset>
  if(htim->Instance==TIM1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <HAL_TIM_MspPostInit+0x74>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d123      	bne.n	8000e2e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_TIM_MspPostInit+0x78>)
 8000de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_TIM_MspPostInit+0x78>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	430a      	orrs	r2, r1
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_TIM_MspPostInit+0x78>)
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	2201      	movs	r2, #1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dfe:	210c      	movs	r1, #12
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	187a      	adds	r2, r7, r1
 8000e22:	23a0      	movs	r3, #160	; 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 f951 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b008      	add	sp, #32
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	231c      	movs	r3, #28
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f005 fb14 	bl	8006480 <memset>
  if(huart->Instance==USART1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a63      	ldr	r2, [pc, #396]	; (8000fec <HAL_UART_MspInit+0x1ac>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d161      	bne.n	8000f26 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e62:	4b63      	ldr	r3, [pc, #396]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e66:	4b62      	ldr	r3, [pc, #392]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	01c9      	lsls	r1, r1, #7
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e70:	4b5f      	ldr	r3, [pc, #380]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	01db      	lsls	r3, r3, #7
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e82:	4b5b      	ldr	r3, [pc, #364]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000e84:	2102      	movs	r1, #2
 8000e86:	430a      	orrs	r2, r1
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
 8000e8a:	4b59      	ldr	r3, [pc, #356]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8e:	2202      	movs	r2, #2
 8000e90:	4013      	ands	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e96:	211c      	movs	r1, #28
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	22c0      	movs	r2, #192	; 0xc0
 8000e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <HAL_UART_MspInit+0x1b4>)
 8000eba:	0019      	movs	r1, r3
 8000ebc:	0010      	movs	r0, r2
 8000ebe:	f001 f907 	bl	80020d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000ec2:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000ec4:	4a4d      	ldr	r2, [pc, #308]	; (8000ffc <HAL_UART_MspInit+0x1bc>)
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ec8:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000eca:	2233      	movs	r2, #51	; 0x33
 8000ecc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ece:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee0:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee6:	4b44      	ldr	r3, [pc, #272]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef2:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 fdc8 	bl	8001a90 <HAL_DMA_Init>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000f04:	f7ff fee4 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3b      	ldr	r2, [pc, #236]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000f0c:	679a      	str	r2, [r3, #120]	; 0x78
 8000f0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <HAL_UART_MspInit+0x1b8>)
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	201b      	movs	r0, #27
 8000f1a:	f000 fd87 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f1e:	201b      	movs	r0, #27
 8000f20:	f000 fd99 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f24:	e05e      	b.n	8000fe4 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a35      	ldr	r2, [pc, #212]	; (8001000 <HAL_UART_MspInit+0x1c0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d159      	bne.n	8000fe4 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f34:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	02c9      	lsls	r1, r1, #11
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	02db      	lsls	r3, r3, #11
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000f52:	2102      	movs	r1, #2
 8000f54:	430a      	orrs	r2, r1
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_UART_MspInit+0x1b0>)
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000f64:	211c      	movs	r1, #28
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	22c0      	movs	r2, #192	; 0xc0
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2202      	movs	r2, #2
 8000f72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2204      	movs	r2, #4
 8000f84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_UART_MspInit+0x1b4>)
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	0010      	movs	r0, r2
 8000f8e:	f001 f89f 	bl	80020d0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000f94:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <HAL_UART_MspInit+0x1c8>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000f9a:	2237      	movs	r2, #55	; 0x37
 8000f9c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fd60 	bl	8001a90 <HAL_DMA_Init>
 8000fd0:	1e03      	subs	r3, r0, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8000fd4:	f7ff fe7c 	bl	8000cd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fdc:	679a      	str	r2, [r3, #120]	; 0x78
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_UART_MspInit+0x1c4>)
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b00c      	add	sp, #48	; 0x30
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	50000400 	.word	0x50000400
 8000ff8:	20001b58 	.word	0x20001b58
 8000ffc:	40020030 	.word	0x40020030
 8001000:	40004800 	.word	0x40004800
 8001004:	20001afc 	.word	0x20001afc
 8001008:	4002001c 	.word	0x4002001c

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 fc1e 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <DMA1_Channel1_IRQHandler+0x14>)
 8001042:	0018      	movs	r0, r3
 8001044:	f000 ff02 	bl	8001e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20001aa0 	.word	0x20001aa0

08001054 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fef6 	bl	8001e4c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fef2 	bl	8001e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20001afc 	.word	0x20001afc
 8001074:	20001b58 	.word	0x20001b58

08001078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <USART1_IRQHandler+0x14>)
 800107e:	0018      	movs	r0, r3
 8001080:	f003 fd14 	bl	8004aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20001bb4 	.word	0x20001bb4

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <SystemInit+0x14>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	0512      	lsls	r2, r2, #20
 800109a:	609a      	str	r2, [r3, #8]
#endif
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <receiveIT>:
	HAL_UART_Abort_IT(getUFP());
	HAL_UART_Abort_IT(getDFP());
}

// initialize polling for receive interrupts
void receiveIT() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	cmd_ready = 0;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <receiveIT+0x2c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Abort_IT(getUFP());
 80010b2:	f7ff fdfd 	bl	8000cb0 <getUFP>
 80010b6:	0003      	movs	r3, r0
 80010b8:	0018      	movs	r0, r3
 80010ba:	f003 fc1d 	bl	80048f8 <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(getUFP(), &cmd, 1);
 80010be:	f7ff fdf7 	bl	8000cb0 <getUFP>
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <receiveIT+0x30>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	0019      	movs	r1, r3
 80010c8:	f003 fbd4 	bl	8004874 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(getDFP(), sensor_buf, SENSOR_BUF_LEN);
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20001c90 	.word	0x20001c90
 80010d8:	20001cc1 	.word	0x20001cc1

080010dc <updateLEDs>:
	  led_state = 1;
	}
}

// Returns whether LEDs should be updated
uint8_t updateLEDs() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	if (update_leds) {
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <updateLEDs+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <updateLEDs+0x16>
		update_leds = 0;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <updateLEDs+0x20>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
		return 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <updateLEDs+0x18>
	} else {
		return 0;
 80010f2:	2300      	movs	r3, #0
	}
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	20001cbc 	.word	0x20001cbc

08001100 <cmdReady>:

uint8_t cmdReady() {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	return cmd_ready;
 8001104:	4b02      	ldr	r3, [pc, #8]	; (8001110 <cmdReady+0x10>)
 8001106:	781b      	ldrb	r3, [r3, #0]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20001c90 	.word	0x20001c90

08001114 <sendACK>:

// Send ACK to UFP
void sendACK() {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t data = ACK;
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	222a      	movs	r2, #42	; 0x2a
 800111e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(getUFP(), &data, 1, SEND_TIMEOUT);
 8001120:	f7ff fdc6 	bl	8000cb0 <getUFP>
 8001124:	1df9      	adds	r1, r7, #7
 8001126:	2302      	movs	r3, #2
 8001128:	2201      	movs	r2, #1
 800112a:	f003 fa05 	bl	8004538 <HAL_UART_Transmit>
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <getActivation>:


// extract the corred
uint8_t getActivation(uint8_t sensor) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	0002      	movs	r2, r0
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	701a      	strb	r2, [r3, #0]
	if (sensor < NUM_SENSORS) {
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b27      	cmp	r3, #39	; 0x27
 800114a:	d804      	bhi.n	8001156 <getActivation+0x1e>
		return sensor_activations[sensor];
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <getActivation+0x28>)
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	e000      	b.n	8001158 <getActivation+0x20>
	} else {
		return 0;
 8001156:	2300      	movs	r3, #0
	}
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20001c94 	.word	0x20001c94

08001164 <sendCommand>:

comm_stat_t sendCommand(UART_HandleTypeDef* huart, cmd_t cmd) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	000a      	movs	r2, r1
 800116e:	1cfb      	adds	r3, r7, #3
 8001170:	701a      	strb	r2, [r3, #0]
	// Retry if needed, then give up after too many attempts
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001172:	2317      	movs	r3, #23
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
	int numAttempts = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
	uint8_t rec = 0;
 800117e:	230f      	movs	r3, #15
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8001186:	e013      	b.n	80011b0 <sendCommand+0x4c>
		// Transmit command
		HAL_UART_Transmit(huart, &cmd, sizeof(cmd), SEND_TIMEOUT);
 8001188:	1cf9      	adds	r1, r7, #3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	2302      	movs	r3, #2
 800118e:	2201      	movs	r2, #1
 8001190:	f003 f9d2 	bl	8004538 <HAL_UART_Transmit>
		// Wait for ACK
		ret = HAL_UART_Receive(huart, &rec, sizeof(rec), ACK_TIMEOUT);
 8001194:	2317      	movs	r3, #23
 8001196:	18fc      	adds	r4, r7, r3
 8001198:	230f      	movs	r3, #15
 800119a:	18f9      	adds	r1, r7, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	2303      	movs	r3, #3
 80011a0:	2201      	movs	r2, #1
 80011a2:	f003 fa75 	bl	8004690 <HAL_UART_Receive>
 80011a6:	0003      	movs	r3, r0
 80011a8:	7023      	strb	r3, [r4, #0]
		numAttempts++;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3301      	adds	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 80011b0:	2317      	movs	r3, #23
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <sendCommand+0x5c>
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	dde3      	ble.n	8001188 <sendCommand+0x24>
	}
	if (rec != ACK) {
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b2a      	cmp	r3, #42	; 0x2a
 80011c8:	d001      	beq.n	80011ce <sendCommand+0x6a>
		return COMM_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <sendCommand+0x6c>
	} else {
		return COMM_OK;
 80011ce:	2300      	movs	r3, #0
	}
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b007      	add	sp, #28
 80011d6:	bd90      	pop	{r4, r7, pc}

080011d8 <processCommand>:

// Reads command from hub in order to see if action needs to be taken
HAL_StatusTypeDef processCommand() {
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 80011de:	231f      	movs	r3, #31
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	if (cmd == UPDATE_COMPLETE) {
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <processCommand+0x20c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	d14d      	bne.n	800128a <processCommand+0xb2>
		sendACK();
 80011ee:	f7ff ff91 	bl	8001114 <sendACK>
		// Toggle the LED
//		toggleLED();
		// Once update is complete, get sensor values
		uint8_t cmd = SEND_SENSOR_DATA;
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
		HAL_StatusTypeDef ret = HAL_ERROR;
 80011f8:	231e      	movs	r3, #30
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
		int numAttempts = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
		while (ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8001204:	e014      	b.n	8001230 <processCommand+0x58>
			HAL_UART_Transmit(getDFP(), &cmd, sizeof(cmd), SEND_TIMEOUT);
 8001206:	f7ff fd5b 	bl	8000cc0 <getDFP>
 800120a:	1df9      	adds	r1, r7, #7
 800120c:	2302      	movs	r3, #2
 800120e:	2201      	movs	r2, #1
 8001210:	f003 f992 	bl	8004538 <HAL_UART_Transmit>
			ret = HAL_UART_Receive(getDFP(), sensor_activations, NUM_SENSORS, SENSOR_UPDATE_TIMEOUT);
 8001214:	f7ff fd54 	bl	8000cc0 <getDFP>
 8001218:	231e      	movs	r3, #30
 800121a:	18fc      	adds	r4, r7, r3
 800121c:	4972      	ldr	r1, [pc, #456]	; (80013e8 <processCommand+0x210>)
 800121e:	230a      	movs	r3, #10
 8001220:	2228      	movs	r2, #40	; 0x28
 8001222:	f003 fa35 	bl	8004690 <HAL_UART_Receive>
 8001226:	0003      	movs	r3, r0
 8001228:	7023      	strb	r3, [r4, #0]
			numAttempts++;
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	3301      	adds	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
		while (ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8001230:	231e      	movs	r3, #30
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <processCommand+0x68>
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b02      	cmp	r3, #2
 800123e:	dde2      	ble.n	8001206 <processCommand+0x2e>

		}
		// Update sense state so it is ready to return to hub when requested
		// Sensors are activated if any sensor (individual bit) indicates that a sensor was activated
		sense_state = OBJECT_NOT_SENSED;
 8001240:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <processCommand+0x214>)
 8001242:	2260      	movs	r2, #96	; 0x60
 8001244:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_SENSORS; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e00b      	b.n	8001264 <processCommand+0x8c>
			if (sensor_activations[i] > 0) {
 800124c:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <processCommand+0x210>)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	18d3      	adds	r3, r2, r3
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <processCommand+0x86>
				sense_state = OBJECT_SENSED;
 8001258:	4b64      	ldr	r3, [pc, #400]	; (80013ec <processCommand+0x214>)
 800125a:	2245      	movs	r2, #69	; 0x45
 800125c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_SENSORS; i++) {
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b27      	cmp	r3, #39	; 0x27
 8001268:	ddf0      	ble.n	800124c <processCommand+0x74>
			}
		}
		// Overwrite sent values with sense display if an object was sensed
		if (display_sense && sense_state == OBJECT_SENSED) {
 800126a:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <processCommand+0x218>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <processCommand+0xaa>
 8001272:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <processCommand+0x214>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b45      	cmp	r3, #69	; 0x45
 8001278:	d103      	bne.n	8001282 <processCommand+0xaa>
			clearLEDs();
 800127a:	f7ff fa1f 	bl	80006bc <clearLEDs>
			displaySense();
 800127e:	f000 f959 	bl	8001534 <displaySense>
		}
		// Set leds to update
		update_leds = 1;
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <processCommand+0x21c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e0a4      	b.n	80013d4 <processCommand+0x1fc>
	} else if (cmd == SEND_SENSOR_DATA) {
 800128a:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <processCommand+0x20c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d10e      	bne.n	80012b0 <processCommand+0xd8>
		// Send last known sense state back to hub
		ret = HAL_UART_Transmit(getUFP(), &sense_state, sizeof(sense_state), SEND_TIMEOUT);
 8001292:	f7ff fd0d 	bl	8000cb0 <getUFP>
 8001296:	231f      	movs	r3, #31
 8001298:	18fc      	adds	r4, r7, r3
 800129a:	4954      	ldr	r1, [pc, #336]	; (80013ec <processCommand+0x214>)
 800129c:	2302      	movs	r3, #2
 800129e:	2201      	movs	r2, #1
 80012a0:	f003 f94a 	bl	8004538 <HAL_UART_Transmit>
 80012a4:	0003      	movs	r3, r0
 80012a6:	7023      	strb	r3, [r4, #0]
		display_sense = 1;
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <processCommand+0x218>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e091      	b.n	80013d4 <processCommand+0x1fc>
	} else if (cmd == RECALIBRATE) {
 80012b0:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <processCommand+0x20c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d114      	bne.n	80012e2 <processCommand+0x10a>
		sendACK();
 80012b8:	f7ff ff2c 	bl	8001114 <sendACK>
		// Pass command to downstream boards
		sendCommand(getDFP(), cmd);
 80012bc:	f7ff fd00 	bl	8000cc0 <getDFP>
 80012c0:	0002      	movs	r2, r0
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <processCommand+0x20c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0019      	movs	r1, r3
 80012c8:	0010      	movs	r0, r2
 80012ca:	f7ff ff4b 	bl	8001164 <sendCommand>
		if (ret != HAL_OK) {
 80012ce:	231f      	movs	r3, #31
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d100      	bne.n	80012da <processCommand+0x102>
 80012d8:	e07c      	b.n	80013d4 <processCommand+0x1fc>
			return ret;
 80012da:	231f      	movs	r3, #31
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	e07b      	b.n	80013da <processCommand+0x202>
		}
	} else if (cmd == ENABLE_SENSE) {
 80012e2:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <processCommand+0x20c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d110      	bne.n	800130c <processCommand+0x134>
		sendACK(getUFP());
 80012ea:	f7ff fce1 	bl	8000cb0 <getUFP>
 80012ee:	0003      	movs	r3, r0
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff0f 	bl	8001114 <sendACK>
		display_sense = 1;
 80012f6:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <processCommand+0x218>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
		sendCommand(getDFP(), ENABLE_SENSE);
 80012fc:	f7ff fce0 	bl	8000cc0 <getDFP>
 8001300:	0003      	movs	r3, r0
 8001302:	2112      	movs	r1, #18
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ff2d 	bl	8001164 <sendCommand>
 800130a:	e063      	b.n	80013d4 <processCommand+0x1fc>
	} else if (cmd == DISABLE_SENSE) {
 800130c:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <processCommand+0x20c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b1b      	cmp	r3, #27
 8001312:	d110      	bne.n	8001336 <processCommand+0x15e>
		sendACK(getUFP());
 8001314:	f7ff fccc 	bl	8000cb0 <getUFP>
 8001318:	0003      	movs	r3, r0
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff fefa 	bl	8001114 <sendACK>
		display_sense = 0;
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <processCommand+0x218>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
		sendCommand(getDFP(), DISABLE_SENSE);
 8001326:	f7ff fccb 	bl	8000cc0 <getDFP>
 800132a:	0003      	movs	r3, r0
 800132c:	211b      	movs	r1, #27
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff ff18 	bl	8001164 <sendCommand>
 8001334:	e04e      	b.n	80013d4 <processCommand+0x1fc>
	}  else if (cmd == CLEAR_LEDS) {
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <processCommand+0x20c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d110      	bne.n	8001360 <processCommand+0x188>
		sendACK();
 800133e:	f7ff fee9 	bl	8001114 <sendACK>
		// Pass command to downstream boards
		sendCommand(getDFP(), cmd);
 8001342:	f7ff fcbd 	bl	8000cc0 <getDFP>
 8001346:	0002      	movs	r2, r0
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <processCommand+0x20c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	0019      	movs	r1, r3
 800134e:	0010      	movs	r0, r2
 8001350:	f7ff ff08 	bl	8001164 <sendCommand>
		// Clear LEDs and update strips
		clearLEDs();
 8001354:	f7ff f9b2 	bl	80006bc <clearLEDs>
		// Set leds to update
		update_leds = 1;
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <processCommand+0x21c>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e039      	b.n	80013d4 <processCommand+0x1fc>
	} else if (cmd == SET_LED_VALS) {
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <processCommand+0x20c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d135      	bne.n	80013d4 <processCommand+0x1fc>
		// Begin waiting for LED data from UFP
		uint8_t info[2] = {0, 0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	705a      	strb	r2, [r3, #1]
		// Return an ACK to begin handshake
		sendACK();
 8001374:	f7ff fece 	bl	8001114 <sendACK>
		// Receive info about the data transfer
		HAL_UART_Receive(getUFP(), info, sizeof(info), INFO_TIMEOUT);
 8001378:	f7ff fc9a 	bl	8000cb0 <getUFP>
 800137c:	1d39      	adds	r1, r7, #4
 800137e:	2305      	movs	r3, #5
 8001380:	2202      	movs	r2, #2
 8001382:	f003 f985 	bl	8004690 <HAL_UART_Receive>
		int led = info[0];
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	613b      	str	r3, [r7, #16]
		int bytes = info[1]*3;
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	001a      	movs	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	189b      	adds	r3, r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
		// Send ack back to UFP to begin transmission of data
		sendACK();
 800139a:	f7ff febb 	bl	8001114 <sendACK>
		// Get data
		uint8_t* ledBufPtr = getLEDBuf(led);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff f946 	bl	8000634 <getLEDBuf>
 80013a8:	0003      	movs	r3, r0
 80013aa:	60bb      	str	r3, [r7, #8]
		ret = HAL_UART_Receive(getUFP(), ledBufPtr, bytes, LED_UPDATE_TIMEOUT);
 80013ac:	f7ff fc80 	bl	8000cb0 <getUFP>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	251f      	movs	r5, #31
 80013b6:	197c      	adds	r4, r7, r5
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	231e      	movs	r3, #30
 80013bc:	f003 f968 	bl	8004690 <HAL_UART_Receive>
 80013c0:	0003      	movs	r3, r0
 80013c2:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 80013c4:	197b      	adds	r3, r7, r5
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <processCommand+0x1fc>
			return ret;
 80013cc:	231f      	movs	r3, #31
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	e002      	b.n	80013da <processCommand+0x202>
		}
	}
	return ret;
 80013d4:	231f      	movs	r3, #31
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	781b      	ldrb	r3, [r3, #0]

}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b008      	add	sp, #32
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20001cc1 	.word	0x20001cc1
 80013e8:	20001c94 	.word	0x20001c94
 80013ec:	20001cbf 	.word	0x20001cbf
 80013f0:	20001cbe 	.word	0x20001cbe
 80013f4:	20001cbc 	.word	0x20001cbc

080013f8 <sendAllLEDs>:


// Send all the LED data to downstream receiver board
void sendAllLEDs() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	int startIndex = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
	// Update in batches until all leds have been updated
	while (startIndex < NUM_LEDS) {
 8001402:	e008      	b.n	8001416 <sendAllLEDs+0x1e>
		sendLEDVals(startIndex, MAX_LED_UPDATE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	211e      	movs	r1, #30
 800140a:	0018      	movs	r0, r3
 800140c:	f000 f811 	bl	8001432 <sendLEDVals>
		startIndex += MAX_LED_UPDATE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	331e      	adds	r3, #30
 8001414:	607b      	str	r3, [r7, #4]
	while (startIndex < NUM_LEDS) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b7f      	cmp	r3, #127	; 0x7f
 800141a:	ddf3      	ble.n	8001404 <sendAllLEDs+0xc>
	}
	// Notify that update is complete
	sendCommand(getDFP(), UPDATE_COMPLETE);
 800141c:	f7ff fc50 	bl	8000cc0 <getDFP>
 8001420:	0003      	movs	r3, r0
 8001422:	2110      	movs	r1, #16
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff fe9d 	bl	8001164 <sendCommand>
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}

08001432 <sendLEDVals>:
 * 			- The index of the first LED being updated
 * 			- The number of LEDs to be updated
 * 	2) Wait for ACK from downstream board
 * 	3) Send LED data once ACK is received
 */
comm_stat_t sendLEDVals(uint8_t startIndex, uint8_t len) {
 8001432:	b5b0      	push	{r4, r5, r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	0002      	movs	r2, r0
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	1c0a      	adds	r2, r1, #0
 8001442:	701a      	strb	r2, [r3, #0]
	// Truncate indices if too long
	startIndex = startIndex > NUM_LEDS ? NUM_LEDS : startIndex;
 8001444:	1dfa      	adds	r2, r7, #7
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	2980      	cmp	r1, #128	; 0x80
 800144e:	d900      	bls.n	8001452 <sendLEDVals+0x20>
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	7013      	strb	r3, [r2, #0]
	len = startIndex + len > NUM_LEDS ? NUM_LEDS - startIndex : len;
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	2b80      	cmp	r3, #128	; 0x80
 8001460:	dd06      	ble.n	8001470 <sendLEDVals+0x3e>
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	4252      	negs	r2, r2
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	e001      	b.n	8001474 <sendLEDVals+0x42>
 8001470:	1dbb      	adds	r3, r7, #6
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	1dba      	adds	r2, r7, #6
 8001476:	7013      	strb	r3, [r2, #0]

	// Send request to send data with start index and number of LEDs to update
	UART_HandleTypeDef* uartPtr = getDFP();
 8001478:	f7ff fc22 	bl	8000cc0 <getDFP>
 800147c:	0003      	movs	r3, r0
 800147e:	617b      	str	r3, [r7, #20]
	uint8_t* LEDdata = getLEDBuf(startIndex);
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff f8d5 	bl	8000634 <getLEDBuf>
 800148a:	0003      	movs	r3, r0
 800148c:	613b      	str	r3, [r7, #16]

	// Send request to update leds
	comm_stat_t status = sendCommand(uartPtr, SET_LED_VALS);
 800148e:	250f      	movs	r5, #15
 8001490:	197c      	adds	r4, r7, r5
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2104      	movs	r1, #4
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff fe64 	bl	8001164 <sendCommand>
 800149c:	0003      	movs	r3, r0
 800149e:	7023      	strb	r3, [r4, #0]
	// Return if command was not successful
	if (status != COMM_OK) {
 80014a0:	197b      	adds	r3, r7, r5
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <sendLEDVals+0x7e>
		return status;
 80014a8:	230f      	movs	r3, #15
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	e02e      	b.n	800150e <sendLEDVals+0xdc>
	}
	// Send info about data transfer
	uint8_t info[2] = {startIndex, len};
 80014b0:	210c      	movs	r1, #12
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	1dfa      	adds	r2, r7, #7
 80014b6:	7812      	ldrb	r2, [r2, #0]
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	1dba      	adds	r2, r7, #6
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(uartPtr, info, sizeof(info), INFO_TIMEOUT);
 80014c2:	1879      	adds	r1, r7, r1
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	2305      	movs	r3, #5
 80014c8:	2202      	movs	r2, #2
 80014ca:	f003 f835 	bl	8004538 <HAL_UART_Transmit>
	uint8_t rec = 0;
 80014ce:	210b      	movs	r1, #11
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(uartPtr, &rec, sizeof(rec), ACK_TIMEOUT);
 80014d6:	000c      	movs	r4, r1
 80014d8:	1879      	adds	r1, r7, r1
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	2303      	movs	r3, #3
 80014de:	2201      	movs	r2, #1
 80014e0:	f003 f8d6 	bl	8004690 <HAL_UART_Receive>
	// Send LED data if ack was received
	if (rec == ACK) {
 80014e4:	0021      	movs	r1, r4
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b2a      	cmp	r3, #42	; 0x2a
 80014ec:	d10e      	bne.n	800150c <sendLEDVals+0xda>
		HAL_UART_Transmit(uartPtr, LEDdata, len*3, LED_UPDATE_TIMEOUT);
 80014ee:	1dbb      	adds	r3, r7, #6
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	1c1a      	adds	r2, r3, #0
 80014f6:	1c13      	adds	r3, r2, #0
 80014f8:	18db      	adds	r3, r3, r3
 80014fa:	189b      	adds	r3, r3, r2
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	231e      	movs	r3, #30
 8001504:	f003 f818 	bl	8004538 <HAL_UART_Transmit>
	} else {
		return COMM_ERROR;
	}
	return COMM_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	e000      	b.n	800150e <sendLEDVals+0xdc>
		return COMM_ERROR;
 800150c:	2301      	movs	r3, #1
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b006      	add	sp, #24
 8001514:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001518 <HAL_UART_RxCpltCallback>:

// Receive commands from hub
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	cmd_ready = 1;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_UART_RxCpltCallback+0x18>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	20001c90 	.word	0x20001c90

08001534 <displaySense>:
	float difference = max_readings[sensor] - min_readings[sensor];
	float normalized = 255 / difference * (reading - min_readings[sensor]);
	return (uint8_t) normalized;
}

void displaySense() {
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af02      	add	r7, sp, #8
	int ledsPerSensor = NUM_LEDS / (NUM_SENSORS);
 800153a:	2303      	movs	r3, #3
 800153c:	617b      	str	r3, [r7, #20]
	int extraLEDs = NUM_LEDS - NUM_SENSORS * ledsPerSensor;
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	0013      	movs	r3, r2
 8001542:	06db      	lsls	r3, r3, #27
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	3380      	adds	r3, #128	; 0x80
 800154e:	613b      	str	r3, [r7, #16]
	int extraInterval = NUM_SENSORS / extraLEDs;
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	2028      	movs	r0, #40	; 0x28
 8001554:	f7fe fe62 	bl	800021c <__divsi3>
 8001558:	0003      	movs	r3, r0
 800155a:	60fb      	str	r3, [r7, #12]
	// Iterate through each sensor
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	e05b      	b.n	800161a <displaySense+0xe6>
		uint8_t r = 0;
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
		uint8_t g = 0;
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		uint8_t b = 0;
 800156e:	1d7b      	adds	r3, r7, #5
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
		if (getActivation(sensor) > 0) {
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff fddd 	bl	8001138 <getActivation>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d010      	beq.n	80015a4 <displaySense+0x70>
			generateRGB(getActivation(sensor), ON_TIME, 200, &r, &g, &b);
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff fdd6 	bl	8001138 <getActivation>
 800158c:	0003      	movs	r3, r0
 800158e:	0018      	movs	r0, r3
 8001590:	1dfa      	adds	r2, r7, #7
 8001592:	1d7b      	adds	r3, r7, #5
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	1dbb      	adds	r3, r7, #6
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	0013      	movs	r3, r2
 800159c:	22c8      	movs	r2, #200	; 0xc8
 800159e:	211e      	movs	r1, #30
 80015a0:	f000 f842 	bl	8001628 <generateRGB>
		}
		int startIndex = ledsPerSensor * sensor + sensor / extraInterval;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	435a      	muls	r2, r3
 80015aa:	0014      	movs	r4, r2
 80015ac:	68f9      	ldr	r1, [r7, #12]
 80015ae:	69f8      	ldr	r0, [r7, #28]
 80015b0:	f7fe fe34 	bl	800021c <__divsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	18e3      	adds	r3, r4, r3
 80015b8:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < ledsPerSensor; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	e00e      	b.n	80015de <displaySense+0xaa>
			setLED(startIndex + i, r, g, b);
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	18d3      	adds	r3, r2, r3
 80015c6:	0018      	movs	r0, r3
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	7819      	ldrb	r1, [r3, #0]
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	1d7b      	adds	r3, r7, #5
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f7ff f842 	bl	800065c <setLED>
		for (int i = 0; i < ledsPerSensor; i++) {
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	3301      	adds	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dbec      	blt.n	80015c0 <displaySense+0x8c>
		}
		// Control an additional LED if this sensor is mapped to an extra LED
		if (sensor % extraInterval == (extraInterval - 1)) {
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7fe fefc 	bl	80003e8 <__aeabi_idivmod>
 80015f0:	000b      	movs	r3, r1
 80015f2:	001a      	movs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10b      	bne.n	8001614 <displaySense+0xe0>
			setLED(startIndex + ledsPerSensor, r, g, b);
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	0018      	movs	r0, r3
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	7819      	ldrb	r1, [r3, #0]
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	1d7b      	adds	r3, r7, #5
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	f7ff f824 	bl	800065c <setLED>
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	3301      	adds	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	2b27      	cmp	r3, #39	; 0x27
 800161e:	dda0      	ble.n	8001562 <displaySense+0x2e>
		}
	}
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b009      	add	sp, #36	; 0x24
 8001626:	bd90      	pop	{r4, r7, pc}

08001628 <generateRGB>:

void generateRGB(uint32_t index, uint32_t maxIndex, uint8_t brightness, uint8_t* r, uint8_t* g, uint8_t* b) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	701a      	strb	r2, [r3, #0]
//	// blue
//	if (index >= maxIndex / 3)
//	{
//		*b = (uint8_t) cos1;
//	}	// Choose one of 6 colors
	uint8_t div = maxIndex / 6;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2106      	movs	r1, #6
 800163c:	0018      	movs	r0, r3
 800163e:	f7fe fd63 	bl	8000108 <__udivsi3>
 8001642:	0003      	movs	r3, r0
 8001644:	001a      	movs	r2, r3
 8001646:	2117      	movs	r1, #23
 8001648:	187b      	adds	r3, r7, r1
 800164a:	701a      	strb	r2, [r3, #0]
	if (index < div) {
 800164c:	187b      	adds	r3, r7, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	429a      	cmp	r2, r3
 8001654:	d20a      	bcs.n	800166c <generateRGB+0x44>
		*r = 0;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
		*g = brightness;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	1dfa      	adds	r2, r7, #7
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
	} else {
		*r = 0;
		*g = brightness/2;
		*b = brightness/2;
	}
}
 800166a:	e068      	b.n	800173e <generateRGB+0x116>
	} else if (index < 2*div) {
 800166c:	2317      	movs	r3, #23
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	001a      	movs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4293      	cmp	r3, r2
 800167a:	d20f      	bcs.n	800169c <generateRGB+0x74>
		*r = brightness/2;
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	e050      	b.n	800173e <generateRGB+0x116>
	} else if (index < 3*div) {
 800169c:	2317      	movs	r3, #23
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	0013      	movs	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	189b      	adds	r3, r3, r2
 80016a8:	001a      	movs	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d20a      	bcs.n	80016c6 <generateRGB+0x9e>
		*r = brightness;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	1dfa      	adds	r2, r7, #7
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	701a      	strb	r2, [r3, #0]
		*g = 0;
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
		*b = 0;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	e03b      	b.n	800173e <generateRGB+0x116>
	} else if (index < 4*div) {
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	001a      	movs	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d20f      	bcs.n	80016f6 <generateRGB+0xce>
		*r = brightness/2;
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	701a      	strb	r2, [r3, #0]
		*g = 0;
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	e023      	b.n	800173e <generateRGB+0x116>
	} else if (index < 5*div) {
 80016f6:	2317      	movs	r3, #23
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	0013      	movs	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	189b      	adds	r3, r3, r2
 8001702:	001a      	movs	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4293      	cmp	r3, r2
 8001708:	d20a      	bcs.n	8001720 <generateRGB+0xf8>
		*r = 0;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
		*b = brightness;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	1dfa      	adds	r2, r7, #7
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	701a      	strb	r2, [r3, #0]
}
 800171e:	e00e      	b.n	800173e <generateRGB+0x116>
		*r = 0;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b006      	add	sp, #24
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800174a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800174c:	f7ff fca0 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopForever+0x6>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopForever+0xe>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopForever+0x16>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001776:	f004 fe5f 	bl	8006438 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800177a:	f7ff f84d 	bl	8000818 <main>

0800177e <LoopForever>:

LoopForever:
  b LoopForever
 800177e:	e7fe      	b.n	800177e <LoopForever>
  ldr   r0, =_estack
 8001780:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800178c:	08006594 	.word	0x08006594
  ldr r2, =_sbss
 8001790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001794:	20001cc8 	.word	0x20001cc8

08001798 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_COMP_IRQHandler>
	...

0800179c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x3c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Init+0x3c>)
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0049      	lsls	r1, r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f810 	bl	80017dc <HAL_InitTick>
 80017bc:	1e03      	subs	r3, r0, #0
 80017be:	d003      	beq.n	80017c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e001      	b.n	80017cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fa86 	bl	8000cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40022000 	.word	0x40022000

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	230f      	movs	r3, #15
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_InitTick+0x88>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d02b      	beq.n	800184c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_InitTick+0x8c>)
 80017f6:	681c      	ldr	r4, [r3, #0]
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_InitTick+0x88>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	0019      	movs	r1, r3
 80017fe:	23fa      	movs	r3, #250	; 0xfa
 8001800:	0098      	lsls	r0, r3, #2
 8001802:	f7fe fc81 	bl	8000108 <__udivsi3>
 8001806:	0003      	movs	r3, r0
 8001808:	0019      	movs	r1, r3
 800180a:	0020      	movs	r0, r4
 800180c:	f7fe fc7c 	bl	8000108 <__udivsi3>
 8001810:	0003      	movs	r3, r0
 8001812:	0018      	movs	r0, r3
 8001814:	f000 f92f 	bl	8001a76 <HAL_SYSTICK_Config>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d112      	bne.n	8001842 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d80a      	bhi.n	8001838 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	2301      	movs	r3, #1
 8001826:	425b      	negs	r3, r3
 8001828:	2200      	movs	r2, #0
 800182a:	0018      	movs	r0, r3
 800182c:	f000 f8fe 	bl	8001a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_InitTick+0x90>)
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e00d      	b.n	8001854 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001838:	230f      	movs	r3, #15
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e008      	b.n	8001854 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e003      	b.n	8001854 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800184c:	230f      	movs	r3, #15
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001854:	230f      	movs	r3, #15
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	781b      	ldrb	r3, [r3, #0]
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b005      	add	sp, #20
 8001860:	bd90      	pop	{r4, r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	20000008 	.word	0x20000008
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x1c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	001a      	movs	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x20>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	18d2      	adds	r2, r2, r3
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_IncTick+0x20>)
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000008 	.word	0x20000008
 8001890:	20001cc4 	.word	0x20001cc4

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_GetTick+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20001cc4 	.word	0x20001cc4

080018a8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	40010000 	.word	0x40010000
 80018d0:	fffff9ff 	.word	0xfffff9ff

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b7f      	cmp	r3, #127	; 0x7f
 80018e6:	d809      	bhi.n	80018fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	001a      	movs	r2, r3
 80018ee:	231f      	movs	r3, #31
 80018f0:	401a      	ands	r2, r3
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_EnableIRQ+0x30>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	4091      	lsls	r1, r2
 80018f8:	000a      	movs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	0002      	movs	r2, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b7f      	cmp	r3, #127	; 0x7f
 800191c:	d828      	bhi.n	8001970 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <__NVIC_SetPriority+0xd4>)
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	33c0      	adds	r3, #192	; 0xc0
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	589b      	ldr	r3, [r3, r2]
 800192e:	1dfa      	adds	r2, r7, #7
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	0011      	movs	r1, r2
 8001934:	2203      	movs	r2, #3
 8001936:	400a      	ands	r2, r1
 8001938:	00d2      	lsls	r2, r2, #3
 800193a:	21ff      	movs	r1, #255	; 0xff
 800193c:	4091      	lsls	r1, r2
 800193e:	000a      	movs	r2, r1
 8001940:	43d2      	mvns	r2, r2
 8001942:	401a      	ands	r2, r3
 8001944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	22ff      	movs	r2, #255	; 0xff
 800194c:	401a      	ands	r2, r3
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	0018      	movs	r0, r3
 8001954:	2303      	movs	r3, #3
 8001956:	4003      	ands	r3, r0
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195c:	481f      	ldr	r0, [pc, #124]	; (80019dc <__NVIC_SetPriority+0xd4>)
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	430a      	orrs	r2, r1
 8001968:	33c0      	adds	r3, #192	; 0xc0
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800196e:	e031      	b.n	80019d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <__NVIC_SetPriority+0xd8>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	0019      	movs	r1, r3
 8001978:	230f      	movs	r3, #15
 800197a:	400b      	ands	r3, r1
 800197c:	3b08      	subs	r3, #8
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3306      	adds	r3, #6
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1dfa      	adds	r2, r7, #7
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	0011      	movs	r1, r2
 8001990:	2203      	movs	r2, #3
 8001992:	400a      	ands	r2, r1
 8001994:	00d2      	lsls	r2, r2, #3
 8001996:	21ff      	movs	r1, #255	; 0xff
 8001998:	4091      	lsls	r1, r2
 800199a:	000a      	movs	r2, r1
 800199c:	43d2      	mvns	r2, r2
 800199e:	401a      	ands	r2, r3
 80019a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	401a      	ands	r2, r3
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	0018      	movs	r0, r3
 80019b0:	2303      	movs	r3, #3
 80019b2:	4003      	ands	r3, r0
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <__NVIC_SetPriority+0xd8>)
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	001c      	movs	r4, r3
 80019c0:	230f      	movs	r3, #15
 80019c2:	4023      	ands	r3, r4
 80019c4:	3b08      	subs	r3, #8
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	430a      	orrs	r2, r1
 80019ca:	3306      	adds	r3, #6
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	18c3      	adds	r3, r0, r3
 80019d0:	3304      	adds	r3, #4
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b003      	add	sp, #12
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <SysTick_Config+0x40>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e010      	b.n	8001a1c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <SysTick_Config+0x44>)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	3a01      	subs	r2, #1
 8001a00:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	2301      	movs	r3, #1
 8001a04:	425b      	negs	r3, r3
 8001a06:	2103      	movs	r1, #3
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ff7d 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <SysTick_Config+0x44>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x44>)
 8001a16:	2207      	movs	r2, #7
 8001a18:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	00ffffff 	.word	0x00ffffff
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	210f      	movs	r1, #15
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	1c02      	adds	r2, r0, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff ff33 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff ffaf 	bl	80019e4 <SysTick_Config>
 8001a86:	0003      	movs	r3, r0
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e077      	b.n	8001b92 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	; (8001b9c <HAL_DMA_Init+0x10c>)
 8001aa8:	4694      	mov	ip, r2
 8001aaa:	4463      	add	r3, ip
 8001aac:	2114      	movs	r1, #20
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7fe fb2a 	bl	8000108 <__udivsi3>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	009a      	lsls	r2, r3, #2
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2225      	movs	r2, #37	; 0x25
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <HAL_DMA_Init+0x110>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 fa8f 	bl	8002030 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	01db      	lsls	r3, r3, #7
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d102      	bne.n	8001b24 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	213f      	movs	r1, #63	; 0x3f
 8001b2e:	400a      	ands	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d011      	beq.n	8001b68 <HAL_DMA_Init+0xd8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d80d      	bhi.n	8001b68 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 fa9a 	bl	8002088 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	e008      	b.n	8001b7a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2225      	movs	r2, #37	; 0x25
 8001b84:	2101      	movs	r1, #1
 8001b86:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2224      	movs	r2, #36	; 0x24
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	bffdfff8 	.word	0xbffdfff8
 8001ba0:	ffff800f 	.word	0xffff800f

08001ba4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2224      	movs	r2, #36	; 0x24
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Start_IT+0x24>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e06f      	b.n	8001ca8 <HAL_DMA_Start_IT+0x104>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2224      	movs	r2, #36	; 0x24
 8001bcc:	2101      	movs	r1, #1
 8001bce:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2225      	movs	r2, #37	; 0x25
 8001bd4:	5c9b      	ldrb	r3, [r3, r2]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d157      	bne.n	8001c8c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2225      	movs	r2, #37	; 0x25
 8001be0:	2102      	movs	r1, #2
 8001be2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f9d5 	bl	8001fb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	210e      	movs	r1, #14
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e00f      	b.n	8001c40 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d008      	beq.n	8001c60 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0049      	lsls	r1, r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	0049      	lsls	r1, r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00a      	b.n	8001ca2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2224      	movs	r2, #36	; 0x24
 8001c96:	2100      	movs	r1, #0
 8001c98:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001c9a:	2317      	movs	r3, #23
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ca2:	2317      	movs	r3, #23
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b006      	add	sp, #24
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e050      	b.n	8001d64 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2225      	movs	r2, #37	; 0x25
 8001cc6:	5c9b      	ldrb	r3, [r3, r2]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d008      	beq.n	8001ce0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	2100      	movs	r1, #0
 8001cda:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e041      	b.n	8001d64 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	210e      	movs	r1, #14
 8001cec:	438a      	bics	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	491c      	ldr	r1, [pc, #112]	; (8001d6c <HAL_DMA_Abort+0xbc>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_DMA_Abort+0xc0>)
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	221c      	movs	r2, #28
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_DMA_Abort+0xc0>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d2e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00c      	beq.n	8001d52 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d42:	490a      	ldr	r1, [pc, #40]	; (8001d6c <HAL_DMA_Abort+0xbc>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d50:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2225      	movs	r2, #37	; 0x25
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2224      	movs	r2, #36	; 0x24
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	fffffeff 	.word	0xfffffeff
 8001d70:	40020000 	.word	0x40020000

08001d74 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2225      	movs	r2, #37	; 0x25
 8001d88:	5c9b      	ldrb	r3, [r3, r2]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2204      	movs	r2, #4
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e049      	b.n	8001e34 <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	210e      	movs	r1, #14
 8001dac:	438a      	bics	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	491e      	ldr	r1, [pc, #120]	; (8001e44 <HAL_DMA_Abort_IT+0xd0>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_DMA_Abort_IT+0xd4>)
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	221c      	movs	r2, #28
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2201      	movs	r2, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_DMA_Abort_IT+0xd4>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00c      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	4910      	ldr	r1, [pc, #64]	; (8001e44 <HAL_DMA_Abort_IT+0xd0>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2225      	movs	r2, #37	; 0x25
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2224      	movs	r2, #36	; 0x24
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	0010      	movs	r0, r2
 8001e32:	4798      	blx	r3
    }
  }
  return status;
 8001e34:	230f      	movs	r3, #15
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	fffffeff 	.word	0xfffffeff
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001e54:	4b55      	ldr	r3, [pc, #340]	; (8001fac <HAL_DMA_IRQHandler+0x160>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	221c      	movs	r2, #28
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x7a>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d023      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2220      	movs	r2, #32
 8001e86:	4013      	ands	r3, r2
 8001e88:	d107      	bne.n	8001e9a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2104      	movs	r1, #4
 8001e96:	438a      	bics	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001e9a:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_DMA_IRQHandler+0x160>)
 8001e9c:	6859      	ldr	r1, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	221c      	movs	r2, #28
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_DMA_IRQHandler+0x160>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d100      	bne.n	8001eba <HAL_DMA_IRQHandler+0x6e>
 8001eb8:	e073      	b.n	8001fa2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001ec4:	e06d      	b.n	8001fa2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	221c      	movs	r2, #28
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2202      	movs	r2, #2
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d02e      	beq.n	8001f38 <HAL_DMA_IRQHandler+0xec>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d02a      	beq.n	8001f38 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	4013      	ands	r3, r2
 8001eec:	d10b      	bne.n	8001f06 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	210a      	movs	r1, #10
 8001efa:	438a      	bics	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2225      	movs	r2, #37	; 0x25
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_DMA_IRQHandler+0x160>)
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	221c      	movs	r2, #28
 8001f10:	4013      	ands	r3, r2
 8001f12:	2202      	movs	r2, #2
 8001f14:	409a      	lsls	r2, r3
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_DMA_IRQHandler+0x160>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	; 0x24
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d03a      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	0010      	movs	r0, r2
 8001f34:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001f36:	e034      	b.n	8001fa2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	221c      	movs	r2, #28
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2208      	movs	r2, #8
 8001f42:	409a      	lsls	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d02b      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x158>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2208      	movs	r2, #8
 8001f50:	4013      	ands	r3, r2
 8001f52:	d027      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	210e      	movs	r1, #14
 8001f60:	438a      	bics	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_DMA_IRQHandler+0x160>)
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	221c      	movs	r2, #28
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2201      	movs	r2, #1
 8001f72:	409a      	lsls	r2, r3
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_DMA_IRQHandler+0x160>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2225      	movs	r2, #37	; 0x25
 8001f84:	2101      	movs	r1, #1
 8001f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46c0      	nop			; (mov r8, r8)
}
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40020000 	.word	0x40020000

08001fb0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fc6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001fd8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <DMA_SetConfig+0x7c>)
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	221c      	movs	r2, #28
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <DMA_SetConfig+0x7c>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d108      	bne.n	8002012 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002010:	e007      	b.n	8002022 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	60da      	str	r2, [r3, #12]
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40020000 	.word	0x40020000

08002030 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002040:	4694      	mov	ip, r2
 8002042:	4463      	add	r3, ip
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	001a      	movs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	001a      	movs	r2, r3
 8002052:	23ff      	movs	r3, #255	; 0xff
 8002054:	4013      	ands	r3, r2
 8002056:	3b08      	subs	r3, #8
 8002058:	2114      	movs	r1, #20
 800205a:	0018      	movs	r0, r3
 800205c:	f7fe f854 	bl	8000108 <__udivsi3>
 8002060:	0003      	movs	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002068:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	221f      	movs	r2, #31
 800206e:	4013      	ands	r3, r2
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b004      	add	sp, #16
 800207e:	bd80      	pop	{r7, pc}
 8002080:	10008200 	.word	0x10008200
 8002084:	40020880 	.word	0x40020880

08002088 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	223f      	movs	r2, #63	; 0x3f
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800209e:	4694      	mov	ip, r2
 80020a0:	4463      	add	r3, ip
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	001a      	movs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	4013      	ands	r3, r2
 80020b8:	2201      	movs	r2, #1
 80020ba:	409a      	lsls	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	1000823f 	.word	0x1000823f
 80020cc:	40020940 	.word	0x40020940

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e147      	b.n	8002370 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4091      	lsls	r1, r2
 80020ea:	000a      	movs	r2, r1
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <HAL_GPIO_Init+0x28>
 80020f6:	e138      	b.n	800236a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d00b      	beq.n	8002118 <HAL_GPIO_Init+0x48>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800210c:	2b11      	cmp	r3, #17
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b12      	cmp	r3, #18
 8002116:	d130      	bne.n	800217a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	43da      	mvns	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	0013      	movs	r3, r2
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800214e:	2201      	movs	r2, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	43da      	mvns	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	2201      	movs	r2, #1
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	43da      	mvns	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0xea>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b12      	cmp	r3, #18
 80021b8:	d123      	bne.n	8002202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	58d3      	ldr	r3, [r2, r3]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2207      	movs	r2, #7
 80021cc:	4013      	ands	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2107      	movs	r1, #7
 80021e6:	400b      	ands	r3, r1
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	6939      	ldr	r1, [r7, #16]
 8002200:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	43da      	mvns	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2203      	movs	r2, #3
 8002220:	401a      	ands	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	055b      	lsls	r3, r3, #21
 800223e:	4013      	ands	r3, r2
 8002240:	d100      	bne.n	8002244 <HAL_GPIO_Init+0x174>
 8002242:	e092      	b.n	800236a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002244:	4a50      	ldr	r2, [pc, #320]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3318      	adds	r3, #24
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	589b      	ldr	r3, [r3, r2]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2203      	movs	r2, #3
 8002256:	4013      	ands	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	220f      	movs	r2, #15
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	43da      	mvns	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	23a0      	movs	r3, #160	; 0xa0
 800226c:	05db      	lsls	r3, r3, #23
 800226e:	429a      	cmp	r2, r3
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x1ca>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a45      	ldr	r2, [pc, #276]	; (800238c <HAL_GPIO_Init+0x2bc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x1c6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a44      	ldr	r2, [pc, #272]	; (8002390 <HAL_GPIO_Init+0x2c0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x1c2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a43      	ldr	r2, [pc, #268]	; (8002394 <HAL_GPIO_Init+0x2c4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x1be>
 800228a:	2303      	movs	r3, #3
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x1cc>
 800228e:	2305      	movs	r3, #5
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x1cc>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x1cc>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x1cc>
 800229a:	2300      	movs	r3, #0
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	2103      	movs	r1, #3
 80022a0:	400a      	ands	r2, r1
 80022a2:	00d2      	lsls	r2, r2, #3
 80022a4:	4093      	lsls	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022ac:	4936      	ldr	r1, [pc, #216]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3318      	adds	r3, #24
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022ba:	4a33      	ldr	r2, [pc, #204]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	58d3      	ldr	r3, [r2, r3]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43da      	mvns	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	4013      	ands	r3, r2
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022e0:	4929      	ldr	r1, [pc, #164]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022ea:	2384      	movs	r3, #132	; 0x84
 80022ec:	58d3      	ldr	r3, [r2, r3]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	029b      	lsls	r3, r3, #10
 8002302:	4013      	ands	r3, r2
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800230e:	491e      	ldr	r1, [pc, #120]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002310:	2284      	movs	r2, #132	; 0x84
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	035b      	lsls	r3, r3, #13
 800232e:	4013      	ands	r3, r2
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43da      	mvns	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	039b      	lsls	r3, r3, #14
 8002358:	4013      	ands	r3, r2
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	40da      	lsrs	r2, r3
 8002378:	1e13      	subs	r3, r2, #0
 800237a:	d000      	beq.n	800237e <HAL_GPIO_Init+0x2ae>
 800237c:	e6b0      	b.n	80020e0 <HAL_GPIO_Init+0x10>
  }
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b006      	add	sp, #24
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	40021800 	.word	0x40021800
 800238c:	50000400 	.word	0x50000400
 8002390:	50000800 	.word	0x50000800
 8002394:	50000c00 	.word	0x50000c00

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	0008      	movs	r0, r1
 80023a2:	0011      	movs	r1, r2
 80023a4:	1cbb      	adds	r3, r7, #2
 80023a6:	1c02      	adds	r2, r0, #0
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	1c7b      	adds	r3, r7, #1
 80023ac:	1c0a      	adds	r2, r1, #0
 80023ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b0:	1c7b      	adds	r3, r7, #1
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b8:	1cbb      	adds	r3, r7, #2
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c0:	e003      	b.n	80023ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023c2:	1cbb      	adds	r3, r7, #2
 80023c4:	881a      	ldrh	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d11f      	bne.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	0013      	movs	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	189b      	adds	r3, r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4912      	ldr	r1, [pc, #72]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002406:	0018      	movs	r0, r3
 8002408:	f7fd fe7e 	bl	8000108 <__udivsi3>
 800240c:	0003      	movs	r3, r0
 800240e:	3301      	adds	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002412:	e008      	b.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3b01      	subs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e001      	b.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e009      	b.n	800243a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	401a      	ands	r2, r3
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	429a      	cmp	r2, r3
 8002436:	d0ed      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	40007000 	.word	0x40007000
 8002448:	fffff9ff 	.word	0xfffff9ff
 800244c:	20000000 	.word	0x20000000
 8002450:	000f4240 	.word	0x000f4240

08002454 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <LL_RCC_GetAPB1Prescaler+0x14>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	23e0      	movs	r3, #224	; 0xe0
 800245e:	01db      	lsls	r3, r3, #7
 8002460:	4013      	ands	r3, r2
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e304      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	4013      	ands	r3, r2
 8002486:	d100      	bne.n	800248a <HAL_RCC_OscConfig+0x1e>
 8002488:	e07c      	b.n	8002584 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248a:	4bc3      	ldr	r3, [pc, #780]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2238      	movs	r2, #56	; 0x38
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002494:	4bc0      	ldr	r3, [pc, #768]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2203      	movs	r2, #3
 800249a:	4013      	ands	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_OscConfig+0x3e>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_OscConfig+0x44>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d10b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4bb9      	ldr	r3, [pc, #740]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	4013      	ands	r3, r2
 80024ba:	d062      	beq.n	8002582 <HAL_RCC_OscConfig+0x116>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d15e      	bne.n	8002582 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e2df      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	025b      	lsls	r3, r3, #9
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x78>
 80024d4:	4bb0      	ldr	r3, [pc, #704]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4baf      	ldr	r3, [pc, #700]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	0249      	lsls	r1, r1, #9
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e020      	b.n	8002526 <HAL_RCC_OscConfig+0xba>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	23a0      	movs	r3, #160	; 0xa0
 80024ea:	02db      	lsls	r3, r3, #11
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d10e      	bne.n	800250e <HAL_RCC_OscConfig+0xa2>
 80024f0:	4ba9      	ldr	r3, [pc, #676]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4ba8      	ldr	r3, [pc, #672]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	02c9      	lsls	r1, r1, #11
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	4ba6      	ldr	r3, [pc, #664]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4ba5      	ldr	r3, [pc, #660]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	0249      	lsls	r1, r1, #9
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0xba>
 800250e:	4ba2      	ldr	r3, [pc, #648]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4ba1      	ldr	r3, [pc, #644]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002514:	49a1      	ldr	r1, [pc, #644]	; (800279c <HAL_RCC_OscConfig+0x330>)
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	4b9f      	ldr	r3, [pc, #636]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b9e      	ldr	r3, [pc, #632]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002520:	499f      	ldr	r1, [pc, #636]	; (80027a0 <HAL_RCC_OscConfig+0x334>)
 8002522:	400a      	ands	r2, r1
 8002524:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d014      	beq.n	8002558 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff f9b1 	bl	8001894 <HAL_GetTick>
 8002532:	0003      	movs	r3, r0
 8002534:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff f9ac 	bl	8001894 <HAL_GetTick>
 800253c:	0002      	movs	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e29e      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254a:	4b93      	ldr	r3, [pc, #588]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xcc>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff f99c 	bl	8001894 <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002562:	f7ff f997 	bl	8001894 <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	; 0x64
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e289      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002574:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	4013      	ands	r3, r2
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0xf6>
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d100      	bne.n	8002590 <HAL_RCC_OscConfig+0x124>
 800258e:	e099      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2238      	movs	r2, #56	; 0x38
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259a:	4b7f      	ldr	r3, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x144>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d002      	beq.n	80025b6 <HAL_RCC_OscConfig+0x14a>
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d135      	bne.n	8002622 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4013      	ands	r3, r2
 80025c0:	d005      	beq.n	80025ce <HAL_RCC_OscConfig+0x162>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e25c      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a74      	ldr	r2, [pc, #464]	; (80027a4 <HAL_RCC_OscConfig+0x338>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d112      	bne.n	8002610 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025ea:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x33c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	4b67      	ldr	r3, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025fe:	4b66      	ldr	r3, [pc, #408]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0adb      	lsrs	r3, r3, #11
 8002604:	2207      	movs	r2, #7
 8002606:	4013      	ands	r3, r2
 8002608:	4a68      	ldr	r2, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x340>)
 800260a:	40da      	lsrs	r2, r3
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x344>)
 800260e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x348>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff f8e1 	bl	80017dc <HAL_InitTick>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d051      	beq.n	80026c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e232      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d030      	beq.n	800268c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5e      	ldr	r2, [pc, #376]	; (80027a8 <HAL_RCC_OscConfig+0x33c>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	4b57      	ldr	r3, [pc, #348]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b55      	ldr	r3, [pc, #340]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0049      	lsls	r1, r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff f922 	bl	8001894 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7ff f91d 	bl	8001894 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e20f      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4013      	ands	r3, r2
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b48      	ldr	r3, [pc, #288]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a4a      	ldr	r2, [pc, #296]	; (80027a4 <HAL_RCC_OscConfig+0x338>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	4b44      	ldr	r3, [pc, #272]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e01b      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002692:	4949      	ldr	r1, [pc, #292]	; (80027b8 <HAL_RCC_OscConfig+0x34c>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff f8fc 	bl	8001894 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff f8f7 	bl	8001894 <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1e9      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4013      	ands	r3, r2
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x236>
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	4013      	ands	r3, r2
 80026cc:	d047      	beq.n	800275e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	; 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b18      	cmp	r3, #24
 80026d8:	d10a      	bne.n	80026f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026da:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d03c      	beq.n	800275e <HAL_RCC_OscConfig+0x2f2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d138      	bne.n	800275e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e1cb      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d019      	beq.n	800272c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff f8c6 	bl	8001894 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270e:	f7ff f8c1 	bl	8001894 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1b3      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d0f1      	beq.n	800270e <HAL_RCC_OscConfig+0x2a2>
 800272a:	e018      	b.n	800275e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800272e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002732:	2101      	movs	r1, #1
 8002734:	438a      	bics	r2, r1
 8002736:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff f8ac 	bl	8001894 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002742:	f7ff f8a7 	bl	8001894 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e199      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	2202      	movs	r2, #2
 800275a:	4013      	ands	r3, r2
 800275c:	d1f1      	bne.n	8002742 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2204      	movs	r2, #4
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_RCC_OscConfig+0x2fe>
 8002768:	e0c6      	b.n	80028f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	231f      	movs	r3, #31
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2238      	movs	r2, #56	; 0x38
 8002778:	4013      	ands	r3, r2
 800277a:	2b20      	cmp	r3, #32
 800277c:	d11e      	bne.n	80027bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2202      	movs	r2, #2
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <HAL_RCC_OscConfig+0x31e>
 8002788:	e0b6      	b.n	80028f8 <HAL_RCC_OscConfig+0x48c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d000      	beq.n	8002794 <HAL_RCC_OscConfig+0x328>
 8002792:	e0b1      	b.n	80028f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e177      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
 8002798:	40021000 	.word	0x40021000
 800279c:	fffeffff 	.word	0xfffeffff
 80027a0:	fffbffff 	.word	0xfffbffff
 80027a4:	ffff80ff 	.word	0xffff80ff
 80027a8:	ffffc7ff 	.word	0xffffc7ff
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004
 80027b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027bc:	4bb4      	ldr	r3, [pc, #720]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80027be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	4013      	ands	r3, r2
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x360>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x362>
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4baf      	ldr	r3, [pc, #700]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80027d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d6:	4bae      	ldr	r3, [pc, #696]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0549      	lsls	r1, r1, #21
 80027dc:	430a      	orrs	r2, r1
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e0:	4bab      	ldr	r3, [pc, #684]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80027e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	055b      	lsls	r3, r3, #21
 80027e8:	4013      	ands	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027ee:	231f      	movs	r3, #31
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	4ba7      	ldr	r3, [pc, #668]	; (8002a94 <HAL_RCC_OscConfig+0x628>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	d11a      	bne.n	8002838 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002802:	4ba4      	ldr	r3, [pc, #656]	; (8002a94 <HAL_RCC_OscConfig+0x628>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4ba3      	ldr	r3, [pc, #652]	; (8002a94 <HAL_RCC_OscConfig+0x628>)
 8002808:	2180      	movs	r1, #128	; 0x80
 800280a:	0049      	lsls	r1, r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002810:	f7ff f840 	bl	8001894 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7ff f83b 	bl	8001894 <HAL_GetTick>
 800281e:	0002      	movs	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e12d      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282c:	4b99      	ldr	r3, [pc, #612]	; (8002a94 <HAL_RCC_OscConfig+0x628>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x3e2>
 8002840:	4b93      	ldr	r3, [pc, #588]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002844:	4b92      	ldr	r3, [pc, #584]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002846:	2101      	movs	r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	65da      	str	r2, [r3, #92]	; 0x5c
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x41c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x404>
 8002856:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800285a:	4b8d      	ldr	r3, [pc, #564]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 800285c:	2104      	movs	r1, #4
 800285e:	430a      	orrs	r2, r1
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
 8002862:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002866:	4b8a      	ldr	r3, [pc, #552]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	65da      	str	r2, [r3, #92]	; 0x5c
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0x41c>
 8002870:	4b87      	ldr	r3, [pc, #540]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002874:	4b86      	ldr	r3, [pc, #536]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002876:	2101      	movs	r1, #1
 8002878:	438a      	bics	r2, r1
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c
 800287c:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 800287e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002882:	2104      	movs	r1, #4
 8002884:	438a      	bics	r2, r1
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d014      	beq.n	80028ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff f800 	bl	8001894 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	e009      	b.n	80028ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fffb 	bl	8001894 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	4a7c      	ldr	r2, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x62c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0ec      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ae:	4b78      	ldr	r3, [pc, #480]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x42e>
 80028b8:	e013      	b.n	80028e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe ffeb 	bl	8001894 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c2:	e009      	b.n	80028d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe ffe6 	bl	8001894 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	4a72      	ldr	r2, [pc, #456]	; (8002a98 <HAL_RCC_OscConfig+0x62c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0d7      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4b6d      	ldr	r3, [pc, #436]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028e2:	231f      	movs	r3, #31
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80028ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f0:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80028f2:	496a      	ldr	r1, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x630>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d100      	bne.n	8002902 <HAL_RCC_OscConfig+0x496>
 8002900:	e0c1      	b.n	8002a86 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2238      	movs	r2, #56	; 0x38
 8002908:	4013      	ands	r3, r2
 800290a:	2b10      	cmp	r3, #16
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x4a4>
 800290e:	e081      	b.n	8002a14 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d156      	bne.n	80029c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b5c      	ldr	r3, [pc, #368]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 800291e:	4960      	ldr	r1, [pc, #384]	; (8002aa0 <HAL_RCC_OscConfig+0x634>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe ffb6 	bl	8001894 <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe ffb1 	bl	8001894 <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0a3      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	049b      	lsls	r3, r3, #18
 8002948:	4013      	ands	r3, r2
 800294a:	d1f0      	bne.n	800292e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <HAL_RCC_OscConfig+0x638>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	431a      	orrs	r2, r3
 800297a:	4b45      	ldr	r3, [pc, #276]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	0449      	lsls	r1, r1, #17
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800298e:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0549      	lsls	r1, r1, #21
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe ff7a 	bl	8001894 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe ff75 	bl	8001894 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e067      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	049b      	lsls	r3, r3, #18
 80029c0:	4013      	ands	r3, r2
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x53a>
 80029c4:	e05f      	b.n	8002a86 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80029cc:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x634>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80029d8:	2103      	movs	r1, #3
 80029da:	438a      	bics	r2, r1
 80029dc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80029e4:	4930      	ldr	r1, [pc, #192]	; (8002aa8 <HAL_RCC_OscConfig+0x63c>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe ff53 	bl	8001894 <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe ff4e 	bl	8001894 <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e040      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	049b      	lsls	r3, r3, #18
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x588>
 8002a12:	e038      	b.n	8002a86 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e033      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d126      	bne.n	8002a82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2270      	movs	r2, #112	; 0x70
 8002a38:	401a      	ands	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	23fe      	movs	r3, #254	; 0xfe
 8002a46:	01db      	lsls	r3, r3, #7
 8002a48:	401a      	ands	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d116      	bne.n	8002a82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	23f8      	movs	r3, #248	; 0xf8
 8002a58:	039b      	lsls	r3, r3, #14
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10e      	bne.n	8002a82 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	23e0      	movs	r3, #224	; 0xe0
 8002a68:	051b      	lsls	r3, r3, #20
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	0f5b      	lsrs	r3, r3, #29
 8002a78:	075a      	lsls	r2, r3, #29
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b008      	add	sp, #32
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
 8002a98:	00001388 	.word	0x00001388
 8002a9c:	efffffff 	.word	0xefffffff
 8002aa0:	feffffff 	.word	0xfeffffff
 8002aa4:	11c1808c 	.word	0x11c1808c
 8002aa8:	eefeffff 	.word	0xeefeffff

08002aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0e9      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d91e      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b73      	ldr	r3, [pc, #460]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	4393      	bics	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fed8 	bl	8001894 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ae8:	e009      	b.n	8002afe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aea:	f7fe fed3 	bl	8001894 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0ca      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002afe:	4b67      	ldr	r3, [pc, #412]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2207      	movs	r2, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1ee      	bne.n	8002aea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2202      	movs	r2, #2
 8002b12:	4013      	ands	r3, r2
 8002b14:	d015      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d006      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b20:	4b60      	ldr	r3, [pc, #384]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b26:	21e0      	movs	r1, #224	; 0xe0
 8002b28:	01c9      	lsls	r1, r1, #7
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4a5d      	ldr	r2, [pc, #372]	; (8002ca8 <HAL_RCC_ClockConfig+0x1fc>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	0019      	movs	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d057      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	029b      	lsls	r3, r3, #10
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d12b      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e097      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	049b      	lsls	r3, r3, #18
 8002b74:	4013      	ands	r3, r2
 8002b76:	d11f      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e08b      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b84:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d113      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e07f      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9c:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e074      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	2202      	movs	r2, #2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e06d      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bb8:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fe62 	bl	8001894 <HAL_GetTick>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd4:	e009      	b.n	8002bea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd6:	f7fe fe5d 	bl	8001894 <HAL_GetTick>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	4a2f      	ldr	r2, [pc, #188]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e054      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2238      	movs	r2, #56	; 0x38
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1ec      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2207      	movs	r2, #7
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d21e      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2207      	movs	r2, #7
 8002c10:	4393      	bics	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fe3a 	bl	8001894 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c26:	f7fe fe35 	bl	8001894 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e02c      	b.n	8002c94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2207      	movs	r2, #7
 8002c40:	4013      	ands	r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ee      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_RCC_ClockConfig+0x200>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c66:	f000 f829 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c6a:	0001      	movs	r1, r0
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	220f      	movs	r2, #15
 8002c74:	401a      	ands	r2, r3
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x204>)
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	58d3      	ldr	r3, [r2, r3]
 8002c7c:	221f      	movs	r2, #31
 8002c7e:	4013      	ands	r3, r2
 8002c80:	000a      	movs	r2, r1
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_ClockConfig+0x208>)
 8002c86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x20c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fe fda5 	bl	80017dc <HAL_InitTick>
 8002c92:	0003      	movs	r3, r0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	00001388 	.word	0x00001388
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	fffff0ff 	.word	0xfffff0ff
 8002cac:	ffff8fff 	.word	0xffff8fff
 8002cb0:	080064b8 	.word	0x080064b8
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000004 	.word	0x20000004

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2238      	movs	r2, #56	; 0x38
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d10f      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0adb      	lsrs	r3, r3, #11
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	0013      	movs	r3, r2
 8002cdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cde:	6839      	ldr	r1, [r7, #0]
 8002ce0:	4835      	ldr	r0, [pc, #212]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ce2:	f7fd fa11 	bl	8000108 <__udivsi3>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	e05d      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2238      	movs	r2, #56	; 0x38
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x100>)
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e054      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2238      	movs	r2, #56	; 0x38
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d138      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	4824      	ldr	r0, [pc, #144]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x100>)
 8002d2c:	f7fd f9ec 	bl	8000108 <__udivsi3>
 8002d30:	0003      	movs	r3, r0
 8002d32:	0019      	movs	r1, r3
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	227f      	movs	r2, #127	; 0x7f
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	434b      	muls	r3, r1
 8002d40:	617b      	str	r3, [r7, #20]
        break;
 8002d42:	e00d      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	481c      	ldr	r0, [pc, #112]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d48:	f7fd f9de 	bl	8000108 <__udivsi3>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	0019      	movs	r1, r3
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	227f      	movs	r2, #127	; 0x7f
 8002d58:	4013      	ands	r3, r2
 8002d5a:	434b      	muls	r3, r1
 8002d5c:	617b      	str	r3, [r7, #20]
        break;
 8002d5e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0f5b      	lsrs	r3, r3, #29
 8002d66:	2207      	movs	r2, #7
 8002d68:	4013      	ands	r3, r2
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	6978      	ldr	r0, [r7, #20]
 8002d72:	f7fd f9c9 	bl	8000108 <__udivsi3>
 8002d76:	0003      	movs	r3, r0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e015      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2238      	movs	r2, #56	; 0x38
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d103      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2238      	movs	r2, #56	; 0x38
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b18      	cmp	r3, #24
 8002d9a:	d103      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d9c:	23fa      	movs	r3, #250	; 0xfa
 8002d9e:	01db      	lsls	r3, r3, #7
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e001      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002da8:	693b      	ldr	r3, [r7, #16]
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b006      	add	sp, #24
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	40021000 	.word	0x40021000
 8002db8:	00f42400 	.word	0x00f42400
 8002dbc:	007a1200 	.word	0x007a1200

08002dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc4:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	20000000 	.word	0x20000000

08002dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002dd8:	f7ff fff2 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002ddc:	0004      	movs	r4, r0
 8002dde:	f7ff fb39 	bl	8002454 <LL_RCC_GetAPB1Prescaler>
 8002de2:	0003      	movs	r3, r0
 8002de4:	0b1a      	lsrs	r2, r3, #12
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	58d3      	ldr	r3, [r2, r3]
 8002dec:	221f      	movs	r2, #31
 8002dee:	4013      	ands	r3, r2
 8002df0:	40dc      	lsrs	r4, r3
 8002df2:	0023      	movs	r3, r4
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	080064f8 	.word	0x080064f8

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e08:	2313      	movs	r3, #19
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e10:	2312      	movs	r3, #18
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	4013      	ands	r3, r2
 8002e22:	d100      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e24:	e0af      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2311      	movs	r3, #17
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b48      	ldr	r3, [pc, #288]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	055b      	lsls	r3, r3, #21
 8002e36:	4013      	ands	r3, r2
 8002e38:	d111      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0549      	lsls	r1, r1, #21
 8002e44:	430a      	orrs	r2, r1
 8002e46:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	055b      	lsls	r3, r3, #21
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2311      	movs	r3, #17
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	0049      	lsls	r1, r1, #1
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fd12 	bl	8001894 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e74:	e00b      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe fd0d 	bl	8001894 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d904      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002e84:	2313      	movs	r3, #19
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2203      	movs	r2, #3
 8002e8a:	701a      	strb	r2, [r3, #0]
        break;
 8002e8c:	e005      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d0ed      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002e9a:	2313      	movs	r3, #19
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d15f      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ea8:	23c0      	movs	r3, #192	; 0xc0
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d019      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d014      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0249      	lsls	r1, r1, #9
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ede:	491f      	ldr	r1, [pc, #124]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fccf 	bl	8001894 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	e00c      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe fcca 	bl	8001894 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d904      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002f0c:	2313      	movs	r3, #19
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2203      	movs	r2, #3
 8002f12:	701a      	strb	r2, [r3, #0]
            break;
 8002f14:	e004      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d0ed      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002f20:	2313      	movs	r3, #19
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f3e:	e017      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f40:	2312      	movs	r3, #18
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2213      	movs	r2, #19
 8002f46:	18ba      	adds	r2, r7, r2
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e010      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
 8002f58:	fffffcff 	.word	0xfffffcff
 8002f5c:	fffeffff 	.word	0xfffeffff
 8002f60:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	2312      	movs	r3, #18
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2213      	movs	r2, #19
 8002f6a:	18ba      	adds	r2, r7, r2
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f70:	2311      	movs	r3, #17
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7e:	4b83      	ldr	r3, [pc, #524]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002f80:	4983      	ldr	r1, [pc, #524]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f90:	4b7e      	ldr	r3, [pc, #504]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	2203      	movs	r2, #3
 8002f96:	4393      	bics	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4b7b      	ldr	r3, [pc, #492]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fae:	4b77      	ldr	r3, [pc, #476]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4b73      	ldr	r3, [pc, #460]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	4a70      	ldr	r2, [pc, #448]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fec:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	4b64      	ldr	r3, [pc, #400]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4013      	ands	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800300c:	4b5f      	ldr	r3, [pc, #380]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	4a62      	ldr	r2, [pc, #392]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800301c:	430a      	orrs	r2, r1
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	4013      	ands	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302a:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	4b54      	ldr	r3, [pc, #336]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800303a:	430a      	orrs	r2, r1
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	02db      	lsls	r3, r3, #11
 8003046:	4013      	ands	r3, r2
 8003048:	d016      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800304a:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003050:	4013      	ands	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	4b4c      	ldr	r3, [pc, #304]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800305a:	430a      	orrs	r2, r1
 800305c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	23c0      	movs	r3, #192	; 0xc0
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	429a      	cmp	r2, r3
 8003068:	d106      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800306a:	4b48      	ldr	r3, [pc, #288]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	0449      	lsls	r1, r1, #17
 8003074:	430a      	orrs	r2, r1
 8003076:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	01db      	lsls	r3, r3, #7
 8003080:	4013      	ands	r3, r2
 8003082:	d015      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	0899      	lsrs	r1, r3, #2
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003090:	4b3e      	ldr	r3, [pc, #248]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003092:	430a      	orrs	r2, r1
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	05db      	lsls	r3, r3, #23
 800309e:	429a      	cmp	r2, r3
 80030a0:	d106      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	4b39      	ldr	r3, [pc, #228]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0249      	lsls	r1, r1, #9
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	4013      	ands	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030bc:	4b33      	ldr	r3, [pc, #204]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	4393      	bics	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ca:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	039b      	lsls	r3, r3, #14
 80030d8:	4013      	ands	r3, r2
 80030da:	d016      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030dc:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	4a31      	ldr	r2, [pc, #196]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80030ec:	430a      	orrs	r2, r1
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	03db      	lsls	r3, r3, #15
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d106      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x30a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	0449      	lsls	r1, r1, #17
 8003106:	430a      	orrs	r2, r1
 8003108:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	03db      	lsls	r3, r3, #15
 8003112:	4013      	ands	r3, r2
 8003114:	d016      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	4a24      	ldr	r2, [pc, #144]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003126:	430a      	orrs	r2, r1
 8003128:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	045b      	lsls	r3, r3, #17
 8003132:	429a      	cmp	r2, r3
 8003134:	d106      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	0449      	lsls	r1, r1, #17
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	4013      	ands	r3, r2
 800314e:	d016      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003160:	430a      	orrs	r2, r1
 8003162:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	01db      	lsls	r3, r3, #7
 800316c:	429a      	cmp	r2, r3
 800316e:	d106      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	0249      	lsls	r1, r1, #9
 800317a:	430a      	orrs	r2, r1
 800317c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800317e:	2312      	movs	r3, #18
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b006      	add	sp, #24
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	efffffff 	.word	0xefffffff
 8003194:	fffff3ff 	.word	0xfffff3ff
 8003198:	fff3ffff 	.word	0xfff3ffff
 800319c:	ffcfffff 	.word	0xffcfffff
 80031a0:	ffffcfff 	.word	0xffffcfff
 80031a4:	f3ffffff 	.word	0xf3ffffff
 80031a8:	ffbfffff 	.word	0xffbfffff
 80031ac:	feffffff 	.word	0xfeffffff
 80031b0:	ffff3fff 	.word	0xffff3fff

080031b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e04a      	b.n	800325c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	223d      	movs	r2, #61	; 0x3d
 80031ca:	5c9b      	ldrb	r3, [r3, r2]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	223c      	movs	r2, #60	; 0x3c
 80031d6:	2100      	movs	r1, #0
 80031d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	0018      	movs	r0, r3
 80031de:	f7fd fda3 	bl	8000d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223d      	movs	r2, #61	; 0x3d
 80031e6:	2102      	movs	r1, #2
 80031e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f000 fccd 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2248      	movs	r2, #72	; 0x48
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223e      	movs	r2, #62	; 0x3e
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	223f      	movs	r2, #63	; 0x3f
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2240      	movs	r2, #64	; 0x40
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2241      	movs	r2, #65	; 0x41
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2242      	movs	r2, #66	; 0x42
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2243      	movs	r2, #67	; 0x43
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2244      	movs	r2, #68	; 0x44
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2245      	movs	r2, #69	; 0x45
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2246      	movs	r2, #70	; 0x46
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2247      	movs	r2, #71	; 0x47
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223d      	movs	r2, #61	; 0x3d
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	001a      	movs	r2, r3
 8003272:	1cbb      	adds	r3, r7, #2
 8003274:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d108      	bne.n	800328e <HAL_TIM_PWM_Start_DMA+0x2a>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	223e      	movs	r2, #62	; 0x3e
 8003280:	5c9b      	ldrb	r3, [r3, r2]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3b02      	subs	r3, #2
 8003286:	425a      	negs	r2, r3
 8003288:	4153      	adcs	r3, r2
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e037      	b.n	80032fe <HAL_TIM_PWM_Start_DMA+0x9a>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d108      	bne.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x42>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	223f      	movs	r2, #63	; 0x3f
 8003298:	5c9b      	ldrb	r3, [r3, r2]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3b02      	subs	r3, #2
 800329e:	425a      	negs	r2, r3
 80032a0:	4153      	adcs	r3, r2
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e02b      	b.n	80032fe <HAL_TIM_PWM_Start_DMA+0x9a>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d108      	bne.n	80032be <HAL_TIM_PWM_Start_DMA+0x5a>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2240      	movs	r2, #64	; 0x40
 80032b0:	5c9b      	ldrb	r3, [r3, r2]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3b02      	subs	r3, #2
 80032b6:	425a      	negs	r2, r3
 80032b8:	4153      	adcs	r3, r2
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e01f      	b.n	80032fe <HAL_TIM_PWM_Start_DMA+0x9a>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d108      	bne.n	80032d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2241      	movs	r2, #65	; 0x41
 80032c8:	5c9b      	ldrb	r3, [r3, r2]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	3b02      	subs	r3, #2
 80032ce:	425a      	negs	r2, r3
 80032d0:	4153      	adcs	r3, r2
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e013      	b.n	80032fe <HAL_TIM_PWM_Start_DMA+0x9a>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d108      	bne.n	80032ee <HAL_TIM_PWM_Start_DMA+0x8a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2242      	movs	r2, #66	; 0x42
 80032e0:	5c9b      	ldrb	r3, [r3, r2]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3b02      	subs	r3, #2
 80032e6:	425a      	negs	r2, r3
 80032e8:	4153      	adcs	r3, r2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	e007      	b.n	80032fe <HAL_TIM_PWM_Start_DMA+0x9a>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2243      	movs	r2, #67	; 0x43
 80032f2:	5c9b      	ldrb	r3, [r3, r2]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	3b02      	subs	r3, #2
 80032f8:	425a      	negs	r2, r3
 80032fa:	4153      	adcs	r3, r2
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0xa2>
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	e17e      	b.n	8003604 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d108      	bne.n	800331e <HAL_TIM_PWM_Start_DMA+0xba>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	223e      	movs	r2, #62	; 0x3e
 8003310:	5c9b      	ldrb	r3, [r3, r2]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	425a      	negs	r2, r3
 8003318:	4153      	adcs	r3, r2
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e037      	b.n	800338e <HAL_TIM_PWM_Start_DMA+0x12a>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d108      	bne.n	8003336 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	223f      	movs	r2, #63	; 0x3f
 8003328:	5c9b      	ldrb	r3, [r3, r2]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	425a      	negs	r2, r3
 8003330:	4153      	adcs	r3, r2
 8003332:	b2db      	uxtb	r3, r3
 8003334:	e02b      	b.n	800338e <HAL_TIM_PWM_Start_DMA+0x12a>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d108      	bne.n	800334e <HAL_TIM_PWM_Start_DMA+0xea>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	5c9b      	ldrb	r3, [r3, r2]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	425a      	negs	r2, r3
 8003348:	4153      	adcs	r3, r2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e01f      	b.n	800338e <HAL_TIM_PWM_Start_DMA+0x12a>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d108      	bne.n	8003366 <HAL_TIM_PWM_Start_DMA+0x102>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2241      	movs	r2, #65	; 0x41
 8003358:	5c9b      	ldrb	r3, [r3, r2]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	425a      	negs	r2, r3
 8003360:	4153      	adcs	r3, r2
 8003362:	b2db      	uxtb	r3, r3
 8003364:	e013      	b.n	800338e <HAL_TIM_PWM_Start_DMA+0x12a>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b10      	cmp	r3, #16
 800336a:	d108      	bne.n	800337e <HAL_TIM_PWM_Start_DMA+0x11a>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2242      	movs	r2, #66	; 0x42
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	425a      	negs	r2, r3
 8003378:	4153      	adcs	r3, r2
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e007      	b.n	800338e <HAL_TIM_PWM_Start_DMA+0x12a>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2243      	movs	r2, #67	; 0x43
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	425a      	negs	r2, r3
 800338a:	4153      	adcs	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d035      	beq.n	80033fe <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    if ((pData == NULL) && (Length > 0U))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x140>
 8003398:	1cbb      	adds	r3, r7, #2
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_PWM_Start_DMA+0x140>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e12f      	b.n	8003604 <HAL_TIM_PWM_Start_DMA+0x3a0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <HAL_TIM_PWM_Start_DMA+0x150>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	223e      	movs	r2, #62	; 0x3e
 80033ae:	2102      	movs	r1, #2
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	e026      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0x19e>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d104      	bne.n	80033c4 <HAL_TIM_PWM_Start_DMA+0x160>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	223f      	movs	r2, #63	; 0x3f
 80033be:	2102      	movs	r1, #2
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	e01e      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0x19e>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d104      	bne.n	80033d4 <HAL_TIM_PWM_Start_DMA+0x170>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	2102      	movs	r1, #2
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	e016      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0x19e>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d104      	bne.n	80033e4 <HAL_TIM_PWM_Start_DMA+0x180>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2241      	movs	r2, #65	; 0x41
 80033de:	2102      	movs	r1, #2
 80033e0:	5499      	strb	r1, [r3, r2]
 80033e2:	e00e      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0x19e>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d104      	bne.n	80033f4 <HAL_TIM_PWM_Start_DMA+0x190>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2242      	movs	r2, #66	; 0x42
 80033ee:	2102      	movs	r1, #2
 80033f0:	5499      	strb	r1, [r3, r2]
 80033f2:	e006      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0x19e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2243      	movs	r2, #67	; 0x43
 80033f8:	2102      	movs	r1, #2
 80033fa:	5499      	strb	r1, [r3, r2]
 80033fc:	e001      	b.n	8003402 <HAL_TIM_PWM_Start_DMA+0x19e>
    }
  }
  else
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e100      	b.n	8003604 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }

  switch (Channel)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d02e      	beq.n	8003466 <HAL_TIM_PWM_Start_DMA+0x202>
 8003408:	d802      	bhi.n	8003410 <HAL_TIM_PWM_Start_DMA+0x1ac>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <HAL_TIM_PWM_Start_DMA+0x1b8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 800340e:	e099      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x2e0>
  switch (Channel)
 8003410:	2b08      	cmp	r3, #8
 8003412:	d04d      	beq.n	80034b0 <HAL_TIM_PWM_Start_DMA+0x24c>
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d100      	bne.n	800341a <HAL_TIM_PWM_Start_DMA+0x1b6>
 8003418:	e06f      	b.n	80034fa <HAL_TIM_PWM_Start_DMA+0x296>
      break;
 800341a:	e093      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	4a7a      	ldr	r2, [pc, #488]	; (800360c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	4a79      	ldr	r2, [pc, #484]	; (8003610 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	4a78      	ldr	r2, [pc, #480]	; (8003614 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003432:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3334      	adds	r3, #52	; 0x34
 8003440:	001a      	movs	r2, r3
 8003442:	1cbb      	adds	r3, r7, #2
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f7fe fbad 	bl	8001ba4 <HAL_DMA_Start_IT>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <HAL_TIM_PWM_Start_DMA+0x1ee>
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0d8      	b.n	8003604 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0089      	lsls	r1, r1, #2
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
      break;
 8003464:	e06e      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	4a68      	ldr	r2, [pc, #416]	; (800360c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	4a67      	ldr	r2, [pc, #412]	; (8003610 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	4a66      	ldr	r2, [pc, #408]	; (8003614 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3338      	adds	r3, #56	; 0x38
 800348a:	001a      	movs	r2, r3
 800348c:	1cbb      	adds	r3, r7, #2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	f7fe fb88 	bl	8001ba4 <HAL_DMA_Start_IT>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d001      	beq.n	800349c <HAL_TIM_PWM_Start_DMA+0x238>
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b3      	b.n	8003604 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	00c9      	lsls	r1, r1, #3
 80034aa:	430a      	orrs	r2, r1
 80034ac:	60da      	str	r2, [r3, #12]
      break;
 80034ae:	e049      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	4a53      	ldr	r2, [pc, #332]	; (8003614 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80034c6:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	333c      	adds	r3, #60	; 0x3c
 80034d4:	001a      	movs	r2, r3
 80034d6:	1cbb      	adds	r3, r7, #2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f7fe fb63 	bl	8001ba4 <HAL_DMA_Start_IT>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_TIM_PWM_Start_DMA+0x282>
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e08e      	b.n	8003604 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	0109      	lsls	r1, r1, #4
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]
      break;
 80034f8:	e024      	b.n	8003544 <HAL_TIM_PWM_Start_DMA+0x2e0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a43      	ldr	r2, [pc, #268]	; (800360c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003500:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a42      	ldr	r2, [pc, #264]	; (8003610 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a41      	ldr	r2, [pc, #260]	; (8003614 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003510:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3340      	adds	r3, #64	; 0x40
 800351e:	001a      	movs	r2, r3
 8003520:	1cbb      	adds	r3, r7, #2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	f7fe fb3e 	bl	8001ba4 <HAL_DMA_Start_IT>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <HAL_TIM_PWM_Start_DMA+0x2cc>
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e069      	b.n	8003604 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	0149      	lsls	r1, r1, #5
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
      break;
 8003542:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	2201      	movs	r2, #1
 800354c:	0018      	movs	r0, r3
 800354e:	f000 fe65 	bl	800421c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a30      	ldr	r2, [pc, #192]	; (8003618 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_TIM_PWM_Start_DMA+0x316>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_TIM_PWM_Start_DMA+0x316>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2d      	ldr	r2, [pc, #180]	; (8003620 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_TIM_PWM_Start_DMA+0x316>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2b      	ldr	r2, [pc, #172]	; (8003624 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d101      	bne.n	800357e <HAL_TIM_PWM_Start_DMA+0x31a>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_TIM_PWM_Start_DMA+0x31c>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_TIM_PWM_Start_DMA+0x332>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2180      	movs	r1, #128	; 0x80
 8003590:	0209      	lsls	r1, r1, #8
 8003592:	430a      	orrs	r2, r1
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00f      	beq.n	80035c0 <HAL_TIM_PWM_Start_DMA+0x35c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	05db      	lsls	r3, r3, #23
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d009      	beq.n	80035c0 <HAL_TIM_PWM_Start_DMA+0x35c>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIM_PWM_Start_DMA+0x35c>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d116      	bne.n	80035ee <HAL_TIM_PWM_Start_DMA+0x38a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d016      	beq.n	8003600 <HAL_TIM_PWM_Start_DMA+0x39c>
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	025b      	lsls	r3, r3, #9
 80035d8:	429a      	cmp	r2, r3
 80035da:	d011      	beq.n	8003600 <HAL_TIM_PWM_Start_DMA+0x39c>
    {
      __HAL_TIM_ENABLE(htim);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	e008      	b.n	8003600 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e000      	b.n	8003602 <HAL_TIM_PWM_Start_DMA+0x39e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003600:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b006      	add	sp, #24
 800360a:	bd80      	pop	{r7, pc}
 800360c:	08003a81 	.word	0x08003a81
 8003610:	08003b2b 	.word	0x08003b2b
 8003614:	080039ed 	.word	0x080039ed
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	40000400 	.word	0x40000400
 800362c:	00010007 	.word	0x00010007

08003630 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d016      	beq.n	800366e <HAL_TIM_PWM_Stop_DMA+0x3e>
 8003640:	d802      	bhi.n	8003648 <HAL_TIM_PWM_Stop_DMA+0x18>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_TIM_PWM_Stop_DMA+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 8003646:	e03c      	b.n	80036c2 <HAL_TIM_PWM_Stop_DMA+0x92>
  switch (Channel)
 8003648:	2b08      	cmp	r3, #8
 800364a:	d01e      	beq.n	800368a <HAL_TIM_PWM_Stop_DMA+0x5a>
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d02a      	beq.n	80036a6 <HAL_TIM_PWM_Stop_DMA+0x76>
      break;
 8003650:	e037      	b.n	80036c2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4955      	ldr	r1, [pc, #340]	; (80037b4 <HAL_TIM_PWM_Stop_DMA+0x184>)
 800365e:	400a      	ands	r2, r1
 8003660:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	0018      	movs	r0, r3
 8003668:	f7fe fb84 	bl	8001d74 <HAL_DMA_Abort_IT>
      break;
 800366c:	e029      	b.n	80036c2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	494f      	ldr	r1, [pc, #316]	; (80037b8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800367a:	400a      	ands	r2, r1
 800367c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	0018      	movs	r0, r3
 8003684:	f7fe fb76 	bl	8001d74 <HAL_DMA_Abort_IT>
      break;
 8003688:	e01b      	b.n	80036c2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4949      	ldr	r1, [pc, #292]	; (80037bc <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8003696:	400a      	ands	r2, r1
 8003698:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fe fb68 	bl	8001d74 <HAL_DMA_Abort_IT>
      break;
 80036a4:	e00d      	b.n	80036c2 <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4943      	ldr	r1, [pc, #268]	; (80037c0 <HAL_TIM_PWM_Stop_DMA+0x190>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fe fb5a 	bl	8001d74 <HAL_DMA_Abort_IT>
      break;
 80036c0:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	2200      	movs	r2, #0
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 fda6 	bl	800421c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <HAL_TIM_PWM_Stop_DMA+0x194>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00e      	beq.n	80036f8 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_TIM_PWM_Stop_DMA+0x198>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a38      	ldr	r2, [pc, #224]	; (80037cc <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_TIM_PWM_Stop_DMA+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a37      	ldr	r2, [pc, #220]	; (80037d0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_PWM_Stop_DMA+0xcc>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_TIM_PWM_Stop_DMA+0xce>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d013      	beq.n	800372a <HAL_TIM_PWM_Stop_DMA+0xfa>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4a32      	ldr	r2, [pc, #200]	; (80037d4 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 800370a:	4013      	ands	r3, r2
 800370c:	d10d      	bne.n	800372a <HAL_TIM_PWM_Stop_DMA+0xfa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a30      	ldr	r2, [pc, #192]	; (80037d8 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8003716:	4013      	ands	r3, r2
 8003718:	d107      	bne.n	800372a <HAL_TIM_PWM_Stop_DMA+0xfa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	492d      	ldr	r1, [pc, #180]	; (80037dc <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003726:	400a      	ands	r2, r1
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8003732:	4013      	ands	r3, r2
 8003734:	d10d      	bne.n	8003752 <HAL_TIM_PWM_Stop_DMA+0x122>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 800373e:	4013      	ands	r3, r2
 8003740:	d107      	bne.n	8003752 <HAL_TIM_PWM_Stop_DMA+0x122>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2101      	movs	r1, #1
 800374e:	438a      	bics	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223e      	movs	r2, #62	; 0x3e
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]
 8003760:	e023      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Stop_DMA+0x142>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	223f      	movs	r2, #63	; 0x3f
 800376c:	2101      	movs	r1, #1
 800376e:	5499      	strb	r1, [r3, r2]
 8003770:	e01b      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Stop_DMA+0x152>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	2101      	movs	r1, #1
 800377e:	5499      	strb	r1, [r3, r2]
 8003780:	e013      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2241      	movs	r2, #65	; 0x41
 800378c:	2101      	movs	r1, #1
 800378e:	5499      	strb	r1, [r3, r2]
 8003790:	e00b      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b10      	cmp	r3, #16
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_PWM_Stop_DMA+0x172>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2242      	movs	r2, #66	; 0x42
 800379c:	2101      	movs	r1, #1
 800379e:	5499      	strb	r1, [r3, r2]
 80037a0:	e003      	b.n	80037aa <HAL_TIM_PWM_Stop_DMA+0x17a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2243      	movs	r2, #67	; 0x43
 80037a6:	2101      	movs	r1, #1
 80037a8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	fffffdff 	.word	0xfffffdff
 80037b8:	fffffbff 	.word	0xfffffbff
 80037bc:	fffff7ff 	.word	0xfffff7ff
 80037c0:	ffffefff 	.word	0xffffefff
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800
 80037d4:	00001111 	.word	0x00001111
 80037d8:	00000444 	.word	0x00000444
 80037dc:	ffff7fff 	.word	0xffff7fff

080037e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	223c      	movs	r2, #60	; 0x3c
 80037f0:	5c9b      	ldrb	r3, [r3, r2]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e0df      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x1da>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	223c      	movs	r2, #60	; 0x3c
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b14      	cmp	r3, #20
 8003806:	d900      	bls.n	800380a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003808:	e0d1      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	4b6d      	ldr	r3, [pc, #436]	; (80039c4 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8003810:	18d3      	adds	r3, r2, r3
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	0011      	movs	r1, r2
 800381e:	0018      	movs	r0, r3
 8003820:	f000 fa38 	bl	8003c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2108      	movs	r1, #8
 8003830:	430a      	orrs	r2, r1
 8003832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2104      	movs	r1, #4
 8003840:	438a      	bics	r2, r1
 8003842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6999      	ldr	r1, [r3, #24]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	619a      	str	r2, [r3, #24]
      break;
 8003856:	e0ab      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f000 faa1 	bl	8003da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2180      	movs	r1, #128	; 0x80
 8003872:	0109      	lsls	r1, r1, #4
 8003874:	430a      	orrs	r2, r1
 8003876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4951      	ldr	r1, [pc, #324]	; (80039c8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003884:	400a      	ands	r2, r1
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	619a      	str	r2, [r3, #24]
      break;
 800389c:	e088      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	0011      	movs	r1, r2
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 fb02 	bl	8003eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2108      	movs	r1, #8
 80038b8:	430a      	orrs	r2, r1
 80038ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2104      	movs	r1, #4
 80038c8:	438a      	bics	r2, r1
 80038ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69d9      	ldr	r1, [r3, #28]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	61da      	str	r2, [r3, #28]
      break;
 80038de:	e067      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fb69 	bl	8003fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	0109      	lsls	r1, r1, #4
 80038fc:	430a      	orrs	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	492f      	ldr	r1, [pc, #188]	; (80039c8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800390c:	400a      	ands	r2, r1
 800390e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69d9      	ldr	r1, [r3, #28]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	021a      	lsls	r2, r3, #8
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	61da      	str	r2, [r3, #28]
      break;
 8003924:	e044      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	0011      	movs	r1, r2
 800392e:	0018      	movs	r0, r3
 8003930:	f000 fbb0 	bl	8004094 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2108      	movs	r1, #8
 8003940:	430a      	orrs	r2, r1
 8003942:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2104      	movs	r1, #4
 8003950:	438a      	bics	r2, r1
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003966:	e023      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	0011      	movs	r1, r2
 8003970:	0018      	movs	r0, r3
 8003972:	f000 fbef 	bl	8004154 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0109      	lsls	r1, r1, #4
 8003984:	430a      	orrs	r2, r1
 8003986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	490d      	ldr	r1, [pc, #52]	; (80039c8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003994:	400a      	ands	r2, r1
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039ac:	e000      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80039ae:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	223c      	movs	r2, #60	; 0x3c
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	08006518 	.word	0x08006518
 80039c8:	fffffbff 	.word	0xfffffbff

080039cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}

080039ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d107      	bne.n	8003a14 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	223e      	movs	r2, #62	; 0x3e
 8003a0e:	2101      	movs	r1, #1
 8003a10:	5499      	strb	r1, [r3, r2]
 8003a12:	e02a      	b.n	8003a6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d107      	bne.n	8003a2e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2202      	movs	r2, #2
 8003a22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	223f      	movs	r2, #63	; 0x3f
 8003a28:	2101      	movs	r1, #1
 8003a2a:	5499      	strb	r1, [r3, r2]
 8003a2c:	e01d      	b.n	8003a6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d107      	bne.n	8003a48 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]
 8003a46:	e010      	b.n	8003a6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d107      	bne.n	8003a62 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2208      	movs	r2, #8
 8003a56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2241      	movs	r2, #65	; 0x41
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]
 8003a60:	e003      	b.n	8003a6a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	223d      	movs	r2, #61	; 0x3d
 8003a66:	2101      	movs	r1, #1
 8003a68:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f7ff ffb5 	bl	80039dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d10b      	bne.n	8003ab0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d136      	bne.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	223e      	movs	r2, #62	; 0x3e
 8003aaa:	2101      	movs	r1, #1
 8003aac:	5499      	strb	r1, [r3, r2]
 8003aae:	e031      	b.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d10b      	bne.n	8003ad2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d125      	bne.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	223f      	movs	r2, #63	; 0x3f
 8003acc:	2101      	movs	r1, #1
 8003ace:	5499      	strb	r1, [r3, r2]
 8003ad0:	e020      	b.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d10b      	bne.n	8003af4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d114      	bne.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]
 8003af2:	e00f      	b.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d10a      	bne.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2208      	movs	r2, #8
 8003b02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2241      	movs	r2, #65	; 0x41
 8003b10:	2101      	movs	r1, #1
 8003b12:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7fc fd78 	bl	800060c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	771a      	strb	r2, [r3, #28]
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b004      	add	sp, #16
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d103      	bne.n	8003b4a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	771a      	strb	r2, [r3, #28]
 8003b48:	e019      	b.n	8003b7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d103      	bne.n	8003b5c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2202      	movs	r2, #2
 8003b58:	771a      	strb	r2, [r3, #28]
 8003b5a:	e010      	b.n	8003b7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d103      	bne.n	8003b6e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	771a      	strb	r2, [r3, #28]
 8003b6c:	e007      	b.n	8003b7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d102      	bne.n	8003b7e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff ff23 	bl	80039cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b004      	add	sp, #16
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <TIM_Base_SetConfig+0xe4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d008      	beq.n	8003bbe <TIM_Base_SetConfig+0x2a>
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	05db      	lsls	r3, r3, #23
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d003      	beq.n	8003bbe <TIM_Base_SetConfig+0x2a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a30      	ldr	r2, [pc, #192]	; (8003c7c <TIM_Base_SetConfig+0xe8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d108      	bne.n	8003bd0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2270      	movs	r2, #112	; 0x70
 8003bc2:	4393      	bics	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <TIM_Base_SetConfig+0xe4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d018      	beq.n	8003c0a <TIM_Base_SetConfig+0x76>
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	05db      	lsls	r3, r3, #23
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d013      	beq.n	8003c0a <TIM_Base_SetConfig+0x76>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a25      	ldr	r2, [pc, #148]	; (8003c7c <TIM_Base_SetConfig+0xe8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00f      	beq.n	8003c0a <TIM_Base_SetConfig+0x76>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <TIM_Base_SetConfig+0xec>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <TIM_Base_SetConfig+0x76>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a23      	ldr	r2, [pc, #140]	; (8003c84 <TIM_Base_SetConfig+0xf0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d007      	beq.n	8003c0a <TIM_Base_SetConfig+0x76>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <TIM_Base_SetConfig+0xf4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_Base_SetConfig+0x76>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <TIM_Base_SetConfig+0xf8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <TIM_Base_SetConfig+0xfc>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	4393      	bics	r3, r2
 8003c22:	001a      	movs	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <TIM_Base_SetConfig+0xe4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0xce>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	; (8003c84 <TIM_Base_SetConfig+0xf0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0xce>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <TIM_Base_SetConfig+0xf4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0xce>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <TIM_Base_SetConfig+0xf8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d103      	bne.n	8003c6a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	615a      	str	r2, [r3, #20]
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b004      	add	sp, #16
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40002000 	.word	0x40002000
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40014400 	.word	0x40014400
 8003c8c:	40014800 	.word	0x40014800
 8003c90:	fffffcff 	.word	0xfffffcff

08003c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a32      	ldr	r2, [pc, #200]	; (8003d8c <TIM_OC1_SetConfig+0xf8>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4393      	bics	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4393      	bics	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <TIM_OC1_SetConfig+0xfc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_OC1_SetConfig+0x76>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <TIM_OC1_SetConfig+0x100>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC1_SetConfig+0x76>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <TIM_OC1_SetConfig+0x104>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC1_SetConfig+0x76>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a25      	ldr	r2, [pc, #148]	; (8003d9c <TIM_OC1_SetConfig+0x108>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10c      	bne.n	8003d24 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	4393      	bics	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2204      	movs	r2, #4
 8003d20:	4393      	bics	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1a      	ldr	r2, [pc, #104]	; (8003d90 <TIM_OC1_SetConfig+0xfc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_OC1_SetConfig+0xb0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <TIM_OC1_SetConfig+0x100>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_OC1_SetConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <TIM_OC1_SetConfig+0x104>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC1_SetConfig+0xb0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <TIM_OC1_SetConfig+0x108>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d111      	bne.n	8003d68 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <TIM_OC1_SetConfig+0x10c>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <TIM_OC1_SetConfig+0x110>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b006      	add	sp, #24
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	fffeff8f 	.word	0xfffeff8f
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800
 8003da0:	fffffeff 	.word	0xfffffeff
 8003da4:	fffffdff 	.word	0xfffffdff

08003da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	2210      	movs	r2, #16
 8003db8:	4393      	bics	r3, r2
 8003dba:	001a      	movs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a2e      	ldr	r2, [pc, #184]	; (8003e90 <TIM_OC2_SetConfig+0xe8>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <TIM_OC2_SetConfig+0xec>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2220      	movs	r2, #32
 8003df2:	4393      	bics	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <TIM_OC2_SetConfig+0xf0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10d      	bne.n	8003e26 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	4393      	bics	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2240      	movs	r2, #64	; 0x40
 8003e22:	4393      	bics	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <TIM_OC2_SetConfig+0xf0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_OC2_SetConfig+0x9e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <TIM_OC2_SetConfig+0xf4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_OC2_SetConfig+0x9e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <TIM_OC2_SetConfig+0xf8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_OC2_SetConfig+0x9e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <TIM_OC2_SetConfig+0xfc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d113      	bne.n	8003e6e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <TIM_OC2_SetConfig+0x100>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4a16      	ldr	r2, [pc, #88]	; (8003eac <TIM_OC2_SetConfig+0x104>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b006      	add	sp, #24
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	feff8fff 	.word	0xfeff8fff
 8003e94:	fffffcff 	.word	0xfffffcff
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800
 8003ea8:	fffffbff 	.word	0xfffffbff
 8003eac:	fffff7ff 	.word	0xfffff7ff

08003eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a35      	ldr	r2, [pc, #212]	; (8003f94 <TIM_OC3_SetConfig+0xe4>)
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <TIM_OC3_SetConfig+0xe8>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	4393      	bics	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <TIM_OC3_SetConfig+0xec>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <TIM_OC3_SetConfig+0xf0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d10d      	bne.n	8003f2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <TIM_OC3_SetConfig+0xf4>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <TIM_OC3_SetConfig+0xf8>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <TIM_OC3_SetConfig+0xf0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_OC3_SetConfig+0x9a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <TIM_OC3_SetConfig+0xfc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_OC3_SetConfig+0x9a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <TIM_OC3_SetConfig+0x100>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_OC3_SetConfig+0x9a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <TIM_OC3_SetConfig+0x104>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d113      	bne.n	8003f72 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <TIM_OC3_SetConfig+0x108>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <TIM_OC3_SetConfig+0x10c>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b006      	add	sp, #24
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	fffffeff 	.word	0xfffffeff
 8003f98:	fffeff8f 	.word	0xfffeff8f
 8003f9c:	fffffdff 	.word	0xfffffdff
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	fffff7ff 	.word	0xfffff7ff
 8003fa8:	fffffbff 	.word	0xfffffbff
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800
 8003fb8:	ffffefff 	.word	0xffffefff
 8003fbc:	ffffdfff 	.word	0xffffdfff

08003fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4a28      	ldr	r2, [pc, #160]	; (8004070 <TIM_OC4_SetConfig+0xb0>)
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a22      	ldr	r2, [pc, #136]	; (8004074 <TIM_OC4_SetConfig+0xb4>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <TIM_OC4_SetConfig+0xb8>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4a1d      	ldr	r2, [pc, #116]	; (800407c <TIM_OC4_SetConfig+0xbc>)
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	031b      	lsls	r3, r3, #12
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a19      	ldr	r2, [pc, #100]	; (8004080 <TIM_OC4_SetConfig+0xc0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_OC4_SetConfig+0x78>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a18      	ldr	r2, [pc, #96]	; (8004084 <TIM_OC4_SetConfig+0xc4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_OC4_SetConfig+0x78>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a17      	ldr	r2, [pc, #92]	; (8004088 <TIM_OC4_SetConfig+0xc8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_OC4_SetConfig+0x78>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a16      	ldr	r2, [pc, #88]	; (800408c <TIM_OC4_SetConfig+0xcc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d109      	bne.n	800404c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC4_SetConfig+0xd0>)
 800403c:	4013      	ands	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	019b      	lsls	r3, r3, #6
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b006      	add	sp, #24
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	ffffefff 	.word	0xffffefff
 8004074:	feff8fff 	.word	0xfeff8fff
 8004078:	fffffcff 	.word	0xfffffcff
 800407c:	ffffdfff 	.word	0xffffdfff
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800
 8004090:	ffffbfff 	.word	0xffffbfff

08004094 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a25      	ldr	r2, [pc, #148]	; (8004138 <TIM_OC5_SetConfig+0xa4>)
 80040a4:	401a      	ands	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a1f      	ldr	r2, [pc, #124]	; (800413c <TIM_OC5_SetConfig+0xa8>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <TIM_OC5_SetConfig+0xac>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <TIM_OC5_SetConfig+0xb0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_OC5_SetConfig+0x6e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <TIM_OC5_SetConfig+0xb4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_OC5_SetConfig+0x6e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a15      	ldr	r2, [pc, #84]	; (800414c <TIM_OC5_SetConfig+0xb8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_OC5_SetConfig+0x6e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a14      	ldr	r2, [pc, #80]	; (8004150 <TIM_OC5_SetConfig+0xbc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d109      	bne.n	8004116 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <TIM_OC5_SetConfig+0xa4>)
 8004106:	4013      	ands	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	621a      	str	r2, [r3, #32]
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	b006      	add	sp, #24
 8004136:	bd80      	pop	{r7, pc}
 8004138:	fffeffff 	.word	0xfffeffff
 800413c:	fffeff8f 	.word	0xfffeff8f
 8004140:	fffdffff 	.word	0xfffdffff
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800

08004154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4a26      	ldr	r2, [pc, #152]	; (80041fc <TIM_OC6_SetConfig+0xa8>)
 8004164:	401a      	ands	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a20      	ldr	r2, [pc, #128]	; (8004200 <TIM_OC6_SetConfig+0xac>)
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <TIM_OC6_SetConfig+0xb0>)
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	051b      	lsls	r3, r3, #20
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <TIM_OC6_SetConfig+0xb4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <TIM_OC6_SetConfig+0x70>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <TIM_OC6_SetConfig+0xb8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <TIM_OC6_SetConfig+0x70>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a16      	ldr	r2, [pc, #88]	; (8004210 <TIM_OC6_SetConfig+0xbc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_OC6_SetConfig+0x70>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <TIM_OC6_SetConfig+0xc0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d109      	bne.n	80041d8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4a14      	ldr	r2, [pc, #80]	; (8004218 <TIM_OC6_SetConfig+0xc4>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b006      	add	sp, #24
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	ffefffff 	.word	0xffefffff
 8004200:	feff8fff 	.word	0xfeff8fff
 8004204:	ffdfffff 	.word	0xffdfffff
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800
 8004218:	fffbffff 	.word	0xfffbffff

0800421c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	221f      	movs	r2, #31
 800422c:	4013      	ands	r3, r2
 800422e:	2201      	movs	r2, #1
 8004230:	409a      	lsls	r2, r3
 8004232:	0013      	movs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	43d2      	mvns	r2, r2
 800423e:	401a      	ands	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	211f      	movs	r1, #31
 800424c:	400b      	ands	r3, r1
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4099      	lsls	r1, r3
 8004252:	000b      	movs	r3, r1
 8004254:	431a      	orrs	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b006      	add	sp, #24
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	223c      	movs	r2, #60	; 0x3c
 8004272:	5c9b      	ldrb	r3, [r3, r2]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e055      	b.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	223c      	movs	r2, #60	; 0x3c
 8004280:	2101      	movs	r1, #1
 8004282:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	223d      	movs	r2, #61	; 0x3d
 8004288:	2102      	movs	r1, #2
 800428a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d108      	bne.n	80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2270      	movs	r2, #112	; 0x70
 80042bc:	4393      	bics	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	05db      	lsls	r3, r3, #23
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d009      	beq.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a12      	ldr	r2, [pc, #72]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a11      	ldr	r2, [pc, #68]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10c      	bne.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	4393      	bics	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	4313      	orrs	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	223d      	movs	r2, #61	; 0x3d
 800431a:	2101      	movs	r1, #1
 800431c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	223c      	movs	r2, #60	; 0x3c
 8004322:	2100      	movs	r1, #0
 8004324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b004      	add	sp, #16
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40012c00 	.word	0x40012c00
 8004334:	ff0fffff 	.word	0xff0fffff
 8004338:	40000400 	.word	0x40000400
 800433c:	40014000 	.word	0x40014000

08004340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	223c      	movs	r2, #60	; 0x3c
 8004352:	5c9b      	ldrb	r3, [r3, r2]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004358:	2302      	movs	r3, #2
 800435a:	e079      	b.n	8004450 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	223c      	movs	r2, #60	; 0x3c
 8004360:	2101      	movs	r1, #1
 8004362:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	22ff      	movs	r2, #255	; 0xff
 8004368:	4393      	bics	r3, r2
 800436a:	001a      	movs	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a38      	ldr	r2, [pc, #224]	; (8004458 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004378:	401a      	ands	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a35      	ldr	r2, [pc, #212]	; (800445c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004386:	401a      	ands	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a33      	ldr	r2, [pc, #204]	; (8004460 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004394:	401a      	ands	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80043a2:	401a      	ands	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a2e      	ldr	r2, [pc, #184]	; (8004468 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80043b0:	401a      	ands	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a2b      	ldr	r2, [pc, #172]	; (800446c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80043be:	401a      	ands	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a29      	ldr	r2, [pc, #164]	; (8004470 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80043cc:	401a      	ands	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a25      	ldr	r2, [pc, #148]	; (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d106      	bne.n	80043f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a24      	ldr	r2, [pc, #144]	; (8004478 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80043e6:	401a      	ands	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d121      	bne.n	800443e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a1f      	ldr	r2, [pc, #124]	; (800447c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80043fe:	401a      	ands	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	051b      	lsls	r3, r3, #20
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800440e:	401a      	ands	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800441c:	401a      	ands	r2, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d106      	bne.n	800443e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004434:	401a      	ands	r2, r3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223c      	movs	r2, #60	; 0x3c
 800444a:	2100      	movs	r1, #0
 800444c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b004      	add	sp, #16
 8004456:	bd80      	pop	{r7, pc}
 8004458:	fffffcff 	.word	0xfffffcff
 800445c:	fffffbff 	.word	0xfffffbff
 8004460:	fffff7ff 	.word	0xfffff7ff
 8004464:	ffffefff 	.word	0xffffefff
 8004468:	ffffdfff 	.word	0xffffdfff
 800446c:	ffffbfff 	.word	0xffffbfff
 8004470:	fff0ffff 	.word	0xfff0ffff
 8004474:	40012c00 	.word	0x40012c00
 8004478:	efffffff 	.word	0xefffffff
 800447c:	ff0fffff 	.word	0xff0fffff
 8004480:	feffffff 	.word	0xfeffffff
 8004484:	fdffffff 	.word	0xfdffffff
 8004488:	dfffffff 	.word	0xdfffffff

0800448c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e046      	b.n	800452c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2284      	movs	r2, #132	; 0x84
 80044a2:	589b      	ldr	r3, [r3, r2]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d107      	bne.n	80044b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	2100      	movs	r1, #0
 80044ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f7fc fcc4 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2284      	movs	r2, #132	; 0x84
 80044bc:	2124      	movs	r1, #36	; 0x24
 80044be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2101      	movs	r1, #1
 80044cc:	438a      	bics	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 fd4a 	bl	8004f6c <UART_SetConfig>
 80044d8:	0003      	movs	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e024      	b.n	800452c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f001 f81d 	bl	800552c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	490d      	ldr	r1, [pc, #52]	; (8004534 <HAL_UART_Init+0xa8>)
 80044fe:	400a      	ands	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	212a      	movs	r1, #42	; 0x2a
 800450e:	438a      	bics	r2, r1
 8004510:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2101      	movs	r1, #1
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f001 f8b5 	bl	8005694 <UART_CheckIdleState>
 800452a:	0003      	movs	r3, r0
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b002      	add	sp, #8
 8004532:	bd80      	pop	{r7, pc}
 8004534:	ffffb7ff 	.word	0xffffb7ff

08004538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	1dbb      	adds	r3, r7, #6
 8004546:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2284      	movs	r2, #132	; 0x84
 800454c:	589b      	ldr	r3, [r3, r2]
 800454e:	2b20      	cmp	r3, #32
 8004550:	d000      	beq.n	8004554 <HAL_UART_Transmit+0x1c>
 8004552:	e097      	b.n	8004684 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_UART_Transmit+0x2a>
 800455a:	1dbb      	adds	r3, r7, #6
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e08f      	b.n	8004686 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	015b      	lsls	r3, r3, #5
 800456e:	429a      	cmp	r2, r3
 8004570:	d109      	bne.n	8004586 <HAL_UART_Transmit+0x4e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2201      	movs	r2, #1
 800457e:	4013      	ands	r3, r2
 8004580:	d001      	beq.n	8004586 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e07f      	b.n	8004686 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	5c9b      	ldrb	r3, [r3, r2]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_UART_Transmit+0x5c>
 8004590:	2302      	movs	r3, #2
 8004592:	e078      	b.n	8004686 <HAL_UART_Transmit+0x14e>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	2101      	movs	r1, #1
 800459a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	228c      	movs	r2, #140	; 0x8c
 80045a0:	2100      	movs	r1, #0
 80045a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2284      	movs	r2, #132	; 0x84
 80045a8:	2121      	movs	r1, #33	; 0x21
 80045aa:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ac:	f7fd f972 	bl	8001894 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1dba      	adds	r2, r7, #6
 80045b8:	2154      	movs	r1, #84	; 0x54
 80045ba:	8812      	ldrh	r2, [r2, #0]
 80045bc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1dba      	adds	r2, r7, #6
 80045c2:	2156      	movs	r1, #86	; 0x56
 80045c4:	8812      	ldrh	r2, [r2, #0]
 80045c6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	015b      	lsls	r3, r3, #5
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d108      	bne.n	80045e6 <HAL_UART_Transmit+0xae>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	e003      	b.n	80045ee <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2280      	movs	r2, #128	; 0x80
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80045f6:	e02c      	b.n	8004652 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	0013      	movs	r3, r2
 8004602:	2200      	movs	r2, #0
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	f001 f891 	bl	800572c <UART_WaitOnFlagUntilTimeout>
 800460a:	1e03      	subs	r3, r0, #0
 800460c:	d001      	beq.n	8004612 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e039      	b.n	8004686 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	001a      	movs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	05d2      	lsls	r2, r2, #23
 8004624:	0dd2      	lsrs	r2, r2, #23
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	3302      	adds	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e007      	b.n	8004640 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	781a      	ldrb	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2256      	movs	r2, #86	; 0x56
 8004644:	5a9b      	ldrh	r3, [r3, r2]
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b299      	uxth	r1, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2256      	movs	r2, #86	; 0x56
 8004650:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2256      	movs	r2, #86	; 0x56
 8004656:	5a9b      	ldrh	r3, [r3, r2]
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1cc      	bne.n	80045f8 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	0013      	movs	r3, r2
 8004668:	2200      	movs	r2, #0
 800466a:	2140      	movs	r1, #64	; 0x40
 800466c:	f001 f85e 	bl	800572c <UART_WaitOnFlagUntilTimeout>
 8004670:	1e03      	subs	r3, r0, #0
 8004672:	d001      	beq.n	8004678 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e006      	b.n	8004686 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2284      	movs	r2, #132	; 0x84
 800467c:	2120      	movs	r1, #32
 800467e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b008      	add	sp, #32
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	1dbb      	adds	r3, r7, #6
 800469e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2288      	movs	r2, #136	; 0x88
 80046a4:	589b      	ldr	r3, [r3, r2]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d000      	beq.n	80046ac <HAL_UART_Receive+0x1c>
 80046aa:	e0db      	b.n	8004864 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_UART_Receive+0x2a>
 80046b2:	1dbb      	adds	r3, r7, #6
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e0d3      	b.n	8004866 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	015b      	lsls	r3, r3, #5
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d109      	bne.n	80046de <HAL_UART_Receive+0x4e>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d105      	bne.n	80046de <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2201      	movs	r2, #1
 80046d6:	4013      	ands	r3, r2
 80046d8:	d001      	beq.n	80046de <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e0c3      	b.n	8004866 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	5c9b      	ldrb	r3, [r3, r2]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UART_Receive+0x5c>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e0bc      	b.n	8004866 <HAL_UART_Receive+0x1d6>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	2101      	movs	r1, #1
 80046f2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	228c      	movs	r2, #140	; 0x8c
 80046f8:	2100      	movs	r1, #0
 80046fa:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2288      	movs	r2, #136	; 0x88
 8004700:	2122      	movs	r1, #34	; 0x22
 8004702:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470a:	f7fd f8c3 	bl	8001894 <HAL_GetTick>
 800470e:	0003      	movs	r3, r0
 8004710:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1dba      	adds	r2, r7, #6
 8004716:	215c      	movs	r1, #92	; 0x5c
 8004718:	8812      	ldrh	r2, [r2, #0]
 800471a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1dba      	adds	r2, r7, #6
 8004720:	215e      	movs	r1, #94	; 0x5e
 8004722:	8812      	ldrh	r2, [r2, #0]
 8004724:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	015b      	lsls	r3, r3, #5
 800472e:	429a      	cmp	r2, r3
 8004730:	d10d      	bne.n	800474e <HAL_UART_Receive+0xbe>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <HAL_UART_Receive+0xb4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2260      	movs	r2, #96	; 0x60
 800473e:	494c      	ldr	r1, [pc, #304]	; (8004870 <HAL_UART_Receive+0x1e0>)
 8004740:	5299      	strh	r1, [r3, r2]
 8004742:	e02e      	b.n	80047a2 <HAL_UART_Receive+0x112>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2260      	movs	r2, #96	; 0x60
 8004748:	21ff      	movs	r1, #255	; 0xff
 800474a:	5299      	strh	r1, [r3, r2]
 800474c:	e029      	b.n	80047a2 <HAL_UART_Receive+0x112>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <HAL_UART_Receive+0xe2>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <HAL_UART_Receive+0xd8>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2260      	movs	r2, #96	; 0x60
 8004762:	21ff      	movs	r1, #255	; 0xff
 8004764:	5299      	strh	r1, [r3, r2]
 8004766:	e01c      	b.n	80047a2 <HAL_UART_Receive+0x112>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2260      	movs	r2, #96	; 0x60
 800476c:	217f      	movs	r1, #127	; 0x7f
 800476e:	5299      	strh	r1, [r3, r2]
 8004770:	e017      	b.n	80047a2 <HAL_UART_Receive+0x112>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	055b      	lsls	r3, r3, #21
 800477a:	429a      	cmp	r2, r3
 800477c:	d10d      	bne.n	800479a <HAL_UART_Receive+0x10a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <HAL_UART_Receive+0x100>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2260      	movs	r2, #96	; 0x60
 800478a:	217f      	movs	r1, #127	; 0x7f
 800478c:	5299      	strh	r1, [r3, r2]
 800478e:	e008      	b.n	80047a2 <HAL_UART_Receive+0x112>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2260      	movs	r2, #96	; 0x60
 8004794:	213f      	movs	r1, #63	; 0x3f
 8004796:	5299      	strh	r1, [r3, r2]
 8004798:	e003      	b.n	80047a2 <HAL_UART_Receive+0x112>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2260      	movs	r2, #96	; 0x60
 800479e:	2100      	movs	r1, #0
 80047a0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80047a2:	2312      	movs	r3, #18
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	2160      	movs	r1, #96	; 0x60
 80047aa:	5a52      	ldrh	r2, [r2, r1]
 80047ac:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	015b      	lsls	r3, r3, #5
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d108      	bne.n	80047cc <HAL_UART_Receive+0x13c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e003      	b.n	80047d4 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	2100      	movs	r1, #0
 80047da:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047dc:	e036      	b.n	800484c <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	0013      	movs	r3, r2
 80047e8:	2200      	movs	r2, #0
 80047ea:	2120      	movs	r1, #32
 80047ec:	f000 ff9e 	bl	800572c <UART_WaitOnFlagUntilTimeout>
 80047f0:	1e03      	subs	r3, r0, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e036      	b.n	8004866 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10e      	bne.n	800481c <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	b29b      	uxth	r3, r3
 8004806:	2212      	movs	r2, #18
 8004808:	18ba      	adds	r2, r7, r2
 800480a:	8812      	ldrh	r2, [r2, #0]
 800480c:	4013      	ands	r3, r2
 800480e:	b29a      	uxth	r2, r3
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	3302      	adds	r3, #2
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	e00e      	b.n	800483a <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2212      	movs	r2, #18
 8004826:	18ba      	adds	r2, r7, r2
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	4013      	ands	r3, r2
 800482e:	b2da      	uxtb	r2, r3
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	3301      	adds	r3, #1
 8004838:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	225e      	movs	r2, #94	; 0x5e
 800483e:	5a9b      	ldrh	r3, [r3, r2]
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b299      	uxth	r1, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	225e      	movs	r2, #94	; 0x5e
 800484a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	225e      	movs	r2, #94	; 0x5e
 8004850:	5a9b      	ldrh	r3, [r3, r2]
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1c2      	bne.n	80047de <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2288      	movs	r2, #136	; 0x88
 800485c:	2120      	movs	r1, #32
 800485e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	0018      	movs	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	b008      	add	sp, #32
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	000001ff 	.word	0x000001ff

08004874 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	1dbb      	adds	r3, r7, #6
 8004880:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2288      	movs	r2, #136	; 0x88
 8004886:	589b      	ldr	r3, [r3, r2]
 8004888:	2b20      	cmp	r3, #32
 800488a:	d12f      	bne.n	80048ec <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_UART_Receive_IT+0x26>
 8004892:	1dbb      	adds	r3, r7, #6
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e027      	b.n	80048ee <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	015b      	lsls	r3, r3, #5
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d109      	bne.n	80048be <HAL_UART_Receive_IT+0x4a>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2201      	movs	r2, #1
 80048b6:	4013      	ands	r3, r2
 80048b8:	d001      	beq.n	80048be <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e017      	b.n	80048ee <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Receive_IT+0x58>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e010      	b.n	80048ee <HAL_UART_Receive_IT+0x7a>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2280      	movs	r2, #128	; 0x80
 80048d0:	2101      	movs	r1, #1
 80048d2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 80048da:	1dbb      	adds	r3, r7, #6
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 ffa4 	bl	8005830 <UART_Start_Receive_IT>
 80048e8:	0003      	movs	r3, r0
 80048ea:	e000      	b.n	80048ee <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b004      	add	sp, #16
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8004900:	2301      	movs	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]

  /* Disable interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4963      	ldr	r1, [pc, #396]	; (8004a9c <HAL_UART_Abort_IT+0x1a4>)
 8004910:	400a      	ands	r2, r1
 8004912:	601a      	str	r2, [r3, #0]
                                   USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4960      	ldr	r1, [pc, #384]	; (8004aa0 <HAL_UART_Abort_IT+0x1a8>)
 8004920:	400a      	ands	r2, r1
 8004922:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2110      	movs	r1, #16
 8004938:	438a      	bics	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00f      	beq.n	8004964 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	4013      	ands	r3, r2
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d104      	bne.n	800495c <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004956:	4a53      	ldr	r2, [pc, #332]	; (8004aa4 <HAL_UART_Abort_IT+0x1ac>)
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
 800495a:	e003      	b.n	8004964 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004960:	2200      	movs	r2, #0
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2240      	movs	r2, #64	; 0x40
 8004974:	4013      	ands	r3, r2
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d104      	bne.n	8004984 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	4a4a      	ldr	r2, [pc, #296]	; (8004aa8 <HAL_UART_Abort_IT+0x1b0>)
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
 8004982:	e003      	b.n	800498c <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004988:	2200      	movs	r2, #0
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2280      	movs	r2, #128	; 0x80
 8004994:	4013      	ands	r3, r2
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d119      	bne.n	80049ce <HAL_UART_Abort_IT+0xd6>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2180      	movs	r1, #128	; 0x80
 80049a6:	438a      	bics	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <HAL_UART_Abort_IT+0xd6>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b6:	0018      	movs	r0, r3
 80049b8:	f7fd f9dc 	bl	8001d74 <HAL_DMA_Abort_IT>
 80049bc:	1e03      	subs	r3, r0, #0
 80049be:	d004      	beq.n	80049ca <HAL_UART_Abort_IT+0xd2>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c4:	2200      	movs	r2, #0
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
 80049c8:	e001      	b.n	80049ce <HAL_UART_Abort_IT+0xd6>
      }
      else
      {
        abortcplt = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2240      	movs	r2, #64	; 0x40
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d11b      	bne.n	8004a14 <HAL_UART_Abort_IT+0x11c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2140      	movs	r1, #64	; 0x40
 80049e8:	438a      	bics	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00f      	beq.n	8004a14 <HAL_UART_Abort_IT+0x11c>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fd f9bb 	bl	8001d74 <HAL_DMA_Abort_IT>
 80049fe:	1e03      	subs	r3, r0, #0
 8004a00:	d006      	beq.n	8004a10 <HAL_UART_Abort_IT+0x118>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a06:	2200      	movs	r2, #0
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e001      	b.n	8004a14 <HAL_UART_Abort_IT+0x11c>
      }
      else
      {
        abortcplt = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d13a      	bne.n	8004a90 <HAL_UART_Abort_IT+0x198>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2256      	movs	r2, #86	; 0x56
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	225e      	movs	r2, #94	; 0x5e
 8004a26:	2100      	movs	r1, #0
 8004a28:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	228c      	movs	r2, #140	; 0x8c
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	220f      	movs	r2, #15
 8004a44:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	059b      	lsls	r3, r3, #22
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d107      	bne.n	8004a62 <HAL_UART_Abort_IT+0x16a>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2284      	movs	r2, #132	; 0x84
 8004a76:	2120      	movs	r1, #32
 8004a78:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2288      	movs	r2, #136	; 0x88
 8004a7e:	2120      	movs	r1, #32
 8004a80:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 fa5a 	bl	8004f44 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b004      	add	sp, #16
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	fffffe1f 	.word	0xfffffe1f
 8004aa0:	ef7ffffe 	.word	0xef7ffffe
 8004aa4:	08005a53 	.word	0x08005a53
 8004aa8:	08005adf 	.word	0x08005adf

08004aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4abc      	ldr	r2, [pc, #752]	; (8004dc0 <HAL_UART_IRQHandler+0x314>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d117      	bne.n	8004b0a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2220      	movs	r2, #32
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	055b      	lsls	r3, r3, #21
 8004af0:	4013      	ands	r3, r2
 8004af2:	d00a      	beq.n	8004b0a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d100      	bne.n	8004afe <HAL_UART_IRQHandler+0x52>
 8004afc:	e202      	b.n	8004f04 <HAL_UART_IRQHandler+0x458>
      {
        huart->RxISR(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	0010      	movs	r0, r2
 8004b06:	4798      	blx	r3
      }
      return;
 8004b08:	e1fc      	b.n	8004f04 <HAL_UART_IRQHandler+0x458>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d100      	bne.n	8004b12 <HAL_UART_IRQHandler+0x66>
 8004b10:	e0de      	b.n	8004cd0 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4aab      	ldr	r2, [pc, #684]	; (8004dc4 <HAL_UART_IRQHandler+0x318>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	d104      	bne.n	8004b24 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	4aaa      	ldr	r2, [pc, #680]	; (8004dc8 <HAL_UART_IRQHandler+0x31c>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d100      	bne.n	8004b24 <HAL_UART_IRQHandler+0x78>
 8004b22:	e0d5      	b.n	8004cd0 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d010      	beq.n	8004b4e <HAL_UART_IRQHandler+0xa2>
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4013      	ands	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	228c      	movs	r2, #140	; 0x8c
 8004b42:	589b      	ldr	r3, [r3, r2]
 8004b44:	2201      	movs	r2, #1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	218c      	movs	r1, #140	; 0x8c
 8004b4c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2202      	movs	r2, #2
 8004b52:	4013      	ands	r3, r2
 8004b54:	d00f      	beq.n	8004b76 <HAL_UART_IRQHandler+0xca>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2202      	movs	r2, #2
 8004b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	228c      	movs	r2, #140	; 0x8c
 8004b6a:	589b      	ldr	r3, [r3, r2]
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	218c      	movs	r1, #140	; 0x8c
 8004b74:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <HAL_UART_IRQHandler+0xf2>
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2201      	movs	r2, #1
 8004b82:	4013      	ands	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	228c      	movs	r2, #140	; 0x8c
 8004b92:	589b      	ldr	r3, [r3, r2]
 8004b94:	2202      	movs	r2, #2
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	218c      	movs	r1, #140	; 0x8c
 8004b9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	4013      	ands	r3, r2
 8004bac:	d103      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	4a84      	ldr	r2, [pc, #528]	; (8004dc4 <HAL_UART_IRQHandler+0x318>)
 8004bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bb4:	d00b      	beq.n	8004bce <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2208      	movs	r2, #8
 8004bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	228c      	movs	r2, #140	; 0x8c
 8004bc2:	589b      	ldr	r3, [r3, r2]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	218c      	movs	r1, #140	; 0x8c
 8004bcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d011      	beq.n	8004bfc <HAL_UART_IRQHandler+0x150>
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	04db      	lsls	r3, r3, #19
 8004bde:	4013      	ands	r3, r2
 8004be0:	d00c      	beq.n	8004bfc <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	0112      	lsls	r2, r2, #4
 8004bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	228c      	movs	r2, #140	; 0x8c
 8004bf0:	589b      	ldr	r3, [r3, r2]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	218c      	movs	r1, #140	; 0x8c
 8004bfa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	228c      	movs	r2, #140	; 0x8c
 8004c00:	589b      	ldr	r3, [r3, r2]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d100      	bne.n	8004c08 <HAL_UART_IRQHandler+0x15c>
 8004c06:	e17f      	b.n	8004f08 <HAL_UART_IRQHandler+0x45c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d011      	beq.n	8004c34 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2220      	movs	r2, #32
 8004c14:	4013      	ands	r3, r2
 8004c16:	d104      	bne.n	8004c22 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	055b      	lsls	r3, r3, #21
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d008      	beq.n	8004c34 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	0010      	movs	r0, r2
 8004c32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	228c      	movs	r2, #140	; 0x8c
 8004c38:	589b      	ldr	r3, [r3, r2]
 8004c3a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d003      	beq.n	8004c52 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2228      	movs	r2, #40	; 0x28
 8004c4e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c50:	d033      	beq.n	8004cba <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 feb3 	bl	80059c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2240      	movs	r2, #64	; 0x40
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d123      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2140      	movs	r1, #64	; 0x40
 8004c74:	438a      	bics	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c84:	4a51      	ldr	r2, [pc, #324]	; (8004dcc <HAL_UART_IRQHandler+0x320>)
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fd f871 	bl	8001d74 <HAL_DMA_Abort_IT>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d01a      	beq.n	8004ccc <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	e012      	b.n	8004ccc <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 f943 	bl	8004f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cae:	e00d      	b.n	8004ccc <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f93e 	bl	8004f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e008      	b.n	8004ccc <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 f939 	bl	8004f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	228c      	movs	r2, #140	; 0x8c
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004cca:	e11d      	b.n	8004f08 <HAL_UART_IRQHandler+0x45c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	46c0      	nop			; (mov r8, r8)
    return;
 8004cce:	e11b      	b.n	8004f08 <HAL_UART_IRQHandler+0x45c>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d000      	beq.n	8004cda <HAL_UART_IRQHandler+0x22e>
 8004cd8:	e0bf      	b.n	8004e5a <HAL_UART_IRQHandler+0x3ae>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x238>
 8004ce2:	e0ba      	b.n	8004e5a <HAL_UART_IRQHandler+0x3ae>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d100      	bne.n	8004cee <HAL_UART_IRQHandler+0x242>
 8004cec:	e0b5      	b.n	8004e5a <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2240      	movs	r2, #64	; 0x40
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d167      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x328>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	2108      	movs	r1, #8
 8004d0e:	187b      	adds	r3, r7, r1
 8004d10:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8004d12:	187b      	adds	r3, r7, r1
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d100      	bne.n	8004d1c <HAL_UART_IRQHandler+0x270>
 8004d1a:	e0f7      	b.n	8004f0c <HAL_UART_IRQHandler+0x460>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	225c      	movs	r2, #92	; 0x5c
 8004d20:	5a9b      	ldrh	r3, [r3, r2]
 8004d22:	2208      	movs	r2, #8
 8004d24:	18ba      	adds	r2, r7, r2
 8004d26:	8812      	ldrh	r2, [r2, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d300      	bcc.n	8004d2e <HAL_UART_IRQHandler+0x282>
 8004d2c:	e0ee      	b.n	8004f0c <HAL_UART_IRQHandler+0x460>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2208      	movs	r2, #8
 8004d32:	18ba      	adds	r2, r7, r2
 8004d34:	215e      	movs	r1, #94	; 0x5e
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2220      	movs	r2, #32
 8004d44:	4013      	ands	r3, r2
 8004d46:	d12b      	bne.n	8004da0 <HAL_UART_IRQHandler+0x2f4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	491f      	ldr	r1, [pc, #124]	; (8004dd0 <HAL_UART_IRQHandler+0x324>)
 8004d54:	400a      	ands	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2101      	movs	r1, #1
 8004d64:	438a      	bics	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	438a      	bics	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2288      	movs	r2, #136	; 0x88
 8004d7c:	2120      	movs	r1, #32
 8004d7e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2110      	movs	r1, #16
 8004d92:	438a      	bics	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7fc ff88 	bl	8001cb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	225c      	movs	r2, #92	; 0x5c
 8004da4:	5a9a      	ldrh	r2, [r3, r2]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	215e      	movs	r1, #94	; 0x5e
 8004daa:	5a5b      	ldrh	r3, [r3, r1]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0011      	movs	r1, r2
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 f8cc 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dbc:	e0a6      	b.n	8004f0c <HAL_UART_IRQHandler+0x460>
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	0000080f 	.word	0x0000080f
 8004dc4:	10000001 	.word	0x10000001
 8004dc8:	04000120 	.word	0x04000120
 8004dcc:	08005a25 	.word	0x08005a25
 8004dd0:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	225c      	movs	r2, #92	; 0x5c
 8004dd8:	5a99      	ldrh	r1, [r3, r2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	225e      	movs	r2, #94	; 0x5e
 8004dde:	5a9b      	ldrh	r3, [r3, r2]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	230a      	movs	r3, #10
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	1a8a      	subs	r2, r1, r2
 8004de8:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	225e      	movs	r2, #94	; 0x5e
 8004dee:	5a9b      	ldrh	r3, [r3, r2]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d100      	bne.n	8004df8 <HAL_UART_IRQHandler+0x34c>
 8004df6:	e08b      	b.n	8004f10 <HAL_UART_IRQHandler+0x464>
          &&(nb_rx_data > 0U) )
 8004df8:	230a      	movs	r3, #10
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d100      	bne.n	8004e04 <HAL_UART_IRQHandler+0x358>
 8004e02:	e085      	b.n	8004f10 <HAL_UART_IRQHandler+0x464>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4943      	ldr	r1, [pc, #268]	; (8004f1c <HAL_UART_IRQHandler+0x470>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4940      	ldr	r1, [pc, #256]	; (8004f20 <HAL_UART_IRQHandler+0x474>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2288      	movs	r2, #136	; 0x88
 8004e28:	2120      	movs	r1, #32
 8004e2a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2110      	movs	r1, #16
 8004e44:	438a      	bics	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e48:	230a      	movs	r3, #10
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0011      	movs	r1, r2
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 f87e 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e58:	e05a      	b.n	8004f10 <HAL_UART_IRQHandler+0x464>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	035b      	lsls	r3, r3, #13
 8004e60:	4013      	ands	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_UART_IRQHandler+0x3d6>
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	03db      	lsls	r3, r3, #15
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_UART_IRQHandler+0x3d6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2280      	movs	r2, #128	; 0x80
 8004e74:	0352      	lsls	r2, r2, #13
 8004e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f001 f99e 	bl	80061bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e80:	e049      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2280      	movs	r2, #128	; 0x80
 8004e86:	4013      	ands	r3, r2
 8004e88:	d012      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x404>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d104      	bne.n	8004e9c <HAL_UART_IRQHandler+0x3f0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x404>
  {
    if (huart->TxISR != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d037      	beq.n	8004f14 <HAL_UART_IRQHandler+0x468>
    {
      huart->TxISR(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	0010      	movs	r0, r2
 8004eac:	4798      	blx	r3
    }
    return;
 8004eae:	e031      	b.n	8004f14 <HAL_UART_IRQHandler+0x468>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2240      	movs	r2, #64	; 0x40
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d008      	beq.n	8004eca <HAL_UART_IRQHandler+0x41e>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2240      	movs	r2, #64	; 0x40
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_UART_IRQHandler+0x41e>
  {
    UART_EndTransmit_IT(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 fe4b 	bl	8005b5e <UART_EndTransmit_IT>
    return;
 8004ec8:	e025      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x43c>
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	05db      	lsls	r3, r3, #23
 8004eda:	4013      	ands	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x43c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f001 f97b 	bl	80061dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee6:	e016      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	045b      	lsls	r3, r3, #17
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d011      	beq.n	8004f16 <HAL_UART_IRQHandler+0x46a>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	da0e      	bge.n	8004f16 <HAL_UART_IRQHandler+0x46a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f001 f966 	bl	80061cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	e008      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
      return;
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	e006      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
    return;
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	e004      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
      return;
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	e002      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
      return;
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	e000      	b.n	8004f16 <HAL_UART_IRQHandler+0x46a>
    return;
 8004f14:	46c0      	nop			; (mov r8, r8)
  }
}
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b008      	add	sp, #32
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	fffffedf 	.word	0xfffffedf
 8004f20:	effffffe 	.word	0xeffffffe

08004f24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f2c:	46c0      	nop			; (mov r8, r8)
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b002      	add	sp, #8
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	000a      	movs	r2, r1
 8004f5e:	1cbb      	adds	r3, r7, #2
 8004f60:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b002      	add	sp, #8
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	b091      	sub	sp, #68	; 0x44
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f74:	231a      	movs	r3, #26
 8004f76:	2220      	movs	r2, #32
 8004f78:	4694      	mov	ip, r2
 8004f7a:	44bc      	add	ip, r7
 8004f7c:	4463      	add	r3, ip
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4ab8      	ldr	r2, [pc, #736]	; (800528c <UART_SetConfig+0x320>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4ab3      	ldr	r2, [pc, #716]	; (8005290 <UART_SetConfig+0x324>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	68d9      	ldr	r1, [r3, #12]
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	0003      	movs	r3, r0
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4aad      	ldr	r2, [pc, #692]	; (8005294 <UART_SetConfig+0x328>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fea:	4313      	orrs	r3, r2
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	4aa8      	ldr	r2, [pc, #672]	; (8005298 <UART_SetConfig+0x32c>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	430b      	orrs	r3, r1
 8005002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	220f      	movs	r2, #15
 800500c:	4393      	bics	r3, r2
 800500e:	0018      	movs	r0, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	0003      	movs	r3, r0
 800501a:	430b      	orrs	r3, r1
 800501c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a9e      	ldr	r2, [pc, #632]	; (800529c <UART_SetConfig+0x330>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d134      	bne.n	8005092 <UART_SetConfig+0x126>
 8005028:	4b9d      	ldr	r3, [pc, #628]	; (80052a0 <UART_SetConfig+0x334>)
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	2203      	movs	r2, #3
 800502e:	4013      	ands	r3, r2
 8005030:	2b01      	cmp	r3, #1
 8005032:	d015      	beq.n	8005060 <UART_SetConfig+0xf4>
 8005034:	d304      	bcc.n	8005040 <UART_SetConfig+0xd4>
 8005036:	2b02      	cmp	r3, #2
 8005038:	d00a      	beq.n	8005050 <UART_SetConfig+0xe4>
 800503a:	2b03      	cmp	r3, #3
 800503c:	d018      	beq.n	8005070 <UART_SetConfig+0x104>
 800503e:	e01f      	b.n	8005080 <UART_SetConfig+0x114>
 8005040:	231b      	movs	r3, #27
 8005042:	2220      	movs	r2, #32
 8005044:	4694      	mov	ip, r2
 8005046:	44bc      	add	ip, r7
 8005048:	4463      	add	r3, ip
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e0c5      	b.n	80051dc <UART_SetConfig+0x270>
 8005050:	231b      	movs	r3, #27
 8005052:	2220      	movs	r2, #32
 8005054:	4694      	mov	ip, r2
 8005056:	44bc      	add	ip, r7
 8005058:	4463      	add	r3, ip
 800505a:	2202      	movs	r2, #2
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e0bd      	b.n	80051dc <UART_SetConfig+0x270>
 8005060:	231b      	movs	r3, #27
 8005062:	2220      	movs	r2, #32
 8005064:	4694      	mov	ip, r2
 8005066:	44bc      	add	ip, r7
 8005068:	4463      	add	r3, ip
 800506a:	2204      	movs	r2, #4
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e0b5      	b.n	80051dc <UART_SetConfig+0x270>
 8005070:	231b      	movs	r3, #27
 8005072:	2220      	movs	r2, #32
 8005074:	4694      	mov	ip, r2
 8005076:	44bc      	add	ip, r7
 8005078:	4463      	add	r3, ip
 800507a:	2208      	movs	r2, #8
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e0ad      	b.n	80051dc <UART_SetConfig+0x270>
 8005080:	231b      	movs	r3, #27
 8005082:	2220      	movs	r2, #32
 8005084:	4694      	mov	ip, r2
 8005086:	44bc      	add	ip, r7
 8005088:	4463      	add	r3, ip
 800508a:	2210      	movs	r2, #16
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	e0a4      	b.n	80051dc <UART_SetConfig+0x270>
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a83      	ldr	r2, [pc, #524]	; (80052a4 <UART_SetConfig+0x338>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d137      	bne.n	800510c <UART_SetConfig+0x1a0>
 800509c:	4b80      	ldr	r3, [pc, #512]	; (80052a0 <UART_SetConfig+0x334>)
 800509e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a0:	220c      	movs	r2, #12
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d018      	beq.n	80050da <UART_SetConfig+0x16e>
 80050a8:	d802      	bhi.n	80050b0 <UART_SetConfig+0x144>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <UART_SetConfig+0x14e>
 80050ae:	e024      	b.n	80050fa <UART_SetConfig+0x18e>
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d00a      	beq.n	80050ca <UART_SetConfig+0x15e>
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d018      	beq.n	80050ea <UART_SetConfig+0x17e>
 80050b8:	e01f      	b.n	80050fa <UART_SetConfig+0x18e>
 80050ba:	231b      	movs	r3, #27
 80050bc:	2220      	movs	r2, #32
 80050be:	4694      	mov	ip, r2
 80050c0:	44bc      	add	ip, r7
 80050c2:	4463      	add	r3, ip
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e088      	b.n	80051dc <UART_SetConfig+0x270>
 80050ca:	231b      	movs	r3, #27
 80050cc:	2220      	movs	r2, #32
 80050ce:	4694      	mov	ip, r2
 80050d0:	44bc      	add	ip, r7
 80050d2:	4463      	add	r3, ip
 80050d4:	2202      	movs	r2, #2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e080      	b.n	80051dc <UART_SetConfig+0x270>
 80050da:	231b      	movs	r3, #27
 80050dc:	2220      	movs	r2, #32
 80050de:	4694      	mov	ip, r2
 80050e0:	44bc      	add	ip, r7
 80050e2:	4463      	add	r3, ip
 80050e4:	2204      	movs	r2, #4
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e078      	b.n	80051dc <UART_SetConfig+0x270>
 80050ea:	231b      	movs	r3, #27
 80050ec:	2220      	movs	r2, #32
 80050ee:	4694      	mov	ip, r2
 80050f0:	44bc      	add	ip, r7
 80050f2:	4463      	add	r3, ip
 80050f4:	2208      	movs	r2, #8
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e070      	b.n	80051dc <UART_SetConfig+0x270>
 80050fa:	231b      	movs	r3, #27
 80050fc:	2220      	movs	r2, #32
 80050fe:	4694      	mov	ip, r2
 8005100:	44bc      	add	ip, r7
 8005102:	4463      	add	r3, ip
 8005104:	2210      	movs	r2, #16
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	e067      	b.n	80051dc <UART_SetConfig+0x270>
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <UART_SetConfig+0x33c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d107      	bne.n	8005126 <UART_SetConfig+0x1ba>
 8005116:	231b      	movs	r3, #27
 8005118:	2220      	movs	r2, #32
 800511a:	4694      	mov	ip, r2
 800511c:	44bc      	add	ip, r7
 800511e:	4463      	add	r3, ip
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e05a      	b.n	80051dc <UART_SetConfig+0x270>
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a60      	ldr	r2, [pc, #384]	; (80052ac <UART_SetConfig+0x340>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d107      	bne.n	8005140 <UART_SetConfig+0x1d4>
 8005130:	231b      	movs	r3, #27
 8005132:	2220      	movs	r2, #32
 8005134:	4694      	mov	ip, r2
 8005136:	44bc      	add	ip, r7
 8005138:	4463      	add	r3, ip
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e04d      	b.n	80051dc <UART_SetConfig+0x270>
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a53      	ldr	r2, [pc, #332]	; (8005294 <UART_SetConfig+0x328>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d141      	bne.n	80051ce <UART_SetConfig+0x262>
 800514a:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <UART_SetConfig+0x334>)
 800514c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514e:	23c0      	movs	r3, #192	; 0xc0
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	4013      	ands	r3, r2
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	00d2      	lsls	r2, r2, #3
 8005158:	4293      	cmp	r3, r2
 800515a:	d01f      	beq.n	800519c <UART_SetConfig+0x230>
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	00d2      	lsls	r2, r2, #3
 8005160:	4293      	cmp	r3, r2
 8005162:	d802      	bhi.n	800516a <UART_SetConfig+0x1fe>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <UART_SetConfig+0x210>
 8005168:	e028      	b.n	80051bc <UART_SetConfig+0x250>
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	0112      	lsls	r2, r2, #4
 800516e:	4293      	cmp	r3, r2
 8005170:	d00c      	beq.n	800518c <UART_SetConfig+0x220>
 8005172:	22c0      	movs	r2, #192	; 0xc0
 8005174:	0112      	lsls	r2, r2, #4
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <UART_SetConfig+0x240>
 800517a:	e01f      	b.n	80051bc <UART_SetConfig+0x250>
 800517c:	231b      	movs	r3, #27
 800517e:	2220      	movs	r2, #32
 8005180:	4694      	mov	ip, r2
 8005182:	44bc      	add	ip, r7
 8005184:	4463      	add	r3, ip
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e027      	b.n	80051dc <UART_SetConfig+0x270>
 800518c:	231b      	movs	r3, #27
 800518e:	2220      	movs	r2, #32
 8005190:	4694      	mov	ip, r2
 8005192:	44bc      	add	ip, r7
 8005194:	4463      	add	r3, ip
 8005196:	2202      	movs	r2, #2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e01f      	b.n	80051dc <UART_SetConfig+0x270>
 800519c:	231b      	movs	r3, #27
 800519e:	2220      	movs	r2, #32
 80051a0:	4694      	mov	ip, r2
 80051a2:	44bc      	add	ip, r7
 80051a4:	4463      	add	r3, ip
 80051a6:	2204      	movs	r2, #4
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e017      	b.n	80051dc <UART_SetConfig+0x270>
 80051ac:	231b      	movs	r3, #27
 80051ae:	2220      	movs	r2, #32
 80051b0:	4694      	mov	ip, r2
 80051b2:	44bc      	add	ip, r7
 80051b4:	4463      	add	r3, ip
 80051b6:	2208      	movs	r2, #8
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x270>
 80051bc:	231b      	movs	r3, #27
 80051be:	2220      	movs	r2, #32
 80051c0:	4694      	mov	ip, r2
 80051c2:	44bc      	add	ip, r7
 80051c4:	4463      	add	r3, ip
 80051c6:	2210      	movs	r2, #16
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	e006      	b.n	80051dc <UART_SetConfig+0x270>
 80051ce:	231b      	movs	r3, #27
 80051d0:	2220      	movs	r2, #32
 80051d2:	4694      	mov	ip, r2
 80051d4:	44bc      	add	ip, r7
 80051d6:	4463      	add	r3, ip
 80051d8:	2210      	movs	r2, #16
 80051da:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2c      	ldr	r2, [pc, #176]	; (8005294 <UART_SetConfig+0x328>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d000      	beq.n	80051e8 <UART_SetConfig+0x27c>
 80051e6:	e0aa      	b.n	800533e <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051e8:	231b      	movs	r3, #27
 80051ea:	2220      	movs	r2, #32
 80051ec:	4694      	mov	ip, r2
 80051ee:	44bc      	add	ip, r7
 80051f0:	4463      	add	r3, ip
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d00d      	beq.n	8005214 <UART_SetConfig+0x2a8>
 80051f8:	dc02      	bgt.n	8005200 <UART_SetConfig+0x294>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <UART_SetConfig+0x29e>
 80051fe:	e015      	b.n	800522c <UART_SetConfig+0x2c0>
 8005200:	2b04      	cmp	r3, #4
 8005202:	d00a      	beq.n	800521a <UART_SetConfig+0x2ae>
 8005204:	2b08      	cmp	r3, #8
 8005206:	d00d      	beq.n	8005224 <UART_SetConfig+0x2b8>
 8005208:	e010      	b.n	800522c <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520a:	f7fd fde3 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 800520e:	0003      	movs	r3, r0
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005212:	e015      	b.n	8005240 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <UART_SetConfig+0x344>)
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005218:	e012      	b.n	8005240 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fd fd4f 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 800521e:	0003      	movs	r3, r0
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005222:	e00d      	b.n	8005240 <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800522a:	e009      	b.n	8005240 <UART_SetConfig+0x2d4>
      default:
        pclk = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005230:	231a      	movs	r3, #26
 8005232:	2220      	movs	r2, #32
 8005234:	4694      	mov	ip, r2
 8005236:	44bc      	add	ip, r7
 8005238:	4463      	add	r3, ip
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
        break;
 800523e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d100      	bne.n	8005248 <UART_SetConfig+0x2dc>
 8005246:	e14f      	b.n	80054e8 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <UART_SetConfig+0x348>)
 800524e:	0052      	lsls	r2, r2, #1
 8005250:	5ad3      	ldrh	r3, [r2, r3]
 8005252:	0019      	movs	r1, r3
 8005254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005256:	f7fa ff57 	bl	8000108 <__udivsi3>
 800525a:	0003      	movs	r3, r0
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	0013      	movs	r3, r2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	189b      	adds	r3, r3, r2
 8005268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526a:	429a      	cmp	r2, r3
 800526c:	d305      	bcc.n	800527a <UART_SetConfig+0x30e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005276:	429a      	cmp	r2, r3
 8005278:	d91e      	bls.n	80052b8 <UART_SetConfig+0x34c>
      {
        ret = HAL_ERROR;
 800527a:	231a      	movs	r3, #26
 800527c:	2220      	movs	r2, #32
 800527e:	4694      	mov	ip, r2
 8005280:	44bc      	add	ip, r7
 8005282:	4463      	add	r3, ip
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e12e      	b.n	80054e8 <UART_SetConfig+0x57c>
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	cfff69f3 	.word	0xcfff69f3
 8005290:	ffffcfff 	.word	0xffffcfff
 8005294:	40008000 	.word	0x40008000
 8005298:	11fff4ff 	.word	0x11fff4ff
 800529c:	40013800 	.word	0x40013800
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40004400 	.word	0x40004400
 80052a8:	40004800 	.word	0x40004800
 80052ac:	40004c00 	.word	0x40004c00
 80052b0:	00f42400 	.word	0x00f42400
 80052b4:	0800656c 	.word	0x0800656c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052c4:	4b94      	ldr	r3, [pc, #592]	; (8005518 <UART_SetConfig+0x5ac>)
 80052c6:	0052      	lsls	r2, r2, #1
 80052c8:	5ad3      	ldrh	r3, [r2, r3]
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	69b8      	ldr	r0, [r7, #24]
 80052d6:	69f9      	ldr	r1, [r7, #28]
 80052d8:	f7fb f88c 	bl	80003f4 <__aeabi_uldivmod>
 80052dc:	0003      	movs	r3, r0
 80052de:	000c      	movs	r4, r1
 80052e0:	0e1a      	lsrs	r2, r3, #24
 80052e2:	0226      	lsls	r6, r4, #8
 80052e4:	4316      	orrs	r6, r2
 80052e6:	021d      	lsls	r5, r3, #8
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68b8      	ldr	r0, [r7, #8]
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	1940      	adds	r0, r0, r5
 80052fa:	4171      	adcs	r1, r6
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f7fb f873 	bl	80003f4 <__aeabi_uldivmod>
 800530e:	0003      	movs	r3, r0
 8005310:	000c      	movs	r4, r1
 8005312:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	4a81      	ldr	r2, [pc, #516]	; (800551c <UART_SetConfig+0x5b0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d908      	bls.n	800532e <UART_SetConfig+0x3c2>
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	4a80      	ldr	r2, [pc, #512]	; (8005520 <UART_SetConfig+0x5b4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d804      	bhi.n	800532e <UART_SetConfig+0x3c2>
        {
          huart->Instance->BRR = usartdiv;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e0dc      	b.n	80054e8 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 800532e:	231a      	movs	r3, #26
 8005330:	2220      	movs	r2, #32
 8005332:	4694      	mov	ip, r2
 8005334:	44bc      	add	ip, r7
 8005336:	4463      	add	r3, ip
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e0d4      	b.n	80054e8 <UART_SetConfig+0x57c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	2380      	movs	r3, #128	; 0x80
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	429a      	cmp	r2, r3
 8005348:	d000      	beq.n	800534c <UART_SetConfig+0x3e0>
 800534a:	e073      	b.n	8005434 <UART_SetConfig+0x4c8>
  {
    switch (clocksource)
 800534c:	231b      	movs	r3, #27
 800534e:	2220      	movs	r2, #32
 8005350:	4694      	mov	ip, r2
 8005352:	44bc      	add	ip, r7
 8005354:	4463      	add	r3, ip
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d00d      	beq.n	8005378 <UART_SetConfig+0x40c>
 800535c:	dc02      	bgt.n	8005364 <UART_SetConfig+0x3f8>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <UART_SetConfig+0x402>
 8005362:	e015      	b.n	8005390 <UART_SetConfig+0x424>
 8005364:	2b04      	cmp	r3, #4
 8005366:	d00a      	beq.n	800537e <UART_SetConfig+0x412>
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <UART_SetConfig+0x41c>
 800536c:	e010      	b.n	8005390 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800536e:	f7fd fd31 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8005372:	0003      	movs	r3, r0
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005376:	e015      	b.n	80053a4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005378:	4b6a      	ldr	r3, [pc, #424]	; (8005524 <UART_SetConfig+0x5b8>)
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800537c:	e012      	b.n	80053a4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537e:	f7fd fc9d 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8005382:	0003      	movs	r3, r0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005386:	e00d      	b.n	80053a4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800538e:	e009      	b.n	80053a4 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005394:	231a      	movs	r3, #26
 8005396:	2220      	movs	r2, #32
 8005398:	4694      	mov	ip, r2
 800539a:	44bc      	add	ip, r7
 800539c:	4463      	add	r3, ip
 800539e:	2201      	movs	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]
        break;
 80053a2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d100      	bne.n	80053ac <UART_SetConfig+0x440>
 80053aa:	e09d      	b.n	80054e8 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b0:	4b59      	ldr	r3, [pc, #356]	; (8005518 <UART_SetConfig+0x5ac>)
 80053b2:	0052      	lsls	r2, r2, #1
 80053b4:	5ad3      	ldrh	r3, [r2, r3]
 80053b6:	0019      	movs	r1, r3
 80053b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053ba:	f7fa fea5 	bl	8000108 <__udivsi3>
 80053be:	0003      	movs	r3, r0
 80053c0:	005a      	lsls	r2, r3, #1
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	18d2      	adds	r2, r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	0019      	movs	r1, r3
 80053d0:	0010      	movs	r0, r2
 80053d2:	f7fa fe99 	bl	8000108 <__udivsi3>
 80053d6:	0003      	movs	r3, r0
 80053d8:	b29b      	uxth	r3, r3
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2b0f      	cmp	r3, #15
 80053e0:	d920      	bls.n	8005424 <UART_SetConfig+0x4b8>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	4a50      	ldr	r2, [pc, #320]	; (8005528 <UART_SetConfig+0x5bc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d81c      	bhi.n	8005424 <UART_SetConfig+0x4b8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	200e      	movs	r0, #14
 80053f0:	2420      	movs	r4, #32
 80053f2:	193b      	adds	r3, r7, r4
 80053f4:	181b      	adds	r3, r3, r0
 80053f6:	210f      	movs	r1, #15
 80053f8:	438a      	bics	r2, r1
 80053fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	2207      	movs	r2, #7
 8005404:	4013      	ands	r3, r2
 8005406:	b299      	uxth	r1, r3
 8005408:	193b      	adds	r3, r7, r4
 800540a:	181b      	adds	r3, r3, r0
 800540c:	193a      	adds	r2, r7, r4
 800540e:	1812      	adds	r2, r2, r0
 8005410:	8812      	ldrh	r2, [r2, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	193a      	adds	r2, r7, r4
 800541c:	1812      	adds	r2, r2, r0
 800541e:	8812      	ldrh	r2, [r2, #0]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e061      	b.n	80054e8 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8005424:	231a      	movs	r3, #26
 8005426:	2220      	movs	r2, #32
 8005428:	4694      	mov	ip, r2
 800542a:	44bc      	add	ip, r7
 800542c:	4463      	add	r3, ip
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e059      	b.n	80054e8 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005434:	231b      	movs	r3, #27
 8005436:	2220      	movs	r2, #32
 8005438:	4694      	mov	ip, r2
 800543a:	44bc      	add	ip, r7
 800543c:	4463      	add	r3, ip
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d00d      	beq.n	8005460 <UART_SetConfig+0x4f4>
 8005444:	dc02      	bgt.n	800544c <UART_SetConfig+0x4e0>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <UART_SetConfig+0x4ea>
 800544a:	e015      	b.n	8005478 <UART_SetConfig+0x50c>
 800544c:	2b04      	cmp	r3, #4
 800544e:	d00a      	beq.n	8005466 <UART_SetConfig+0x4fa>
 8005450:	2b08      	cmp	r3, #8
 8005452:	d00d      	beq.n	8005470 <UART_SetConfig+0x504>
 8005454:	e010      	b.n	8005478 <UART_SetConfig+0x50c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005456:	f7fd fcbd 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 800545a:	0003      	movs	r3, r0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545e:	e015      	b.n	800548c <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005460:	4b30      	ldr	r3, [pc, #192]	; (8005524 <UART_SetConfig+0x5b8>)
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005464:	e012      	b.n	800548c <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005466:	f7fd fc29 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 800546a:	0003      	movs	r3, r0
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800546e:	e00d      	b.n	800548c <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005476:	e009      	b.n	800548c <UART_SetConfig+0x520>
      default:
        pclk = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800547c:	231a      	movs	r3, #26
 800547e:	2220      	movs	r2, #32
 8005480:	4694      	mov	ip, r2
 8005482:	44bc      	add	ip, r7
 8005484:	4463      	add	r3, ip
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
        break;
 800548a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02a      	beq.n	80054e8 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <UART_SetConfig+0x5ac>)
 8005498:	0052      	lsls	r2, r2, #1
 800549a:	5ad3      	ldrh	r3, [r2, r3]
 800549c:	0019      	movs	r1, r3
 800549e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054a0:	f7fa fe32 	bl	8000108 <__udivsi3>
 80054a4:	0003      	movs	r3, r0
 80054a6:	001a      	movs	r2, r3
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	18d2      	adds	r2, r2, r3
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	0019      	movs	r1, r3
 80054b6:	0010      	movs	r0, r2
 80054b8:	f7fa fe26 	bl	8000108 <__udivsi3>
 80054bc:	0003      	movs	r3, r0
 80054be:	b29b      	uxth	r3, r3
 80054c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d908      	bls.n	80054da <UART_SetConfig+0x56e>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <UART_SetConfig+0x5bc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d804      	bhi.n	80054da <UART_SetConfig+0x56e>
      {
        huart->Instance->BRR = usartdiv;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	60da      	str	r2, [r3, #12]
 80054d8:	e006      	b.n	80054e8 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 80054da:	231a      	movs	r3, #26
 80054dc:	2220      	movs	r2, #32
 80054de:	4694      	mov	ip, r2
 80054e0:	44bc      	add	ip, r7
 80054e2:	4463      	add	r3, ip
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	226a      	movs	r2, #106	; 0x6a
 80054ec:	2101      	movs	r1, #1
 80054ee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	2268      	movs	r2, #104	; 0x68
 80054f4:	2101      	movs	r1, #1
 80054f6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	2200      	movs	r2, #0
 80054fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	2200      	movs	r2, #0
 8005502:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005504:	231a      	movs	r3, #26
 8005506:	2220      	movs	r2, #32
 8005508:	4694      	mov	ip, r2
 800550a:	44bc      	add	ip, r7
 800550c:	4463      	add	r3, ip
 800550e:	781b      	ldrb	r3, [r3, #0]
}
 8005510:	0018      	movs	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	b011      	add	sp, #68	; 0x44
 8005516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005518:	0800656c 	.word	0x0800656c
 800551c:	000002ff 	.word	0x000002ff
 8005520:	000fffff 	.word	0x000fffff
 8005524:	00f42400 	.word	0x00f42400
 8005528:	0000ffff 	.word	0x0000ffff

0800552c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	2201      	movs	r2, #1
 800553a:	4013      	ands	r3, r2
 800553c:	d00b      	beq.n	8005556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a4a      	ldr	r2, [pc, #296]	; (8005670 <UART_AdvFeatureConfig+0x144>)
 8005546:	4013      	ands	r3, r2
 8005548:	0019      	movs	r1, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	2202      	movs	r2, #2
 800555c:	4013      	ands	r3, r2
 800555e:	d00b      	beq.n	8005578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4a43      	ldr	r2, [pc, #268]	; (8005674 <UART_AdvFeatureConfig+0x148>)
 8005568:	4013      	ands	r3, r2
 800556a:	0019      	movs	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	2204      	movs	r2, #4
 800557e:	4013      	ands	r3, r2
 8005580:	d00b      	beq.n	800559a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4a3b      	ldr	r2, [pc, #236]	; (8005678 <UART_AdvFeatureConfig+0x14c>)
 800558a:	4013      	ands	r3, r2
 800558c:	0019      	movs	r1, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	2208      	movs	r2, #8
 80055a0:	4013      	ands	r3, r2
 80055a2:	d00b      	beq.n	80055bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4a34      	ldr	r2, [pc, #208]	; (800567c <UART_AdvFeatureConfig+0x150>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	0019      	movs	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	2210      	movs	r2, #16
 80055c2:	4013      	ands	r3, r2
 80055c4:	d00b      	beq.n	80055de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <UART_AdvFeatureConfig+0x154>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	0019      	movs	r1, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	2220      	movs	r2, #32
 80055e4:	4013      	ands	r3, r2
 80055e6:	d00b      	beq.n	8005600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	4a25      	ldr	r2, [pc, #148]	; (8005684 <UART_AdvFeatureConfig+0x158>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	0019      	movs	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	2240      	movs	r2, #64	; 0x40
 8005606:	4013      	ands	r3, r2
 8005608:	d01d      	beq.n	8005646 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <UART_AdvFeatureConfig+0x15c>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	035b      	lsls	r3, r3, #13
 800562a:	429a      	cmp	r2, r3
 800562c:	d10b      	bne.n	8005646 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <UART_AdvFeatureConfig+0x160>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	4013      	ands	r3, r2
 800564e:	d00b      	beq.n	8005668 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4a0e      	ldr	r2, [pc, #56]	; (8005690 <UART_AdvFeatureConfig+0x164>)
 8005658:	4013      	ands	r3, r2
 800565a:	0019      	movs	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b002      	add	sp, #8
 800566e:	bd80      	pop	{r7, pc}
 8005670:	fffdffff 	.word	0xfffdffff
 8005674:	fffeffff 	.word	0xfffeffff
 8005678:	fffbffff 	.word	0xfffbffff
 800567c:	ffff7fff 	.word	0xffff7fff
 8005680:	ffffefff 	.word	0xffffefff
 8005684:	ffffdfff 	.word	0xffffdfff
 8005688:	ffefffff 	.word	0xffefffff
 800568c:	ff9fffff 	.word	0xff9fffff
 8005690:	fff7ffff 	.word	0xfff7ffff

08005694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af02      	add	r7, sp, #8
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	228c      	movs	r2, #140	; 0x8c
 80056a0:	2100      	movs	r1, #0
 80056a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a4:	f7fc f8f6 	bl	8001894 <HAL_GetTick>
 80056a8:	0003      	movs	r3, r0
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2208      	movs	r2, #8
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d10d      	bne.n	80056d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	0399      	lsls	r1, r3, #14
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4b19      	ldr	r3, [pc, #100]	; (8005728 <UART_CheckIdleState+0x94>)
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	0013      	movs	r3, r2
 80056c8:	2200      	movs	r2, #0
 80056ca:	f000 f82f 	bl	800572c <UART_WaitOnFlagUntilTimeout>
 80056ce:	1e03      	subs	r3, r0, #0
 80056d0:	d001      	beq.n	80056d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e024      	b.n	8005720 <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2204      	movs	r2, #4
 80056de:	4013      	ands	r3, r2
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d10d      	bne.n	8005700 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	03d9      	lsls	r1, r3, #15
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <UART_CheckIdleState+0x94>)
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	0013      	movs	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	f000 f81a 	bl	800572c <UART_WaitOnFlagUntilTimeout>
 80056f8:	1e03      	subs	r3, r0, #0
 80056fa:	d001      	beq.n	8005700 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e00f      	b.n	8005720 <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2284      	movs	r2, #132	; 0x84
 8005704:	2120      	movs	r1, #32
 8005706:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2288      	movs	r2, #136	; 0x88
 800570c:	2120      	movs	r1, #32
 800570e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2280      	movs	r2, #128	; 0x80
 800571a:	2100      	movs	r1, #0
 800571c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}
 8005728:	01ffffff 	.word	0x01ffffff

0800572c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	1dfb      	adds	r3, r7, #7
 800573a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573c:	e062      	b.n	8005804 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	3301      	adds	r3, #1
 8005742:	d05f      	beq.n	8005804 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7fc f8a6 	bl	8001894 <HAL_GetTick>
 8005748:	0002      	movs	r2, r0
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d11d      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4931      	ldr	r1, [pc, #196]	; (800582c <UART_WaitOnFlagUntilTimeout+0x100>)
 8005766:	400a      	ands	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2101      	movs	r1, #1
 8005776:	438a      	bics	r2, r1
 8005778:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2284      	movs	r2, #132	; 0x84
 800577e:	2120      	movs	r1, #32
 8005780:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2288      	movs	r2, #136	; 0x88
 8005786:	2120      	movs	r1, #32
 8005788:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2280      	movs	r2, #128	; 0x80
 800578e:	2100      	movs	r1, #0
 8005790:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e046      	b.n	8005824 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2204      	movs	r2, #4
 800579e:	4013      	ands	r3, r2
 80057a0:	d030      	beq.n	8005804 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	401a      	ands	r2, r3
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d126      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	0112      	lsls	r2, r2, #4
 80057be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4918      	ldr	r1, [pc, #96]	; (800582c <UART_WaitOnFlagUntilTimeout+0x100>)
 80057cc:	400a      	ands	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2101      	movs	r1, #1
 80057dc:	438a      	bics	r2, r1
 80057de:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2284      	movs	r2, #132	; 0x84
 80057e4:	2120      	movs	r1, #32
 80057e6:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2288      	movs	r2, #136	; 0x88
 80057ec:	2120      	movs	r1, #32
 80057ee:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	228c      	movs	r2, #140	; 0x8c
 80057f4:	2120      	movs	r1, #32
 80057f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2280      	movs	r2, #128	; 0x80
 80057fc:	2100      	movs	r1, #0
 80057fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e00f      	b.n	8005824 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	4013      	ands	r3, r2
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	425a      	negs	r2, r3
 8005814:	4153      	adcs	r3, r2
 8005816:	b2db      	uxtb	r3, r3
 8005818:	001a      	movs	r2, r3
 800581a:	1dfb      	adds	r3, r7, #7
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d08d      	beq.n	800573e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	0018      	movs	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	b004      	add	sp, #16
 800582a:	bd80      	pop	{r7, pc}
 800582c:	fffffe5f 	.word	0xfffffe5f

08005830 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	1dbb      	adds	r3, r7, #6
 800583c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1dba      	adds	r2, r7, #6
 8005848:	215c      	movs	r1, #92	; 0x5c
 800584a:	8812      	ldrh	r2, [r2, #0]
 800584c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1dba      	adds	r2, r7, #6
 8005852:	215e      	movs	r1, #94	; 0x5e
 8005854:	8812      	ldrh	r2, [r2, #0]
 8005856:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	015b      	lsls	r3, r3, #5
 8005866:	429a      	cmp	r2, r3
 8005868:	d10d      	bne.n	8005886 <UART_Start_Receive_IT+0x56>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d104      	bne.n	800587c <UART_Start_Receive_IT+0x4c>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2260      	movs	r2, #96	; 0x60
 8005876:	494d      	ldr	r1, [pc, #308]	; (80059ac <UART_Start_Receive_IT+0x17c>)
 8005878:	5299      	strh	r1, [r3, r2]
 800587a:	e02e      	b.n	80058da <UART_Start_Receive_IT+0xaa>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2260      	movs	r2, #96	; 0x60
 8005880:	21ff      	movs	r1, #255	; 0xff
 8005882:	5299      	strh	r1, [r3, r2]
 8005884:	e029      	b.n	80058da <UART_Start_Receive_IT+0xaa>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <UART_Start_Receive_IT+0x7a>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <UART_Start_Receive_IT+0x70>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2260      	movs	r2, #96	; 0x60
 800589a:	21ff      	movs	r1, #255	; 0xff
 800589c:	5299      	strh	r1, [r3, r2]
 800589e:	e01c      	b.n	80058da <UART_Start_Receive_IT+0xaa>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2260      	movs	r2, #96	; 0x60
 80058a4:	217f      	movs	r1, #127	; 0x7f
 80058a6:	5299      	strh	r1, [r3, r2]
 80058a8:	e017      	b.n	80058da <UART_Start_Receive_IT+0xaa>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	055b      	lsls	r3, r3, #21
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10d      	bne.n	80058d2 <UART_Start_Receive_IT+0xa2>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <UART_Start_Receive_IT+0x98>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2260      	movs	r2, #96	; 0x60
 80058c2:	217f      	movs	r1, #127	; 0x7f
 80058c4:	5299      	strh	r1, [r3, r2]
 80058c6:	e008      	b.n	80058da <UART_Start_Receive_IT+0xaa>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2260      	movs	r2, #96	; 0x60
 80058cc:	213f      	movs	r1, #63	; 0x3f
 80058ce:	5299      	strh	r1, [r3, r2]
 80058d0:	e003      	b.n	80058da <UART_Start_Receive_IT+0xaa>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2260      	movs	r2, #96	; 0x60
 80058d6:	2100      	movs	r1, #0
 80058d8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	228c      	movs	r2, #140	; 0x8c
 80058de:	2100      	movs	r1, #0
 80058e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2288      	movs	r2, #136	; 0x88
 80058e6:	2122      	movs	r1, #34	; 0x22
 80058e8:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2101      	movs	r1, #1
 80058f6:	430a      	orrs	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	429a      	cmp	r2, r3
 8005904:	d12e      	bne.n	8005964 <UART_Start_Receive_IT+0x134>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2268      	movs	r2, #104	; 0x68
 800590a:	5a9b      	ldrh	r3, [r3, r2]
 800590c:	1dba      	adds	r2, r7, #6
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d327      	bcc.n	8005964 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	015b      	lsls	r3, r3, #5
 800591c:	429a      	cmp	r2, r3
 800591e:	d107      	bne.n	8005930 <UART_Start_Receive_IT+0x100>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <UART_Start_Receive_IT+0x180>)
 800592c:	671a      	str	r2, [r3, #112]	; 0x70
 800592e:	e002      	b.n	8005936 <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a20      	ldr	r2, [pc, #128]	; (80059b4 <UART_Start_Receive_IT+0x184>)
 8005934:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	2100      	movs	r1, #0
 800593c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2180      	movs	r1, #128	; 0x80
 800594a:	0049      	lsls	r1, r1, #1
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	0549      	lsls	r1, r1, #21
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
 8005962:	e01d      	b.n	80059a0 <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	015b      	lsls	r3, r3, #5
 800596c:	429a      	cmp	r2, r3
 800596e:	d107      	bne.n	8005980 <UART_Start_Receive_IT+0x150>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <UART_Start_Receive_IT+0x188>)
 800597c:	671a      	str	r2, [r3, #112]	; 0x70
 800597e:	e002      	b.n	8005986 <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a0e      	ldr	r2, [pc, #56]	; (80059bc <UART_Start_Receive_IT+0x18c>)
 8005984:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2280      	movs	r2, #128	; 0x80
 800598a:	2100      	movs	r1, #0
 800598c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2190      	movs	r1, #144	; 0x90
 800599a:	0049      	lsls	r1, r1, #1
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b004      	add	sp, #16
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	000001ff 	.word	0x000001ff
 80059b0:	08005f99 	.word	0x08005f99
 80059b4:	08005d75 	.word	0x08005d75
 80059b8:	08005c85 	.word	0x08005c85
 80059bc:	08005b95 	.word	0x08005b95

080059c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4912      	ldr	r1, [pc, #72]	; (8005a1c <UART_EndRxTransfer+0x5c>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	490f      	ldr	r1, [pc, #60]	; (8005a20 <UART_EndRxTransfer+0x60>)
 80059e4:	400a      	ands	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d107      	bne.n	8005a00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2110      	movs	r1, #16
 80059fc:	438a      	bics	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2288      	movs	r2, #136	; 0x88
 8005a04:	2120      	movs	r1, #32
 8005a06:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	fffffedf 	.word	0xfffffedf
 8005a20:	effffffe 	.word	0xeffffffe

08005a24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	225e      	movs	r2, #94	; 0x5e
 8005a36:	2100      	movs	r1, #0
 8005a38:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2256      	movs	r2, #86	; 0x56
 8005a3e:	2100      	movs	r1, #0
 8005a40:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff fa75 	bl	8004f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b004      	add	sp, #16
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a64:	2200      	movs	r2, #0
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d12d      	bne.n	8005ad6 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2256      	movs	r2, #86	; 0x56
 8005a7e:	2100      	movs	r1, #0
 8005a80:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	225e      	movs	r2, #94	; 0x5e
 8005a86:	2100      	movs	r1, #0
 8005a88:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	228c      	movs	r2, #140	; 0x8c
 8005a8e:	2100      	movs	r1, #0
 8005a90:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	220f      	movs	r2, #15
 8005a98:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	059b      	lsls	r3, r3, #22
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d107      	bne.n	8005ab6 <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2110      	movs	r1, #16
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2284      	movs	r2, #132	; 0x84
 8005aba:	2120      	movs	r1, #32
 8005abc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2288      	movs	r2, #136	; 0x88
 8005ac2:	2120      	movs	r1, #32
 8005ac4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7ff fa38 	bl	8004f44 <HAL_UART_AbortCpltCallback>
 8005ad4:	e000      	b.n	8005ad8 <UART_DMATxAbortCallback+0x86>
      return;
 8005ad6:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b004      	add	sp, #16
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af0:	2200      	movs	r2, #0
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d127      	bne.n	8005b56 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2256      	movs	r2, #86	; 0x56
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	225e      	movs	r2, #94	; 0x5e
 8005b12:	2100      	movs	r1, #0
 8005b14:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	228c      	movs	r2, #140	; 0x8c
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	220f      	movs	r2, #15
 8005b24:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2108      	movs	r1, #8
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2284      	movs	r2, #132	; 0x84
 8005b3a:	2120      	movs	r1, #32
 8005b3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2288      	movs	r2, #136	; 0x88
 8005b42:	2120      	movs	r1, #32
 8005b44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f7ff f9f8 	bl	8004f44 <HAL_UART_AbortCpltCallback>
 8005b54:	e000      	b.n	8005b58 <UART_DMARxAbortCallback+0x7a>
      return;
 8005b56:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b004      	add	sp, #16
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2140      	movs	r1, #64	; 0x40
 8005b72:	438a      	bics	r2, r1
 8005b74:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2284      	movs	r2, #132	; 0x84
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff f9cc 	bl	8004f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b9c:	230e      	movs	r3, #14
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	2160      	movs	r1, #96	; 0x60
 8005ba4:	5a52      	ldrh	r2, [r2, r1]
 8005ba6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2288      	movs	r2, #136	; 0x88
 8005bac:	589b      	ldr	r3, [r3, r2]
 8005bae:	2b22      	cmp	r3, #34	; 0x22
 8005bb0:	d159      	bne.n	8005c66 <UART_RxISR_8BIT+0xd2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bb8:	210c      	movs	r1, #12
 8005bba:	187b      	adds	r3, r7, r1
 8005bbc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	230e      	movs	r3, #14
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b2d9      	uxtb	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	400a      	ands	r2, r1
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	225e      	movs	r2, #94	; 0x5e
 8005be4:	5a9b      	ldrh	r3, [r3, r2]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b299      	uxth	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	225e      	movs	r2, #94	; 0x5e
 8005bf0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	225e      	movs	r2, #94	; 0x5e
 8005bf6:	5a9b      	ldrh	r3, [r3, r2]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d13b      	bne.n	8005c76 <UART_RxISR_8BIT+0xe2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	491d      	ldr	r1, [pc, #116]	; (8005c80 <UART_RxISR_8BIT+0xec>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2101      	movs	r1, #1
 8005c1a:	438a      	bics	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2288      	movs	r2, #136	; 0x88
 8005c22:	2120      	movs	r1, #32
 8005c24:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d110      	bne.n	8005c56 <UART_RxISR_8BIT+0xc2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2110      	movs	r1, #16
 8005c40:	438a      	bics	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	225c      	movs	r2, #92	; 0x5c
 8005c48:	5a9a      	ldrh	r2, [r3, r2]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	0011      	movs	r1, r2
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7ff f980 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
 8005c54:	e003      	b.n	8005c5e <UART_RxISR_8BIT+0xca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7fb fc5d 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c64:	e007      	b.n	8005c76 <UART_RxISR_8BIT+0xe2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2108      	movs	r1, #8
 8005c72:	430a      	orrs	r2, r1
 8005c74:	619a      	str	r2, [r3, #24]
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b004      	add	sp, #16
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	fffffedf 	.word	0xfffffedf

08005c84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c8c:	230e      	movs	r3, #14
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	2160      	movs	r1, #96	; 0x60
 8005c94:	5a52      	ldrh	r2, [r2, r1]
 8005c96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2288      	movs	r2, #136	; 0x88
 8005c9c:	589b      	ldr	r3, [r3, r2]
 8005c9e:	2b22      	cmp	r3, #34	; 0x22
 8005ca0:	d159      	bne.n	8005d56 <UART_RxISR_16BIT+0xd2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca8:	210c      	movs	r1, #12
 8005caa:	187b      	adds	r3, r7, r1
 8005cac:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	220e      	movs	r2, #14
 8005cb8:	18ba      	adds	r2, r7, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	8812      	ldrh	r2, [r2, #0]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	225e      	movs	r2, #94	; 0x5e
 8005cd4:	5a9b      	ldrh	r3, [r3, r2]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b299      	uxth	r1, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	225e      	movs	r2, #94	; 0x5e
 8005ce0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	225e      	movs	r2, #94	; 0x5e
 8005ce6:	5a9b      	ldrh	r3, [r3, r2]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d13b      	bne.n	8005d66 <UART_RxISR_16BIT+0xe2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	491d      	ldr	r1, [pc, #116]	; (8005d70 <UART_RxISR_16BIT+0xec>)
 8005cfa:	400a      	ands	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	438a      	bics	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2288      	movs	r2, #136	; 0x88
 8005d12:	2120      	movs	r1, #32
 8005d14:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d110      	bne.n	8005d46 <UART_RxISR_16BIT+0xc2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2110      	movs	r1, #16
 8005d30:	438a      	bics	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	225c      	movs	r2, #92	; 0x5c
 8005d38:	5a9a      	ldrh	r2, [r3, r2]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7ff f908 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
 8005d44:	e003      	b.n	8005d4e <UART_RxISR_16BIT+0xca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7fb fbe5 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d54:	e007      	b.n	8005d66 <UART_RxISR_16BIT+0xe2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2108      	movs	r1, #8
 8005d62:	430a      	orrs	r2, r1
 8005d64:	619a      	str	r2, [r3, #24]
}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b004      	add	sp, #16
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	fffffedf 	.word	0xfffffedf

08005d74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d7c:	231a      	movs	r3, #26
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	2160      	movs	r1, #96	; 0x60
 8005d84:	5a52      	ldrh	r2, [r2, r1]
 8005d86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2288      	movs	r2, #136	; 0x88
 8005da4:	589b      	ldr	r3, [r3, r2]
 8005da6:	2b22      	cmp	r3, #34	; 0x22
 8005da8:	d000      	beq.n	8005dac <UART_RxISR_8BIT_FIFOEN+0x38>
 8005daa:	e0e1      	b.n	8005f70 <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005dac:	230e      	movs	r3, #14
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	2168      	movs	r1, #104	; 0x68
 8005db4:	5a52      	ldrh	r2, [r2, r1]
 8005db6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005db8:	e0aa      	b.n	8005f10 <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc0:	210c      	movs	r1, #12
 8005dc2:	187b      	adds	r3, r7, r1
 8005dc4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dc6:	187b      	adds	r3, r7, r1
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	231a      	movs	r3, #26
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b2d9      	uxtb	r1, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd8:	400a      	ands	r2, r1
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	225e      	movs	r2, #94	; 0x5e
 8005dec:	5a9b      	ldrh	r3, [r3, r2]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b299      	uxth	r1, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	225e      	movs	r2, #94	; 0x5e
 8005df8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2207      	movs	r2, #7
 8005e06:	4013      	ands	r3, r2
 8005e08:	d049      	beq.n	8005e9e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d010      	beq.n	8005e34 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2201      	movs	r2, #1
 8005e22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	228c      	movs	r2, #140	; 0x8c
 8005e28:	589b      	ldr	r3, [r3, r2]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	218c      	movs	r1, #140	; 0x8c
 8005e32:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d00f      	beq.n	8005e5c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	4013      	ands	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	228c      	movs	r2, #140	; 0x8c
 8005e50:	589b      	ldr	r3, [r3, r2]
 8005e52:	2204      	movs	r2, #4
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	218c      	movs	r1, #140	; 0x8c
 8005e5a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	4013      	ands	r3, r2
 8005e62:	d00f      	beq.n	8005e84 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2201      	movs	r2, #1
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d00b      	beq.n	8005e84 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2204      	movs	r2, #4
 8005e72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	228c      	movs	r2, #140	; 0x8c
 8005e78:	589b      	ldr	r3, [r3, r2]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	218c      	movs	r1, #140	; 0x8c
 8005e82:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	228c      	movs	r2, #140	; 0x8c
 8005e88:	589b      	ldr	r3, [r3, r2]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7ff f84f 	bl	8004f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	228c      	movs	r2, #140	; 0x8c
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	225e      	movs	r2, #94	; 0x5e
 8005ea2:	5a9b      	ldrh	r3, [r3, r2]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d132      	bne.n	8005f10 <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4934      	ldr	r1, [pc, #208]	; (8005f88 <UART_RxISR_8BIT_FIFOEN+0x214>)
 8005eb6:	400a      	ands	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4931      	ldr	r1, [pc, #196]	; (8005f8c <UART_RxISR_8BIT_FIFOEN+0x218>)
 8005ec6:	400a      	ands	r2, r1
 8005ec8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2288      	movs	r2, #136	; 0x88
 8005ece:	2120      	movs	r1, #32
 8005ed0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d110      	bne.n	8005f02 <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2110      	movs	r1, #16
 8005eec:	438a      	bics	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	225c      	movs	r2, #92	; 0x5c
 8005ef4:	5a9a      	ldrh	r2, [r3, r2]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0011      	movs	r1, r2
 8005efa:	0018      	movs	r0, r3
 8005efc:	f7ff f82a 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
 8005f00:	e003      	b.n	8005f0a <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7fb fb07 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f10:	230e      	movs	r3, #14
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d000      	beq.n	8005f24 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8005f22:	e74a      	b.n	8005dba <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f24:	200a      	movs	r0, #10
 8005f26:	183b      	adds	r3, r7, r0
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	215e      	movs	r1, #94	; 0x5e
 8005f2c:	5a52      	ldrh	r2, [r2, r1]
 8005f2e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f30:	183b      	adds	r3, r7, r0
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d023      	beq.n	8005f80 <UART_RxISR_8BIT_FIFOEN+0x20c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2268      	movs	r2, #104	; 0x68
 8005f3c:	5a9b      	ldrh	r3, [r3, r2]
 8005f3e:	220a      	movs	r2, #10
 8005f40:	18ba      	adds	r2, r7, r2
 8005f42:	8812      	ldrh	r2, [r2, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d21b      	bcs.n	8005f80 <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	490f      	ldr	r1, [pc, #60]	; (8005f90 <UART_RxISR_8BIT_FIFOEN+0x21c>)
 8005f54:	400a      	ands	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <UART_RxISR_8BIT_FIFOEN+0x220>)
 8005f5c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2120      	movs	r1, #32
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f6e:	e007      	b.n	8005f80 <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2108      	movs	r1, #8
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	619a      	str	r2, [r3, #24]
}
 8005f80:	46c0      	nop			; (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b008      	add	sp, #32
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	fffffeff 	.word	0xfffffeff
 8005f8c:	effffffe 	.word	0xeffffffe
 8005f90:	efffffff 	.word	0xefffffff
 8005f94:	08005b95 	.word	0x08005b95

08005f98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005fa0:	2322      	movs	r3, #34	; 0x22
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	2160      	movs	r1, #96	; 0x60
 8005fa8:	5a52      	ldrh	r2, [r2, r1]
 8005faa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2288      	movs	r2, #136	; 0x88
 8005fc8:	589b      	ldr	r3, [r3, r2]
 8005fca:	2b22      	cmp	r3, #34	; 0x22
 8005fcc:	d000      	beq.n	8005fd0 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005fce:	e0e1      	b.n	8006194 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005fd0:	2316      	movs	r3, #22
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	2168      	movs	r1, #104	; 0x68
 8005fd8:	5a52      	ldrh	r2, [r2, r1]
 8005fda:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fdc:	e0aa      	b.n	8006134 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fe4:	2114      	movs	r1, #20
 8005fe6:	187b      	adds	r3, r7, r1
 8005fe8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fee:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005ff0:	187b      	adds	r3, r7, r1
 8005ff2:	2222      	movs	r2, #34	; 0x22
 8005ff4:	18ba      	adds	r2, r7, r2
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	8812      	ldrh	r2, [r2, #0]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	225e      	movs	r2, #94	; 0x5e
 8006010:	5a9b      	ldrh	r3, [r3, r2]
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b299      	uxth	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	225e      	movs	r2, #94	; 0x5e
 800601c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	2207      	movs	r2, #7
 800602a:	4013      	ands	r3, r2
 800602c:	d049      	beq.n	80060c2 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	2201      	movs	r2, #1
 8006032:	4013      	ands	r3, r2
 8006034:	d010      	beq.n	8006058 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4013      	ands	r3, r2
 800603e:	d00b      	beq.n	8006058 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2201      	movs	r2, #1
 8006046:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	228c      	movs	r2, #140	; 0x8c
 800604c:	589b      	ldr	r3, [r3, r2]
 800604e:	2201      	movs	r2, #1
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	218c      	movs	r1, #140	; 0x8c
 8006056:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	2202      	movs	r2, #2
 800605c:	4013      	ands	r3, r2
 800605e:	d00f      	beq.n	8006080 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2201      	movs	r2, #1
 8006064:	4013      	ands	r3, r2
 8006066:	d00b      	beq.n	8006080 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2202      	movs	r2, #2
 800606e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	228c      	movs	r2, #140	; 0x8c
 8006074:	589b      	ldr	r3, [r3, r2]
 8006076:	2204      	movs	r2, #4
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	218c      	movs	r1, #140	; 0x8c
 800607e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	2204      	movs	r2, #4
 8006084:	4013      	ands	r3, r2
 8006086:	d00f      	beq.n	80060a8 <UART_RxISR_16BIT_FIFOEN+0x110>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2201      	movs	r2, #1
 800608c:	4013      	ands	r3, r2
 800608e:	d00b      	beq.n	80060a8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2204      	movs	r2, #4
 8006096:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	228c      	movs	r2, #140	; 0x8c
 800609c:	589b      	ldr	r3, [r3, r2]
 800609e:	2202      	movs	r2, #2
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	218c      	movs	r1, #140	; 0x8c
 80060a6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	228c      	movs	r2, #140	; 0x8c
 80060ac:	589b      	ldr	r3, [r3, r2]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7fe ff3d 	bl	8004f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	228c      	movs	r2, #140	; 0x8c
 80060be:	2100      	movs	r1, #0
 80060c0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	225e      	movs	r2, #94	; 0x5e
 80060c6:	5a9b      	ldrh	r3, [r3, r2]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d132      	bne.n	8006134 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4934      	ldr	r1, [pc, #208]	; (80061ac <UART_RxISR_16BIT_FIFOEN+0x214>)
 80060da:	400a      	ands	r2, r1
 80060dc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4931      	ldr	r1, [pc, #196]	; (80061b0 <UART_RxISR_16BIT_FIFOEN+0x218>)
 80060ea:	400a      	ands	r2, r1
 80060ec:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2288      	movs	r2, #136	; 0x88
 80060f2:	2120      	movs	r1, #32
 80060f4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d110      	bne.n	8006126 <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2110      	movs	r1, #16
 8006110:	438a      	bics	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	225c      	movs	r2, #92	; 0x5c
 8006118:	5a9a      	ldrh	r2, [r3, r2]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	0011      	movs	r1, r2
 800611e:	0018      	movs	r0, r3
 8006120:	f7fe ff18 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
 8006124:	e003      	b.n	800612e <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f7fb f9f5 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006134:	2316      	movs	r3, #22
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d004      	beq.n	8006148 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	2220      	movs	r2, #32
 8006142:	4013      	ands	r3, r2
 8006144:	d000      	beq.n	8006148 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8006146:	e74a      	b.n	8005fde <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006148:	200e      	movs	r0, #14
 800614a:	183b      	adds	r3, r7, r0
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	215e      	movs	r1, #94	; 0x5e
 8006150:	5a52      	ldrh	r2, [r2, r1]
 8006152:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006154:	183b      	adds	r3, r7, r0
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d023      	beq.n	80061a4 <UART_RxISR_16BIT_FIFOEN+0x20c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2268      	movs	r2, #104	; 0x68
 8006160:	5a9b      	ldrh	r3, [r3, r2]
 8006162:	220e      	movs	r2, #14
 8006164:	18ba      	adds	r2, r7, r2
 8006166:	8812      	ldrh	r2, [r2, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d21b      	bcs.n	80061a4 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	490f      	ldr	r1, [pc, #60]	; (80061b4 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8006178:	400a      	ands	r2, r1
 800617a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <UART_RxISR_16BIT_FIFOEN+0x220>)
 8006180:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2120      	movs	r1, #32
 800618e:	430a      	orrs	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006192:	e007      	b.n	80061a4 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2108      	movs	r1, #8
 80061a0:	430a      	orrs	r2, r1
 80061a2:	619a      	str	r2, [r3, #24]
}
 80061a4:	46c0      	nop			; (mov r8, r8)
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b00a      	add	sp, #40	; 0x28
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	fffffeff 	.word	0xfffffeff
 80061b0:	effffffe 	.word	0xeffffffe
 80061b4:	efffffff 	.word	0xefffffff
 80061b8:	08005c85 	.word	0x08005c85

080061bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b002      	add	sp, #8
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061d4:	46c0      	nop			; (mov r8, r8)
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b002      	add	sp, #8
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b002      	add	sp, #8
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	5c9b      	ldrb	r3, [r3, r2]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_UARTEx_DisableFifoMode+0x16>
 80061fe:	2302      	movs	r3, #2
 8006200:	e027      	b.n	8006252 <HAL_UARTEx_DisableFifoMode+0x66>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2280      	movs	r2, #128	; 0x80
 8006206:	2101      	movs	r1, #1
 8006208:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2284      	movs	r2, #132	; 0x84
 800620e:	2124      	movs	r1, #36	; 0x24
 8006210:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2101      	movs	r1, #1
 8006226:	438a      	bics	r2, r1
 8006228:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a0b      	ldr	r2, [pc, #44]	; (800625c <HAL_UARTEx_DisableFifoMode+0x70>)
 800622e:	4013      	ands	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2284      	movs	r2, #132	; 0x84
 8006244:	2120      	movs	r1, #32
 8006246:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	2100      	movs	r1, #0
 800624e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	0018      	movs	r0, r3
 8006254:	46bd      	mov	sp, r7
 8006256:	b004      	add	sp, #16
 8006258:	bd80      	pop	{r7, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	dfffffff 	.word	0xdfffffff

08006260 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2280      	movs	r2, #128	; 0x80
 800626e:	5c9b      	ldrb	r3, [r3, r2]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e02e      	b.n	80062d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	2101      	movs	r1, #1
 800627e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2284      	movs	r2, #132	; 0x84
 8006284:	2124      	movs	r1, #36	; 0x24
 8006286:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2101      	movs	r1, #1
 800629c:	438a      	bics	r2, r1
 800629e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	08d9      	lsrs	r1, r3, #3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 f854 	bl	8006364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2284      	movs	r2, #132	; 0x84
 80062c8:	2120      	movs	r1, #32
 80062ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	2100      	movs	r1, #0
 80062d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	0018      	movs	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	b004      	add	sp, #16
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2280      	movs	r2, #128	; 0x80
 80062ee:	5c9b      	ldrb	r3, [r3, r2]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e02f      	b.n	8006358 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2280      	movs	r2, #128	; 0x80
 80062fc:	2101      	movs	r1, #1
 80062fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2284      	movs	r2, #132	; 0x84
 8006304:	2124      	movs	r1, #36	; 0x24
 8006306:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2101      	movs	r1, #1
 800631c:	438a      	bics	r2, r1
 800631e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	4a0e      	ldr	r2, [pc, #56]	; (8006360 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006328:	4013      	ands	r3, r2
 800632a:	0019      	movs	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 f813 	bl	8006364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2284      	movs	r2, #132	; 0x84
 800634a:	2120      	movs	r1, #32
 800634c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2280      	movs	r2, #128	; 0x80
 8006352:	2100      	movs	r1, #0
 8006354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b004      	add	sp, #16
 800635e:	bd80      	pop	{r7, pc}
 8006360:	f1ffffff 	.word	0xf1ffffff

08006364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006366:	b089      	sub	sp, #36	; 0x24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800636c:	2314      	movs	r3, #20
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	4a2f      	ldr	r2, [pc, #188]	; (8006430 <UARTEx_SetNbDataToProcess+0xcc>)
 8006372:	ca03      	ldmia	r2!, {r0, r1}
 8006374:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006376:	230c      	movs	r3, #12
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <UARTEx_SetNbDataToProcess+0xd0>)
 800637c:	ca03      	ldmia	r2!, {r0, r1}
 800637e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	226a      	movs	r2, #106	; 0x6a
 800638c:	2101      	movs	r1, #1
 800638e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2268      	movs	r2, #104	; 0x68
 8006394:	2101      	movs	r1, #1
 8006396:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006398:	e046      	b.n	8006428 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800639a:	261f      	movs	r6, #31
 800639c:	19bb      	adds	r3, r7, r6
 800639e:	2208      	movs	r2, #8
 80063a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063a2:	201e      	movs	r0, #30
 80063a4:	183b      	adds	r3, r7, r0
 80063a6:	2208      	movs	r2, #8
 80063a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	0e5b      	lsrs	r3, r3, #25
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	241d      	movs	r4, #29
 80063b6:	193b      	adds	r3, r7, r4
 80063b8:	2107      	movs	r1, #7
 80063ba:	400a      	ands	r2, r1
 80063bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	0f5b      	lsrs	r3, r3, #29
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	251c      	movs	r5, #28
 80063ca:	197b      	adds	r3, r7, r5
 80063cc:	2107      	movs	r1, #7
 80063ce:	400a      	ands	r2, r1
 80063d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063d2:	183b      	adds	r3, r7, r0
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	197a      	adds	r2, r7, r5
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	2114      	movs	r1, #20
 80063dc:	1879      	adds	r1, r7, r1
 80063de:	5c8a      	ldrb	r2, [r1, r2]
 80063e0:	435a      	muls	r2, r3
 80063e2:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063e4:	197b      	adds	r3, r7, r5
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	250c      	movs	r5, #12
 80063ea:	197a      	adds	r2, r7, r5
 80063ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ee:	0019      	movs	r1, r3
 80063f0:	f7f9 ff14 	bl	800021c <__divsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	b299      	uxth	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	226a      	movs	r2, #106	; 0x6a
 80063fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063fe:	19bb      	adds	r3, r7, r6
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	193a      	adds	r2, r7, r4
 8006404:	7812      	ldrb	r2, [r2, #0]
 8006406:	2114      	movs	r1, #20
 8006408:	1879      	adds	r1, r7, r1
 800640a:	5c8a      	ldrb	r2, [r1, r2]
 800640c:	435a      	muls	r2, r3
 800640e:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006410:	193b      	adds	r3, r7, r4
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	197a      	adds	r2, r7, r5
 8006416:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006418:	0019      	movs	r1, r3
 800641a:	f7f9 feff 	bl	800021c <__divsi3>
 800641e:	0003      	movs	r3, r0
 8006420:	b299      	uxth	r1, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2268      	movs	r2, #104	; 0x68
 8006426:	5299      	strh	r1, [r3, r2]
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	b009      	add	sp, #36	; 0x24
 800642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006430:	080064a8 	.word	0x080064a8
 8006434:	080064b0 	.word	0x080064b0

08006438 <__libc_init_array>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	2600      	movs	r6, #0
 800643c:	4d0c      	ldr	r5, [pc, #48]	; (8006470 <__libc_init_array+0x38>)
 800643e:	4c0d      	ldr	r4, [pc, #52]	; (8006474 <__libc_init_array+0x3c>)
 8006440:	1b64      	subs	r4, r4, r5
 8006442:	10a4      	asrs	r4, r4, #2
 8006444:	42a6      	cmp	r6, r4
 8006446:	d109      	bne.n	800645c <__libc_init_array+0x24>
 8006448:	2600      	movs	r6, #0
 800644a:	f000 f821 	bl	8006490 <_init>
 800644e:	4d0a      	ldr	r5, [pc, #40]	; (8006478 <__libc_init_array+0x40>)
 8006450:	4c0a      	ldr	r4, [pc, #40]	; (800647c <__libc_init_array+0x44>)
 8006452:	1b64      	subs	r4, r4, r5
 8006454:	10a4      	asrs	r4, r4, #2
 8006456:	42a6      	cmp	r6, r4
 8006458:	d105      	bne.n	8006466 <__libc_init_array+0x2e>
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	00b3      	lsls	r3, r6, #2
 800645e:	58eb      	ldr	r3, [r5, r3]
 8006460:	4798      	blx	r3
 8006462:	3601      	adds	r6, #1
 8006464:	e7ee      	b.n	8006444 <__libc_init_array+0xc>
 8006466:	00b3      	lsls	r3, r6, #2
 8006468:	58eb      	ldr	r3, [r5, r3]
 800646a:	4798      	blx	r3
 800646c:	3601      	adds	r6, #1
 800646e:	e7f2      	b.n	8006456 <__libc_init_array+0x1e>
 8006470:	0800658c 	.word	0x0800658c
 8006474:	0800658c 	.word	0x0800658c
 8006478:	0800658c 	.word	0x0800658c
 800647c:	08006590 	.word	0x08006590

08006480 <memset>:
 8006480:	0003      	movs	r3, r0
 8006482:	1812      	adds	r2, r2, r0
 8006484:	4293      	cmp	r3, r2
 8006486:	d100      	bne.n	800648a <memset+0xa>
 8006488:	4770      	bx	lr
 800648a:	7019      	strb	r1, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	e7f9      	b.n	8006484 <memset+0x4>

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
