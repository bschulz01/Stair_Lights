
Emitter_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007584  08007584  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800758c  0800758c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d24  20000010  080075a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d34  080075a4  00021d34  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e1a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de2  00000000  00000000  00033e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00037c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d48  00000000  00000000  00038ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014721  00000000  00000000  000528e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3f2b  00000000  00000000  00067009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010af34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  0010af84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800745c 	.word	0x0800745c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800745c 	.word	0x0800745c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t dataSentFlag;


// Callback for when data transfer is complete
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(getLEDTimer(), TIM_CHANNEL);
 8000628:	f000 fd6a 	bl	8001100 <getLEDTimer>
 800062c:	0003      	movs	r3, r0
 800062e:	2104      	movs	r1, #4
 8000630:	0018      	movs	r0, r3
 8000632:	f003 fadf 	bl	8003bf4 <HAL_TIM_PWM_Stop_DMA>
	dataSentFlag = 1;
 8000636:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20001a10 	.word	0x20001a10

08000648 <setLED>:
uint8_t* getLEDBuf(uint8_t led) {
	return &LED_data[led*3];
}

void setLED(uint32_t LED, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	000c      	movs	r4, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	1c22      	adds	r2, r4, #0
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	1cbb      	adds	r3, r7, #2
 800065e:	1c02      	adds	r2, r0, #0
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	1c7b      	adds	r3, r7, #1
 8000664:	1c0a      	adds	r2, r1, #0
 8000666:	701a      	strb	r2, [r3, #0]
	if (LED < NUM_LEDS) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b7f      	cmp	r3, #127	; 0x7f
 800066c:	d819      	bhi.n	80006a2 <setLED+0x5a>
		LED_data[LED*3] = Green;
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	0013      	movs	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <setLED+0x64>)
 8000678:	1cb9      	adds	r1, r7, #2
 800067a:	7809      	ldrb	r1, [r1, #0]
 800067c:	54d1      	strb	r1, [r2, r3]
		LED_data[LED*3+1] = Red;
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	0013      	movs	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	189b      	adds	r3, r3, r2
 8000686:	3301      	adds	r3, #1
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <setLED+0x64>)
 800068a:	1cf9      	adds	r1, r7, #3
 800068c:	7809      	ldrb	r1, [r1, #0]
 800068e:	54d1      	strb	r1, [r2, r3]
		LED_data[LED*3+2] = Blue;
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	0013      	movs	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	189b      	adds	r3, r3, r2
 8000698:	3302      	adds	r3, #2
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <setLED+0x64>)
 800069c:	1c79      	adds	r1, r7, #1
 800069e:	7809      	ldrb	r1, [r1, #0]
 80006a0:	54d1      	strb	r1, [r2, r3]
//	if (LED < NUM_LEDS) {
//		LED_Data[LED][0] = Green;
//		LED_Data[LED][1] = Red;
//		LED_Data[LED][2] = Blue;
//	}
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b003      	add	sp, #12
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	2000002c 	.word	0x2000002c

080006b0 <clearLEDs>:


void clearLEDs()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	for (int index = 0; index < NUM_LEDS; index++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	e008      	b.n	80006ce <clearLEDs+0x1e>
	{
		setLED(index, 0, 0, 0);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	f7ff ffc0 	bl	8000648 <setLED>
	for (int index = 0; index < NUM_LEDS; index++)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3301      	adds	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b7f      	cmp	r3, #127	; 0x7f
 80006d2:	ddf3      	ble.n	80006bc <clearLEDs+0xc>
	}
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <updateWS2812>:
//	}
//}


void updateWS2812()
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
	uint32_t color;

	uint16_t idx = 0;
 80006e6:	230e      	movs	r3, #14
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2200      	movs	r2, #0
 80006ec:	801a      	strh	r2, [r3, #0]
	uint8_t mask = 0b11110000;
 80006ee:	1d7b      	adds	r3, r7, #5
 80006f0:	22f0      	movs	r2, #240	; 0xf0
 80006f2:	701a      	strb	r2, [r3, #0]
	// Load buffer with LED data
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	e057      	b.n	80007aa <updateWS2812+0xca>
	{
		// Generate bits to describe color
		color = ((LED_data[led*3] & mask) << 16) |
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	0013      	movs	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	189b      	adds	r3, r3, r2
 8000702:	4a3f      	ldr	r2, [pc, #252]	; (8000800 <updateWS2812+0x120>)
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	1d7a      	adds	r2, r7, #5
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	4013      	ands	r3, r2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	0419      	lsls	r1, r3, #16
				((LED_data[led*3+1] & mask) << 8) |
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	0013      	movs	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	189b      	adds	r3, r3, r2
 8000718:	3301      	adds	r3, #1
 800071a:	4a39      	ldr	r2, [pc, #228]	; (8000800 <updateWS2812+0x120>)
 800071c:	5cd3      	ldrb	r3, [r2, r3]
 800071e:	1d7a      	adds	r2, r7, #5
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	4013      	ands	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	021b      	lsls	r3, r3, #8
		color = ((LED_data[led*3] & mask) << 16) |
 8000728:	4319      	orrs	r1, r3
				(LED_data[led*3+2] & mask);
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	0013      	movs	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	189b      	adds	r3, r3, r2
 8000732:	3302      	adds	r3, #2
 8000734:	4a32      	ldr	r2, [pc, #200]	; (8000800 <updateWS2812+0x120>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	1d7a      	adds	r2, r7, #5
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	4013      	ands	r3, r2
 800073e:	b2db      	uxtb	r3, r3
				((LED_data[led*3+1] & mask) << 8) |
 8000740:	430b      	orrs	r3, r1
		color = ((LED_data[led*3] & mask) << 16) |
 8000742:	603b      	str	r3, [r7, #0]

		// Set the buffer for this LED
		// Send MSB to LSB
		for (int16_t bit = 23; bit >= 0; bit--)
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	2217      	movs	r2, #23
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	e026      	b.n	800079a <updateWS2812+0xba>
		{
			if (color & (1<<bit))
 800074c:	1dbb      	adds	r3, r7, #6
 800074e:	2200      	movs	r2, #0
 8000750:	5e9b      	ldrsh	r3, [r3, r2]
 8000752:	2201      	movs	r2, #1
 8000754:	409a      	lsls	r2, r3
 8000756:	0013      	movs	r3, r2
 8000758:	001a      	movs	r2, r3
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	4013      	ands	r3, r2
 800075e:	d007      	beq.n	8000770 <updateWS2812+0x90>
			{
				PWM_data[idx] = HIGH_TIME; // High bit
 8000760:	230e      	movs	r3, #14
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <updateWS2812+0x124>)
 8000768:	0052      	lsls	r2, r2, #1
 800076a:	2136      	movs	r1, #54	; 0x36
 800076c:	52d1      	strh	r1, [r2, r3]
 800076e:	e006      	b.n	800077e <updateWS2812+0x9e>
			}
			else
			{
				PWM_data[idx] = LOW_TIME; // Low bit
 8000770:	230e      	movs	r3, #14
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	881a      	ldrh	r2, [r3, #0]
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <updateWS2812+0x124>)
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	211b      	movs	r1, #27
 800077c:	52d1      	strh	r1, [r2, r3]
			}
			idx++;
 800077e:	210e      	movs	r1, #14
 8000780:	187b      	adds	r3, r7, r1
 8000782:	881a      	ldrh	r2, [r3, #0]
 8000784:	187b      	adds	r3, r7, r1
 8000786:	3201      	adds	r2, #1
 8000788:	801a      	strh	r2, [r3, #0]
		for (int16_t bit = 23; bit >= 0; bit--)
 800078a:	1dbb      	adds	r3, r7, #6
 800078c:	2200      	movs	r2, #0
 800078e:	5e9b      	ldrsh	r3, [r3, r2]
 8000790:	b29b      	uxth	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b29a      	uxth	r2, r3
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	2200      	movs	r2, #0
 800079e:	5e9b      	ldrsh	r3, [r3, r2]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad3      	bge.n	800074c <updateWS2812+0x6c>
	for (uint32_t led = 0; led < NUM_LEDS; led++)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	3301      	adds	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	2b7f      	cmp	r3, #127	; 0x7f
 80007ae:	d9a4      	bls.n	80006fa <updateWS2812+0x1a>
		}
	}

	// Reset the communication line to signify end of transmission
	while (idx < BUFFER_LENGTH)
 80007b0:	e00b      	b.n	80007ca <updateWS2812+0xea>
	{
		PWM_data[idx] = 0;
 80007b2:	200e      	movs	r0, #14
 80007b4:	183b      	adds	r3, r7, r0
 80007b6:	881a      	ldrh	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <updateWS2812+0x124>)
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	2100      	movs	r1, #0
 80007be:	52d1      	strh	r1, [r2, r3]
		idx++;
 80007c0:	183b      	adds	r3, r7, r0
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	183b      	adds	r3, r7, r0
 80007c6:	3201      	adds	r2, #1
 80007c8:	801a      	strh	r2, [r3, #0]
	while (idx < BUFFER_LENGTH)
 80007ca:	240e      	movs	r4, #14
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <updateWS2812+0x128>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d9ed      	bls.n	80007b2 <updateWS2812+0xd2>
	}

	// Begin transfer of data
	dataSentFlag = 0;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <updateWS2812+0x12c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(getLEDTimer(), TIM_CHANNEL, (uint32_t *)PWM_data, idx);
 80007dc:	f000 fc90 	bl	8001100 <getLEDTimer>
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <updateWS2812+0x124>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	f003 f804 	bl	80037f4 <HAL_TIM_PWM_Start_DMA>

//	int counter = 0;
	while(!dataSentFlag) {
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <updateWS2812+0x12c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0fb      	beq.n	80007ee <updateWS2812+0x10e>
//			HAL_TIM_PWM_Stop_DMA(getLEDTimer(), TIM_CHANNEL);
//			dataSentFlag = 1;
//		}
//		counter++;
	}
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b005      	add	sp, #20
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	2000002c 	.word	0x2000002c
 8000804:	200001ac 	.word	0x200001ac
 8000808:	00000c31 	.word	0x00000c31
 800080c:	20001a10 	.word	0x20001a10

08000810 <updateAnimation>:
int anim4_prevIdx = 999;

// TODO: reset steps at each reset
// TODO: fix random animation

void updateAnimation(uint8_t num, uint8_t idx) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	0002      	movs	r2, r0
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	1dbb      	adds	r3, r7, #6
 800081e:	1c0a      	adds	r2, r1, #0
 8000820:	701a      	strb	r2, [r3, #0]
   switch(num) {
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b03      	cmp	r3, #3
 8000828:	d01a      	beq.n	8000860 <updateAnimation+0x50>
 800082a:	dc1f      	bgt.n	800086c <updateAnimation+0x5c>
 800082c:	2b02      	cmp	r3, #2
 800082e:	d011      	beq.n	8000854 <updateAnimation+0x44>
 8000830:	dc1c      	bgt.n	800086c <updateAnimation+0x5c>
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <updateAnimation+0x2c>
 8000836:	2b01      	cmp	r3, #1
 8000838:	d006      	beq.n	8000848 <updateAnimation+0x38>
    case 0: animation1(idx); break;
    case 1: animation2(idx); break;
    case 2: animation3(idx); break;
    case 3: animation2(idx); break;	// FIXME: make animation 4 work
    default: break; 
 800083a:	e017      	b.n	800086c <updateAnimation+0x5c>
    case 0: animation1(idx); break;
 800083c:	1dbb      	adds	r3, r7, #6
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0018      	movs	r0, r3
 8000842:	f000 f819 	bl	8000878 <animation1>
 8000846:	e012      	b.n	800086e <updateAnimation+0x5e>
    case 1: animation2(idx); break;
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f885 	bl	800095c <animation2>
 8000852:	e00c      	b.n	800086e <updateAnimation+0x5e>
    case 2: animation3(idx); break;
 8000854:	1dbb      	adds	r3, r7, #6
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	0018      	movs	r0, r3
 800085a:	f000 f90b 	bl	8000a74 <animation3>
 800085e:	e006      	b.n	800086e <updateAnimation+0x5e>
    case 3: animation2(idx); break;	// FIXME: make animation 4 work
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	0018      	movs	r0, r3
 8000866:	f000 f879 	bl	800095c <animation2>
 800086a:	e000      	b.n	800086e <updateAnimation+0x5e>
    default: break; 
 800086c:	46c0      	nop			; (mov r8, r8)
   }
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <animation1>:
 * 	Side to side like footsteps
 * 	Expanding dots
 */

// Moving lines
void animation1(uint8_t index) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	701a      	strb	r2, [r3, #0]
	int num = index % (NUM_LEDS*2/3);
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2155      	movs	r1, #85	; 0x55
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fcc2 	bl	8000214 <__aeabi_uidivmod>
 8000890:	000b      	movs	r3, r1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	617b      	str	r3, [r7, #20]
    // There are three groups of colors
    // 1st dimension = group
    // 2nd dimension = r, g, or b (respectively)
    uint8_t rgb[3][3] = {{0, 0, 0},{0, 0, 0},{0, 0, 0}};
 8000896:	2108      	movs	r1, #8
 8000898:	187b      	adds	r3, r7, r1
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <animation1+0xe0>)
 800089c:	ca11      	ldmia	r2!, {r0, r4}
 800089e:	c311      	stmia	r3!, {r0, r4}
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	701a      	strb	r2, [r3, #0]
    // Set colors for each staircase segment
#if (POSITION_LEVEL == LEVEL_TOP)
    #if (POSITION_SIDE  == SIDE_EMITTER)
        rgb[0][0] = 100;
 80008a4:	000c      	movs	r4, r1
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2264      	movs	r2, #100	; 0x64
 80008aa:	701a      	strb	r2, [r3, #0]
        rgb[1][0] = 100;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2264      	movs	r2, #100	; 0x64
 80008b0:	70da      	strb	r2, [r3, #3]
        rgb[1][1] = 100;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2264      	movs	r2, #100	; 0x64
 80008b6:	711a      	strb	r2, [r3, #4]
        rgb[2][0] = 100;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	719a      	strb	r2, [r3, #6]
        rgb[2][2] = 100;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2264      	movs	r2, #100	; 0x64
 80008c2:	721a      	strb	r2, [r3, #8]
        rgb[1][1] = 100;
        rgb[1][2] = 100;
        rgb[2][1] = 100;
    #endif
	// Turn on going up
	if (num < NUM_LEDS/3) {
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	2b29      	cmp	r3, #41	; 0x29
 80008c8:	dc1f      	bgt.n	800090a <animation1+0x92>
        // Set colors for 3 groups
        setLED(num                 , rgb[0][0], rgb[0][1], rgb[0][2]);
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	7819      	ldrb	r1, [r3, #0]
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	785a      	ldrb	r2, [r3, #1]
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	f7ff feb6 	bl	8000648 <setLED>
        setLED(num + NUM_LEDS * 1/3, rgb[1][0], rgb[1][1], rgb[1][2]);
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	332a      	adds	r3, #42	; 0x2a
 80008e0:	0018      	movs	r0, r3
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	78d9      	ldrb	r1, [r3, #3]
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	791a      	ldrb	r2, [r3, #4]
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	f7ff feab 	bl	8000648 <setLED>
        setLED(num + NUM_LEDS * 2/3, rgb[2][0], rgb[2][1], rgb[2][2]);
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3355      	adds	r3, #85	; 0x55
 80008f6:	0018      	movs	r0, r3
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	7999      	ldrb	r1, [r3, #6]
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	79da      	ldrb	r2, [r3, #7]
 8000900:	193b      	adds	r3, r7, r4
 8000902:	7a1b      	ldrb	r3, [r3, #8]
 8000904:	f7ff fea0 	bl	8000648 <setLED>
        setLED(NUM_LEDS * 1/3 - num, 0, 0, 0);
        setLED(NUM_LEDS * 2/3 - num, 0, 0, 0);
        setLED(NUM_LEDS       - num, 0, 0, 0);
	}
#endif
}
 8000908:	e021      	b.n	800094e <animation1+0xd6>
		num = NUM_LEDS/3 - index % (NUM_LEDS/3);
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	212a      	movs	r1, #42	; 0x2a
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff fc7f 	bl	8000214 <__aeabi_uidivmod>
 8000916:	000b      	movs	r3, r1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	001a      	movs	r2, r3
 800091c:	232a      	movs	r3, #42	; 0x2a
 800091e:	1a9b      	subs	r3, r3, r2
 8000920:	617b      	str	r3, [r7, #20]
        setLED(num                 , 0, 0, 0);
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	2300      	movs	r3, #0
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	f7ff fe8d 	bl	8000648 <setLED>
        setLED(num + NUM_LEDS * 1/3, 0, 0, 0);
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	332a      	adds	r3, #42	; 0x2a
 8000932:	0018      	movs	r0, r3
 8000934:	2300      	movs	r3, #0
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	f7ff fe85 	bl	8000648 <setLED>
        setLED(num + NUM_LEDS * 2/3, 0, 0, 0);
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3355      	adds	r3, #85	; 0x55
 8000942:	0018      	movs	r0, r3
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	f7ff fe7d 	bl	8000648 <setLED>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b007      	add	sp, #28
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	08007474 	.word	0x08007474

0800095c <animation2>:

// Random dots that expand outwards
void animation2(uint8_t idx) {
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	0002      	movs	r2, r0
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	701a      	strb	r2, [r3, #0]
	// Get the number of LEDs to have on in this iteration
    // Delay this update so it doesn't go as fast
	int cycleIdx = (idx / ANIMATION_2_DELAY)  % ANIMATION_2_CYCLE;
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2103      	movs	r1, #3
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff fbca 	bl	8000108 <__udivsi3>
 8000974:	0003      	movs	r3, r0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	211e      	movs	r1, #30
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff fc4a 	bl	8000214 <__aeabi_uidivmod>
 8000980:	000b      	movs	r3, r1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	613b      	str	r3, [r7, #16]
    int numOn = cycleIdx > (ANIMATION_2_CYCLE / 2) ? ANIMATION_2_CYCLE - cycleIdx : cycleIdx;
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	dd03      	ble.n	8000994 <animation2+0x38>
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	221e      	movs	r2, #30
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	e000      	b.n	8000996 <animation2+0x3a>
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	60fb      	str	r3, [r7, #12]
	uint8_t r = 0;
 8000998:	230b      	movs	r3, #11
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
	uint8_t g = 0;
 80009a0:	230a      	movs	r3, #10
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
 80009a8:	2309      	movs	r3, #9
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
    clearLEDs();
 80009b0:	f7ff fe7e 	bl	80006b0 <clearLEDs>
	// Generate new random numbers if starting the animation
	if (numOn == 0) {
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d115      	bne.n	80009e6 <animation2+0x8a>
		clearLEDs();
 80009ba:	f7ff fe79 	bl	80006b0 <clearLEDs>
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	e00d      	b.n	80009e0 <animation2+0x84>
			randoms[i] = generateRandom() % (2*NUM_LEDS);
 80009c4:	f000 f8cd 	bl	8000b62 <generateRandom>
 80009c8:	0003      	movs	r3, r0
 80009ca:	001a      	movs	r2, r3
 80009cc:	23ff      	movs	r3, #255	; 0xff
 80009ce:	4013      	ands	r3, r2
 80009d0:	b299      	uxth	r1, r3
 80009d2:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <animation2+0x114>)
 80009d4:	69fa      	ldr	r2, [r7, #28]
 80009d6:	0052      	lsls	r2, r2, #1
 80009d8:	52d1      	strh	r1, [r2, r3]
		for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3301      	adds	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <animation2+0x68>
		}
	}
	// Iterate through each group of LEDs
	for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	e039      	b.n	8000a60 <animation2+0x104>
		generateRGB(i, &r, &g, &b);
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	b2d8      	uxtb	r0, r3
 80009f0:	2309      	movs	r3, #9
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	220a      	movs	r2, #10
 80009f6:	18ba      	adds	r2, r7, r2
 80009f8:	210b      	movs	r1, #11
 80009fa:	1879      	adds	r1, r7, r1
 80009fc:	f000 f8d0 	bl	8000ba0 <generateRGB>
        // Iterate through each led within the group
        for (int j = 0; j < numOn; j++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e025      	b.n	8000a52 <animation2+0xf6>
		    setLED(randoms[i]+j, r, g, b);
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <animation2+0x114>)
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	5ad3      	ldrh	r3, [r2, r3]
 8000a0e:	001a      	movs	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	18d3      	adds	r3, r2, r3
 8000a14:	0018      	movs	r0, r3
 8000a16:	240b      	movs	r4, #11
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	7819      	ldrb	r1, [r3, #0]
 8000a1c:	250a      	movs	r5, #10
 8000a1e:	197b      	adds	r3, r7, r5
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	2609      	movs	r6, #9
 8000a24:	19bb      	adds	r3, r7, r6
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	f7ff fe0e 	bl	8000648 <setLED>
		    setLED(randoms[i]-j, r, g, b);
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <animation2+0x114>)
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	5ad3      	ldrh	r3, [r2, r3]
 8000a34:	001a      	movs	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	7819      	ldrb	r1, [r3, #0]
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	19bb      	adds	r3, r7, r6
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	f7ff fdfe 	bl	8000648 <setLED>
        for (int j = 0; j < numOn; j++) {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dbd5      	blt.n	8000a06 <animation2+0xaa>
	for (int i = 0; i < NUM_RANDOM_NUMS; i++) {
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	ddc2      	ble.n	80009ec <animation2+0x90>
        }
	}
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b009      	add	sp, #36	; 0x24
 8000a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a70:	20001a14 	.word	0x20001a14

08000a74 <animation3>:
 * Steps are 10 LEDs long with a 6 led buffer in between
 * This means that there are 8 steps
 * There are at most 4 steps visible at any point in time
 * Each step is visible for ANIMATION_3_STEP_TIME
 */
void animation3(uint8_t index) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]
	int step = (index % (ANIMATION_3_TIME)) / STEP_TIME;
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	21f0      	movs	r1, #240	; 0xf0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fbc4 	bl	8000214 <__aeabi_uidivmod>
 8000a8c:	000b      	movs	r3, r1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2114      	movs	r1, #20
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fb38 	bl	8000108 <__udivsi3>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	61fb      	str	r3, [r7, #28]
	uint8_t r = 0;
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	uint8_t g = 0;
 8000aa6:	230e      	movs	r3, #14
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	uint8_t b = 0;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	// Update when a new step is reached
//	if (index % STEP_TIME == 0) {       // commented out because indices may be skipped
		// Turn on new step
		int startIndex = step * (STEP_LEN+STEP_GAP);
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	61bb      	str	r3, [r7, #24]
        uint8_t side = step % 2 == 0 ? SIDE_EMITTER : SIDE_RECEIVER;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d101      	bne.n	8000ac8 <animation3+0x54>
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	e000      	b.n	8000aca <animation3+0x56>
 8000ac8:	2202      	movs	r2, #2
 8000aca:	2317      	movs	r3, #23
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	701a      	strb	r2, [r3, #0]
		// Only set steps that are within bounds
		if (startIndex < NUM_LEDS) {
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad4:	dc26      	bgt.n	8000b24 <animation3+0xb0>
			generateRGB(step, &r, &g, &b);
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	b2d8      	uxtb	r0, r3
 8000ada:	230d      	movs	r3, #13
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	220e      	movs	r2, #14
 8000ae0:	18ba      	adds	r2, r7, r2
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	1879      	adds	r1, r7, r1
 8000ae6:	f000 f85b 	bl	8000ba0 <generateRGB>
			for (int i = 0; i < STEP_LEN; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	e016      	b.n	8000b1e <animation3+0xaa>
                if (side == POSITION_SIDE) {
 8000af0:	2317      	movs	r3, #23
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d10e      	bne.n	8000b18 <animation3+0xa4>
                    #if (POSITION_LEVEL == LEVEL_TOP)
				    setLED(startIndex+i, r, g, b);
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	18d3      	adds	r3, r2, r3
 8000b00:	0018      	movs	r0, r3
 8000b02:	230f      	movs	r3, #15
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	7819      	ldrb	r1, [r3, #0]
 8000b08:	230e      	movs	r3, #14
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	230d      	movs	r3, #13
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f7ff fd98 	bl	8000648 <setLED>
			for (int i = 0; i < STEP_LEN; i++) {
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	2b09      	cmp	r3, #9
 8000b22:	dde5      	ble.n	8000af0 <animation3+0x7c>
                    #endif
                }
			}
		}
		// Turn off old step
		int offStep = step - NUM_STEPS_ON;
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	3b04      	subs	r3, #4
 8000b28:	613b      	str	r3, [r7, #16]
		if (offStep >= 0) {
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db14      	blt.n	8000b5a <animation3+0xe6>
			startIndex = offStep * (STEP_LEN+STEP_GAP);
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
			for (int i = 0; i < STEP_LEN; i++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	e00b      	b.n	8000b54 <animation3+0xe0>
#if (POSITION_LEVEL == LEVEL_TOP)
				setLED(startIndex+i, 0, 0, 0);
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	0018      	movs	r0, r3
 8000b44:	2300      	movs	r3, #0
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f7ff fd7d 	bl	8000648 <setLED>
			for (int i = 0; i < STEP_LEN; i++) {
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	3301      	adds	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	2b09      	cmp	r3, #9
 8000b58:	ddf0      	ble.n	8000b3c <animation3+0xc8>
				setLED(NUM_LEDS - (startIndex+i), 0, 0, 0);
#endif
			}
		}
//	}
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b00a      	add	sp, #40	; 0x28
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <generateRandom>:
}

// UTILITY FUNCTIONS

// Generate a random 16 bit unsigned interger
uint16_t generateRandom() {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
	// Generate random 32 bit number
	uint32_t num;
	HAL_RNG_GenerateRandomNumber(getRNG(), &num);
 8000b68:	f000 fae2 	bl	8001130 <getRNG>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	003b      	movs	r3, r7
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f002 fd89 	bl	800368a <HAL_RNG_GenerateRandomNumber>
	// Randomly take either the upper or lower 16 bits
	// Extracts the upper 16 bits
	uint32_t mask = (~0) >> 16;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	607b      	str	r3, [r7, #4]
	if (num >> 31) {
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	da04      	bge.n	8000b8e <generateRandom+0x2c>
		num = num & mask;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	e002      	b.n	8000b94 <generateRandom+0x32>
	} else {
		num = num >> 16;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	0c1b      	lsrs	r3, r3, #16
 8000b92:	603b      	str	r3, [r7, #0]
	}
	return (uint16_t) num;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b29b      	uxth	r3, r3
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <generateRGB>:

// Sets the rgb value given a number
void generateRGB(uint8_t num, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	210f      	movs	r1, #15
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	1c02      	adds	r2, r0, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
	int color = num % NUM_COLORS;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2107      	movs	r1, #7
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff fb2a 	bl	8000214 <__aeabi_uidivmod>
 8000bc0:	000b      	movs	r3, r1
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	617b      	str	r3, [r7, #20]
	switch (color) {
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d84b      	bhi.n	8000c64 <generateRGB+0xc4>
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	009a      	lsls	r2, r3, #2
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <generateRGB+0xe0>)
 8000bd2:	18d3      	adds	r3, r2, r3
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	469f      	mov	pc, r3
	case 0: 		// purple
		*r = 100;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2264      	movs	r2, #100	; 0x64
 8000bdc:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
		*b = 100;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2264      	movs	r2, #100	; 0x64
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e045      	b.n	8000c78 <generateRGB+0xd8>
	case 1: 		// orange
		*r = 150;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	2296      	movs	r2, #150	; 0x96
 8000bf0:	701a      	strb	r2, [r3, #0]
		*g = 40;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2228      	movs	r2, #40	; 0x28
 8000bf6:	701a      	strb	r2, [r3, #0]
		*b = 70;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2246      	movs	r2, #70	; 0x46
 8000bfc:	701a      	strb	r2, [r3, #0]
		break;
 8000bfe:	e03b      	b.n	8000c78 <generateRGB+0xd8>
	case 2: 		// yellow
		*r = 100;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2264      	movs	r2, #100	; 0x64
 8000c04:	701a      	strb	r2, [r3, #0]
		*g = 100;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2264      	movs	r2, #100	; 0x64
 8000c0a:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
		break;
 8000c12:	e031      	b.n	8000c78 <generateRGB+0xd8>
	case 3: 		// green
		*r = 0;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
		*g = 150;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2296      	movs	r2, #150	; 0x96
 8000c1e:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
		break;
 8000c26:	e027      	b.n	8000c78 <generateRGB+0xd8>
	case 4: 		// cyan
		*r = 0;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		*g = 100;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2264      	movs	r2, #100	; 0x64
 8000c32:	701a      	strb	r2, [r3, #0]
		*b = 100;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2264      	movs	r2, #100	; 0x64
 8000c38:	701a      	strb	r2, [r3, #0]
		break;
 8000c3a:	e01d      	b.n	8000c78 <generateRGB+0xd8>
	case 5: 		// white
		*r = 70;
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2246      	movs	r2, #70	; 0x46
 8000c40:	701a      	strb	r2, [r3, #0]
		*g = 70;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2246      	movs	r2, #70	; 0x46
 8000c46:	701a      	strb	r2, [r3, #0]
		*b = 70;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2246      	movs	r2, #70	; 0x46
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e013      	b.n	8000c78 <generateRGB+0xd8>
    case 6:         // red
        *r = 255;
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
        break;
 8000c62:	e009      	b.n	8000c78 <generateRGB+0xd8>
	default: 		// off
		*r = 0;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
		break;
 8000c76:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b006      	add	sp, #24
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	0800748c 	.word	0x0800748c

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 ffc6 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f81f 	bl	8000cce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f000 f9e6 	bl	8001060 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c94:	f000 f9be 	bl	8001014 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c98:	f000 f93a 	bl	8000f10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c9c:	f000 f986 	bl	8000fac <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000ca0:	f000 f88c 	bl	8000dbc <MX_TIM1_Init>
  MX_RNG_Init();
 8000ca4:	f000 f872 	bl	8000d8c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  receiveIT();
 8000ca8:	f000 fcb2 	bl	8001610 <receiveIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (cmdReady()) {
 8000cac:	f000 fcda 	bl	8001664 <cmdReady>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d0fb      	beq.n	8000cac <main+0x28>
		  abortIT();
 8000cb4:	f000 fca0 	bl	80015f8 <abortIT>
		  processCommand();
 8000cb8:	f000 fd2a 	bl	8001710 <processCommand>
		  // Update LEDs if requested
		  if (updateLEDs()) {
 8000cbc:	f000 fcc0 	bl	8001640 <updateLEDs>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d001      	beq.n	8000cc8 <main+0x44>
			  //sendAllLEDs();
			  updateWS2812();
 8000cc4:	f7ff fd0c 	bl	80006e0 <updateWS2812>
			  // Clear LEDs before receiving new data
			  //clearLEDs();
		  }
		  // Resume receiving interrupts
		  receiveIT();
 8000cc8:	f000 fca2 	bl	8001610 <receiveIT>
	  if (cmdReady()) {
 8000ccc:	e7ee      	b.n	8000cac <main+0x28>

08000cce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cce:	b590      	push	{r4, r7, lr}
 8000cd0:	b093      	sub	sp, #76	; 0x4c
 8000cd2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd4:	2410      	movs	r4, #16
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	2338      	movs	r3, #56	; 0x38
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f006 fbb4 	bl	800744c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2310      	movs	r3, #16
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f006 fbad 	bl	800744c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 fda8 	bl	800284c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2202      	movs	r2, #2
 8000d00:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	0052      	lsls	r2, r2, #1
 8000d08:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d0a:	0021      	movs	r1, r4
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2202      	movs	r2, #2
 8000d22:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	0292      	lsls	r2, r2, #10
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	0492      	lsls	r2, r2, #18
 8000d3e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	0592      	lsls	r2, r2, #22
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 fdca 	bl	80028e4 <HAL_RCC_OscConfig>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d54:	f000 f9f4 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2202      	movs	r2, #2
 8000d62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	003b      	movs	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d70:	003b      	movs	r3, r7
 8000d72:	2102      	movs	r1, #2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f002 f8cf 	bl	8002f18 <HAL_RCC_ClockConfig>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d7e:	f000 f9df 	bl	8001140 <Error_Handler>
  }
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b013      	add	sp, #76	; 0x4c
 8000d88:	bd90      	pop	{r4, r7, pc}
	...

08000d8c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_RNG_Init+0x28>)
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <MX_RNG_Init+0x2c>)
 8000d94:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <MX_RNG_Init+0x28>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <MX_RNG_Init+0x28>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 fc3c 	bl	800361c <HAL_RNG_Init>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000da8:	f000 f9ca 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	20001a20 	.word	0x20001a20
 8000db8:	40025000 	.word	0x40025000

08000dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b098      	sub	sp, #96	; 0x60
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc2:	2354      	movs	r3, #84	; 0x54
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	230c      	movs	r3, #12
 8000dca:	001a      	movs	r2, r3
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f006 fb3d 	bl	800744c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	2338      	movs	r3, #56	; 0x38
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	231c      	movs	r3, #28
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f006 fb35 	bl	800744c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	0018      	movs	r0, r3
 8000de6:	2334      	movs	r3, #52	; 0x34
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f006 fb2e 	bl	800744c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000df2:	4a46      	ldr	r2, [pc, #280]	; (8000f0c <MX_TIM1_Init+0x150>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000df6:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80;
 8000e02:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000e04:	2250      	movs	r2, #80	; 0x50
 8000e06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e0e:	4b3e      	ldr	r3, [pc, #248]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f002 fc91 	bl	8003744 <HAL_TIM_PWM_Init>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f000 f98b 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2154      	movs	r1, #84	; 0x54
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3e:	187a      	adds	r2, r7, r1
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f003 fd11 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e4e:	f000 f977 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e52:	2138      	movs	r1, #56	; 0x38
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2260      	movs	r2, #96	; 0x60
 8000e58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7e:	1879      	adds	r1, r7, r1
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	0018      	movs	r0, r3
 8000e86:	f002 ffa5 	bl	8003dd4 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e8e:	f000 f957 	bl	8001140 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0192      	lsls	r2, r2, #6
 8000eb6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	0492      	lsls	r2, r2, #18
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee4:	1d3a      	adds	r2, r7, #4
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f003 fd2c 	bl	8004948 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000ef4:	f000 f924 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <MX_TIM1_Init+0x14c>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 f9f4 	bl	80012e8 <HAL_TIM_MspPostInit>

}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b018      	add	sp, #96	; 0x60
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20001a34 	.word	0x20001a34
 8000f0c:	40012c00 	.word	0x40012c00

08000f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f16:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f1c:	22e1      	movs	r2, #225	; 0xe1
 8000f1e:	0252      	lsls	r2, r2, #9
 8000f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f003 fd9a 	bl	8004a94 <HAL_UART_Init>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f64:	f000 f8ec 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f006 f969 	bl	8007244 <HAL_UARTEx_SetTxFifoThreshold>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f76:	f000 f8e3 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f006 f9a0 	bl	80072c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f88:	f000 f8da 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f006 f91e 	bl	80071d0 <HAL_UARTEx_DisableFifoMode>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 f8d2 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20001adc 	.word	0x20001adc
 8000fa8:	40013800 	.word	0x40013800

08000fac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <MX_USART3_UART_Init+0x64>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fb8:	22e1      	movs	r2, #225	; 0xe1
 8000fba:	0252      	lsls	r2, r2, #9
 8000fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <MX_USART3_UART_Init+0x60>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f003 fd4c 	bl	8004a94 <HAL_UART_Init>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001000:	f000 f89e 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	20001b6c 	.word	0x20001b6c
 8001010:	40004800 	.word	0x40004800

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_DMA_Init+0x48>)
 800101c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_DMA_Init+0x48>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_DMA_Init+0x48>)
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2009      	movs	r0, #9
 8001038:	f000 ff36 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800103c:	2009      	movs	r0, #9
 800103e:	f000 ff48 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200a      	movs	r0, #10
 8001048:	f000 ff2e 	bl	8001ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800104c:	200a      	movs	r0, #10
 800104e:	f000 ff40 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	40021000 	.word	0x40021000

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	240c      	movs	r4, #12
 8001068:	193b      	adds	r3, r7, r4
 800106a:	0018      	movs	r0, r3
 800106c:	2314      	movs	r3, #20
 800106e:	001a      	movs	r2, r3
 8001070:	2100      	movs	r1, #0
 8001072:	f006 f9eb 	bl	800744c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <MX_GPIO_Init+0x98>)
 8001078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_GPIO_Init+0x98>)
 800107c:	2102      	movs	r1, #2
 800107e:	430a      	orrs	r2, r1
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_GPIO_Init+0x98>)
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	2202      	movs	r2, #2
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_GPIO_Init+0x98>)
 8001090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_GPIO_Init+0x98>)
 8001094:	2101      	movs	r1, #1
 8001096:	430a      	orrs	r2, r1
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_GPIO_Init+0x98>)
 800109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109e:	2201      	movs	r2, #1
 80010a0:	4013      	ands	r3, r2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_GPIO_Init+0x98>)
 80010a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_GPIO_Init+0x98>)
 80010ac:	2104      	movs	r1, #4
 80010ae:	430a      	orrs	r2, r1
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_GPIO_Init+0x98>)
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	2204      	movs	r2, #4
 80010b8:	4013      	ands	r3, r2
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_GPIO_Init+0x9c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	0018      	movs	r0, r3
 80010c6:	f001 fba3 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010ca:	0021      	movs	r1, r4
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2201      	movs	r2, #1
 80010d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <MX_GPIO_Init+0x9c>)
 80010e8:	0019      	movs	r1, r3
 80010ea:	0010      	movs	r0, r2
 80010ec:	f001 fa2c 	bl	8002548 <HAL_GPIO_Init>

}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b009      	add	sp, #36	; 0x24
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	50000800 	.word	0x50000800

08001100 <getLEDTimer>:

/* USER CODE BEGIN 4 */
TIM_HandleTypeDef* getLEDTimer() {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	return &htim1;
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <getLEDTimer+0xc>)
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20001a34 	.word	0x20001a34

08001110 <getUFP>:
UART_HandleTypeDef* getUFP() {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	return &huart1;
 8001114:	4b01      	ldr	r3, [pc, #4]	; (800111c <getUFP+0xc>)
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20001adc 	.word	0x20001adc

08001120 <getDFP>:
UART_HandleTypeDef* getDFP() {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	return &huart3;
 8001124:	4b01      	ldr	r3, [pc, #4]	; (800112c <getDFP+0xc>)
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20001b6c 	.word	0x20001b6c

08001130 <getRNG>:
RNG_HandleTypeDef* getRNG() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	return &hrng;
 8001134:	4b01      	ldr	r3, [pc, #4]	; (800113c <getRNG+0xc>)
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20001a20 	.word	0x20001a20

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_MspInit+0x4c>)
 8001154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_MspInit+0x4c>)
 8001158:	2101      	movs	r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	641a      	str	r2, [r3, #64]	; 0x40
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_MspInit+0x4c>)
 800116c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_MspInit+0x4c>)
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	0549      	lsls	r1, r1, #21
 8001174:	430a      	orrs	r2, r1
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_MspInit+0x4c>)
 800117a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	055b      	lsls	r3, r3, #21
 8001180:	4013      	ands	r3, r2
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fdca 	bl	8001d24 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b093      	sub	sp, #76	; 0x4c
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	2410      	movs	r4, #16
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	0018      	movs	r0, r3
 80011aa:	2338      	movs	r3, #56	; 0x38
 80011ac:	001a      	movs	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	f006 f94c 	bl	800744c <memset>
  if(hrng->Instance==RNG)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_RNG_MspInit+0x74>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d123      	bne.n	8001206 <HAL_RNG_MspInit+0x6a>

  /* USER CODE END RNG_MspInit 0 */

  /** Configure the RNG clock division factor
  */
    __HAL_RCC_RNGDIV_CONFIG(RCC_RNGCLK_DIV1);
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_RNG_MspInit+0x78>)
 80011c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_RNG_MspInit+0x78>)
 80011c4:	4914      	ldr	r1, [pc, #80]	; (8001218 <HAL_RNG_MspInit+0x7c>)
 80011c6:	400a      	ands	r2, r1
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	02d2      	lsls	r2, r2, #11
 80011d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI_DIV8;
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	04d2      	lsls	r2, r2, #19
 80011d8:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	0018      	movs	r0, r3
 80011de:	f002 f845 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RNG_MspInit+0x4e>
    {
      Error_Handler();
 80011e6:	f7ff ffab 	bl	8001140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_RNG_MspInit+0x78>)
 80011ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_RNG_MspInit+0x78>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	02c9      	lsls	r1, r1, #11
 80011f4:	430a      	orrs	r2, r1
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_RNG_MspInit+0x78>)
 80011fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	02db      	lsls	r3, r3, #11
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b013      	add	sp, #76	; 0x4c
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40025000 	.word	0x40025000
 8001214:	40021000 	.word	0x40021000
 8001218:	cfffffff 	.word	0xcfffffff

0800121c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b093      	sub	sp, #76	; 0x4c
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	2410      	movs	r4, #16
 8001226:	193b      	adds	r3, r7, r4
 8001228:	0018      	movs	r0, r3
 800122a:	2338      	movs	r3, #56	; 0x38
 800122c:	001a      	movs	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	f006 f90c 	bl	800744c <memset>
  if(htim_pwm->Instance==TIM1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d148      	bne.n	80012d0 <HAL_TIM_PWM_MspInit+0xb4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800123e:	193b      	adds	r3, r7, r4
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	0392      	lsls	r2, r2, #14
 8001244:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8001246:	193b      	adds	r3, r7, r4
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	03d2      	lsls	r2, r2, #15
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124e:	193b      	adds	r3, r7, r4
 8001250:	0018      	movs	r0, r3
 8001252:	f002 f80b 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 8001256:	1e03      	subs	r3, r0, #0
 8001258:	d001      	beq.n	800125e <HAL_TIM_PWM_MspInit+0x42>
    {
      Error_Handler();
 800125a:	f7ff ff71 	bl	8001140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HAL_TIM_PWM_MspInit+0xc0>)
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_TIM_PWM_MspInit+0xc0>)
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	0109      	lsls	r1, r1, #4
 8001268:	430a      	orrs	r2, r1
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_TIM_PWM_MspInit+0xc0>)
 800126e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel1;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_TIM_PWM_MspInit+0xc8>)
 800127e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001282:	2215      	movs	r2, #21
 8001284:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001288:	2210      	movs	r2, #16
 800128a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	0052      	lsls	r2, r2, #1
 800129e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 fe28 	bl	8001f0c <HAL_DMA_Init>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <HAL_TIM_PWM_MspInit+0xa8>
    {
      Error_Handler();
 80012c0:	f7ff ff3e 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_TIM_PWM_MspInit+0xc4>)
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b013      	add	sp, #76	; 0x4c
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	20001a80 	.word	0x20001a80
 80012e4:	40020008 	.word	0x40020008

080012e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	240c      	movs	r4, #12
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	0018      	movs	r0, r3
 80012f6:	2314      	movs	r3, #20
 80012f8:	001a      	movs	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	f006 f8a6 	bl	800744c <memset>
  if(htim->Instance==TIM1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a15      	ldr	r2, [pc, #84]	; (800135c <HAL_TIM_MspPostInit+0x74>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d123      	bne.n	8001352 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_TIM_MspPostInit+0x78>)
 800130c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_TIM_MspPostInit+0x78>)
 8001310:	2101      	movs	r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_TIM_MspPostInit+0x78>)
 8001318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131a:	2201      	movs	r2, #1
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001322:	193b      	adds	r3, r7, r4
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	0021      	movs	r1, r4
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2202      	movs	r2, #2
 8001330:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2202      	movs	r2, #2
 8001342:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	187a      	adds	r2, r7, r1
 8001346:	23a0      	movs	r3, #160	; 0xa0
 8001348:	05db      	lsls	r3, r3, #23
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f001 f8fb 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b009      	add	sp, #36	; 0x24
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	40012c00 	.word	0x40012c00
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b09b      	sub	sp, #108	; 0x6c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	2354      	movs	r3, #84	; 0x54
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	0018      	movs	r0, r3
 8001372:	2314      	movs	r3, #20
 8001374:	001a      	movs	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f006 f868 	bl	800744c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	241c      	movs	r4, #28
 800137e:	193b      	adds	r3, r7, r4
 8001380:	0018      	movs	r0, r3
 8001382:	2338      	movs	r3, #56	; 0x38
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f006 f860 	bl	800744c <memset>
  if(huart->Instance==USART1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6a      	ldr	r2, [pc, #424]	; (800153c <HAL_UART_MspInit+0x1d8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d16f      	bne.n	8001476 <HAL_UART_MspInit+0x112>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001396:	193b      	adds	r3, r7, r4
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800139c:	193b      	adds	r3, r7, r4
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	0018      	movs	r0, r3
 80013a6:	f001 ff61 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ae:	f7ff fec7 	bl	8001140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b2:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80013b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b6:	4b62      	ldr	r3, [pc, #392]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	01c9      	lsls	r1, r1, #7
 80013bc:	430a      	orrs	r2, r1
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
 80013c0:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80013c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80013d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d2:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80013d4:	2102      	movs	r1, #2
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
 80013da:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80013dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e6:	2154      	movs	r1, #84	; 0x54
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	22c0      	movs	r2, #192	; 0xc0
 80013ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2202      	movs	r2, #2
 80013f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	187b      	adds	r3, r7, r1
 8001408:	4a4e      	ldr	r2, [pc, #312]	; (8001544 <HAL_UART_MspInit+0x1e0>)
 800140a:	0019      	movs	r1, r3
 800140c:	0010      	movs	r0, r2
 800140e:	f001 f89b 	bl	8002548 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8001412:	4b4d      	ldr	r3, [pc, #308]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 8001414:	4a4d      	ldr	r2, [pc, #308]	; (800154c <HAL_UART_MspInit+0x1e8>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 800141a:	2233      	movs	r2, #51	; 0x33
 800141c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 8001420:	2210      	movs	r2, #16
 8001422:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001436:	4b44      	ldr	r3, [pc, #272]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800143c:	4b42      	ldr	r3, [pc, #264]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 800144a:	0018      	movs	r0, r3
 800144c:	f000 fd5e 	bl	8001f0c <HAL_DMA_Init>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d001      	beq.n	8001458 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001454:	f7ff fe74 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 800145c:	679a      	str	r2, [r3, #120]	; 0x78
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_UART_MspInit+0x1e4>)
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	201b      	movs	r0, #27
 800146a:	f000 fd1d 	bl	8001ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146e:	201b      	movs	r0, #27
 8001470:	f000 fd2f 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001474:	e05e      	b.n	8001534 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a35      	ldr	r2, [pc, #212]	; (8001550 <HAL_UART_MspInit+0x1ec>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d159      	bne.n	8001534 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 8001482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	02c9      	lsls	r1, r1, #11
 800148a:	430a      	orrs	r2, r1
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 8001490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	02db      	lsls	r3, r3, #11
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 800149e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80014a2:	2102      	movs	r1, #2
 80014a4:	430a      	orrs	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_UART_MspInit+0x1dc>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80014b4:	2154      	movs	r1, #84	; 0x54
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	22c0      	movs	r2, #192	; 0xc0
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2202      	movs	r2, #2
 80014c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2204      	movs	r2, #4
 80014d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_UART_MspInit+0x1e0>)
 80014da:	0019      	movs	r1, r3
 80014dc:	0010      	movs	r0, r2
 80014de:	f001 f833 	bl	8002548 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_UART_MspInit+0x1f4>)
 80014e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 80014ea:	2237      	movs	r2, #55	; 0x37
 80014ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 80014f0:	2210      	movs	r2, #16
 80014f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 800151a:	0018      	movs	r0, r3
 800151c:	f000 fcf6 	bl	8001f0c <HAL_DMA_Init>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8001524:	f7ff fe0c 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 800152c:	679a      	str	r2, [r3, #120]	; 0x78
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_UART_MspInit+0x1f0>)
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b01b      	add	sp, #108	; 0x6c
 800153a:	bd90      	pop	{r4, r7, pc}
 800153c:	40013800 	.word	0x40013800
 8001540:	40021000 	.word	0x40021000
 8001544:	50000400 	.word	0x50000400
 8001548:	20001bfc 	.word	0x20001bfc
 800154c:	40020030 	.word	0x40020030
 8001550:	40004800 	.word	0x40004800
 8001554:	20001c58 	.word	0x20001c58
 8001558:	4002001c 	.word	0x4002001c

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 fbb4 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <DMA1_Channel1_IRQHandler+0x14>)
 8001592:	0018      	movs	r0, r3
 8001594:	f000 fe96 	bl	80022c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	20001a80 	.word	0x20001a80

080015a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 fe8a 	bl	80022c4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 fe86 	bl	80022c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	20001c58 	.word	0x20001c58
 80015c4:	20001bfc 	.word	0x20001bfc

080015c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <USART1_IRQHandler+0x14>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f003 fe92 	bl	80052f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	20001adc 	.word	0x20001adc

080015e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <SystemInit+0x14>)
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	0512      	lsls	r2, r2, #20
 80015ea:	609a      	str	r2, [r3, #8]
#endif
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <abortIT>:

// state of user LED on the board
uint8_t led_state = 0;


void abortIT() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(getUFP());
 80015fc:	f7ff fd88 	bl	8001110 <getUFP>
 8001600:	0003      	movs	r3, r0
 8001602:	0018      	movs	r0, r3
 8001604:	f003 fd4a 	bl	800509c <HAL_UART_Abort_IT>
// Only receiver side receives interrupts from downstream boards
#if (POSITION_SIDE == SIDE_RECEIVER)
	HAL_UART_Abort_IT(getDFP());
#endif
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <receiveIT>:

// initialize polling for data from UFP
void receiveIT() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	cmd_ready = 0;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <receiveIT+0x28>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
	cmd = 0;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <receiveIT+0x2c>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
	abortIT();
 8001620:	f7ff ffea 	bl	80015f8 <abortIT>
	HAL_UART_Receive_IT(getUFP(), &cmd, 1);
 8001624:	f7ff fd74 	bl	8001110 <getUFP>
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <receiveIT+0x2c>)
 800162a:	2201      	movs	r2, #1
 800162c:	0019      	movs	r1, r3
 800162e:	f003 fc25 	bl	8004e7c <HAL_UART_Receive_IT>
// Downstream commands read new sensor values
#if (POSITION_SIDE == SIDE_RECEIVER)
	dfp_cmd = 0;
	HAL_UART_Receive_IT(getDFP(), &dfp_cmd, 1);
#endif
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20001cb5 	.word	0x20001cb5
 800163c:	20001cb6 	.word	0x20001cb6

08001640 <updateLEDs>:
	}
}

#if (POSITION_TYPE == TYPE_HUB)
// Returns whether LEDs should be updated
uint8_t updateLEDs() {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	if (update_leds) {
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <updateLEDs+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <updateLEDs+0x16>
		update_leds = 0;
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <updateLEDs+0x20>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
		return 1;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <updateLEDs+0x18>
	} else {
		return 0;
 8001656:	2300      	movs	r3, #0
	}
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	20001cb4 	.word	0x20001cb4

08001664 <cmdReady>:
#endif

uint8_t cmdReady() {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	return cmd_ready;
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <cmdReady+0x10>)
 800166a:	781b      	ldrb	r3, [r3, #0]
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	20001cb5 	.word	0x20001cb5

08001678 <sendACK>:

// Send ACK to UFP
void sendACK(UART_HandleTypeDef* huart) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	uint8_t data = ACK;
 8001680:	210f      	movs	r1, #15
 8001682:	187b      	adds	r3, r7, r1
 8001684:	222a      	movs	r2, #42	; 0x2a
 8001686:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &data, 1, SEND_TIMEOUT);
 8001688:	1879      	adds	r1, r7, r1
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	2302      	movs	r3, #2
 800168e:	2201      	movs	r2, #1
 8001690:	f003 fa56 	bl	8004b40 <HAL_UART_Transmit>
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}

0800169c <sendCommand>:

comm_stat_t sendCommand(UART_HandleTypeDef* huart, cmd_t cmd) {
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	000a      	movs	r2, r1
 80016a6:	1cfb      	adds	r3, r7, #3
 80016a8:	701a      	strb	r2, [r3, #0]
	// Retry if needed, then give up after too many attempts
	HAL_StatusTypeDef ret = HAL_ERROR;
 80016aa:	2317      	movs	r3, #23
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
	int numAttempts = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
	uint8_t rec = 0;
 80016b6:	230f      	movs	r3, #15
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 80016be:	e013      	b.n	80016e8 <sendCommand+0x4c>
		// Transmit command
		HAL_UART_Transmit(huart, &cmd, sizeof(cmd), SEND_TIMEOUT);
 80016c0:	1cf9      	adds	r1, r7, #3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	2302      	movs	r3, #2
 80016c6:	2201      	movs	r2, #1
 80016c8:	f003 fa3a 	bl	8004b40 <HAL_UART_Transmit>
		// Wait for ACK
		ret = HAL_UART_Receive(huart, &rec, sizeof(rec), ACK_TIMEOUT);
 80016cc:	2317      	movs	r3, #23
 80016ce:	18fc      	adds	r4, r7, r3
 80016d0:	230f      	movs	r3, #15
 80016d2:	18f9      	adds	r1, r7, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	2302      	movs	r3, #2
 80016d8:	2201      	movs	r2, #1
 80016da:	f003 fadd 	bl	8004c98 <HAL_UART_Receive>
 80016de:	0003      	movs	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
		numAttempts++;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	3301      	adds	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 80016e8:	2317      	movs	r3, #23
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <sendCommand+0x5c>
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	dde3      	ble.n	80016c0 <sendCommand+0x24>
	}
	if (rec != ACK) {
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001700:	d001      	beq.n	8001706 <sendCommand+0x6a>
		return COMM_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <sendCommand+0x6c>
	} else {
		return COMM_OK;
 8001706:	2300      	movs	r3, #0
	}
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b007      	add	sp, #28
 800170e:	bd90      	pop	{r4, r7, pc}

08001710 <processCommand>:
        * Only for receivers
    TODO: make these situations reality
*/

// Reads command from hub in order to see if action needs to be taken
HAL_StatusTypeDef processCommand() {
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8001716:	250f      	movs	r5, #15
 8001718:	197b      	adds	r3, r7, r5
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
	if (cmd == UPDATE_COMPLETE) {
 800171e:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <processCommand+0x1e4>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d14e      	bne.n	80017c4 <processCommand+0xb4>
		sendACK(getUFP());
 8001726:	f7ff fcf3 	bl	8001110 <getUFP>
 800172a:	0003      	movs	r3, r0
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff ffa3 	bl	8001678 <sendACK>
        #if (POSITION_SIDE == SIDE_EMITTER) 
		// Once update is complete, get sensor values from receiver hub
		ret = HAL_ERROR;
 8001732:	197b      	adds	r3, r7, r5
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
        comm_stat_t dfp_ret = sendCommand(getDFP(), SEND_SENSOR_DATA);
 8001738:	f7ff fcf2 	bl	8001120 <getDFP>
 800173c:	0003      	movs	r3, r0
 800173e:	1dfc      	adds	r4, r7, #7
 8001740:	2101      	movs	r1, #1
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff ffaa 	bl	800169c <sendCommand>
 8001748:	0003      	movs	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
        if (dfp_ret == COMM_OK) {
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11e      	bne.n	8001792 <processCommand+0x82>
			ret = HAL_UART_Receive(getDFP(), sensor_activations, sizeof(sensor_activations), SENSOR_UPDATE_TIMEOUT);
 8001754:	f7ff fce4 	bl	8001120 <getDFP>
 8001758:	197c      	adds	r4, r7, r5
 800175a:	4967      	ldr	r1, [pc, #412]	; (80018f8 <processCommand+0x1e8>)
 800175c:	234b      	movs	r3, #75	; 0x4b
 800175e:	2228      	movs	r2, #40	; 0x28
 8001760:	f003 fa9a 	bl	8004c98 <HAL_UART_Receive>
 8001764:	0003      	movs	r3, r0
 8001766:	7023      	strb	r3, [r4, #0]
		    // Update sense state so it is ready to return to hub when requested
		    // Sensors are activated if any sensor (individual bit) indicates that a sensor was activated
		    sense_state = OBJECT_NOT_SENSED;
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <processCommand+0x1ec>)
 800176a:	2260      	movs	r2, #96	; 0x60
 800176c:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < NUM_SENSORS; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	e00b      	b.n	800178c <processCommand+0x7c>
		    	if (sensor_activations[i] > 0) {
 8001774:	4a60      	ldr	r2, [pc, #384]	; (80018f8 <processCommand+0x1e8>)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	18d3      	adds	r3, r2, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <processCommand+0x76>
		    		sense_state = OBJECT_SENSED;
 8001780:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <processCommand+0x1ec>)
 8001782:	2245      	movs	r2, #69	; 0x45
 8001784:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < NUM_SENSORS; i++) {
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3301      	adds	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b27      	cmp	r3, #39	; 0x27
 8001790:	ddf0      	ble.n	8001774 <processCommand+0x64>
		    	}
		    }
        }
        // Tell receiver hub update is complete
        sendCommand(getDFP(), UPDATE_COMPLETE);
 8001792:	f7ff fcc5 	bl	8001120 <getDFP>
 8001796:	0003      	movs	r3, r0
 8001798:	2110      	movs	r1, #16
 800179a:	0018      	movs	r0, r3
 800179c:	f7ff ff7e 	bl	800169c <sendCommand>
        #endif
        // Hubs then display sense state
        #if (POSITION_TYPE == TYPE_HUB)
		// Update the LED strips if an object was sensed
		if (display_sense && sense_state == OBJECT_SENSED) {
 80017a0:	4b57      	ldr	r3, [pc, #348]	; (8001900 <processCommand+0x1f0>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d100      	bne.n	80017aa <processCommand+0x9a>
 80017a8:	e09c      	b.n	80018e4 <processCommand+0x1d4>
 80017aa:	4b54      	ldr	r3, [pc, #336]	; (80018fc <processCommand+0x1ec>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b45      	cmp	r3, #69	; 0x45
 80017b0:	d000      	beq.n	80017b4 <processCommand+0xa4>
 80017b2:	e097      	b.n	80018e4 <processCommand+0x1d4>
			clearLEDs();
 80017b4:	f7fe ff7c 	bl	80006b0 <clearLEDs>
			displaySense();
 80017b8:	f000 f904 	bl	80019c4 <displaySense>
		    update_leds = 1;
 80017bc:	4b51      	ldr	r3, [pc, #324]	; (8001904 <processCommand+0x1f4>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e08f      	b.n	80018e4 <processCommand+0x1d4>
        #endif
		//// Send LED values to receiver hub when update is complete
        //#if (POSITION_SIDE == SIDE_EMITTER) 
        //sendLEDData();
        //#endif       
	} else if (cmd == SEND_SENSOR_DATA) {
 80017c4:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <processCommand+0x1e4>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10b      	bne.n	80017e4 <processCommand+0xd4>
		    HAL_UART_Transmit(getUFP(), sensor_buf, NUM_SENSORS, SENSOR_UPDATE_TIMEOUT);
            #endif
        #else
            // Emitter side only sends if an object was sensed
		    // Send last known sense state back to hub
		    ret = HAL_UART_Transmit(getUFP(), &sense_state, sizeof(sense_state), SEND_TIMEOUT);
 80017cc:	f7ff fca0 	bl	8001110 <getUFP>
 80017d0:	230f      	movs	r3, #15
 80017d2:	18fc      	adds	r4, r7, r3
 80017d4:	4949      	ldr	r1, [pc, #292]	; (80018fc <processCommand+0x1ec>)
 80017d6:	2302      	movs	r3, #2
 80017d8:	2201      	movs	r2, #1
 80017da:	f003 f9b1 	bl	8004b40 <HAL_UART_Transmit>
 80017de:	0003      	movs	r3, r0
 80017e0:	7023      	strb	r3, [r4, #0]
 80017e2:	e07f      	b.n	80018e4 <processCommand+0x1d4>
			HAL_UART_Transmit(getUFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
		}
        #endif
#endif
#if (POSITION_TYPE == TYPE_HUB)         // Hub commands for sensors
	} else if (cmd == RECALIBRATE) {
 80017e4:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <processCommand+0x1e4>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d111      	bne.n	8001810 <processCommand+0x100>
		sendACK(getUFP());
 80017ec:	f7ff fc90 	bl	8001110 <getUFP>
 80017f0:	0003      	movs	r3, r0
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff ff40 	bl	8001678 <sendACK>
		// Pass command to downstream boards
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), cmd);
 80017f8:	f7ff fc92 	bl	8001120 <getDFP>
 80017fc:	0002      	movs	r2, r0
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <processCommand+0x1e4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0019      	movs	r1, r3
 8001804:	0010      	movs	r0, r2
 8001806:	f7ff ff49 	bl	800169c <sendCommand>
        #endif
		// recalibrate the sensors by clearing the history
		clearSensorHistory();
 800180a:	f000 f8bb 	bl	8001984 <clearSensorHistory>
 800180e:	e069      	b.n	80018e4 <processCommand+0x1d4>
	} else if (cmd == ENABLE_SENSE) {
 8001810:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <processCommand+0x1e4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d110      	bne.n	800183a <processCommand+0x12a>
		sendACK(getUFP());
 8001818:	f7ff fc7a 	bl	8001110 <getUFP>
 800181c:	0003      	movs	r3, r0
 800181e:	0018      	movs	r0, r3
 8001820:	f7ff ff2a 	bl	8001678 <sendACK>
		display_sense = 1;
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <processCommand+0x1f0>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), ENABLE_SENSE);
 800182a:	f7ff fc79 	bl	8001120 <getDFP>
 800182e:	0003      	movs	r3, r0
 8001830:	2112      	movs	r1, #18
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff ff32 	bl	800169c <sendCommand>
 8001838:	e054      	b.n	80018e4 <processCommand+0x1d4>
        #endif
	} else if (cmd == DISABLE_SENSE) {
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <processCommand+0x1e4>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b1b      	cmp	r3, #27
 8001840:	d110      	bne.n	8001864 <processCommand+0x154>
		sendACK(getUFP());
 8001842:	f7ff fc65 	bl	8001110 <getUFP>
 8001846:	0003      	movs	r3, r0
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff ff15 	bl	8001678 <sendACK>
		display_sense = 0;
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <processCommand+0x1f0>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), DISABLE_SENSE);
 8001854:	f7ff fc64 	bl	8001120 <getDFP>
 8001858:	0003      	movs	r3, r0
 800185a:	211b      	movs	r1, #27
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff ff1d 	bl	800169c <sendCommand>
 8001862:	e03f      	b.n	80018e4 <processCommand+0x1d4>
        #endif
#endif
#if (POSITION_TYPE == TYPE_HUB)         // Only hubs control LEDs
	} else if (cmd == CLEAR_LEDS) {
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <processCommand+0x1e4>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d114      	bne.n	8001896 <processCommand+0x186>
		sendACK(getUFP());
 800186c:	f7ff fc50 	bl	8001110 <getUFP>
 8001870:	0003      	movs	r3, r0
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff ff00 	bl	8001678 <sendACK>
		// Pass command to downstream boards
        #if (POSITION_SIDE == SIDE_EMITTER)
		sendCommand(getDFP(), cmd);
 8001878:	f7ff fc52 	bl	8001120 <getDFP>
 800187c:	0002      	movs	r2, r0
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <processCommand+0x1e4>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	0019      	movs	r1, r3
 8001884:	0010      	movs	r0, r2
 8001886:	f7ff ff09 	bl	800169c <sendCommand>
        #endif
		// Clear LEDs and update strips
		clearLEDs();
 800188a:	f7fe ff11 	bl	80006b0 <clearLEDs>
		// Set leds to update
		update_leds = 1;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <processCommand+0x1f4>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e026      	b.n	80018e4 <processCommand+0x1d4>
	} else if (cmd == SET_LED_VALS) {
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <processCommand+0x1e4>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b04      	cmp	r3, #4
 800189c:	d122      	bne.n	80018e4 <processCommand+0x1d4>
		// Begin waiting for LED data from UFP
		uint8_t info[2] = {0, 0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
		// Return an ACK to begin handshake
		sendACK(getUFP());
 80018a4:	f7ff fc34 	bl	8001110 <getUFP>
 80018a8:	0003      	movs	r3, r0
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff fee4 	bl	8001678 <sendACK>
		// Receive info about the data transfer
		HAL_UART_Receive(getUFP(), info, sizeof(info), INFO_TIMEOUT);
 80018b0:	f7ff fc2e 	bl	8001110 <getUFP>
 80018b4:	1d39      	adds	r1, r7, #4
 80018b6:	2305      	movs	r3, #5
 80018b8:	2202      	movs	r2, #2
 80018ba:	f003 f9ed 	bl	8004c98 <HAL_UART_Receive>
    #ifdef ANIMATION_BY_INDEX
        updateAnimation(info[0], info[1]);
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	785b      	ldrb	r3, [r3, #1]
 80018c6:	0019      	movs	r1, r3
 80018c8:	0010      	movs	r0, r2
 80018ca:	f7fe ffa1 	bl	8000810 <updateAnimation>
        update_leds = 1;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <processCommand+0x1f4>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
        // Pass led data onto receiver
        #if (POSITION_SIDE == SIDE_EMITTER)
            sendLEDInfo(info[0], info[1]);
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	0019      	movs	r1, r3
 80018de:	0010      	movs	r0, r2
 80018e0:	f000 f812 	bl	8001908 <sendLEDInfo>
		}
        // Then would pass data on to downstream board in UPDATE_COMPLETE command
    #endif
#endif
	}
	return ret;
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bdb0      	pop	{r4, r5, r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20001cb6 	.word	0x20001cb6
 80018f8:	20001d08 	.word	0x20001d08
 80018fc:	20001cb7 	.word	0x20001cb7
 8001900:	20000004 	.word	0x20000004
 8001904:	20001cb4 	.word	0x20001cb4

08001908 <sendLEDInfo>:
    First send command that LEDs are being updated
    Then send 2 byte sync information for the animations
        Byte 1: animation number
        Byte 2: index in animation
*/
comm_stat_t sendLEDInfo(uint8_t animation, uint8_t idx) {
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	0002      	movs	r2, r0
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	1dbb      	adds	r3, r7, #6
 8001916:	1c0a      	adds	r2, r1, #0
 8001918:	701a      	strb	r2, [r3, #0]
	// Format data
	uint8_t data[2] = {animation, idx};
 800191a:	250c      	movs	r5, #12
 800191c:	197b      	adds	r3, r7, r5
 800191e:	1dfa      	adds	r2, r7, #7
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	197b      	adds	r3, r7, r5
 8001926:	1dba      	adds	r2, r7, #6
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	705a      	strb	r2, [r3, #1]
    
	// Send request to update leds
	comm_stat_t status = sendCommand(getDFP(), SET_LED_VALS);
 800192c:	f7ff fbf8 	bl	8001120 <getDFP>
 8001930:	0003      	movs	r3, r0
 8001932:	260f      	movs	r6, #15
 8001934:	19bc      	adds	r4, r7, r6
 8001936:	2104      	movs	r1, #4
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff feaf 	bl	800169c <sendCommand>
 800193e:	0003      	movs	r3, r0
 8001940:	7023      	strb	r3, [r4, #0]
	// If successful, send data
	if (status == COMM_OK) {
 8001942:	19bb      	adds	r3, r7, r6
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <sendLEDInfo+0x50>
	    HAL_UART_Transmit_DMA(getDFP(), data, sizeof(data));
 800194a:	f7ff fbe9 	bl	8001120 <getDFP>
 800194e:	197b      	adds	r3, r7, r5
 8001950:	2202      	movs	r2, #2
 8001952:	0019      	movs	r1, r3
 8001954:	f003 fafc 	bl	8004f50 <HAL_UART_Transmit_DMA>
	}
    return status;
 8001958:	230f      	movs	r3, #15
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	781b      	ldrb	r3, [r3, #0]
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b005      	add	sp, #20
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001968 <HAL_UART_RxCpltCallback>:
	return status;
}
#endif

// Receive commands from hub
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	cmd_ready = 1;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_UART_RxCpltCallback+0x18>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	20001cb5 	.word	0x20001cb5

08001984 <clearSensorHistory>:

uint8_t min_readings[NUM_SENSORS];
uint8_t max_readings[NUM_SENSORS];
uint8_t sensor_activations[NUM_SENSORS];

void clearSensorHistory() {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_SENSORS; i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	e00c      	b.n	80019aa <clearSensorHistory+0x26>
		min_readings[i] = 255;
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <clearSensorHistory+0x38>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	701a      	strb	r2, [r3, #0]
		max_readings[i] = 50;
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <clearSensorHistory+0x3c>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	18d3      	adds	r3, r2, r3
 80019a0:	2232      	movs	r2, #50	; 0x32
 80019a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_SENSORS; i++) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3301      	adds	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b27      	cmp	r3, #39	; 0x27
 80019ae:	ddef      	ble.n	8001990 <clearSensorHistory+0xc>
	}
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	20001cb8 	.word	0x20001cb8
 80019c0:	20001ce0 	.word	0x20001ce0

080019c4 <displaySense>:
	}
}
#endif


void displaySense() {
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af02      	add	r7, sp, #8
    int extraLEDs = NUM_LEDS - NUM_SENSORS * (int) LEDS_PER_SENSOR;
 80019ca:	2308      	movs	r3, #8
 80019cc:	60fb      	str	r3, [r7, #12]
    int extraInterval = NUM_SENSORS / extraLEDs;
 80019ce:	68f9      	ldr	r1, [r7, #12]
 80019d0:	2028      	movs	r0, #40	; 0x28
 80019d2:	f7fe fc23 	bl	800021c <__divsi3>
 80019d6:	0003      	movs	r3, r0
 80019d8:	60bb      	str	r3, [r7, #8]
	// Iterate through each sensor
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e056      	b.n	8001a8e <displaySense+0xca>
		uint8_t r = 0;
 80019e0:	1cfb      	adds	r3, r7, #3
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
		uint8_t g = 0;
 80019e6:	1cbb      	adds	r3, r7, #2
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
		uint8_t b = 0;
 80019ec:	1c7b      	adds	r3, r7, #1
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
		// Determine if sensor is activated by reading the correct bit in the activation bitmap
		if (sensor_activations[sensor]) {
 80019f2:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <displaySense+0xdc>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	18d3      	adds	r3, r2, r3
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00e      	beq.n	8001a1c <displaySense+0x58>
			generateRGB_sense(sensor_activations[sensor], ON_TIME, 200, &r, &g, &b);
 80019fe:	4a28      	ldr	r2, [pc, #160]	; (8001aa0 <displaySense+0xdc>)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	18d3      	adds	r3, r2, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	0018      	movs	r0, r3
 8001a08:	1cfa      	adds	r2, r7, #3
 8001a0a:	1c7b      	adds	r3, r7, #1
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	1cbb      	adds	r3, r7, #2
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	0013      	movs	r3, r2
 8001a14:	22c8      	movs	r2, #200	; 0xc8
 8001a16:	2132      	movs	r1, #50	; 0x32
 8001a18:	f000 f844 	bl	8001aa4 <generateRGB_sense>
		}
		int startIndex = LEDS_PER_SENSOR * sensor + sensor / extraLEDs;
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	0013      	movs	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	189c      	adds	r4, r3, r2
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7fe fbf8 	bl	800021c <__divsi3>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < LEDS_PER_SENSOR; i++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e00e      	b.n	8001a56 <displaySense+0x92>
			setLED(startIndex + i, r, g, b);
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	18d3      	adds	r3, r2, r3
 8001a3e:	0018      	movs	r0, r3
 8001a40:	1cfb      	adds	r3, r7, #3
 8001a42:	7819      	ldrb	r1, [r3, #0]
 8001a44:	1cbb      	adds	r3, r7, #2
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	1c7b      	adds	r3, r7, #1
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f7fe fdfc 	bl	8000648 <setLED>
		for (int i = 0; i < LEDS_PER_SENSOR; i++) {
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	3301      	adds	r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	dded      	ble.n	8001a38 <displaySense+0x74>
		}
		// Control an additional LED if this sensor is mapped to an extra LED
		if (sensor % extraInterval == (extraInterval - 1)) {
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7fe fcc1 	bl	80003e8 <__aeabi_idivmod>
 8001a66:	000b      	movs	r3, r1
 8001a68:	001a      	movs	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d10a      	bne.n	8001a88 <displaySense+0xc4>
			setLED(startIndex + LEDS_PER_SENSOR, r, g, b);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3303      	adds	r3, #3
 8001a76:	0018      	movs	r0, r3
 8001a78:	1cfb      	adds	r3, r7, #3
 8001a7a:	7819      	ldrb	r1, [r3, #0]
 8001a7c:	1cbb      	adds	r3, r7, #2
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	1c7b      	adds	r3, r7, #1
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f7fe fde0 	bl	8000648 <setLED>
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b27      	cmp	r3, #39	; 0x27
 8001a92:	dda5      	ble.n	80019e0 <displaySense+0x1c>
		}
	}
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b007      	add	sp, #28
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	20001d08 	.word	0x20001d08

08001aa4 <generateRGB_sense>:


void generateRGB_sense(uint32_t index, uint32_t maxIndex, uint8_t brightness, uint8_t* r, uint8_t* g, uint8_t* b)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	701a      	strb	r2, [r3, #0]
//	{
//		*b = (uint8_t) cos1;
//	}

	// Choose one of 6 colors
	uint8_t div = maxIndex / 6;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2106      	movs	r1, #6
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7fe fb25 	bl	8000108 <__udivsi3>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	2117      	movs	r1, #23
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
	if (index < div) {
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20a      	bcs.n	8001ae8 <generateRGB_sense+0x44>
		*r = 0;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
		*g = brightness;
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	1dfa      	adds	r2, r7, #7
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
	} else {
		*r = 0;
		*g = brightness/2;
		*b = brightness/2;
	}
}
 8001ae6:	e068      	b.n	8001bba <generateRGB_sense+0x116>
	} else if (index < 2*div) {
 8001ae8:	2317      	movs	r3, #23
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	001a      	movs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d20f      	bcs.n	8001b18 <generateRGB_sense+0x74>
		*r = brightness/2;
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
}
 8001b16:	e050      	b.n	8001bba <generateRGB_sense+0x116>
	} else if (index < 3*div) {
 8001b18:	2317      	movs	r3, #23
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	0013      	movs	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	189b      	adds	r3, r3, r2
 8001b24:	001a      	movs	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d20a      	bcs.n	8001b42 <generateRGB_sense+0x9e>
		*r = brightness;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	1dfa      	adds	r2, r7, #7
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
		*b = 0;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
}
 8001b40:	e03b      	b.n	8001bba <generateRGB_sense+0x116>
	} else if (index < 4*div) {
 8001b42:	2317      	movs	r3, #23
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d20f      	bcs.n	8001b72 <generateRGB_sense+0xce>
		*r = brightness/2;
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	085b      	lsrs	r3, r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	701a      	strb	r2, [r3, #0]
}
 8001b70:	e023      	b.n	8001bba <generateRGB_sense+0x116>
	} else if (index < 5*div) {
 8001b72:	2317      	movs	r3, #23
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	0013      	movs	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	189b      	adds	r3, r3, r2
 8001b7e:	001a      	movs	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d20a      	bcs.n	8001b9c <generateRGB_sense+0xf8>
		*r = 0;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
		*g = 0;
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
		*b = brightness;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1dfa      	adds	r2, r7, #7
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
}
 8001b9a:	e00e      	b.n	8001bba <generateRGB_sense+0x116>
		*r = 0;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
		*g = brightness/2;
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	701a      	strb	r2, [r3, #0]
		*b = brightness/2;
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	701a      	strb	r2, [r3, #0]
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b006      	add	sp, #24
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bc8:	f7ff fd0a 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bf2:	f005 fc07 	bl	8007404 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bf6:	f7ff f845 	bl	8000c84 <main>

08001bfa <LoopForever>:

LoopForever:
  b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c08:	08007594 	.word	0x08007594
  ldr r2, =_sbss
 8001c0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c10:	20001d34 	.word	0x20001d34

08001c14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_COMP_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_Init+0x3c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_Init+0x3c>)
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	0049      	lsls	r1, r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f810 	bl	8001c58 <HAL_InitTick>
 8001c38:	1e03      	subs	r3, r0, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e001      	b.n	8001c48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff fa82 	bl	800114c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c48:	1dfb      	adds	r3, r7, #7
 8001c4a:	781b      	ldrb	r3, [r3, #0]
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	230f      	movs	r3, #15
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_InitTick+0x88>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02b      	beq.n	8001cc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_InitTick+0x8c>)
 8001c72:	681c      	ldr	r4, [r3, #0]
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_InitTick+0x88>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	0019      	movs	r1, r3
 8001c7a:	23fa      	movs	r3, #250	; 0xfa
 8001c7c:	0098      	lsls	r0, r3, #2
 8001c7e:	f7fe fa43 	bl	8000108 <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	0019      	movs	r1, r3
 8001c86:	0020      	movs	r0, r4
 8001c88:	f7fe fa3e 	bl	8000108 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 f92f 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d112      	bne.n	8001cbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d80a      	bhi.n	8001cb4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f000 f8fe 	bl	8001ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_InitTick+0x90>)
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e00d      	b.n	8001cd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e008      	b.n	8001cd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e003      	b.n	8001cd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b005      	add	sp, #20
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000008 	.word	0x20000008

08001cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	18d2      	adds	r2, r2, r3
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_IncTick+0x20>)
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	2000000c 	.word	0x2000000c
 8001d0c:	20001d30 	.word	0x20001d30

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_GetTick+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	20001d30 	.word	0x20001d30

08001d24 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b002      	add	sp, #8
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	fffff9ff 	.word	0xfffff9ff

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b7f      	cmp	r3, #127	; 0x7f
 8001d62:	d809      	bhi.n	8001d78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	001a      	movs	r2, r3
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_EnableIRQ+0x30>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	4091      	lsls	r1, r2
 8001d74:	000a      	movs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b7f      	cmp	r3, #127	; 0x7f
 8001d98:	d828      	bhi.n	8001dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <__NVIC_SetPriority+0xd4>)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	33c0      	adds	r3, #192	; 0xc0
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	1dfa      	adds	r2, r7, #7
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	0011      	movs	r1, r2
 8001db0:	2203      	movs	r2, #3
 8001db2:	400a      	ands	r2, r1
 8001db4:	00d2      	lsls	r2, r2, #3
 8001db6:	21ff      	movs	r1, #255	; 0xff
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	43d2      	mvns	r2, r2
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	22ff      	movs	r2, #255	; 0xff
 8001dc8:	401a      	ands	r2, r3
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	4003      	ands	r3, r0
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd8:	481f      	ldr	r0, [pc, #124]	; (8001e58 <__NVIC_SetPriority+0xd4>)
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	430a      	orrs	r2, r1
 8001de4:	33c0      	adds	r3, #192	; 0xc0
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dea:	e031      	b.n	8001e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <__NVIC_SetPriority+0xd8>)
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0019      	movs	r1, r3
 8001df4:	230f      	movs	r3, #15
 8001df6:	400b      	ands	r3, r1
 8001df8:	3b08      	subs	r3, #8
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3306      	adds	r3, #6
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1dfa      	adds	r2, r7, #7
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	400a      	ands	r2, r1
 8001e10:	00d2      	lsls	r2, r2, #3
 8001e12:	21ff      	movs	r1, #255	; 0xff
 8001e14:	4091      	lsls	r1, r2
 8001e16:	000a      	movs	r2, r1
 8001e18:	43d2      	mvns	r2, r2
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	22ff      	movs	r2, #255	; 0xff
 8001e24:	401a      	ands	r2, r3
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	4003      	ands	r3, r0
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <__NVIC_SetPriority+0xd8>)
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	001c      	movs	r4, r3
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	4023      	ands	r3, r4
 8001e40:	3b08      	subs	r3, #8
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	430a      	orrs	r2, r1
 8001e46:	3306      	adds	r3, #6
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	18c3      	adds	r3, r0, r3
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b003      	add	sp, #12
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	045b      	lsls	r3, r3, #17
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d301      	bcc.n	8001e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e74:	2301      	movs	r3, #1
 8001e76:	e010      	b.n	8001e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <SysTick_Config+0x44>)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e80:	2301      	movs	r3, #1
 8001e82:	425b      	negs	r3, r3
 8001e84:	2103      	movs	r1, #3
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff ff7c 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x44>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x44>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	1c02      	adds	r2, r0, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	0002      	movs	r2, r0
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ff33 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ffaf 	bl	8001e60 <SysTick_Config>
 8001f02:	0003      	movs	r3, r0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e077      	b.n	800200e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a3d      	ldr	r2, [pc, #244]	; (8002018 <HAL_DMA_Init+0x10c>)
 8001f24:	4694      	mov	ip, r2
 8001f26:	4463      	add	r3, ip
 8001f28:	2114      	movs	r1, #20
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f7fe f8ec 	bl	8000108 <__udivsi3>
 8001f30:	0003      	movs	r3, r0
 8001f32:	009a      	lsls	r2, r3, #2
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2225      	movs	r2, #37	; 0x25
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4934      	ldr	r1, [pc, #208]	; (800201c <HAL_DMA_Init+0x110>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 fa8d 	bl	80024a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	01db      	lsls	r3, r3, #7
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d102      	bne.n	8001fa0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	213f      	movs	r1, #63	; 0x3f
 8001faa:	400a      	ands	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fb6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d011      	beq.n	8001fe4 <HAL_DMA_Init+0xd8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d80d      	bhi.n	8001fe4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 fa98 	bl	8002500 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	e008      	b.n	8001ff6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2225      	movs	r2, #37	; 0x25
 8002000:	2101      	movs	r1, #1
 8002002:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	bffdfff8 	.word	0xbffdfff8
 800201c:	ffff800f 	.word	0xffff800f

08002020 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2317      	movs	r3, #23
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2224      	movs	r2, #36	; 0x24
 800203a:	5c9b      	ldrb	r3, [r3, r2]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_DMA_Start_IT+0x24>
 8002040:	2302      	movs	r3, #2
 8002042:	e06f      	b.n	8002124 <HAL_DMA_Start_IT+0x104>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	2101      	movs	r1, #1
 800204a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2225      	movs	r2, #37	; 0x25
 8002050:	5c9b      	ldrb	r3, [r3, r2]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d157      	bne.n	8002108 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2225      	movs	r2, #37	; 0x25
 800205c:	2102      	movs	r1, #2
 800205e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	438a      	bics	r2, r1
 8002074:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f9d3 	bl	8002428 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	210e      	movs	r1, #14
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e00f      	b.n	80020bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2104      	movs	r1, #4
 80020a8:	438a      	bics	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	210a      	movs	r1, #10
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	025b      	lsls	r3, r3, #9
 80020c6:	4013      	ands	r3, r2
 80020c8:	d008      	beq.n	80020dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0049      	lsls	r1, r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	0049      	lsls	r1, r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00a      	b.n	800211e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2224      	movs	r2, #36	; 0x24
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002116:	2317      	movs	r3, #23
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800211e:	2317      	movs	r3, #23
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	781b      	ldrb	r3, [r3, #0]
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b006      	add	sp, #24
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e050      	b.n	80021e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2225      	movs	r2, #37	; 0x25
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d008      	beq.n	800215c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2204      	movs	r2, #4
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2224      	movs	r2, #36	; 0x24
 8002154:	2100      	movs	r1, #0
 8002156:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e041      	b.n	80021e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	210e      	movs	r1, #14
 8002168:	438a      	bics	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	491c      	ldr	r1, [pc, #112]	; (80021e8 <HAL_DMA_Abort+0xbc>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	438a      	bics	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_DMA_Abort+0xc0>)
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	221c      	movs	r2, #28
 8002196:	4013      	ands	r3, r2
 8002198:	2201      	movs	r2, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_DMA_Abort+0xc0>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_DMA_Abort+0xbc>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80021cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2225      	movs	r2, #37	; 0x25
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	fffffeff 	.word	0xfffffeff
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	210f      	movs	r1, #15
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2225      	movs	r2, #37	; 0x25
 8002204:	5c9b      	ldrb	r3, [r3, r2]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d006      	beq.n	800221a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2204      	movs	r2, #4
 8002210:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002212:	187b      	adds	r3, r7, r1
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e049      	b.n	80022ae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	210e      	movs	r1, #14
 8002226:	438a      	bics	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	438a      	bics	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	491d      	ldr	r1, [pc, #116]	; (80022bc <HAL_DMA_Abort_IT+0xcc>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_DMA_Abort_IT+0xd0>)
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	221c      	movs	r2, #28
 8002254:	4013      	ands	r3, r2
 8002256:	2201      	movs	r2, #1
 8002258:	409a      	lsls	r2, r3
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_DMA_Abort_IT+0xd0>)
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002268:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	490f      	ldr	r1, [pc, #60]	; (80022bc <HAL_DMA_Abort_IT+0xcc>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800228a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2225      	movs	r2, #37	; 0x25
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	0010      	movs	r0, r2
 80022ac:	4798      	blx	r3
    }
  }
  return status;
 80022ae:	230f      	movs	r3, #15
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	781b      	ldrb	r3, [r3, #0]
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b004      	add	sp, #16
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	fffffeff 	.word	0xfffffeff
 80022c0:	40020000 	.word	0x40020000

080022c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80022cc:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HAL_DMA_IRQHandler+0x160>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	221c      	movs	r2, #28
 80022e0:	4013      	ands	r3, r2
 80022e2:	2204      	movs	r2, #4
 80022e4:	409a      	lsls	r2, r3
 80022e6:	0013      	movs	r3, r2
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4013      	ands	r3, r2
 80022ec:	d027      	beq.n	800233e <HAL_DMA_IRQHandler+0x7a>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2204      	movs	r2, #4
 80022f2:	4013      	ands	r3, r2
 80022f4:	d023      	beq.n	800233e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2220      	movs	r2, #32
 80022fe:	4013      	ands	r3, r2
 8002300:	d107      	bne.n	8002312 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2104      	movs	r1, #4
 800230e:	438a      	bics	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HAL_DMA_IRQHandler+0x160>)
 8002314:	6859      	ldr	r1, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	221c      	movs	r2, #28
 800231c:	4013      	ands	r3, r2
 800231e:	2204      	movs	r2, #4
 8002320:	409a      	lsls	r2, r3
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_DMA_IRQHandler+0x160>)
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2b00      	cmp	r3, #0
 800232e:	d100      	bne.n	8002332 <HAL_DMA_IRQHandler+0x6e>
 8002330:	e073      	b.n	800241a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	0010      	movs	r0, r2
 800233a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800233c:	e06d      	b.n	800241a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	221c      	movs	r2, #28
 8002344:	4013      	ands	r3, r2
 8002346:	2202      	movs	r2, #2
 8002348:	409a      	lsls	r2, r3
 800234a:	0013      	movs	r3, r2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	d02e      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xec>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d02a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2220      	movs	r2, #32
 8002362:	4013      	ands	r3, r2
 8002364:	d10b      	bne.n	800237e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	210a      	movs	r1, #10
 8002372:	438a      	bics	r2, r1
 8002374:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2225      	movs	r2, #37	; 0x25
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_DMA_IRQHandler+0x160>)
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	221c      	movs	r2, #28
 8002388:	4013      	ands	r3, r2
 800238a:	2202      	movs	r2, #2
 800238c:	409a      	lsls	r2, r3
 800238e:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_DMA_IRQHandler+0x160>)
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	2100      	movs	r1, #0
 800239a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d03a      	beq.n	800241a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	0010      	movs	r0, r2
 80023ac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80023ae:	e034      	b.n	800241a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	221c      	movs	r2, #28
 80023b6:	4013      	ands	r3, r2
 80023b8:	2208      	movs	r2, #8
 80023ba:	409a      	lsls	r2, r3
 80023bc:	0013      	movs	r3, r2
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	d02b      	beq.n	800241c <HAL_DMA_IRQHandler+0x158>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2208      	movs	r2, #8
 80023c8:	4013      	ands	r3, r2
 80023ca:	d027      	beq.n	800241c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	210e      	movs	r1, #14
 80023d8:	438a      	bics	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_DMA_IRQHandler+0x160>)
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	221c      	movs	r2, #28
 80023e6:	4013      	ands	r3, r2
 80023e8:	2201      	movs	r2, #1
 80023ea:	409a      	lsls	r2, r3
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_DMA_IRQHandler+0x160>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2225      	movs	r2, #37	; 0x25
 80023fc:	2101      	movs	r1, #1
 80023fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	0010      	movs	r0, r2
 8002418:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46c0      	nop			; (mov r8, r8)
}
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40020000 	.word	0x40020000

08002428 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800243e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002450:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <DMA_SetConfig+0x7c>)
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	221c      	movs	r2, #28
 800245c:	4013      	ands	r3, r2
 800245e:	2201      	movs	r2, #1
 8002460:	409a      	lsls	r2, r3
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <DMA_SetConfig+0x7c>)
 8002464:	430a      	orrs	r2, r1
 8002466:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b10      	cmp	r3, #16
 8002476:	d108      	bne.n	800248a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002488:	e007      	b.n	800249a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	60da      	str	r2, [r3, #12]
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40020000 	.word	0x40020000

080024a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80024b8:	4694      	mov	ip, r2
 80024ba:	4463      	add	r3, ip
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	001a      	movs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	001a      	movs	r2, r3
 80024ca:	23ff      	movs	r3, #255	; 0xff
 80024cc:	4013      	ands	r3, r2
 80024ce:	3b08      	subs	r3, #8
 80024d0:	2114      	movs	r1, #20
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7fd fe18 	bl	8000108 <__udivsi3>
 80024d8:	0003      	movs	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a07      	ldr	r2, [pc, #28]	; (80024fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80024e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	221f      	movs	r2, #31
 80024e6:	4013      	ands	r3, r2
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b004      	add	sp, #16
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	10008200 	.word	0x10008200
 80024fc:	40020880 	.word	0x40020880

08002500 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	001a      	movs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3b01      	subs	r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	4013      	ands	r3, r2
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b004      	add	sp, #16
 800253e:	bd80      	pop	{r7, pc}
 8002540:	1000823f 	.word	0x1000823f
 8002544:	40020940 	.word	0x40020940

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	e147      	b.n	80027e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4091      	lsls	r1, r2
 8002562:	000a      	movs	r2, r1
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <HAL_GPIO_Init+0x28>
 800256e:	e138      	b.n	80027e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2203      	movs	r2, #3
 8002576:	4013      	ands	r3, r2
 8002578:	2b01      	cmp	r3, #1
 800257a:	d005      	beq.n	8002588 <HAL_GPIO_Init+0x40>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	4013      	ands	r3, r2
 8002584:	2b02      	cmp	r3, #2
 8002586:	d130      	bne.n	80025ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	409a      	lsls	r2, r3
 8002596:	0013      	movs	r3, r2
 8002598:	43da      	mvns	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	409a      	lsls	r2, r3
 80025aa:	0013      	movs	r3, r2
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025be:	2201      	movs	r2, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	43da      	mvns	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	2201      	movs	r2, #1
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
 80025dc:	0013      	movs	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2203      	movs	r2, #3
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d017      	beq.n	8002626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	43da      	mvns	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2203      	movs	r2, #3
 800262c:	4013      	ands	r3, r2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d123      	bne.n	800267a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	58d3      	ldr	r3, [r2, r3]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2207      	movs	r2, #7
 8002644:	4013      	ands	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	409a      	lsls	r2, r3
 800264c:	0013      	movs	r3, r2
 800264e:	43da      	mvns	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2107      	movs	r1, #7
 800265e:	400b      	ands	r3, r1
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	409a      	lsls	r2, r3
 8002664:	0013      	movs	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	6939      	ldr	r1, [r7, #16]
 8002678:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2203      	movs	r2, #3
 8002698:	401a      	ands	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	23c0      	movs	r3, #192	; 0xc0
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_GPIO_Init+0x174>
 80026ba:	e092      	b.n	80027e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80026bc:	4a50      	ldr	r2, [pc, #320]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3318      	adds	r3, #24
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	589b      	ldr	r3, [r3, r2]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2203      	movs	r2, #3
 80026ce:	4013      	ands	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	220f      	movs	r2, #15
 80026d4:	409a      	lsls	r2, r3
 80026d6:	0013      	movs	r3, r2
 80026d8:	43da      	mvns	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	23a0      	movs	r3, #160	; 0xa0
 80026e4:	05db      	lsls	r3, r3, #23
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x1ca>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a45      	ldr	r2, [pc, #276]	; (8002804 <HAL_GPIO_Init+0x2bc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x1c6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a44      	ldr	r2, [pc, #272]	; (8002808 <HAL_GPIO_Init+0x2c0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x1c2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a43      	ldr	r2, [pc, #268]	; (800280c <HAL_GPIO_Init+0x2c4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x1be>
 8002702:	2303      	movs	r3, #3
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x1cc>
 8002706:	2305      	movs	r3, #5
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x1cc>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x1cc>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x1cc>
 8002712:	2300      	movs	r3, #0
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	2103      	movs	r1, #3
 8002718:	400a      	ands	r2, r1
 800271a:	00d2      	lsls	r2, r2, #3
 800271c:	4093      	lsls	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002724:	4936      	ldr	r1, [pc, #216]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3318      	adds	r3, #24
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43da      	mvns	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	035b      	lsls	r3, r3, #13
 800274a:	4013      	ands	r3, r2
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43da      	mvns	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	039b      	lsls	r3, r3, #14
 8002774:	4013      	ands	r3, r2
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002786:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 8002788:	2384      	movs	r3, #132	; 0x84
 800278a:	58d3      	ldr	r3, [r2, r3]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43da      	mvns	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027ac:	4914      	ldr	r1, [pc, #80]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 80027ae:	2284      	movs	r2, #132	; 0x84
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	58d3      	ldr	r3, [r2, r3]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43da      	mvns	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	025b      	lsls	r3, r3, #9
 80027ce:	4013      	ands	r3, r2
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027da:	4909      	ldr	r1, [pc, #36]	; (8002800 <HAL_GPIO_Init+0x2b8>)
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3301      	adds	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	40da      	lsrs	r2, r3
 80027f0:	1e13      	subs	r3, r2, #0
 80027f2:	d000      	beq.n	80027f6 <HAL_GPIO_Init+0x2ae>
 80027f4:	e6b0      	b.n	8002558 <HAL_GPIO_Init+0x10>
  }
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b006      	add	sp, #24
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021800 	.word	0x40021800
 8002804:	50000400 	.word	0x50000400
 8002808:	50000800 	.word	0x50000800
 800280c:	50000c00 	.word	0x50000c00

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	0008      	movs	r0, r1
 800281a:	0011      	movs	r1, r2
 800281c:	1cbb      	adds	r3, r7, #2
 800281e:	1c02      	adds	r2, r0, #0
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	1c7b      	adds	r3, r7, #1
 8002824:	1c0a      	adds	r2, r1, #0
 8002826:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002828:	1c7b      	adds	r3, r7, #1
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800283a:	1cbb      	adds	r3, r7, #2
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d11f      	bne.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	0013      	movs	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	189b      	adds	r3, r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4912      	ldr	r1, [pc, #72]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800287e:	0018      	movs	r0, r3
 8002880:	f7fd fc42 	bl	8000108 <__udivsi3>
 8002884:	0003      	movs	r3, r0
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800288a:	e008      	b.n	800289e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3b01      	subs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e001      	b.n	800289e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e009      	b.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	401a      	ands	r2, r3
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d0ed      	beq.n	800288c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b004      	add	sp, #16
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	40007000 	.word	0x40007000
 80028c0:	fffff9ff 	.word	0xfffff9ff
 80028c4:	20000000 	.word	0x20000000
 80028c8:	000f4240 	.word	0x000f4240

080028cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	23e0      	movs	r3, #224	; 0xe0
 80028d6:	01db      	lsls	r3, r3, #7
 80028d8:	4013      	ands	r3, r2
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e2fe      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d100      	bne.n	8002902 <HAL_RCC_OscConfig+0x1e>
 8002900:	e07c      	b.n	80029fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002902:	4bc3      	ldr	r3, [pc, #780]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2238      	movs	r2, #56	; 0x38
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800290c:	4bc0      	ldr	r3, [pc, #768]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2203      	movs	r2, #3
 8002912:	4013      	ands	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b10      	cmp	r3, #16
 800291a:	d102      	bne.n	8002922 <HAL_RCC_OscConfig+0x3e>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d002      	beq.n	8002928 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d10b      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	4bb9      	ldr	r3, [pc, #740]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	029b      	lsls	r3, r3, #10
 8002930:	4013      	ands	r3, r2
 8002932:	d062      	beq.n	80029fa <HAL_RCC_OscConfig+0x116>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d15e      	bne.n	80029fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e2d9      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	025b      	lsls	r3, r3, #9
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x78>
 800294c:	4bb0      	ldr	r3, [pc, #704]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4baf      	ldr	r3, [pc, #700]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	0249      	lsls	r1, r1, #9
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e020      	b.n	800299e <HAL_RCC_OscConfig+0xba>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	23a0      	movs	r3, #160	; 0xa0
 8002962:	02db      	lsls	r3, r3, #11
 8002964:	429a      	cmp	r2, r3
 8002966:	d10e      	bne.n	8002986 <HAL_RCC_OscConfig+0xa2>
 8002968:	4ba9      	ldr	r3, [pc, #676]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4ba8      	ldr	r3, [pc, #672]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	02c9      	lsls	r1, r1, #11
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	4ba6      	ldr	r3, [pc, #664]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4ba5      	ldr	r3, [pc, #660]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	0249      	lsls	r1, r1, #9
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e00b      	b.n	800299e <HAL_RCC_OscConfig+0xba>
 8002986:	4ba2      	ldr	r3, [pc, #648]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4ba1      	ldr	r3, [pc, #644]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 800298c:	49a1      	ldr	r1, [pc, #644]	; (8002c14 <HAL_RCC_OscConfig+0x330>)
 800298e:	400a      	ands	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4b9f      	ldr	r3, [pc, #636]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b9e      	ldr	r3, [pc, #632]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002998:	499f      	ldr	r1, [pc, #636]	; (8002c18 <HAL_RCC_OscConfig+0x334>)
 800299a:	400a      	ands	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d014      	beq.n	80029d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7ff f9b3 	bl	8001d10 <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7ff f9ae 	bl	8001d10 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e298      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c2:	4b93      	ldr	r3, [pc, #588]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0xcc>
 80029ce:	e015      	b.n	80029fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7ff f99e 	bl	8001d10 <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029da:	f7ff f999 	bl	8001d10 <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	; 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e283      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	029b      	lsls	r3, r3, #10
 80029f4:	4013      	ands	r3, r2
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0xf6>
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d100      	bne.n	8002a08 <HAL_RCC_OscConfig+0x124>
 8002a06:	e099      	b.n	8002b3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a08:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2238      	movs	r2, #56	; 0x38
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a12:	4b7f      	ldr	r3, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2203      	movs	r2, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_OscConfig+0x144>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d002      	beq.n	8002a2e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d135      	bne.n	8002a9a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2e:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4013      	ands	r3, r2
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x162>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e256      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a74      	ldr	r2, [pc, #464]	; (8002c1c <HAL_RCC_OscConfig+0x338>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	4b6e      	ldr	r3, [pc, #440]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d112      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a62:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6e      	ldr	r2, [pc, #440]	; (8002c20 <HAL_RCC_OscConfig+0x33c>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0adb      	lsrs	r3, r3, #11
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	4013      	ands	r3, r2
 8002a80:	4a68      	ldr	r2, [pc, #416]	; (8002c24 <HAL_RCC_OscConfig+0x340>)
 8002a82:	40da      	lsrs	r2, r3
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <HAL_RCC_OscConfig+0x344>)
 8002a86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a88:	4b68      	ldr	r3, [pc, #416]	; (8002c2c <HAL_RCC_OscConfig+0x348>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff f8e3 	bl	8001c58 <HAL_InitTick>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d051      	beq.n	8002b3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e22c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d030      	beq.n	8002b04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002aa2:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5e      	ldr	r2, [pc, #376]	; (8002c20 <HAL_RCC_OscConfig+0x33c>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	4b57      	ldr	r3, [pc, #348]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002ab6:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	0049      	lsls	r1, r1, #1
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f924 	bl	8001d10 <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff f91f 	bl	8001d10 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e209      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a4a      	ldr	r2, [pc, #296]	; (8002c1c <HAL_RCC_OscConfig+0x338>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	021a      	lsls	r2, r3, #8
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	e01b      	b.n	8002b3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b0a:	4949      	ldr	r1, [pc, #292]	; (8002c30 <HAL_RCC_OscConfig+0x34c>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7ff f8fe 	bl	8001d10 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7ff f8f9 	bl	8001d10 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1e3      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b2c:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4013      	ands	r3, r2
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x236>
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2208      	movs	r2, #8
 8002b42:	4013      	ands	r3, r2
 8002b44:	d047      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2238      	movs	r2, #56	; 0x38
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b18      	cmp	r3, #24
 8002b50:	d10a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d03c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2f2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d138      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e1c5      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d019      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f8c8 	bl	8001d10 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b86:	f7ff f8c3 	bl	8001d10 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1ad      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d0f1      	beq.n	8002b86 <HAL_RCC_OscConfig+0x2a2>
 8002ba2:	e018      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002ba6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	438a      	bics	r2, r1
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f8ae 	bl	8001d10 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff f8a9 	bl	8001d10 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e193      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d1f1      	bne.n	8002bba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d100      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2fe>
 8002be0:	e0c6      	b.n	8002d70 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	231f      	movs	r3, #31
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2238      	movs	r2, #56	; 0x38
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d11e      	bne.n	8002c34 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_OscConfig+0x32c>)
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_RCC_OscConfig+0x31e>
 8002c00:	e0b6      	b.n	8002d70 <HAL_RCC_OscConfig+0x48c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d000      	beq.n	8002c0c <HAL_RCC_OscConfig+0x328>
 8002c0a:	e0b1      	b.n	8002d70 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e171      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	fffeffff 	.word	0xfffeffff
 8002c18:	fffbffff 	.word	0xfffbffff
 8002c1c:	ffff80ff 	.word	0xffff80ff
 8002c20:	ffffc7ff 	.word	0xffffc7ff
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c34:	4bb1      	ldr	r3, [pc, #708]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_OscConfig+0x360>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x362>
 8002c44:	2300      	movs	r3, #0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d011      	beq.n	8002c6e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4bac      	ldr	r3, [pc, #688]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4e:	4bab      	ldr	r3, [pc, #684]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0549      	lsls	r1, r1, #21
 8002c54:	430a      	orrs	r2, r1
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c58:	4ba8      	ldr	r3, [pc, #672]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	055b      	lsls	r3, r3, #21
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c66:	231f      	movs	r3, #31
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6e:	4ba4      	ldr	r3, [pc, #656]	; (8002f00 <HAL_RCC_OscConfig+0x61c>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	d11a      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7a:	4ba1      	ldr	r3, [pc, #644]	; (8002f00 <HAL_RCC_OscConfig+0x61c>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4ba0      	ldr	r3, [pc, #640]	; (8002f00 <HAL_RCC_OscConfig+0x61c>)
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	0049      	lsls	r1, r1, #1
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002c88:	f7ff f842 	bl	8001d10 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7ff f83d 	bl	8001d10 <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e127      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCC_OscConfig+0x61c>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3e2>
 8002cb8:	4b90      	ldr	r3, [pc, #576]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cbc:	4b8f      	ldr	r3, [pc, #572]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cc4:	e01c      	b.n	8002d00 <HAL_RCC_OscConfig+0x41c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x404>
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd2:	4b8a      	ldr	r3, [pc, #552]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cde:	4b87      	ldr	r3, [pc, #540]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0x41c>
 8002ce8:	4b84      	ldr	r3, [pc, #528]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cec:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cf4:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf8:	4b80      	ldr	r3, [pc, #512]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d014      	beq.n	8002d32 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7ff f802 	bl	8001d10 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe fffd 	bl	8001d10 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <HAL_RCC_OscConfig+0x620>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e0e6      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d26:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x42e>
 8002d30:	e013      	b.n	8002d5a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe ffed 	bl	8001d10 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d3a:	e009      	b.n	8002d50 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fe ffe8 	bl	8001d10 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	4a6f      	ldr	r2, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x620>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0d1      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	2202      	movs	r2, #2
 8002d56:	4013      	ands	r3, r2
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d5a:	231f      	movs	r3, #31
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d68:	4b64      	ldr	r3, [pc, #400]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002d6a:	4967      	ldr	r1, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x624>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d100      	bne.n	8002d7a <HAL_RCC_OscConfig+0x496>
 8002d78:	e0bb      	b.n	8002ef2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7a:	4b60      	ldr	r3, [pc, #384]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2238      	movs	r2, #56	; 0x38
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d100      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4a4>
 8002d86:	e07b      	b.n	8002e80 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d156      	bne.n	8002e3e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002d96:	495d      	ldr	r1, [pc, #372]	; (8002f0c <HAL_RCC_OscConfig+0x628>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe ffb8 	bl	8001d10 <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe ffb3 	bl	8001d10 <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e09d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	049b      	lsls	r3, r3, #18
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a51      	ldr	r2, [pc, #324]	; (8002f10 <HAL_RCC_OscConfig+0x62c>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1a      	ldr	r2, [r3, #32]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	431a      	orrs	r2, r3
 8002df2:	4b42      	ldr	r3, [pc, #264]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002df4:	430a      	orrs	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	0449      	lsls	r1, r1, #17
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0549      	lsls	r1, r1, #21
 8002e10:	430a      	orrs	r2, r1
 8002e12:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe ff7c 	bl	8001d10 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe ff77 	bl	8001d10 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e061      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	049b      	lsls	r3, r3, #18
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x53a>
 8002e3c:	e059      	b.n	8002ef2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e44:	4931      	ldr	r1, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0x628>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe ff61 	bl	8001d10 <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe ff5c 	bl	8001d10 <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e046      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	049b      	lsls	r3, r3, #18
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e78:	4926      	ldr	r1, [pc, #152]	; (8002f14 <HAL_RCC_OscConfig+0x630>)
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e038      	b.n	8002ef2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e033      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x618>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2203      	movs	r2, #3
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d126      	bne.n	8002eee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2270      	movs	r2, #112	; 0x70
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11f      	bne.n	8002eee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	23fe      	movs	r3, #254	; 0xfe
 8002eb2:	01db      	lsls	r3, r3, #7
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d116      	bne.n	8002eee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	23f8      	movs	r3, #248	; 0xf8
 8002ec4:	039b      	lsls	r3, r3, #14
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d10e      	bne.n	8002eee <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	23e0      	movs	r3, #224	; 0xe0
 8002ed4:	051b      	lsls	r3, r3, #20
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	0f5b      	lsrs	r3, r3, #29
 8002ee4:	075a      	lsls	r2, r3, #29
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b008      	add	sp, #32
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	00001388 	.word	0x00001388
 8002f08:	efffffff 	.word	0xefffffff
 8002f0c:	feffffff 	.word	0xfeffffff
 8002f10:	11c1808c 	.word	0x11c1808c
 8002f14:	eefefffc 	.word	0xeefefffc

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0e9      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2207      	movs	r2, #7
 8002f32:	4013      	ands	r3, r2
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d91e      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2207      	movs	r2, #7
 8002f40:	4393      	bics	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	4b70      	ldr	r3, [pc, #448]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fee0 	bl	8001d10 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f54:	e009      	b.n	8002f6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f56:	f7fe fedb 	bl	8001d10 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	4a6a      	ldr	r2, [pc, #424]	; (800310c <HAL_RCC_ClockConfig+0x1f4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0ca      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2207      	movs	r2, #7
 8002f70:	4013      	ands	r3, r2
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d015      	beq.n	8002fae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2204      	movs	r2, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d006      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f8c:	4b60      	ldr	r3, [pc, #384]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8002f92:	21e0      	movs	r1, #224	; 0xe0
 8002f94:	01c9      	lsls	r1, r1, #7
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a5d      	ldr	r2, [pc, #372]	; (8003114 <HAL_RCC_ClockConfig+0x1fc>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b59      	ldr	r3, [pc, #356]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d057      	beq.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d12b      	bne.n	8003024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e097      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	049b      	lsls	r3, r3, #18
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d11f      	bne.n	8003024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e08b      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff0:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d113      	bne.n	8003024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e07f      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d106      	bne.n	8003016 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003008:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 800300a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300c:	2202      	movs	r2, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d108      	bne.n	8003024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e074      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	2202      	movs	r2, #2
 800301c:	4013      	ands	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e06d      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2207      	movs	r2, #7
 800302a:	4393      	bics	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7fe fe6a 	bl	8001d10 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003040:	e009      	b.n	8003056 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003042:	f7fe fe65 	bl	8001d10 <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	4a2f      	ldr	r2, [pc, #188]	; (800310c <HAL_RCC_ClockConfig+0x1f4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e054      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2238      	movs	r2, #56	; 0x38
 800305c:	401a      	ands	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	429a      	cmp	r2, r3
 8003066:	d1ec      	bne.n	8003042 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2207      	movs	r2, #7
 800306e:	4013      	ands	r3, r2
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d21e      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2207      	movs	r2, #7
 800307c:	4393      	bics	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003088:	f7fe fe42 	bl	8001d10 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003092:	f7fe fe3d 	bl	8001d10 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_RCC_ClockConfig+0x1f4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e02c      	b.n	8003100 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2207      	movs	r2, #7
 80030ac:	4013      	ands	r3, r2
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d1ee      	bne.n	8003092 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2204      	movs	r2, #4
 80030ba:	4013      	ands	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_RCC_ClockConfig+0x200>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80030d2:	f000 f829 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030d6:	0001      	movs	r1, r0
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_RCC_ClockConfig+0x1f8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	220f      	movs	r2, #15
 80030e0:	401a      	ands	r2, r3
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_RCC_ClockConfig+0x204>)
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	58d3      	ldr	r3, [r2, r3]
 80030e8:	221f      	movs	r2, #31
 80030ea:	4013      	ands	r3, r2
 80030ec:	000a      	movs	r2, r1
 80030ee:	40da      	lsrs	r2, r3
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x208>)
 80030f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x20c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7fe fdad 	bl	8001c58 <HAL_InitTick>
 80030fe:	0003      	movs	r3, r0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b004      	add	sp, #16
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40022000 	.word	0x40022000
 800310c:	00001388 	.word	0x00001388
 8003110:	40021000 	.word	0x40021000
 8003114:	fffff0ff 	.word	0xfffff0ff
 8003118:	ffff8fff 	.word	0xffff8fff
 800311c:	080074a8 	.word	0x080074a8
 8003120:	20000000 	.word	0x20000000
 8003124:	20000008 	.word	0x20000008

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800312e:	4b3c      	ldr	r3, [pc, #240]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2238      	movs	r2, #56	; 0x38
 8003134:	4013      	ands	r3, r2
 8003136:	d10f      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0adb      	lsrs	r3, r3, #11
 800313e:	2207      	movs	r2, #7
 8003140:	4013      	ands	r3, r2
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	0013      	movs	r3, r2
 8003148:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	4835      	ldr	r0, [pc, #212]	; (8003224 <HAL_RCC_GetSysClockFreq+0xfc>)
 800314e:	f7fc ffdb 	bl	8000108 <__udivsi3>
 8003152:	0003      	movs	r3, r0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e05d      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003158:	4b31      	ldr	r3, [pc, #196]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2238      	movs	r2, #56	; 0x38
 800315e:	4013      	ands	r3, r2
 8003160:	2b08      	cmp	r3, #8
 8003162:	d102      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <HAL_RCC_GetSysClockFreq+0x100>)
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e054      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2238      	movs	r2, #56	; 0x38
 8003170:	4013      	ands	r3, r2
 8003172:	2b10      	cmp	r3, #16
 8003174:	d138      	bne.n	80031e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003176:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2203      	movs	r2, #3
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	2207      	movs	r2, #7
 8003188:	4013      	ands	r3, r2
 800318a:	3301      	adds	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d10d      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4824      	ldr	r0, [pc, #144]	; (8003228 <HAL_RCC_GetSysClockFreq+0x100>)
 8003198:	f7fc ffb6 	bl	8000108 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	0019      	movs	r1, r3
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	227f      	movs	r2, #127	; 0x7f
 80031a8:	4013      	ands	r3, r2
 80031aa:	434b      	muls	r3, r1
 80031ac:	617b      	str	r3, [r7, #20]
        break;
 80031ae:	e00d      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	481c      	ldr	r0, [pc, #112]	; (8003224 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031b4:	f7fc ffa8 	bl	8000108 <__udivsi3>
 80031b8:	0003      	movs	r3, r0
 80031ba:	0019      	movs	r1, r3
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	227f      	movs	r2, #127	; 0x7f
 80031c4:	4013      	ands	r3, r2
 80031c6:	434b      	muls	r3, r1
 80031c8:	617b      	str	r3, [r7, #20]
        break;
 80031ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0f5b      	lsrs	r3, r3, #29
 80031d2:	2207      	movs	r2, #7
 80031d4:	4013      	ands	r3, r2
 80031d6:	3301      	adds	r3, #1
 80031d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	6978      	ldr	r0, [r7, #20]
 80031de:	f7fc ff93 	bl	8000108 <__udivsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e015      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031e8:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2238      	movs	r2, #56	; 0x38
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d103      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2238      	movs	r2, #56	; 0x38
 8003202:	4013      	ands	r3, r2
 8003204:	2b18      	cmp	r3, #24
 8003206:	d103      	bne.n	8003210 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003208:	23fa      	movs	r3, #250	; 0xfa
 800320a:	01db      	lsls	r3, r3, #7
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e001      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003214:	693b      	ldr	r3, [r7, #16]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b006      	add	sp, #24
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	40021000 	.word	0x40021000
 8003224:	00f42400 	.word	0x00f42400
 8003228:	007a1200 	.word	0x007a1200

0800322c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <HAL_RCC_GetHCLKFreq+0x10>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003244:	f7ff fff2 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003248:	0004      	movs	r4, r0
 800324a:	f7ff fb3f 	bl	80028cc <LL_RCC_GetAPB1Prescaler>
 800324e:	0003      	movs	r3, r0
 8003250:	0b1a      	lsrs	r2, r3, #12
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003254:	0092      	lsls	r2, r2, #2
 8003256:	58d3      	ldr	r3, [r2, r3]
 8003258:	221f      	movs	r2, #31
 800325a:	4013      	ands	r3, r2
 800325c:	40dc      	lsrs	r4, r3
 800325e:	0023      	movs	r3, r4
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	bdb0      	pop	{r4, r5, r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	080074e8 	.word	0x080074e8

0800326c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003274:	2313      	movs	r3, #19
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800327c:	2312      	movs	r3, #18
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	4013      	ands	r3, r2
 800328e:	d100      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003290:	e0ad      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2011      	movs	r0, #17
 8003294:	183b      	adds	r3, r7, r0
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800329c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	055b      	lsls	r3, r3, #21
 80032a2:	4013      	ands	r3, r2
 80032a4:	d110      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032aa:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	0549      	lsls	r1, r1, #21
 80032b0:	430a      	orrs	r2, r1
 80032b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	055b      	lsls	r3, r3, #21
 80032bc:	4013      	ands	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c2:	183b      	adds	r3, r7, r0
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c8:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80032ce:	2180      	movs	r1, #128	; 0x80
 80032d0:	0049      	lsls	r1, r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d6:	f7fe fd1b 	bl	8001d10 <HAL_GetTick>
 80032da:	0003      	movs	r3, r0
 80032dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032de:	e00b      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fe fd16 	bl	8001d10 <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d904      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80032ee:	2313      	movs	r3, #19
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2203      	movs	r2, #3
 80032f4:	701a      	strb	r2, [r3, #0]
        break;
 80032f6:	e005      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f8:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4013      	ands	r3, r2
 8003302:	d0ed      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003304:	2313      	movs	r3, #19
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d15e      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003312:	23c0      	movs	r3, #192	; 0xc0
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4013      	ands	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d019      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	429a      	cmp	r2, r3
 8003328:	d014      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003330:	4013      	ands	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	0249      	lsls	r1, r1, #9
 800333e:	430a      	orrs	r2, r1
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003348:	491e      	ldr	r1, [pc, #120]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800334a:	400a      	ands	r2, r1
 800334c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800334e:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2201      	movs	r2, #1
 8003358:	4013      	ands	r3, r2
 800335a:	d016      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fcd8 	bl	8001d10 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003364:	e00c      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe fcd3 	bl	8001d10 <HAL_GetTick>
 800336a:	0002      	movs	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d904      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003376:	2313      	movs	r3, #19
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2203      	movs	r2, #3
 800337c:	701a      	strb	r2, [r3, #0]
            break;
 800337e:	e004      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	2202      	movs	r2, #2
 8003386:	4013      	ands	r3, r2
 8003388:	d0ed      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800338a:	2313      	movs	r3, #19
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033a4:	430a      	orrs	r2, r1
 80033a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033a8:	e016      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033aa:	2312      	movs	r3, #18
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2213      	movs	r2, #19
 80033b0:	18ba      	adds	r2, r7, r2
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e00f      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40007000 	.word	0x40007000
 80033c0:	fffffcff 	.word	0xfffffcff
 80033c4:	fffeffff 	.word	0xfffeffff
 80033c8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	2312      	movs	r3, #18
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	2213      	movs	r2, #19
 80033d2:	18ba      	adds	r2, r7, r2
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d8:	2311      	movs	r3, #17
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e2:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80033e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e6:	4b83      	ldr	r3, [pc, #524]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80033e8:	4983      	ldr	r1, [pc, #524]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	2203      	movs	r2, #3
 80033fe:	4393      	bics	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4b7b      	ldr	r3, [pc, #492]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003408:	430a      	orrs	r2, r1
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2202      	movs	r2, #2
 8003412:	4013      	ands	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003416:	4b77      	ldr	r3, [pc, #476]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	220c      	movs	r2, #12
 800341c:	4393      	bics	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003426:	430a      	orrs	r2, r1
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2210      	movs	r2, #16
 8003430:	4013      	ands	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003434:	4b6f      	ldr	r3, [pc, #444]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	4a70      	ldr	r2, [pc, #448]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003444:	430a      	orrs	r2, r1
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4013      	ands	r3, r2
 8003452:	d009      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003454:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	4a69      	ldr	r2, [pc, #420]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800345a:	4013      	ands	r3, r2
 800345c:	0019      	movs	r1, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	4b64      	ldr	r3, [pc, #400]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003464:	430a      	orrs	r2, r1
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4013      	ands	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003474:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	4a62      	ldr	r2, [pc, #392]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	4b5c      	ldr	r3, [pc, #368]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003484:	430a      	orrs	r2, r1
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2220      	movs	r2, #32
 800348e:	4013      	ands	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003492:	4b58      	ldr	r3, [pc, #352]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	4a5c      	ldr	r2, [pc, #368]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	4b54      	ldr	r3, [pc, #336]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80034a2:	430a      	orrs	r2, r1
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	02db      	lsls	r3, r3, #11
 80034ae:	4013      	ands	r3, r2
 80034b0:	d016      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034b2:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	4b4c      	ldr	r3, [pc, #304]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80034c2:	430a      	orrs	r2, r1
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1a      	ldr	r2, [r3, #32]
 80034ca:	23c0      	movs	r3, #192	; 0xc0
 80034cc:	051b      	lsls	r3, r3, #20
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d106      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80034d2:	4b48      	ldr	r3, [pc, #288]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	0449      	lsls	r1, r1, #17
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	01db      	lsls	r3, r3, #7
 80034e8:	4013      	ands	r3, r2
 80034ea:	d015      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ec:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	0899      	lsrs	r1, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f8:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	05db      	lsls	r3, r3, #23
 8003506:	429a      	cmp	r2, r3
 8003508:	d106      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800350a:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	0249      	lsls	r1, r1, #9
 8003514:	430a      	orrs	r2, r1
 8003516:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	031b      	lsls	r3, r3, #12
 8003520:	4013      	ands	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003524:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003534:	430a      	orrs	r2, r1
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	039b      	lsls	r3, r3, #14
 8003540:	4013      	ands	r3, r2
 8003542:	d016      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800354a:	4013      	ands	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003552:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003554:	430a      	orrs	r2, r1
 8003556:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	03db      	lsls	r3, r3, #15
 8003560:	429a      	cmp	r2, r3
 8003562:	d106      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003564:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	0449      	lsls	r1, r1, #17
 800356e:	430a      	orrs	r2, r1
 8003570:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	03db      	lsls	r3, r3, #15
 800357a:	4013      	ands	r3, r2
 800357c:	d016      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	4a24      	ldr	r2, [pc, #144]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003584:	4013      	ands	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800358e:	430a      	orrs	r2, r1
 8003590:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	045b      	lsls	r3, r3, #17
 800359a:	429a      	cmp	r2, r3
 800359c:	d106      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	0449      	lsls	r1, r1, #17
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4013      	ands	r3, r2
 80035b6:	d016      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	01db      	lsls	r3, r3, #7
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d106      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	0249      	lsls	r1, r1, #9
 80035e2:	430a      	orrs	r2, r1
 80035e4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80035e6:	2312      	movs	r3, #18
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	781b      	ldrb	r3, [r3, #0]
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b006      	add	sp, #24
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	efffffff 	.word	0xefffffff
 80035fc:	fffff3ff 	.word	0xfffff3ff
 8003600:	fff3ffff 	.word	0xfff3ffff
 8003604:	ffcfffff 	.word	0xffcfffff
 8003608:	ffffcfff 	.word	0xffffcfff
 800360c:	f3ffffff 	.word	0xf3ffffff
 8003610:	ffbfffff 	.word	0xffbfffff
 8003614:	feffffff 	.word	0xfeffffff
 8003618:	ffff3fff 	.word	0xffff3fff

0800361c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e029      	b.n	8003682 <HAL_RNG_Init+0x66>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7a5b      	ldrb	r3, [r3, #9]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f7fd fdab 	bl	800119c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2220      	movs	r2, #32
 8003654:	4393      	bics	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2104      	movs	r1, #4
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	230f      	movs	r3, #15
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7a1b      	ldrb	r3, [r3, #8]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_RNG_GenerateRandomNumber+0x1e>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e049      	b.n	800373c <HAL_RNG_GenerateRandomNumber+0xb2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7a5b      	ldrb	r3, [r3, #9]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d134      	bne.n	8003722 <HAL_RNG_GenerateRandomNumber+0x98>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036be:	f7fe fb27 	bl	8001d10 <HAL_GetTick>
 80036c2:	0003      	movs	r3, r0
 80036c4:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80036c6:	e018      	b.n	80036fa <HAL_RNG_GenerateRandomNumber+0x70>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80036c8:	f7fe fb22 	bl	8001d10 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d911      	bls.n	80036fa <HAL_RNG_GenerateRandomNumber+0x70>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	4013      	ands	r3, r2
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d00a      	beq.n	80036fa <HAL_RNG_GenerateRandomNumber+0x70>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e020      	b.n	800373c <HAL_RNG_GenerateRandomNumber+0xb2>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	2b01      	cmp	r3, #1
 8003706:	d1df      	bne.n	80036c8 <HAL_RNG_GenerateRandomNumber+0x3e>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	725a      	strb	r2, [r3, #9]
 8003720:	e006      	b.n	8003730 <HAL_RNG_GenerateRandomNumber+0xa6>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2204      	movs	r2, #4
 8003726:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8003728:	230f      	movs	r3, #15
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	721a      	strb	r2, [r3, #8]

  return status;
 8003736:	230f      	movs	r3, #15
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b004      	add	sp, #16
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e04a      	b.n	80037ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	223d      	movs	r2, #61	; 0x3d
 800375a:	5c9b      	ldrb	r3, [r3, r2]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d107      	bne.n	8003772 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	223c      	movs	r2, #60	; 0x3c
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f7fd fd55 	bl	800121c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223d      	movs	r2, #61	; 0x3d
 8003776:	2102      	movs	r1, #2
 8003778:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f000 fd09 	bl	800419c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2248      	movs	r2, #72	; 0x48
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	223e      	movs	r2, #62	; 0x3e
 8003796:	2101      	movs	r1, #1
 8003798:	5499      	strb	r1, [r3, r2]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	223f      	movs	r2, #63	; 0x3f
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	2101      	movs	r1, #1
 80037a8:	5499      	strb	r1, [r3, r2]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2241      	movs	r2, #65	; 0x41
 80037ae:	2101      	movs	r1, #1
 80037b0:	5499      	strb	r1, [r3, r2]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2242      	movs	r2, #66	; 0x42
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2243      	movs	r2, #67	; 0x43
 80037be:	2101      	movs	r1, #1
 80037c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2244      	movs	r2, #68	; 0x44
 80037c6:	2101      	movs	r1, #1
 80037c8:	5499      	strb	r1, [r3, r2]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2245      	movs	r2, #69	; 0x45
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2246      	movs	r2, #70	; 0x46
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2247      	movs	r2, #71	; 0x47
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223d      	movs	r2, #61	; 0x3d
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	001a      	movs	r2, r3
 8003802:	1cbb      	adds	r3, r7, #2
 8003804:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2317      	movs	r3, #23
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <HAL_TIM_PWM_Start_DMA+0x32>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	223e      	movs	r2, #62	; 0x3e
 8003818:	5c9b      	ldrb	r3, [r3, r2]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	3b02      	subs	r3, #2
 800381e:	425a      	negs	r2, r3
 8003820:	4153      	adcs	r3, r2
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e037      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d108      	bne.n	800383e <HAL_TIM_PWM_Start_DMA+0x4a>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	223f      	movs	r2, #63	; 0x3f
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3b02      	subs	r3, #2
 8003836:	425a      	negs	r2, r3
 8003838:	4153      	adcs	r3, r2
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e02b      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xa2>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d108      	bne.n	8003856 <HAL_TIM_PWM_Start_DMA+0x62>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3b02      	subs	r3, #2
 800384e:	425a      	negs	r2, r3
 8003850:	4153      	adcs	r3, r2
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e01f      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d108      	bne.n	800386e <HAL_TIM_PWM_Start_DMA+0x7a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2241      	movs	r2, #65	; 0x41
 8003860:	5c9b      	ldrb	r3, [r3, r2]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3b02      	subs	r3, #2
 8003866:	425a      	negs	r2, r3
 8003868:	4153      	adcs	r3, r2
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e013      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xa2>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b10      	cmp	r3, #16
 8003872:	d108      	bne.n	8003886 <HAL_TIM_PWM_Start_DMA+0x92>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2242      	movs	r2, #66	; 0x42
 8003878:	5c9b      	ldrb	r3, [r3, r2]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3b02      	subs	r3, #2
 800387e:	425a      	negs	r2, r3
 8003880:	4153      	adcs	r3, r2
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e007      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2243      	movs	r2, #67	; 0x43
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	3b02      	subs	r3, #2
 8003890:	425a      	negs	r2, r3
 8003892:	4153      	adcs	r3, r2
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
 800389c:	e193      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x3d2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d108      	bne.n	80038b6 <HAL_TIM_PWM_Start_DMA+0xc2>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	223e      	movs	r2, #62	; 0x3e
 80038a8:	5c9b      	ldrb	r3, [r3, r2]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	425a      	negs	r2, r3
 80038b0:	4153      	adcs	r3, r2
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	e037      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0x132>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d108      	bne.n	80038ce <HAL_TIM_PWM_Start_DMA+0xda>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	223f      	movs	r2, #63	; 0x3f
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	425a      	negs	r2, r3
 80038c8:	4153      	adcs	r3, r2
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	e02b      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0x132>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d108      	bne.n	80038e6 <HAL_TIM_PWM_Start_DMA+0xf2>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	5c9b      	ldrb	r3, [r3, r2]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	425a      	negs	r2, r3
 80038e0:	4153      	adcs	r3, r2
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e01f      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0x132>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	d108      	bne.n	80038fe <HAL_TIM_PWM_Start_DMA+0x10a>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2241      	movs	r2, #65	; 0x41
 80038f0:	5c9b      	ldrb	r3, [r3, r2]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	425a      	negs	r2, r3
 80038f8:	4153      	adcs	r3, r2
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e013      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0x132>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b10      	cmp	r3, #16
 8003902:	d108      	bne.n	8003916 <HAL_TIM_PWM_Start_DMA+0x122>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2242      	movs	r2, #66	; 0x42
 8003908:	5c9b      	ldrb	r3, [r3, r2]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	425a      	negs	r2, r3
 8003910:	4153      	adcs	r3, r2
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e007      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0x132>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2243      	movs	r2, #67	; 0x43
 800391a:	5c9b      	ldrb	r3, [r3, r2]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	425a      	negs	r2, r3
 8003922:	4153      	adcs	r3, r2
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d035      	beq.n	8003996 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_TIM_PWM_Start_DMA+0x144>
 8003930:	1cbb      	adds	r3, r7, #2
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e144      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x3d2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_TIM_PWM_Start_DMA+0x158>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	223e      	movs	r2, #62	; 0x3e
 8003946:	2102      	movs	r1, #2
 8003948:	5499      	strb	r1, [r3, r2]
 800394a:	e026      	b.n	800399a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d104      	bne.n	800395c <HAL_TIM_PWM_Start_DMA+0x168>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	223f      	movs	r2, #63	; 0x3f
 8003956:	2102      	movs	r1, #2
 8003958:	5499      	strb	r1, [r3, r2]
 800395a:	e01e      	b.n	800399a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b08      	cmp	r3, #8
 8003960:	d104      	bne.n	800396c <HAL_TIM_PWM_Start_DMA+0x178>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2240      	movs	r2, #64	; 0x40
 8003966:	2102      	movs	r1, #2
 8003968:	5499      	strb	r1, [r3, r2]
 800396a:	e016      	b.n	800399a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d104      	bne.n	800397c <HAL_TIM_PWM_Start_DMA+0x188>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2241      	movs	r2, #65	; 0x41
 8003976:	2102      	movs	r1, #2
 8003978:	5499      	strb	r1, [r3, r2]
 800397a:	e00e      	b.n	800399a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b10      	cmp	r3, #16
 8003980:	d104      	bne.n	800398c <HAL_TIM_PWM_Start_DMA+0x198>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2242      	movs	r2, #66	; 0x42
 8003986:	2102      	movs	r1, #2
 8003988:	5499      	strb	r1, [r3, r2]
 800398a:	e006      	b.n	800399a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2243      	movs	r2, #67	; 0x43
 8003990:	2102      	movs	r1, #2
 8003992:	5499      	strb	r1, [r3, r2]
 8003994:	e001      	b.n	800399a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e115      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x3d2>
  }

  switch (Channel)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d100      	bne.n	80039a2 <HAL_TIM_PWM_Start_DMA+0x1ae>
 80039a0:	e080      	b.n	8003aa4 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d900      	bls.n	80039aa <HAL_TIM_PWM_Start_DMA+0x1b6>
 80039a8:	e0a1      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x2fa>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d054      	beq.n	8003a5a <HAL_TIM_PWM_Start_DMA+0x266>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d900      	bls.n	80039b8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80039b6:	e09a      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x2fa>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d025      	beq.n	8003a10 <HAL_TIM_PWM_Start_DMA+0x21c>
 80039c4:	e093      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	4a81      	ldr	r2, [pc, #516]	; (8003bd0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80039cc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	4a80      	ldr	r2, [pc, #512]	; (8003bd4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	4a7f      	ldr	r2, [pc, #508]	; (8003bd8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3334      	adds	r3, #52	; 0x34
 80039ea:	001a      	movs	r2, r3
 80039ec:	1cbb      	adds	r3, r7, #2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	f7fe fb16 	bl	8002020 <HAL_DMA_Start_IT>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0e4      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x3d2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	0089      	lsls	r1, r1, #2
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	60da      	str	r2, [r3, #12]
      break;
 8003a0e:	e073      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	4a6d      	ldr	r2, [pc, #436]	; (8003bd4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	4a6c      	ldr	r2, [pc, #432]	; (8003bd8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3338      	adds	r3, #56	; 0x38
 8003a34:	001a      	movs	r2, r3
 8003a36:	1cbb      	adds	r3, r7, #2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	f7fe faf1 	bl	8002020 <HAL_DMA_Start_IT>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0bf      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	00c9      	lsls	r1, r1, #3
 8003a54:	430a      	orrs	r2, r1
 8003a56:	60da      	str	r2, [r3, #12]
      break;
 8003a58:	e04e      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	4a5b      	ldr	r2, [pc, #364]	; (8003bd4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	4a5a      	ldr	r2, [pc, #360]	; (8003bd8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003a70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	333c      	adds	r3, #60	; 0x3c
 8003a7e:	001a      	movs	r2, r3
 8003a80:	1cbb      	adds	r3, r7, #2
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	f7fe facc 	bl	8002020 <HAL_DMA_Start_IT>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e09a      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	0109      	lsls	r1, r1, #4
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	60da      	str	r2, [r3, #12]
      break;
 8003aa2:	e029      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4a48      	ldr	r2, [pc, #288]	; (8003bd4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4a47      	ldr	r2, [pc, #284]	; (8003bd8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003aba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3340      	adds	r3, #64	; 0x40
 8003ac8:	001a      	movs	r2, r3
 8003aca:	1cbb      	adds	r3, r7, #2
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	f7fe faa7 	bl	8002020 <HAL_DMA_Start_IT>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e075      	b.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	0149      	lsls	r1, r1, #5
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]
      break;
 8003aec:	e004      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8003aee:	2317      	movs	r3, #23
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
      break;
 8003af6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003af8:	2317      	movs	r3, #23
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d15e      	bne.n	8003bc0 <HAL_TIM_PWM_Start_DMA+0x3cc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 fe8a 	bl	8004824 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a31      	ldr	r2, [pc, #196]	; (8003bdc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x344>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x344>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x344>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_PWM_Start_DMA+0x348>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x34a>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	0209      	lsls	r1, r1, #8
 8003b50:	430a      	orrs	r2, r1
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00f      	beq.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x38a>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	05db      	lsls	r3, r3, #23
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d009      	beq.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x38a>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x38a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d116      	bne.n	8003bac <HAL_TIM_PWM_Start_DMA+0x3b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d016      	beq.n	8003bbe <HAL_TIM_PWM_Start_DMA+0x3ca>
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	025b      	lsls	r3, r3, #9
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d011      	beq.n	8003bbe <HAL_TIM_PWM_Start_DMA+0x3ca>
      {
        __HAL_TIM_ENABLE(htim);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003baa:	e008      	b.n	8003bbe <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e000      	b.n	8003bc0 <HAL_TIM_PWM_Start_DMA+0x3cc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003bc0:	2317      	movs	r3, #23
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b006      	add	sp, #24
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	08004089 	.word	0x08004089
 8003bd4:	08004133 	.word	0x08004133
 8003bd8:	08003ff5 	.word	0x08003ff5
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	00010007 	.word	0x00010007

08003bf4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	230f      	movs	r3, #15
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d039      	beq.n	8003c80 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d844      	bhi.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d025      	beq.n	8003c64 <HAL_TIM_PWM_Stop_DMA+0x70>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d83e      	bhi.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_TIM_PWM_Stop_DMA+0x38>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00e      	beq.n	8003c48 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003c2a:	e037      	b.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	495c      	ldr	r1, [pc, #368]	; (8003da8 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fe fad5 	bl	80021f0 <HAL_DMA_Abort_IT>
      break;
 8003c46:	e02e      	b.n	8003ca6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4956      	ldr	r1, [pc, #344]	; (8003dac <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7fe fac7 	bl	80021f0 <HAL_DMA_Abort_IT>
      break;
 8003c62:	e020      	b.n	8003ca6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4950      	ldr	r1, [pc, #320]	; (8003db0 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fe fab9 	bl	80021f0 <HAL_DMA_Abort_IT>
      break;
 8003c7e:	e012      	b.n	8003ca6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	494a      	ldr	r1, [pc, #296]	; (8003db4 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fe faab 	bl	80021f0 <HAL_DMA_Abort_IT>
      break;
 8003c9a:	e004      	b.n	8003ca6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
      break;
 8003ca4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003ca6:	230f      	movs	r3, #15
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d000      	beq.n	8003cb2 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8003cb0:	e073      	b.n	8003d9a <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6839      	ldr	r1, [r7, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 fdb2 	bl	8004824 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3c      	ldr	r2, [pc, #240]	; (8003db8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3b      	ldr	r2, [pc, #236]	; (8003dbc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a39      	ldr	r2, [pc, #228]	; (8003dc0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_TIM_PWM_Stop_DMA+0xfa>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	4a33      	ldr	r2, [pc, #204]	; (8003dc8 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d10d      	bne.n	8003d1a <HAL_TIM_PWM_Stop_DMA+0x126>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4a31      	ldr	r2, [pc, #196]	; (8003dcc <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_PWM_Stop_DMA+0x126>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	492e      	ldr	r1, [pc, #184]	; (8003dd0 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003d16:	400a      	ands	r2, r1
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	d10d      	bne.n	8003d42 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d107      	bne.n	8003d42 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	438a      	bics	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Stop_DMA+0x15e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	223e      	movs	r2, #62	; 0x3e
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	5499      	strb	r1, [r3, r2]
 8003d50:	e023      	b.n	8003d9a <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	223f      	movs	r2, #63	; 0x3f
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	5499      	strb	r1, [r3, r2]
 8003d60:	e01b      	b.n	8003d9a <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_PWM_Stop_DMA+0x17e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2240      	movs	r2, #64	; 0x40
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	5499      	strb	r1, [r3, r2]
 8003d70:	e013      	b.n	8003d9a <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Stop_DMA+0x18e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2241      	movs	r2, #65	; 0x41
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	5499      	strb	r1, [r3, r2]
 8003d80:	e00b      	b.n	8003d9a <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Stop_DMA+0x19e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2242      	movs	r2, #66	; 0x42
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	5499      	strb	r1, [r3, r2]
 8003d90:	e003      	b.n	8003d9a <HAL_TIM_PWM_Stop_DMA+0x1a6>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2243      	movs	r2, #67	; 0x43
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003d9a:	230f      	movs	r3, #15
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	781b      	ldrb	r3, [r3, #0]
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b004      	add	sp, #16
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	fffffdff 	.word	0xfffffdff
 8003dac:	fffffbff 	.word	0xfffffbff
 8003db0:	fffff7ff 	.word	0xfffff7ff
 8003db4:	ffffefff 	.word	0xffffefff
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800
 8003dc8:	00001111 	.word	0x00001111
 8003dcc:	00000444 	.word	0x00000444
 8003dd0:	ffff7fff 	.word	0xffff7fff

08003dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2317      	movs	r3, #23
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	223c      	movs	r2, #60	; 0x3c
 8003dec:	5c9b      	ldrb	r3, [r3, r2]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e0e5      	b.n	8003fc2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	223c      	movs	r2, #60	; 0x3c
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b14      	cmp	r3, #20
 8003e02:	d900      	bls.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e04:	e0d1      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	009a      	lsls	r2, r3, #2
 8003e0a:	4b70      	ldr	r3, [pc, #448]	; (8003fcc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003e0c:	18d3      	adds	r3, r2, r3
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	0011      	movs	r1, r2
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 fa3e 	bl	800429c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2108      	movs	r1, #8
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2104      	movs	r1, #4
 8003e3c:	438a      	bics	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6999      	ldr	r1, [r3, #24]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	619a      	str	r2, [r3, #24]
      break;
 8003e52:	e0af      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f000 faa7 	bl	80043b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	0109      	lsls	r1, r1, #4
 8003e70:	430a      	orrs	r2, r1
 8003e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4954      	ldr	r1, [pc, #336]	; (8003fd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6999      	ldr	r1, [r3, #24]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	619a      	str	r2, [r3, #24]
      break;
 8003e98:	e08c      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fb08 	bl	80044b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2108      	movs	r1, #8
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69d9      	ldr	r1, [r3, #28]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	61da      	str	r2, [r3, #28]
      break;
 8003eda:	e06b      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 fb6f 	bl	80045c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2180      	movs	r1, #128	; 0x80
 8003ef6:	0109      	lsls	r1, r1, #4
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4932      	ldr	r1, [pc, #200]	; (8003fd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69d9      	ldr	r1, [r3, #28]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	61da      	str	r2, [r3, #28]
      break;
 8003f20:	e048      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	0011      	movs	r1, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 fbb6 	bl	800469c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2108      	movs	r1, #8
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2104      	movs	r1, #4
 8003f4c:	438a      	bics	r2, r1
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f62:	e027      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	0011      	movs	r1, r2
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 fbf5 	bl	800475c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2180      	movs	r1, #128	; 0x80
 8003f7e:	0109      	lsls	r1, r1, #4
 8003f80:	430a      	orrs	r2, r1
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4910      	ldr	r1, [pc, #64]	; (8003fd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f90:	400a      	ands	r2, r1
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fa8:	e004      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003faa:	2317      	movs	r3, #23
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
      break;
 8003fb2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	223c      	movs	r2, #60	; 0x3c
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5499      	strb	r1, [r3, r2]

  return status;
 8003fbc:	2317      	movs	r3, #23
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b006      	add	sp, #24
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	08007508 	.word	0x08007508
 8003fd0:	fffffbff 	.word	0xfffffbff

08003fd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	223e      	movs	r2, #62	; 0x3e
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]
 800401a:	e02a      	b.n	8004072 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d107      	bne.n	8004036 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	223f      	movs	r2, #63	; 0x3f
 8004030:	2101      	movs	r1, #1
 8004032:	5499      	strb	r1, [r3, r2]
 8004034:	e01d      	b.n	8004072 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2204      	movs	r2, #4
 8004044:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2240      	movs	r2, #64	; 0x40
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]
 800404e:	e010      	b.n	8004072 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d107      	bne.n	800406a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2208      	movs	r2, #8
 800405e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2241      	movs	r2, #65	; 0x41
 8004064:	2101      	movs	r1, #1
 8004066:	5499      	strb	r1, [r3, r2]
 8004068:	e003      	b.n	8004072 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	223d      	movs	r2, #61	; 0x3d
 800406e:	2101      	movs	r1, #1
 8004070:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff ffb5 	bl	8003fe4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b004      	add	sp, #16
 8004086:	bd80      	pop	{r7, pc}

08004088 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d10b      	bne.n	80040b8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d136      	bne.n	800411c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	223e      	movs	r2, #62	; 0x3e
 80040b2:	2101      	movs	r1, #1
 80040b4:	5499      	strb	r1, [r3, r2]
 80040b6:	e031      	b.n	800411c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d10b      	bne.n	80040da <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d125      	bne.n	800411c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	223f      	movs	r2, #63	; 0x3f
 80040d4:	2101      	movs	r1, #1
 80040d6:	5499      	strb	r1, [r3, r2]
 80040d8:	e020      	b.n	800411c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d10b      	bne.n	80040fc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2204      	movs	r2, #4
 80040e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d114      	bne.n	800411c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	e00f      	b.n	800411c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d10a      	bne.n	800411c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2208      	movs	r2, #8
 800410a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2241      	movs	r2, #65	; 0x41
 8004118:	2101      	movs	r1, #1
 800411a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	0018      	movs	r0, r3
 8004120:	f7fc fa7e 	bl	8000620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	771a      	strb	r2, [r3, #28]
}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}

08004132 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d103      	bne.n	8004152 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	771a      	strb	r2, [r3, #28]
 8004150:	e019      	b.n	8004186 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	d103      	bne.n	8004164 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2202      	movs	r2, #2
 8004160:	771a      	strb	r2, [r3, #28]
 8004162:	e010      	b.n	8004186 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d103      	bne.n	8004176 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2204      	movs	r2, #4
 8004172:	771a      	strb	r2, [r3, #28]
 8004174:	e007      	b.n	8004186 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d102      	bne.n	8004186 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2208      	movs	r2, #8
 8004184:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff ff23 	bl	8003fd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b004      	add	sp, #16
 800419a:	bd80      	pop	{r7, pc}

0800419c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a34      	ldr	r2, [pc, #208]	; (8004280 <TIM_Base_SetConfig+0xe4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d008      	beq.n	80041c6 <TIM_Base_SetConfig+0x2a>
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	05db      	lsls	r3, r3, #23
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x2a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a30      	ldr	r2, [pc, #192]	; (8004284 <TIM_Base_SetConfig+0xe8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2270      	movs	r2, #112	; 0x70
 80041ca:	4393      	bics	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a29      	ldr	r2, [pc, #164]	; (8004280 <TIM_Base_SetConfig+0xe4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <TIM_Base_SetConfig+0x76>
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	05db      	lsls	r3, r3, #23
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d013      	beq.n	8004212 <TIM_Base_SetConfig+0x76>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a25      	ldr	r2, [pc, #148]	; (8004284 <TIM_Base_SetConfig+0xe8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00f      	beq.n	8004212 <TIM_Base_SetConfig+0x76>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a24      	ldr	r2, [pc, #144]	; (8004288 <TIM_Base_SetConfig+0xec>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00b      	beq.n	8004212 <TIM_Base_SetConfig+0x76>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a23      	ldr	r2, [pc, #140]	; (800428c <TIM_Base_SetConfig+0xf0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <TIM_Base_SetConfig+0x76>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a22      	ldr	r2, [pc, #136]	; (8004290 <TIM_Base_SetConfig+0xf4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_Base_SetConfig+0x76>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <TIM_Base_SetConfig+0xf8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d108      	bne.n	8004224 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a20      	ldr	r2, [pc, #128]	; (8004298 <TIM_Base_SetConfig+0xfc>)
 8004216:	4013      	ands	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	4393      	bics	r3, r2
 800422a:	001a      	movs	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <TIM_Base_SetConfig+0xe4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00b      	beq.n	800426a <TIM_Base_SetConfig+0xce>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <TIM_Base_SetConfig+0xf0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d007      	beq.n	800426a <TIM_Base_SetConfig+0xce>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <TIM_Base_SetConfig+0xf4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_Base_SetConfig+0xce>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <TIM_Base_SetConfig+0xf8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d103      	bne.n	8004272 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	615a      	str	r2, [r3, #20]
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b004      	add	sp, #16
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40002000 	.word	0x40002000
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800
 8004298:	fffffcff 	.word	0xfffffcff

0800429c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	2201      	movs	r2, #1
 80042ac:	4393      	bics	r3, r2
 80042ae:	001a      	movs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a32      	ldr	r2, [pc, #200]	; (8004394 <TIM_OC1_SetConfig+0xf8>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2203      	movs	r2, #3
 80042d2:	4393      	bics	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2202      	movs	r2, #2
 80042e4:	4393      	bics	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a28      	ldr	r2, [pc, #160]	; (8004398 <TIM_OC1_SetConfig+0xfc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_OC1_SetConfig+0x76>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <TIM_OC1_SetConfig+0x100>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_OC1_SetConfig+0x76>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a26      	ldr	r2, [pc, #152]	; (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC1_SetConfig+0x76>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <TIM_OC1_SetConfig+0x108>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10c      	bne.n	800432c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2208      	movs	r2, #8
 8004316:	4393      	bics	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2204      	movs	r2, #4
 8004328:	4393      	bics	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <TIM_OC1_SetConfig+0xfc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00b      	beq.n	800434c <TIM_OC1_SetConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a19      	ldr	r2, [pc, #100]	; (800439c <TIM_OC1_SetConfig+0x100>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d007      	beq.n	800434c <TIM_OC1_SetConfig+0xb0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC1_SetConfig+0xb0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a17      	ldr	r2, [pc, #92]	; (80043a4 <TIM_OC1_SetConfig+0x108>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4a16      	ldr	r2, [pc, #88]	; (80043a8 <TIM_OC1_SetConfig+0x10c>)
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4a15      	ldr	r2, [pc, #84]	; (80043ac <TIM_OC1_SetConfig+0x110>)
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b006      	add	sp, #24
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	fffeff8f 	.word	0xfffeff8f
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	fffffeff 	.word	0xfffffeff
 80043ac:	fffffdff 	.word	0xfffffdff

080043b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	2210      	movs	r2, #16
 80043c0:	4393      	bics	r3, r2
 80043c2:	001a      	movs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <TIM_OC2_SetConfig+0xe8>)
 80043de:	4013      	ands	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <TIM_OC2_SetConfig+0xec>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2220      	movs	r2, #32
 80043fa:	4393      	bics	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <TIM_OC2_SetConfig+0xf0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10d      	bne.n	800442e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2280      	movs	r2, #128	; 0x80
 8004416:	4393      	bics	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2240      	movs	r2, #64	; 0x40
 800442a:	4393      	bics	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <TIM_OC2_SetConfig+0xf0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_OC2_SetConfig+0x9e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <TIM_OC2_SetConfig+0xf4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_OC2_SetConfig+0x9e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <TIM_OC2_SetConfig+0xf8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC2_SetConfig+0x9e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <TIM_OC2_SetConfig+0xfc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d113      	bne.n	8004476 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <TIM_OC2_SetConfig+0x100>)
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <TIM_OC2_SetConfig+0x104>)
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b006      	add	sp, #24
 8004496:	bd80      	pop	{r7, pc}
 8004498:	feff8fff 	.word	0xfeff8fff
 800449c:	fffffcff 	.word	0xfffffcff
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800
 80044b0:	fffffbff 	.word	0xfffffbff
 80044b4:	fffff7ff 	.word	0xfffff7ff

080044b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a35      	ldr	r2, [pc, #212]	; (800459c <TIM_OC3_SetConfig+0xe4>)
 80044c8:	401a      	ands	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a2f      	ldr	r2, [pc, #188]	; (80045a0 <TIM_OC3_SetConfig+0xe8>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2203      	movs	r2, #3
 80044ec:	4393      	bics	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4a29      	ldr	r2, [pc, #164]	; (80045a4 <TIM_OC3_SetConfig+0xec>)
 80044fe:	4013      	ands	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <TIM_OC3_SetConfig+0xf0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <TIM_OC3_SetConfig+0xf4>)
 800451a:	4013      	ands	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <TIM_OC3_SetConfig+0xf8>)
 800452e:	4013      	ands	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <TIM_OC3_SetConfig+0xf0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_OC3_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <TIM_OC3_SetConfig+0xfc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_OC3_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <TIM_OC3_SetConfig+0x100>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC3_SetConfig+0x9a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <TIM_OC3_SetConfig+0x104>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d113      	bne.n	800457a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <TIM_OC3_SetConfig+0x108>)
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <TIM_OC3_SetConfig+0x10c>)
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b006      	add	sp, #24
 800459a:	bd80      	pop	{r7, pc}
 800459c:	fffffeff 	.word	0xfffffeff
 80045a0:	fffeff8f 	.word	0xfffeff8f
 80045a4:	fffffdff 	.word	0xfffffdff
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	fffff7ff 	.word	0xfffff7ff
 80045b0:	fffffbff 	.word	0xfffffbff
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800
 80045c0:	ffffefff 	.word	0xffffefff
 80045c4:	ffffdfff 	.word	0xffffdfff

080045c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	4a28      	ldr	r2, [pc, #160]	; (8004678 <TIM_OC4_SetConfig+0xb0>)
 80045d8:	401a      	ands	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a22      	ldr	r2, [pc, #136]	; (800467c <TIM_OC4_SetConfig+0xb4>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a21      	ldr	r2, [pc, #132]	; (8004680 <TIM_OC4_SetConfig+0xb8>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <TIM_OC4_SetConfig+0xbc>)
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a19      	ldr	r2, [pc, #100]	; (8004688 <TIM_OC4_SetConfig+0xc0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_OC4_SetConfig+0x78>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a18      	ldr	r2, [pc, #96]	; (800468c <TIM_OC4_SetConfig+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC4_SetConfig+0x78>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <TIM_OC4_SetConfig+0xc8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC4_SetConfig+0x78>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <TIM_OC4_SetConfig+0xcc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <TIM_OC4_SetConfig+0xd0>)
 8004644:	4013      	ands	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b006      	add	sp, #24
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	ffffefff 	.word	0xffffefff
 800467c:	feff8fff 	.word	0xfeff8fff
 8004680:	fffffcff 	.word	0xfffffcff
 8004684:	ffffdfff 	.word	0xffffdfff
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800
 8004698:	ffffbfff 	.word	0xffffbfff

0800469c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4a25      	ldr	r2, [pc, #148]	; (8004740 <TIM_OC5_SetConfig+0xa4>)
 80046ac:	401a      	ands	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <TIM_OC5_SetConfig+0xa8>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <TIM_OC5_SetConfig+0xac>)
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <TIM_OC5_SetConfig+0xb0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00b      	beq.n	800470a <TIM_OC5_SetConfig+0x6e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <TIM_OC5_SetConfig+0xb4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_OC5_SetConfig+0x6e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <TIM_OC5_SetConfig+0xb8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_OC5_SetConfig+0x6e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <TIM_OC5_SetConfig+0xbc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d109      	bne.n	800471e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <TIM_OC5_SetConfig+0xa4>)
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	b006      	add	sp, #24
 800473e:	bd80      	pop	{r7, pc}
 8004740:	fffeffff 	.word	0xfffeffff
 8004744:	fffeff8f 	.word	0xfffeff8f
 8004748:	fffdffff 	.word	0xfffdffff
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a26      	ldr	r2, [pc, #152]	; (8004804 <TIM_OC6_SetConfig+0xa8>)
 800476c:	401a      	ands	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a20      	ldr	r2, [pc, #128]	; (8004808 <TIM_OC6_SetConfig+0xac>)
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4a1c      	ldr	r2, [pc, #112]	; (800480c <TIM_OC6_SetConfig+0xb0>)
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	051b      	lsls	r3, r3, #20
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a18      	ldr	r2, [pc, #96]	; (8004810 <TIM_OC6_SetConfig+0xb4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_OC6_SetConfig+0x70>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a17      	ldr	r2, [pc, #92]	; (8004814 <TIM_OC6_SetConfig+0xb8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC6_SetConfig+0x70>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a16      	ldr	r2, [pc, #88]	; (8004818 <TIM_OC6_SetConfig+0xbc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC6_SetConfig+0x70>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a15      	ldr	r2, [pc, #84]	; (800481c <TIM_OC6_SetConfig+0xc0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4a14      	ldr	r2, [pc, #80]	; (8004820 <TIM_OC6_SetConfig+0xc4>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	029b      	lsls	r3, r3, #10
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b006      	add	sp, #24
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	ffefffff 	.word	0xffefffff
 8004808:	feff8fff 	.word	0xfeff8fff
 800480c:	ffdfffff 	.word	0xffdfffff
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800
 8004820:	fffbffff 	.word	0xfffbffff

08004824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	221f      	movs	r2, #31
 8004834:	4013      	ands	r3, r2
 8004836:	2201      	movs	r2, #1
 8004838:	409a      	lsls	r2, r3
 800483a:	0013      	movs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	43d2      	mvns	r2, r2
 8004846:	401a      	ands	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	211f      	movs	r1, #31
 8004854:	400b      	ands	r3, r1
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4099      	lsls	r1, r3
 800485a:	000b      	movs	r3, r1
 800485c:	431a      	orrs	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b006      	add	sp, #24
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	223c      	movs	r2, #60	; 0x3c
 800487a:	5c9b      	ldrb	r3, [r3, r2]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004880:	2302      	movs	r3, #2
 8004882:	e055      	b.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	223c      	movs	r2, #60	; 0x3c
 8004888:	2101      	movs	r1, #1
 800488a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	223d      	movs	r2, #61	; 0x3d
 8004890:	2102      	movs	r1, #2
 8004892:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a23      	ldr	r2, [pc, #140]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d108      	bne.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a22      	ldr	r2, [pc, #136]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2270      	movs	r2, #112	; 0x70
 80048c4:	4393      	bics	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a16      	ldr	r2, [pc, #88]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00f      	beq.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	05db      	lsls	r3, r3, #23
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d009      	beq.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a12      	ldr	r2, [pc, #72]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a11      	ldr	r2, [pc, #68]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10c      	bne.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2280      	movs	r2, #128	; 0x80
 8004908:	4393      	bics	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	4313      	orrs	r3, r2
 8004914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	223d      	movs	r2, #61	; 0x3d
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223c      	movs	r2, #60	; 0x3c
 800492a:	2100      	movs	r1, #0
 800492c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b004      	add	sp, #16
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40012c00 	.word	0x40012c00
 800493c:	ff0fffff 	.word	0xff0fffff
 8004940:	40000400 	.word	0x40000400
 8004944:	40014000 	.word	0x40014000

08004948 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	223c      	movs	r2, #60	; 0x3c
 800495a:	5c9b      	ldrb	r3, [r3, r2]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004960:	2302      	movs	r3, #2
 8004962:	e079      	b.n	8004a58 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	223c      	movs	r2, #60	; 0x3c
 8004968:	2101      	movs	r1, #1
 800496a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	4393      	bics	r3, r2
 8004972:	001a      	movs	r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a38      	ldr	r2, [pc, #224]	; (8004a60 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004980:	401a      	ands	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800498e:	401a      	ands	r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a33      	ldr	r2, [pc, #204]	; (8004a68 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800499c:	401a      	ands	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a30      	ldr	r2, [pc, #192]	; (8004a6c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80049aa:	401a      	ands	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a2e      	ldr	r2, [pc, #184]	; (8004a70 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80049b8:	401a      	ands	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80049c6:	401a      	ands	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80049d4:	401a      	ands	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d106      	bne.n	80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80049ee:	401a      	ands	r2, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d121      	bne.n	8004a46 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004a06:	401a      	ands	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	051b      	lsls	r3, r3, #20
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004a16:	401a      	ands	r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004a24:	401a      	ands	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d106      	bne.n	8004a46 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004a3c:	401a      	ands	r2, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	223c      	movs	r2, #60	; 0x3c
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	fffffcff 	.word	0xfffffcff
 8004a64:	fffffbff 	.word	0xfffffbff
 8004a68:	fffff7ff 	.word	0xfffff7ff
 8004a6c:	ffffefff 	.word	0xffffefff
 8004a70:	ffffdfff 	.word	0xffffdfff
 8004a74:	ffffbfff 	.word	0xffffbfff
 8004a78:	fff0ffff 	.word	0xfff0ffff
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	efffffff 	.word	0xefffffff
 8004a84:	ff0fffff 	.word	0xff0fffff
 8004a88:	feffffff 	.word	0xfeffffff
 8004a8c:	fdffffff 	.word	0xfdffffff
 8004a90:	dfffffff 	.word	0xdfffffff

08004a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e046      	b.n	8004b34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2284      	movs	r2, #132	; 0x84
 8004aaa:	589b      	ldr	r3, [r3, r2]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d107      	bne.n	8004ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7fc fc52 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2284      	movs	r2, #132	; 0x84
 8004ac4:	2124      	movs	r1, #36	; 0x24
 8004ac6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 ff52 	bl	8005984 <UART_SetConfig>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e024      	b.n	8004b34 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f001 fa03 	bl	8005f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	490d      	ldr	r1, [pc, #52]	; (8004b3c <HAL_UART_Init+0xa8>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	212a      	movs	r1, #42	; 0x2a
 8004b16:	438a      	bics	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2101      	movs	r1, #1
 8004b26:	430a      	orrs	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f001 fa9b 	bl	8006068 <UART_CheckIdleState>
 8004b32:	0003      	movs	r3, r0
}
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b002      	add	sp, #8
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	ffffb7ff 	.word	0xffffb7ff

08004b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	1dbb      	adds	r3, r7, #6
 8004b4e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2284      	movs	r2, #132	; 0x84
 8004b54:	589b      	ldr	r3, [r3, r2]
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d000      	beq.n	8004b5c <HAL_UART_Transmit+0x1c>
 8004b5a:	e097      	b.n	8004c8c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_UART_Transmit+0x2a>
 8004b62:	1dbb      	adds	r3, r7, #6
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e08f      	b.n	8004c8e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	015b      	lsls	r3, r3, #5
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d109      	bne.n	8004b8e <HAL_UART_Transmit+0x4e>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2201      	movs	r2, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	d001      	beq.n	8004b8e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2280      	movs	r2, #128	; 0x80
 8004b92:	5c9b      	ldrb	r3, [r3, r2]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_UART_Transmit+0x5c>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e078      	b.n	8004c8e <HAL_UART_Transmit+0x14e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2280      	movs	r2, #128	; 0x80
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	228c      	movs	r2, #140	; 0x8c
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2284      	movs	r2, #132	; 0x84
 8004bb0:	2121      	movs	r1, #33	; 0x21
 8004bb2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bb4:	f7fd f8ac 	bl	8001d10 <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1dba      	adds	r2, r7, #6
 8004bc0:	2154      	movs	r1, #84	; 0x54
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1dba      	adds	r2, r7, #6
 8004bca:	2156      	movs	r1, #86	; 0x56
 8004bcc:	8812      	ldrh	r2, [r2, #0]
 8004bce:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	015b      	lsls	r3, r3, #5
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d108      	bne.n	8004bee <HAL_UART_Transmit+0xae>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e003      	b.n	8004bf6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2280      	movs	r2, #128	; 0x80
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004bfe:	e02c      	b.n	8004c5a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	0013      	movs	r3, r2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	f001 fa75 	bl	80060fc <UART_WaitOnFlagUntilTimeout>
 8004c12:	1e03      	subs	r3, r0, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e039      	b.n	8004c8e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	001a      	movs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	05d2      	lsls	r2, r2, #23
 8004c2c:	0dd2      	lsrs	r2, r2, #23
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	3302      	adds	r3, #2
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e007      	b.n	8004c48 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3301      	adds	r3, #1
 8004c46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2256      	movs	r2, #86	; 0x56
 8004c4c:	5a9b      	ldrh	r3, [r3, r2]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b299      	uxth	r1, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2256      	movs	r2, #86	; 0x56
 8004c58:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2256      	movs	r2, #86	; 0x56
 8004c5e:	5a9b      	ldrh	r3, [r3, r2]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cc      	bne.n	8004c00 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	0013      	movs	r3, r2
 8004c70:	2200      	movs	r2, #0
 8004c72:	2140      	movs	r1, #64	; 0x40
 8004c74:	f001 fa42 	bl	80060fc <UART_WaitOnFlagUntilTimeout>
 8004c78:	1e03      	subs	r3, r0, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e006      	b.n	8004c8e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2284      	movs	r2, #132	; 0x84
 8004c84:	2120      	movs	r1, #32
 8004c86:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b008      	add	sp, #32
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	; 0x28
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	1dbb      	adds	r3, r7, #6
 8004ca6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2288      	movs	r2, #136	; 0x88
 8004cac:	589b      	ldr	r3, [r3, r2]
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d000      	beq.n	8004cb4 <HAL_UART_Receive+0x1c>
 8004cb2:	e0db      	b.n	8004e6c <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_UART_Receive+0x2a>
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0d3      	b.n	8004e6e <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	015b      	lsls	r3, r3, #5
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d109      	bne.n	8004ce6 <HAL_UART_Receive+0x4e>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d001      	beq.n	8004ce6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0c3      	b.n	8004e6e <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	5c9b      	ldrb	r3, [r3, r2]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_UART_Receive+0x5c>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0bc      	b.n	8004e6e <HAL_UART_Receive+0x1d6>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2280      	movs	r2, #128	; 0x80
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	228c      	movs	r2, #140	; 0x8c
 8004d00:	2100      	movs	r1, #0
 8004d02:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2288      	movs	r2, #136	; 0x88
 8004d08:	2122      	movs	r1, #34	; 0x22
 8004d0a:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d12:	f7fc fffd 	bl	8001d10 <HAL_GetTick>
 8004d16:	0003      	movs	r3, r0
 8004d18:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1dba      	adds	r2, r7, #6
 8004d1e:	215c      	movs	r1, #92	; 0x5c
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1dba      	adds	r2, r7, #6
 8004d28:	215e      	movs	r1, #94	; 0x5e
 8004d2a:	8812      	ldrh	r2, [r2, #0]
 8004d2c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	015b      	lsls	r3, r3, #5
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d10d      	bne.n	8004d56 <HAL_UART_Receive+0xbe>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <HAL_UART_Receive+0xb4>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2260      	movs	r2, #96	; 0x60
 8004d46:	494c      	ldr	r1, [pc, #304]	; (8004e78 <HAL_UART_Receive+0x1e0>)
 8004d48:	5299      	strh	r1, [r3, r2]
 8004d4a:	e02e      	b.n	8004daa <HAL_UART_Receive+0x112>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2260      	movs	r2, #96	; 0x60
 8004d50:	21ff      	movs	r1, #255	; 0xff
 8004d52:	5299      	strh	r1, [r3, r2]
 8004d54:	e029      	b.n	8004daa <HAL_UART_Receive+0x112>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <HAL_UART_Receive+0xe2>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <HAL_UART_Receive+0xd8>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2260      	movs	r2, #96	; 0x60
 8004d6a:	21ff      	movs	r1, #255	; 0xff
 8004d6c:	5299      	strh	r1, [r3, r2]
 8004d6e:	e01c      	b.n	8004daa <HAL_UART_Receive+0x112>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2260      	movs	r2, #96	; 0x60
 8004d74:	217f      	movs	r1, #127	; 0x7f
 8004d76:	5299      	strh	r1, [r3, r2]
 8004d78:	e017      	b.n	8004daa <HAL_UART_Receive+0x112>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	055b      	lsls	r3, r3, #21
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d10d      	bne.n	8004da2 <HAL_UART_Receive+0x10a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <HAL_UART_Receive+0x100>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2260      	movs	r2, #96	; 0x60
 8004d92:	217f      	movs	r1, #127	; 0x7f
 8004d94:	5299      	strh	r1, [r3, r2]
 8004d96:	e008      	b.n	8004daa <HAL_UART_Receive+0x112>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2260      	movs	r2, #96	; 0x60
 8004d9c:	213f      	movs	r1, #63	; 0x3f
 8004d9e:	5299      	strh	r1, [r3, r2]
 8004da0:	e003      	b.n	8004daa <HAL_UART_Receive+0x112>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2260      	movs	r2, #96	; 0x60
 8004da6:	2100      	movs	r1, #0
 8004da8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004daa:	2312      	movs	r3, #18
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	2160      	movs	r1, #96	; 0x60
 8004db2:	5a52      	ldrh	r2, [r2, r1]
 8004db4:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	015b      	lsls	r3, r3, #5
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d108      	bne.n	8004dd4 <HAL_UART_Receive+0x13c>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	2100      	movs	r1, #0
 8004de2:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004de4:	e036      	b.n	8004e54 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	0013      	movs	r3, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	2120      	movs	r1, #32
 8004df4:	f001 f982 	bl	80060fc <UART_WaitOnFlagUntilTimeout>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e036      	b.n	8004e6e <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10e      	bne.n	8004e24 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2212      	movs	r2, #18
 8004e10:	18ba      	adds	r2, r7, r2
 8004e12:	8812      	ldrh	r2, [r2, #0]
 8004e14:	4013      	ands	r3, r2
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	3302      	adds	r3, #2
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e00e      	b.n	8004e42 <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2212      	movs	r2, #18
 8004e2e:	18ba      	adds	r2, r7, r2
 8004e30:	8812      	ldrh	r2, [r2, #0]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	4013      	ands	r3, r2
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	225e      	movs	r2, #94	; 0x5e
 8004e46:	5a9b      	ldrh	r3, [r3, r2]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b299      	uxth	r1, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	225e      	movs	r2, #94	; 0x5e
 8004e52:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	225e      	movs	r2, #94	; 0x5e
 8004e58:	5a9b      	ldrh	r3, [r3, r2]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1c2      	bne.n	8004de6 <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2288      	movs	r2, #136	; 0x88
 8004e64:	2120      	movs	r1, #32
 8004e66:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b008      	add	sp, #32
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	000001ff 	.word	0x000001ff

08004e7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	1dbb      	adds	r3, r7, #6
 8004e88:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2288      	movs	r2, #136	; 0x88
 8004e8e:	589b      	ldr	r3, [r3, r2]
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d155      	bne.n	8004f40 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_UART_Receive_IT+0x26>
 8004e9a:	1dbb      	adds	r3, r7, #6
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e04d      	b.n	8004f42 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	2380      	movs	r3, #128	; 0x80
 8004eac:	015b      	lsls	r3, r3, #5
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d109      	bne.n	8004ec6 <HAL_UART_Receive_IT+0x4a>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d001      	beq.n	8004ec6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e03d      	b.n	8004f42 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	5c9b      	ldrb	r3, [r3, r2]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Receive_IT+0x58>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e036      	b.n	8004f42 <HAL_UART_Receive_IT+0xc6>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	2101      	movs	r1, #1
 8004eda:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <HAL_UART_Receive_IT+0xd0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d020      	beq.n	8004f2e <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d019      	beq.n	8004f2e <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004efa:	f3ef 8310 	mrs	r3, PRIMASK
 8004efe:	613b      	str	r3, [r7, #16]
  return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2180      	movs	r1, #128	; 0x80
 8004f1c:	04c9      	lsls	r1, r1, #19
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f383 8810 	msr	PRIMASK, r3
}
 8004f2c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f2e:	1dbb      	adds	r3, r7, #6
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f001 f9a8 	bl	800628c <UART_Start_Receive_IT>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	e000      	b.n	8004f42 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b008      	add	sp, #32
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	40008000 	.word	0x40008000

08004f50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	1dbb      	adds	r3, r7, #6
 8004f5c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2284      	movs	r2, #132	; 0x84
 8004f62:	589b      	ldr	r3, [r3, r2]
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d000      	beq.n	8004f6a <HAL_UART_Transmit_DMA+0x1a>
 8004f68:	e08c      	b.n	8005084 <HAL_UART_Transmit_DMA+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_UART_Transmit_DMA+0x28>
 8004f70:	1dbb      	adds	r3, r7, #6
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e084      	b.n	8005086 <HAL_UART_Transmit_DMA+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	015b      	lsls	r3, r3, #5
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d109      	bne.n	8004f9c <HAL_UART_Transmit_DMA+0x4c>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2201      	movs	r2, #1
 8004f94:	4013      	ands	r3, r2
 8004f96:	d001      	beq.n	8004f9c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e074      	b.n	8005086 <HAL_UART_Transmit_DMA+0x136>
      }
    }

    __HAL_LOCK(huart);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	5c9b      	ldrb	r3, [r3, r2]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Transmit_DMA+0x5a>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e06d      	b.n	8005086 <HAL_UART_Transmit_DMA+0x136>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	2101      	movs	r1, #1
 8004fb0:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1dba      	adds	r2, r7, #6
 8004fbc:	2154      	movs	r1, #84	; 0x54
 8004fbe:	8812      	ldrh	r2, [r2, #0]
 8004fc0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1dba      	adds	r2, r7, #6
 8004fc6:	2156      	movs	r1, #86	; 0x56
 8004fc8:	8812      	ldrh	r2, [r2, #0]
 8004fca:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	228c      	movs	r2, #140	; 0x8c
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2284      	movs	r2, #132	; 0x84
 8004fd8:	2121      	movs	r1, #33	; 0x21
 8004fda:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02c      	beq.n	800503e <HAL_UART_Transmit_DMA+0xee>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe8:	4a29      	ldr	r2, [pc, #164]	; (8005090 <HAL_UART_Transmit_DMA+0x140>)
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff0:	4a28      	ldr	r2, [pc, #160]	; (8005094 <HAL_UART_Transmit_DMA+0x144>)
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff8:	4a27      	ldr	r2, [pc, #156]	; (8005098 <HAL_UART_Transmit_DMA+0x148>)
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005000:	2200      	movs	r2, #0
 8005002:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	0019      	movs	r1, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3328      	adds	r3, #40	; 0x28
 8005014:	001a      	movs	r2, r3
 8005016:	1dbb      	adds	r3, r7, #6
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	f7fd f801 	bl	8002020 <HAL_DMA_Start_IT>
 800501e:	1e03      	subs	r3, r0, #0
 8005020:	d00d      	beq.n	800503e <HAL_UART_Transmit_DMA+0xee>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	228c      	movs	r2, #140	; 0x8c
 8005026:	2110      	movs	r1, #16
 8005028:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2280      	movs	r2, #128	; 0x80
 800502e:	2100      	movs	r1, #0
 8005030:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2284      	movs	r2, #132	; 0x84
 8005036:	2120      	movs	r1, #32
 8005038:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e023      	b.n	8005086 <HAL_UART_Transmit_DMA+0x136>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2240      	movs	r2, #64	; 0x40
 8005044:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2280      	movs	r2, #128	; 0x80
 800504a:	2100      	movs	r1, #0
 800504c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504e:	f3ef 8310 	mrs	r3, PRIMASK
 8005052:	613b      	str	r3, [r7, #16]
  return(result);
 8005054:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f383 8810 	msr	PRIMASK, r3
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	430a      	orrs	r2, r1
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <HAL_UART_Transmit_DMA+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b008      	add	sp, #32
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	08006631 	.word	0x08006631
 8005094:	080066c9 	.word	0x080066c9
 8005098:	080066e7 	.word	0x080066e7

0800509c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b098      	sub	sp, #96	; 0x60
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 80050a4:	2301      	movs	r3, #1
 80050a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 80050b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80050b2:	2301      	movs	r3, #1
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4987      	ldr	r1, [pc, #540]	; (80052e8 <HAL_UART_Abort_IT+0x24c>)
 80050ca:	400a      	ands	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f383 8810 	msr	PRIMASK, r3
}
 80050d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050da:	f3ef 8310 	mrs	r3, PRIMASK
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80050e2:	657b      	str	r3, [r7, #84]	; 0x54
 80050e4:	2301      	movs	r3, #1
 80050e6:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ea:	f383 8810 	msr	PRIMASK, r3
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	497c      	ldr	r1, [pc, #496]	; (80052ec <HAL_UART_Abort_IT+0x250>)
 80050fc:	400a      	ands	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
 8005100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005102:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005106:	f383 8810 	msr	PRIMASK, r3
}
 800510a:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d118      	bne.n	8005146 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800511c:	653b      	str	r3, [r7, #80]	; 0x50
 800511e:	2301      	movs	r3, #1
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2110      	movs	r1, #16
 8005136:	438a      	bics	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00f      	beq.n	800516e <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	4013      	ands	r3, r2
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d104      	bne.n	8005166 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005160:	4a63      	ldr	r2, [pc, #396]	; (80052f0 <HAL_UART_Abort_IT+0x254>)
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
 8005164:	e003      	b.n	800516e <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516a:	2200      	movs	r2, #0
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00f      	beq.n	8005196 <HAL_UART_Abort_IT+0xfa>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2240      	movs	r2, #64	; 0x40
 800517e:	4013      	ands	r3, r2
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d104      	bne.n	800518e <HAL_UART_Abort_IT+0xf2>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005188:	4a5a      	ldr	r2, [pc, #360]	; (80052f4 <HAL_UART_Abort_IT+0x258>)
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
 800518c:	e003      	b.n	8005196 <HAL_UART_Abort_IT+0xfa>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005192:	2200      	movs	r2, #0
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	4013      	ands	r3, r2
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	d12a      	bne.n	80051fa <HAL_UART_Abort_IT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a4:	f3ef 8310 	mrs	r3, PRIMASK
 80051a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80051aa:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ae:	2301      	movs	r3, #1
 80051b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f383 8810 	msr	PRIMASK, r3
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2180      	movs	r1, #128	; 0x80
 80051c6:	438a      	bics	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]
 80051ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f383 8810 	msr	PRIMASK, r3
}
 80051d4:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <HAL_UART_Abort_IT+0x15e>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7fd f804 	bl	80021f0 <HAL_DMA_Abort_IT>
 80051e8:	1e03      	subs	r3, r0, #0
 80051ea:	d004      	beq.n	80051f6 <HAL_UART_Abort_IT+0x15a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f0:	2200      	movs	r2, #0
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
 80051f4:	e001      	b.n	80051fa <HAL_UART_Abort_IT+0x15e>
      }
      else
      {
        abortcplt = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2240      	movs	r2, #64	; 0x40
 8005202:	4013      	ands	r3, r2
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d12c      	bne.n	8005262 <HAL_UART_Abort_IT+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005208:	f3ef 8310 	mrs	r3, PRIMASK
 800520c:	60fb      	str	r3, [r7, #12]
  return(result);
 800520e:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48
 8005212:	2301      	movs	r3, #1
 8005214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2140      	movs	r1, #64	; 0x40
 800522a:	438a      	bics	r2, r1
 800522c:	609a      	str	r2, [r3, #8]
 800522e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005230:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00f      	beq.n	8005262 <HAL_UART_Abort_IT+0x1c6>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005246:	0018      	movs	r0, r3
 8005248:	f7fc ffd2 	bl	80021f0 <HAL_DMA_Abort_IT>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d006      	beq.n	800525e <HAL_UART_Abort_IT+0x1c2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005254:	2200      	movs	r2, #0
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800525c:	e001      	b.n	8005262 <HAL_UART_Abort_IT+0x1c6>
      }
      else
      {
        abortcplt = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8005262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d13a      	bne.n	80052de <HAL_UART_Abort_IT+0x242>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2256      	movs	r2, #86	; 0x56
 800526c:	2100      	movs	r1, #0
 800526e:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	225e      	movs	r2, #94	; 0x5e
 8005274:	2100      	movs	r1, #0
 8005276:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	228c      	movs	r2, #140	; 0x8c
 8005288:	2100      	movs	r1, #0
 800528a:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	220f      	movs	r2, #15
 8005292:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	059b      	lsls	r3, r3, #22
 800529c:	429a      	cmp	r2, r3
 800529e:	d107      	bne.n	80052b0 <HAL_UART_Abort_IT+0x214>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2110      	movs	r1, #16
 80052ac:	430a      	orrs	r2, r1
 80052ae:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2108      	movs	r1, #8
 80052bc:	430a      	orrs	r2, r1
 80052be:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2284      	movs	r2, #132	; 0x84
 80052c4:	2120      	movs	r1, #32
 80052c6:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2288      	movs	r2, #136	; 0x88
 80052cc:	2120      	movs	r1, #32
 80052ce:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	0018      	movs	r0, r3
 80052da:	f000 fb3f 	bl	800595c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b018      	add	sp, #96	; 0x60
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	fffffe1f 	.word	0xfffffe1f
 80052ec:	ef7ffffe 	.word	0xef7ffffe
 80052f0:	0800679b 	.word	0x0800679b
 80052f4:	08006827 	.word	0x08006827

080052f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f8:	b5b0      	push	{r4, r5, r7, lr}
 80052fa:	b0aa      	sub	sp, #168	; 0xa8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	22a4      	movs	r2, #164	; 0xa4
 8005308:	18b9      	adds	r1, r7, r2
 800530a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	20a0      	movs	r0, #160	; 0xa0
 8005314:	1839      	adds	r1, r7, r0
 8005316:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	249c      	movs	r4, #156	; 0x9c
 8005320:	1939      	adds	r1, r7, r4
 8005322:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005324:	0011      	movs	r1, r2
 8005326:	18bb      	adds	r3, r7, r2
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4aa0      	ldr	r2, [pc, #640]	; (80055ac <HAL_UART_IRQHandler+0x2b4>)
 800532c:	4013      	ands	r3, r2
 800532e:	2298      	movs	r2, #152	; 0x98
 8005330:	18bd      	adds	r5, r7, r2
 8005332:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005334:	18bb      	adds	r3, r7, r2
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11a      	bne.n	8005372 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800533c:	187b      	adds	r3, r7, r1
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2220      	movs	r2, #32
 8005342:	4013      	ands	r3, r2
 8005344:	d015      	beq.n	8005372 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005346:	183b      	adds	r3, r7, r0
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2220      	movs	r2, #32
 800534c:	4013      	ands	r3, r2
 800534e:	d105      	bne.n	800535c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005350:	193b      	adds	r3, r7, r4
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	055b      	lsls	r3, r3, #21
 8005358:	4013      	ands	r3, r2
 800535a:	d00a      	beq.n	8005372 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	2b00      	cmp	r3, #0
 8005362:	d100      	bne.n	8005366 <HAL_UART_IRQHandler+0x6e>
 8005364:	e2cf      	b.n	8005906 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	0010      	movs	r0, r2
 800536e:	4798      	blx	r3
      }
      return;
 8005370:	e2c9      	b.n	8005906 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005372:	2398      	movs	r3, #152	; 0x98
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d100      	bne.n	800537e <HAL_UART_IRQHandler+0x86>
 800537c:	e11e      	b.n	80055bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800537e:	239c      	movs	r3, #156	; 0x9c
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a8a      	ldr	r2, [pc, #552]	; (80055b0 <HAL_UART_IRQHandler+0x2b8>)
 8005386:	4013      	ands	r3, r2
 8005388:	d106      	bne.n	8005398 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800538a:	23a0      	movs	r3, #160	; 0xa0
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a88      	ldr	r2, [pc, #544]	; (80055b4 <HAL_UART_IRQHandler+0x2bc>)
 8005392:	4013      	ands	r3, r2
 8005394:	d100      	bne.n	8005398 <HAL_UART_IRQHandler+0xa0>
 8005396:	e111      	b.n	80055bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005398:	23a4      	movs	r3, #164	; 0xa4
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2201      	movs	r2, #1
 80053a0:	4013      	ands	r3, r2
 80053a2:	d012      	beq.n	80053ca <HAL_UART_IRQHandler+0xd2>
 80053a4:	23a0      	movs	r3, #160	; 0xa0
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4013      	ands	r3, r2
 80053b0:	d00b      	beq.n	80053ca <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	228c      	movs	r2, #140	; 0x8c
 80053be:	589b      	ldr	r3, [r3, r2]
 80053c0:	2201      	movs	r2, #1
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	218c      	movs	r1, #140	; 0x8c
 80053c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053ca:	23a4      	movs	r3, #164	; 0xa4
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2202      	movs	r2, #2
 80053d2:	4013      	ands	r3, r2
 80053d4:	d011      	beq.n	80053fa <HAL_UART_IRQHandler+0x102>
 80053d6:	239c      	movs	r3, #156	; 0x9c
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2201      	movs	r2, #1
 80053de:	4013      	ands	r3, r2
 80053e0:	d00b      	beq.n	80053fa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2202      	movs	r2, #2
 80053e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	228c      	movs	r2, #140	; 0x8c
 80053ee:	589b      	ldr	r3, [r3, r2]
 80053f0:	2204      	movs	r2, #4
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	218c      	movs	r1, #140	; 0x8c
 80053f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fa:	23a4      	movs	r3, #164	; 0xa4
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2204      	movs	r2, #4
 8005402:	4013      	ands	r3, r2
 8005404:	d011      	beq.n	800542a <HAL_UART_IRQHandler+0x132>
 8005406:	239c      	movs	r3, #156	; 0x9c
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2201      	movs	r2, #1
 800540e:	4013      	ands	r3, r2
 8005410:	d00b      	beq.n	800542a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2204      	movs	r2, #4
 8005418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	228c      	movs	r2, #140	; 0x8c
 800541e:	589b      	ldr	r3, [r3, r2]
 8005420:	2202      	movs	r2, #2
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	218c      	movs	r1, #140	; 0x8c
 8005428:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800542a:	23a4      	movs	r3, #164	; 0xa4
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2208      	movs	r2, #8
 8005432:	4013      	ands	r3, r2
 8005434:	d017      	beq.n	8005466 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005436:	23a0      	movs	r3, #160	; 0xa0
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2220      	movs	r2, #32
 800543e:	4013      	ands	r3, r2
 8005440:	d105      	bne.n	800544e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005442:	239c      	movs	r3, #156	; 0x9c
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a59      	ldr	r2, [pc, #356]	; (80055b0 <HAL_UART_IRQHandler+0x2b8>)
 800544a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800544c:	d00b      	beq.n	8005466 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2208      	movs	r2, #8
 8005454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	228c      	movs	r2, #140	; 0x8c
 800545a:	589b      	ldr	r3, [r3, r2]
 800545c:	2208      	movs	r2, #8
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	218c      	movs	r1, #140	; 0x8c
 8005464:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005466:	23a4      	movs	r3, #164	; 0xa4
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4013      	ands	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_UART_IRQHandler+0x1a4>
 8005474:	23a0      	movs	r3, #160	; 0xa0
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	04db      	lsls	r3, r3, #19
 800547e:	4013      	ands	r3, r2
 8005480:	d00c      	beq.n	800549c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2280      	movs	r2, #128	; 0x80
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	228c      	movs	r2, #140	; 0x8c
 8005490:	589b      	ldr	r3, [r3, r2]
 8005492:	2220      	movs	r2, #32
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	218c      	movs	r1, #140	; 0x8c
 800549a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	228c      	movs	r2, #140	; 0x8c
 80054a0:	589b      	ldr	r3, [r3, r2]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d100      	bne.n	80054a8 <HAL_UART_IRQHandler+0x1b0>
 80054a6:	e230      	b.n	800590a <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054a8:	23a4      	movs	r3, #164	; 0xa4
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2220      	movs	r2, #32
 80054b0:	4013      	ands	r3, r2
 80054b2:	d015      	beq.n	80054e0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054b4:	23a0      	movs	r3, #160	; 0xa0
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2220      	movs	r2, #32
 80054bc:	4013      	ands	r3, r2
 80054be:	d106      	bne.n	80054ce <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054c0:	239c      	movs	r3, #156	; 0x9c
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	055b      	lsls	r3, r3, #21
 80054ca:	4013      	ands	r3, r2
 80054cc:	d008      	beq.n	80054e0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	0010      	movs	r0, r2
 80054de:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	228c      	movs	r2, #140	; 0x8c
 80054e4:	589b      	ldr	r3, [r3, r2]
 80054e6:	2194      	movs	r1, #148	; 0x94
 80054e8:	187a      	adds	r2, r7, r1
 80054ea:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2240      	movs	r2, #64	; 0x40
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d004      	beq.n	8005504 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054fa:	187b      	adds	r3, r7, r1
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2228      	movs	r2, #40	; 0x28
 8005500:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005502:	d047      	beq.n	8005594 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	0018      	movs	r0, r3
 8005508:	f001 f82c 	bl	8006564 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2240      	movs	r2, #64	; 0x40
 8005514:	4013      	ands	r3, r2
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d137      	bne.n	800558a <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551a:	f3ef 8310 	mrs	r3, PRIMASK
 800551e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005522:	2090      	movs	r0, #144	; 0x90
 8005524:	183a      	adds	r2, r7, r0
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	2301      	movs	r3, #1
 800552a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552e:	f383 8810 	msr	PRIMASK, r3
}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2140      	movs	r1, #64	; 0x40
 8005540:	438a      	bics	r2, r1
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	183b      	adds	r3, r7, r0
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800554c:	f383 8810 	msr	PRIMASK, r3
}
 8005550:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d012      	beq.n	8005580 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555e:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <HAL_UART_IRQHandler+0x2c0>)
 8005560:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005566:	0018      	movs	r0, r3
 8005568:	f7fc fe42 	bl	80021f0 <HAL_DMA_Abort_IT>
 800556c:	1e03      	subs	r3, r0, #0
 800556e:	d01a      	beq.n	80055a6 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557a:	0018      	movs	r0, r3
 800557c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557e:	e012      	b.n	80055a6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	0018      	movs	r0, r3
 8005584:	f000 f9e2 	bl	800594c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e00d      	b.n	80055a6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	0018      	movs	r0, r3
 800558e:	f000 f9dd 	bl	800594c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005592:	e008      	b.n	80055a6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	0018      	movs	r0, r3
 8005598:	f000 f9d8 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	228c      	movs	r2, #140	; 0x8c
 80055a0:	2100      	movs	r1, #0
 80055a2:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80055a4:	e1b1      	b.n	800590a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a6:	46c0      	nop			; (mov r8, r8)
    return;
 80055a8:	e1af      	b.n	800590a <HAL_UART_IRQHandler+0x612>
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	0000080f 	.word	0x0000080f
 80055b0:	10000001 	.word	0x10000001
 80055b4:	04000120 	.word	0x04000120
 80055b8:	0800676d 	.word	0x0800676d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d000      	beq.n	80055c6 <HAL_UART_IRQHandler+0x2ce>
 80055c4:	e135      	b.n	8005832 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055c6:	23a4      	movs	r3, #164	; 0xa4
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2210      	movs	r2, #16
 80055ce:	4013      	ands	r3, r2
 80055d0:	d100      	bne.n	80055d4 <HAL_UART_IRQHandler+0x2dc>
 80055d2:	e12e      	b.n	8005832 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055d4:	23a0      	movs	r3, #160	; 0xa0
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2210      	movs	r2, #16
 80055dc:	4013      	ands	r3, r2
 80055de:	d100      	bne.n	80055e2 <HAL_UART_IRQHandler+0x2ea>
 80055e0:	e127      	b.n	8005832 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2210      	movs	r2, #16
 80055e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d000      	beq.n	80055fa <HAL_UART_IRQHandler+0x302>
 80055f8:	e09e      	b.n	8005738 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	217e      	movs	r1, #126	; 0x7e
 8005604:	187b      	adds	r3, r7, r1
 8005606:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005608:	187b      	adds	r3, r7, r1
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d100      	bne.n	8005612 <HAL_UART_IRQHandler+0x31a>
 8005610:	e17d      	b.n	800590e <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	225c      	movs	r2, #92	; 0x5c
 8005616:	5a9b      	ldrh	r3, [r3, r2]
 8005618:	187a      	adds	r2, r7, r1
 800561a:	8812      	ldrh	r2, [r2, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d300      	bcc.n	8005622 <HAL_UART_IRQHandler+0x32a>
 8005620:	e175      	b.n	800590e <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	187a      	adds	r2, r7, r1
 8005626:	215e      	movs	r1, #94	; 0x5e
 8005628:	8812      	ldrh	r2, [r2, #0]
 800562a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2220      	movs	r2, #32
 8005636:	4013      	ands	r3, r2
 8005638:	d16f      	bne.n	800571a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563a:	f3ef 8310 	mrs	r3, PRIMASK
 800563e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005642:	67bb      	str	r3, [r7, #120]	; 0x78
 8005644:	2301      	movs	r3, #1
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	f383 8810 	msr	PRIMASK, r3
}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	49b1      	ldr	r1, [pc, #708]	; (8005920 <HAL_UART_IRQHandler+0x628>)
 800565c:	400a      	ands	r2, r1
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f383 8810 	msr	PRIMASK, r3
}
 800566a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566c:	f3ef 8310 	mrs	r3, PRIMASK
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	677b      	str	r3, [r7, #116]	; 0x74
 8005676:	2301      	movs	r3, #1
 8005678:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567c:	f383 8810 	msr	PRIMASK, r3
}
 8005680:	46c0      	nop			; (mov r8, r8)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2101      	movs	r1, #1
 800568e:	438a      	bics	r2, r1
 8005690:	609a      	str	r2, [r3, #8]
 8005692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005694:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569e:	f3ef 8310 	mrs	r3, PRIMASK
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80056a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	673b      	str	r3, [r7, #112]	; 0x70
 80056a8:	2301      	movs	r3, #1
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ae:	f383 8810 	msr	PRIMASK, r3
}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2140      	movs	r1, #64	; 0x40
 80056c0:	438a      	bics	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ca:	f383 8810 	msr	PRIMASK, r3
}
 80056ce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2288      	movs	r2, #136	; 0x88
 80056d4:	2120      	movs	r1, #32
 80056d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80056e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e8:	2301      	movs	r3, #1
 80056ea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2110      	movs	r1, #16
 8005700:	438a      	bics	r2, r1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005714:	0018      	movs	r0, r3
 8005716:	f7fc fd09 	bl	800212c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	225c      	movs	r2, #92	; 0x5c
 800571e:	5a9a      	ldrh	r2, [r3, r2]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	215e      	movs	r1, #94	; 0x5e
 8005724:	5a5b      	ldrh	r3, [r3, r1]
 8005726:	b29b      	uxth	r3, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	0011      	movs	r1, r2
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f91b 	bl	800596c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005736:	e0ea      	b.n	800590e <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	225c      	movs	r2, #92	; 0x5c
 800573c:	5a99      	ldrh	r1, [r3, r2]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	225e      	movs	r2, #94	; 0x5e
 8005742:	5a9b      	ldrh	r3, [r3, r2]
 8005744:	b29a      	uxth	r2, r3
 8005746:	208e      	movs	r0, #142	; 0x8e
 8005748:	183b      	adds	r3, r7, r0
 800574a:	1a8a      	subs	r2, r1, r2
 800574c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	225e      	movs	r2, #94	; 0x5e
 8005752:	5a9b      	ldrh	r3, [r3, r2]
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d100      	bne.n	800575c <HAL_UART_IRQHandler+0x464>
 800575a:	e0da      	b.n	8005912 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 800575c:	183b      	adds	r3, r7, r0
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d100      	bne.n	8005766 <HAL_UART_IRQHandler+0x46e>
 8005764:	e0d5      	b.n	8005912 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005766:	f3ef 8310 	mrs	r3, PRIMASK
 800576a:	60fb      	str	r3, [r7, #12]
  return(result);
 800576c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800576e:	2488      	movs	r4, #136	; 0x88
 8005770:	193a      	adds	r2, r7, r4
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	2301      	movs	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4966      	ldr	r1, [pc, #408]	; (8005924 <HAL_UART_IRQHandler+0x62c>)
 800578c:	400a      	ands	r2, r1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	193b      	adds	r3, r7, r4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579e:	f3ef 8310 	mrs	r3, PRIMASK
 80057a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80057a4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057a6:	2484      	movs	r4, #132	; 0x84
 80057a8:	193a      	adds	r2, r7, r4
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	2301      	movs	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f383 8810 	msr	PRIMASK, r3
}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4959      	ldr	r1, [pc, #356]	; (8005928 <HAL_UART_IRQHandler+0x630>)
 80057c4:	400a      	ands	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	193b      	adds	r3, r7, r4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2288      	movs	r2, #136	; 0x88
 80057da:	2120      	movs	r1, #32
 80057dc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ea:	f3ef 8310 	mrs	r3, PRIMASK
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f2:	2480      	movs	r4, #128	; 0x80
 80057f4:	193a      	adds	r2, r7, r4
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	2301      	movs	r3, #1
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	f383 8810 	msr	PRIMASK, r3
}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2110      	movs	r1, #16
 8005810:	438a      	bics	r2, r1
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	193b      	adds	r3, r7, r4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005822:	183b      	adds	r3, r7, r0
 8005824:	881a      	ldrh	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0011      	movs	r1, r2
 800582a:	0018      	movs	r0, r3
 800582c:	f000 f89e 	bl	800596c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005830:	e06f      	b.n	8005912 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005832:	23a4      	movs	r3, #164	; 0xa4
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	035b      	lsls	r3, r3, #13
 800583c:	4013      	ands	r3, r2
 800583e:	d010      	beq.n	8005862 <HAL_UART_IRQHandler+0x56a>
 8005840:	239c      	movs	r3, #156	; 0x9c
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	03db      	lsls	r3, r3, #15
 800584a:	4013      	ands	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2280      	movs	r2, #128	; 0x80
 8005854:	0352      	lsls	r2, r2, #13
 8005856:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	0018      	movs	r0, r3
 800585c:	f001 fca0 	bl	80071a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005860:	e05a      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005862:	23a4      	movs	r3, #164	; 0xa4
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	4013      	ands	r3, r2
 800586c:	d016      	beq.n	800589c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800586e:	23a0      	movs	r3, #160	; 0xa0
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	4013      	ands	r3, r2
 8005878:	d106      	bne.n	8005888 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800587a:	239c      	movs	r3, #156	; 0x9c
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	4013      	ands	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588c:	2b00      	cmp	r3, #0
 800588e:	d042      	beq.n	8005916 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	0010      	movs	r0, r2
 8005898:	4798      	blx	r3
    }
    return;
 800589a:	e03c      	b.n	8005916 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800589c:	23a4      	movs	r3, #164	; 0xa4
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2240      	movs	r2, #64	; 0x40
 80058a4:	4013      	ands	r3, r2
 80058a6:	d00a      	beq.n	80058be <HAL_UART_IRQHandler+0x5c6>
 80058a8:	23a0      	movs	r3, #160	; 0xa0
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2240      	movs	r2, #64	; 0x40
 80058b0:	4013      	ands	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fff5 	bl	80068a6 <UART_EndTransmit_IT>
    return;
 80058bc:	e02c      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058be:	23a4      	movs	r3, #164	; 0xa4
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	4013      	ands	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <HAL_UART_IRQHandler+0x5ec>
 80058cc:	23a0      	movs	r3, #160	; 0xa0
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	05db      	lsls	r3, r3, #23
 80058d6:	4013      	ands	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f001 fc6f 	bl	80071c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058e2:	e019      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058e4:	23a4      	movs	r3, #164	; 0xa4
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	045b      	lsls	r3, r3, #17
 80058ee:	4013      	ands	r3, r2
 80058f0:	d012      	beq.n	8005918 <HAL_UART_IRQHandler+0x620>
 80058f2:	23a0      	movs	r3, #160	; 0xa0
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da0d      	bge.n	8005918 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0018      	movs	r0, r3
 8005900:	f001 fc56 	bl	80071b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005904:	e008      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
      return;
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	e006      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
    return;
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	e004      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
      return;
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	e002      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
      return;
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	e000      	b.n	8005918 <HAL_UART_IRQHandler+0x620>
    return;
 8005916:	46c0      	nop			; (mov r8, r8)
  }
}
 8005918:	46bd      	mov	sp, r7
 800591a:	b02a      	add	sp, #168	; 0xa8
 800591c:	bdb0      	pop	{r4, r5, r7, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	fffffeff 	.word	0xfffffeff
 8005924:	fffffedf 	.word	0xfffffedf
 8005928:	effffffe 	.word	0xeffffffe

0800592c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b002      	add	sp, #8
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	000a      	movs	r2, r1
 8005976:	1cbb      	adds	r3, r7, #2
 8005978:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b002      	add	sp, #8
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	b5b0      	push	{r4, r5, r7, lr}
 8005986:	b090      	sub	sp, #64	; 0x40
 8005988:	af00      	add	r7, sp, #0
 800598a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800598c:	231a      	movs	r3, #26
 800598e:	2220      	movs	r2, #32
 8005990:	189b      	adds	r3, r3, r2
 8005992:	19db      	adds	r3, r3, r7
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	431a      	orrs	r2, r3
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4aaf      	ldr	r2, [pc, #700]	; (8005c74 <UART_SetConfig+0x2f0>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	0019      	movs	r1, r3
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	430b      	orrs	r3, r1
 80059c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4aaa      	ldr	r2, [pc, #680]	; (8005c78 <UART_SetConfig+0x2f4>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	0018      	movs	r0, r3
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	68d9      	ldr	r1, [r3, #12]
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	0003      	movs	r3, r0
 80059dc:	430b      	orrs	r3, r1
 80059de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4aa4      	ldr	r2, [pc, #656]	; (8005c7c <UART_SetConfig+0x2f8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059f6:	4313      	orrs	r3, r2
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	4a9f      	ldr	r2, [pc, #636]	; (8005c80 <UART_SetConfig+0x2fc>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	0019      	movs	r1, r3
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	220f      	movs	r2, #15
 8005a18:	4393      	bics	r3, r2
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	0003      	movs	r3, r0
 8005a26:	430b      	orrs	r3, r1
 8005a28:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a95      	ldr	r2, [pc, #596]	; (8005c84 <UART_SetConfig+0x300>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d131      	bne.n	8005a98 <UART_SetConfig+0x114>
 8005a34:	4b94      	ldr	r3, [pc, #592]	; (8005c88 <UART_SetConfig+0x304>)
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a38:	2203      	movs	r2, #3
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d01d      	beq.n	8005a7c <UART_SetConfig+0xf8>
 8005a40:	d823      	bhi.n	8005a8a <UART_SetConfig+0x106>
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d00c      	beq.n	8005a60 <UART_SetConfig+0xdc>
 8005a46:	d820      	bhi.n	8005a8a <UART_SetConfig+0x106>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <UART_SetConfig+0xce>
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d00e      	beq.n	8005a6e <UART_SetConfig+0xea>
 8005a50:	e01b      	b.n	8005a8a <UART_SetConfig+0x106>
 8005a52:	231b      	movs	r3, #27
 8005a54:	2220      	movs	r2, #32
 8005a56:	189b      	adds	r3, r3, r2
 8005a58:	19db      	adds	r3, r3, r7
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	e0b4      	b.n	8005bca <UART_SetConfig+0x246>
 8005a60:	231b      	movs	r3, #27
 8005a62:	2220      	movs	r2, #32
 8005a64:	189b      	adds	r3, r3, r2
 8005a66:	19db      	adds	r3, r3, r7
 8005a68:	2202      	movs	r2, #2
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	e0ad      	b.n	8005bca <UART_SetConfig+0x246>
 8005a6e:	231b      	movs	r3, #27
 8005a70:	2220      	movs	r2, #32
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	19db      	adds	r3, r3, r7
 8005a76:	2204      	movs	r2, #4
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	e0a6      	b.n	8005bca <UART_SetConfig+0x246>
 8005a7c:	231b      	movs	r3, #27
 8005a7e:	2220      	movs	r2, #32
 8005a80:	189b      	adds	r3, r3, r2
 8005a82:	19db      	adds	r3, r3, r7
 8005a84:	2208      	movs	r2, #8
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	e09f      	b.n	8005bca <UART_SetConfig+0x246>
 8005a8a:	231b      	movs	r3, #27
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	19db      	adds	r3, r3, r7
 8005a92:	2210      	movs	r2, #16
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	e098      	b.n	8005bca <UART_SetConfig+0x246>
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a7b      	ldr	r2, [pc, #492]	; (8005c8c <UART_SetConfig+0x308>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d131      	bne.n	8005b06 <UART_SetConfig+0x182>
 8005aa2:	4b79      	ldr	r3, [pc, #484]	; (8005c88 <UART_SetConfig+0x304>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b0c      	cmp	r3, #12
 8005aac:	d01d      	beq.n	8005aea <UART_SetConfig+0x166>
 8005aae:	d823      	bhi.n	8005af8 <UART_SetConfig+0x174>
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d00c      	beq.n	8005ace <UART_SetConfig+0x14a>
 8005ab4:	d820      	bhi.n	8005af8 <UART_SetConfig+0x174>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <UART_SetConfig+0x13c>
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d00e      	beq.n	8005adc <UART_SetConfig+0x158>
 8005abe:	e01b      	b.n	8005af8 <UART_SetConfig+0x174>
 8005ac0:	231b      	movs	r3, #27
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	189b      	adds	r3, r3, r2
 8005ac6:	19db      	adds	r3, r3, r7
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e07d      	b.n	8005bca <UART_SetConfig+0x246>
 8005ace:	231b      	movs	r3, #27
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	19db      	adds	r3, r3, r7
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e076      	b.n	8005bca <UART_SetConfig+0x246>
 8005adc:	231b      	movs	r3, #27
 8005ade:	2220      	movs	r2, #32
 8005ae0:	189b      	adds	r3, r3, r2
 8005ae2:	19db      	adds	r3, r3, r7
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e06f      	b.n	8005bca <UART_SetConfig+0x246>
 8005aea:	231b      	movs	r3, #27
 8005aec:	2220      	movs	r2, #32
 8005aee:	189b      	adds	r3, r3, r2
 8005af0:	19db      	adds	r3, r3, r7
 8005af2:	2208      	movs	r2, #8
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e068      	b.n	8005bca <UART_SetConfig+0x246>
 8005af8:	231b      	movs	r3, #27
 8005afa:	2220      	movs	r2, #32
 8005afc:	189b      	adds	r3, r3, r2
 8005afe:	19db      	adds	r3, r3, r7
 8005b00:	2210      	movs	r2, #16
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	e061      	b.n	8005bca <UART_SetConfig+0x246>
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a61      	ldr	r2, [pc, #388]	; (8005c90 <UART_SetConfig+0x30c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d106      	bne.n	8005b1e <UART_SetConfig+0x19a>
 8005b10:	231b      	movs	r3, #27
 8005b12:	2220      	movs	r2, #32
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	19db      	adds	r3, r3, r7
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e055      	b.n	8005bca <UART_SetConfig+0x246>
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5c      	ldr	r2, [pc, #368]	; (8005c94 <UART_SetConfig+0x310>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d106      	bne.n	8005b36 <UART_SetConfig+0x1b2>
 8005b28:	231b      	movs	r3, #27
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	189b      	adds	r3, r3, r2
 8005b2e:	19db      	adds	r3, r3, r7
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e049      	b.n	8005bca <UART_SetConfig+0x246>
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a50      	ldr	r2, [pc, #320]	; (8005c7c <UART_SetConfig+0x2f8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d13e      	bne.n	8005bbe <UART_SetConfig+0x23a>
 8005b40:	4b51      	ldr	r3, [pc, #324]	; (8005c88 <UART_SetConfig+0x304>)
 8005b42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b44:	23c0      	movs	r3, #192	; 0xc0
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	22c0      	movs	r2, #192	; 0xc0
 8005b4c:	0112      	lsls	r2, r2, #4
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d027      	beq.n	8005ba2 <UART_SetConfig+0x21e>
 8005b52:	22c0      	movs	r2, #192	; 0xc0
 8005b54:	0112      	lsls	r2, r2, #4
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d82a      	bhi.n	8005bb0 <UART_SetConfig+0x22c>
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	0112      	lsls	r2, r2, #4
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d011      	beq.n	8005b86 <UART_SetConfig+0x202>
 8005b62:	2280      	movs	r2, #128	; 0x80
 8005b64:	0112      	lsls	r2, r2, #4
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d822      	bhi.n	8005bb0 <UART_SetConfig+0x22c>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <UART_SetConfig+0x1f4>
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	00d2      	lsls	r2, r2, #3
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <UART_SetConfig+0x210>
 8005b76:	e01b      	b.n	8005bb0 <UART_SetConfig+0x22c>
 8005b78:	231b      	movs	r3, #27
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	189b      	adds	r3, r3, r2
 8005b7e:	19db      	adds	r3, r3, r7
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	e021      	b.n	8005bca <UART_SetConfig+0x246>
 8005b86:	231b      	movs	r3, #27
 8005b88:	2220      	movs	r2, #32
 8005b8a:	189b      	adds	r3, r3, r2
 8005b8c:	19db      	adds	r3, r3, r7
 8005b8e:	2202      	movs	r2, #2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	e01a      	b.n	8005bca <UART_SetConfig+0x246>
 8005b94:	231b      	movs	r3, #27
 8005b96:	2220      	movs	r2, #32
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	19db      	adds	r3, r3, r7
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e013      	b.n	8005bca <UART_SetConfig+0x246>
 8005ba2:	231b      	movs	r3, #27
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	189b      	adds	r3, r3, r2
 8005ba8:	19db      	adds	r3, r3, r7
 8005baa:	2208      	movs	r2, #8
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	e00c      	b.n	8005bca <UART_SetConfig+0x246>
 8005bb0:	231b      	movs	r3, #27
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	19db      	adds	r3, r3, r7
 8005bb8:	2210      	movs	r2, #16
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e005      	b.n	8005bca <UART_SetConfig+0x246>
 8005bbe:	231b      	movs	r3, #27
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	189b      	adds	r3, r3, r2
 8005bc4:	19db      	adds	r3, r3, r7
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2b      	ldr	r2, [pc, #172]	; (8005c7c <UART_SetConfig+0x2f8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d000      	beq.n	8005bd6 <UART_SetConfig+0x252>
 8005bd4:	e0a9      	b.n	8005d2a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bd6:	231b      	movs	r3, #27
 8005bd8:	2220      	movs	r2, #32
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	19db      	adds	r3, r3, r7
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d015      	beq.n	8005c10 <UART_SetConfig+0x28c>
 8005be4:	dc18      	bgt.n	8005c18 <UART_SetConfig+0x294>
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d00d      	beq.n	8005c06 <UART_SetConfig+0x282>
 8005bea:	dc15      	bgt.n	8005c18 <UART_SetConfig+0x294>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <UART_SetConfig+0x272>
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d005      	beq.n	8005c00 <UART_SetConfig+0x27c>
 8005bf4:	e010      	b.n	8005c18 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf6:	f7fd fb23 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bfe:	e014      	b.n	8005c2a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <UART_SetConfig+0x314>)
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c04:	e011      	b.n	8005c2a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c06:	f7fd fa8f 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c0e:	e00c      	b.n	8005c2a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c16:	e008      	b.n	8005c2a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005c1c:	231a      	movs	r3, #26
 8005c1e:	2220      	movs	r2, #32
 8005c20:	189b      	adds	r3, r3, r2
 8005c22:	19db      	adds	r3, r3, r7
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]
        break;
 8005c28:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d100      	bne.n	8005c32 <UART_SetConfig+0x2ae>
 8005c30:	e14b      	b.n	8005eca <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c36:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <UART_SetConfig+0x318>)
 8005c38:	0052      	lsls	r2, r2, #1
 8005c3a:	5ad3      	ldrh	r3, [r2, r3]
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c40:	f7fa fa62 	bl	8000108 <__udivsi3>
 8005c44:	0003      	movs	r3, r0
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	0013      	movs	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	189b      	adds	r3, r3, r2
 8005c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d305      	bcc.n	8005c64 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d91d      	bls.n	8005ca0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005c64:	231a      	movs	r3, #26
 8005c66:	2220      	movs	r2, #32
 8005c68:	189b      	adds	r3, r3, r2
 8005c6a:	19db      	adds	r3, r3, r7
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	e12b      	b.n	8005eca <UART_SetConfig+0x546>
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	cfff69f3 	.word	0xcfff69f3
 8005c78:	ffffcfff 	.word	0xffffcfff
 8005c7c:	40008000 	.word	0x40008000
 8005c80:	11fff4ff 	.word	0x11fff4ff
 8005c84:	40013800 	.word	0x40013800
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40004400 	.word	0x40004400
 8005c90:	40004800 	.word	0x40004800
 8005c94:	40004c00 	.word	0x40004c00
 8005c98:	00f42400 	.word	0x00f42400
 8005c9c:	0800755c 	.word	0x0800755c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cac:	4b92      	ldr	r3, [pc, #584]	; (8005ef8 <UART_SetConfig+0x574>)
 8005cae:	0052      	lsls	r2, r2, #1
 8005cb0:	5ad3      	ldrh	r3, [r2, r3]
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	69b8      	ldr	r0, [r7, #24]
 8005cbe:	69f9      	ldr	r1, [r7, #28]
 8005cc0:	f7fa fb98 	bl	80003f4 <__aeabi_uldivmod>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	000b      	movs	r3, r1
 8005cc8:	0e11      	lsrs	r1, r2, #24
 8005cca:	021d      	lsls	r5, r3, #8
 8005ccc:	430d      	orrs	r5, r1
 8005cce:	0214      	lsls	r4, r2, #8
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	1900      	adds	r0, r0, r4
 8005ce2:	4169      	adcs	r1, r5
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f7fa fb7f 	bl	80003f4 <__aeabi_uldivmod>
 8005cf6:	0002      	movs	r2, r0
 8005cf8:	000b      	movs	r3, r1
 8005cfa:	0013      	movs	r3, r2
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d00:	23c0      	movs	r3, #192	; 0xc0
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d309      	bcc.n	8005d1c <UART_SetConfig+0x398>
 8005d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	035b      	lsls	r3, r3, #13
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d204      	bcs.n	8005d1c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d18:	60da      	str	r2, [r3, #12]
 8005d1a:	e0d6      	b.n	8005eca <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005d1c:	231a      	movs	r3, #26
 8005d1e:	2220      	movs	r2, #32
 8005d20:	189b      	adds	r3, r3, r2
 8005d22:	19db      	adds	r3, r3, r7
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e0cf      	b.n	8005eca <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d000      	beq.n	8005d38 <UART_SetConfig+0x3b4>
 8005d36:	e070      	b.n	8005e1a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005d38:	231b      	movs	r3, #27
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	189b      	adds	r3, r3, r2
 8005d3e:	19db      	adds	r3, r3, r7
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d015      	beq.n	8005d72 <UART_SetConfig+0x3ee>
 8005d46:	dc18      	bgt.n	8005d7a <UART_SetConfig+0x3f6>
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d00d      	beq.n	8005d68 <UART_SetConfig+0x3e4>
 8005d4c:	dc15      	bgt.n	8005d7a <UART_SetConfig+0x3f6>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <UART_SetConfig+0x3d4>
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d005      	beq.n	8005d62 <UART_SetConfig+0x3de>
 8005d56:	e010      	b.n	8005d7a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d58:	f7fd fa72 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d60:	e014      	b.n	8005d8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d62:	4b66      	ldr	r3, [pc, #408]	; (8005efc <UART_SetConfig+0x578>)
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d66:	e011      	b.n	8005d8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d68:	f7fd f9de 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 8005d6c:	0003      	movs	r3, r0
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d70:	e00c      	b.n	8005d8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d78:	e008      	b.n	8005d8c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d7e:	231a      	movs	r3, #26
 8005d80:	2220      	movs	r2, #32
 8005d82:	189b      	adds	r3, r3, r2
 8005d84:	19db      	adds	r3, r3, r7
 8005d86:	2201      	movs	r2, #1
 8005d88:	701a      	strb	r2, [r3, #0]
        break;
 8005d8a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d100      	bne.n	8005d94 <UART_SetConfig+0x410>
 8005d92:	e09a      	b.n	8005eca <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d98:	4b57      	ldr	r3, [pc, #348]	; (8005ef8 <UART_SetConfig+0x574>)
 8005d9a:	0052      	lsls	r2, r2, #1
 8005d9c:	5ad3      	ldrh	r3, [r2, r3]
 8005d9e:	0019      	movs	r1, r3
 8005da0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005da2:	f7fa f9b1 	bl	8000108 <__udivsi3>
 8005da6:	0003      	movs	r3, r0
 8005da8:	005a      	lsls	r2, r3, #1
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	18d2      	adds	r2, r2, r3
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	0019      	movs	r1, r3
 8005db8:	0010      	movs	r0, r2
 8005dba:	f7fa f9a5 	bl	8000108 <__udivsi3>
 8005dbe:	0003      	movs	r3, r0
 8005dc0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2b0f      	cmp	r3, #15
 8005dc6:	d921      	bls.n	8005e0c <UART_SetConfig+0x488>
 8005dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	025b      	lsls	r3, r3, #9
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d21c      	bcs.n	8005e0c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	200e      	movs	r0, #14
 8005dd8:	2420      	movs	r4, #32
 8005dda:	1903      	adds	r3, r0, r4
 8005ddc:	19db      	adds	r3, r3, r7
 8005dde:	210f      	movs	r1, #15
 8005de0:	438a      	bics	r2, r1
 8005de2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2207      	movs	r2, #7
 8005dec:	4013      	ands	r3, r2
 8005dee:	b299      	uxth	r1, r3
 8005df0:	1903      	adds	r3, r0, r4
 8005df2:	19db      	adds	r3, r3, r7
 8005df4:	1902      	adds	r2, r0, r4
 8005df6:	19d2      	adds	r2, r2, r7
 8005df8:	8812      	ldrh	r2, [r2, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1902      	adds	r2, r0, r4
 8005e04:	19d2      	adds	r2, r2, r7
 8005e06:	8812      	ldrh	r2, [r2, #0]
 8005e08:	60da      	str	r2, [r3, #12]
 8005e0a:	e05e      	b.n	8005eca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005e0c:	231a      	movs	r3, #26
 8005e0e:	2220      	movs	r2, #32
 8005e10:	189b      	adds	r3, r3, r2
 8005e12:	19db      	adds	r3, r3, r7
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e057      	b.n	8005eca <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e1a:	231b      	movs	r3, #27
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	19db      	adds	r3, r3, r7
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d015      	beq.n	8005e54 <UART_SetConfig+0x4d0>
 8005e28:	dc18      	bgt.n	8005e5c <UART_SetConfig+0x4d8>
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d00d      	beq.n	8005e4a <UART_SetConfig+0x4c6>
 8005e2e:	dc15      	bgt.n	8005e5c <UART_SetConfig+0x4d8>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <UART_SetConfig+0x4b6>
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d005      	beq.n	8005e44 <UART_SetConfig+0x4c0>
 8005e38:	e010      	b.n	8005e5c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f7fd fa01 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8005e3e:	0003      	movs	r3, r0
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e42:	e014      	b.n	8005e6e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <UART_SetConfig+0x578>)
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e48:	e011      	b.n	8005e6e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7fd f96d 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 8005e4e:	0003      	movs	r3, r0
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e52:	e00c      	b.n	8005e6e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e5a:	e008      	b.n	8005e6e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005e60:	231a      	movs	r3, #26
 8005e62:	2220      	movs	r2, #32
 8005e64:	189b      	adds	r3, r3, r2
 8005e66:	19db      	adds	r3, r3, r7
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
        break;
 8005e6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d02a      	beq.n	8005eca <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e78:	4b1f      	ldr	r3, [pc, #124]	; (8005ef8 <UART_SetConfig+0x574>)
 8005e7a:	0052      	lsls	r2, r2, #1
 8005e7c:	5ad3      	ldrh	r3, [r2, r3]
 8005e7e:	0019      	movs	r1, r3
 8005e80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e82:	f7fa f941 	bl	8000108 <__udivsi3>
 8005e86:	0003      	movs	r3, r0
 8005e88:	001a      	movs	r2, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	18d2      	adds	r2, r2, r3
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	0019      	movs	r1, r3
 8005e98:	0010      	movs	r0, r2
 8005e9a:	f7fa f935 	bl	8000108 <__udivsi3>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d90a      	bls.n	8005ebe <UART_SetConfig+0x53a>
 8005ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eaa:	2380      	movs	r3, #128	; 0x80
 8005eac:	025b      	lsls	r3, r3, #9
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d205      	bcs.n	8005ebe <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
 8005ebc:	e005      	b.n	8005eca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005ebe:	231a      	movs	r3, #26
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	189b      	adds	r3, r3, r2
 8005ec4:	19db      	adds	r3, r3, r7
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	226a      	movs	r2, #106	; 0x6a
 8005ece:	2101      	movs	r1, #1
 8005ed0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2268      	movs	r2, #104	; 0x68
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	2200      	movs	r2, #0
 8005ede:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ee6:	231a      	movs	r3, #26
 8005ee8:	2220      	movs	r2, #32
 8005eea:	189b      	adds	r3, r3, r2
 8005eec:	19db      	adds	r3, r3, r7
 8005eee:	781b      	ldrb	r3, [r3, #0]
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b010      	add	sp, #64	; 0x40
 8005ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ef8:	0800755c 	.word	0x0800755c
 8005efc:	00f42400 	.word	0x00f42400

08005f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a4a      	ldr	r2, [pc, #296]	; (8006044 <UART_AdvFeatureConfig+0x144>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	2202      	movs	r2, #2
 8005f30:	4013      	ands	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4a43      	ldr	r2, [pc, #268]	; (8006048 <UART_AdvFeatureConfig+0x148>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	0019      	movs	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	2204      	movs	r2, #4
 8005f52:	4013      	ands	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a3b      	ldr	r2, [pc, #236]	; (800604c <UART_AdvFeatureConfig+0x14c>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	0019      	movs	r1, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	2208      	movs	r2, #8
 8005f74:	4013      	ands	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4a34      	ldr	r2, [pc, #208]	; (8006050 <UART_AdvFeatureConfig+0x150>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	2210      	movs	r2, #16
 8005f96:	4013      	ands	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	4a2c      	ldr	r2, [pc, #176]	; (8006054 <UART_AdvFeatureConfig+0x154>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4a25      	ldr	r2, [pc, #148]	; (8006058 <UART_AdvFeatureConfig+0x158>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	0019      	movs	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	2240      	movs	r2, #64	; 0x40
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d01d      	beq.n	800601a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a1d      	ldr	r2, [pc, #116]	; (800605c <UART_AdvFeatureConfig+0x15c>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	035b      	lsls	r3, r3, #13
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d10b      	bne.n	800601a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a15      	ldr	r2, [pc, #84]	; (8006060 <UART_AdvFeatureConfig+0x160>)
 800600a:	4013      	ands	r3, r2
 800600c:	0019      	movs	r1, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	2280      	movs	r2, #128	; 0x80
 8006020:	4013      	ands	r3, r2
 8006022:	d00b      	beq.n	800603c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4a0e      	ldr	r2, [pc, #56]	; (8006064 <UART_AdvFeatureConfig+0x164>)
 800602c:	4013      	ands	r3, r2
 800602e:	0019      	movs	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }
}
 800603c:	46c0      	nop			; (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	b002      	add	sp, #8
 8006042:	bd80      	pop	{r7, pc}
 8006044:	fffdffff 	.word	0xfffdffff
 8006048:	fffeffff 	.word	0xfffeffff
 800604c:	fffbffff 	.word	0xfffbffff
 8006050:	ffff7fff 	.word	0xffff7fff
 8006054:	ffffefff 	.word	0xffffefff
 8006058:	ffffdfff 	.word	0xffffdfff
 800605c:	ffefffff 	.word	0xffefffff
 8006060:	ff9fffff 	.word	0xff9fffff
 8006064:	fff7ffff 	.word	0xfff7ffff

08006068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af02      	add	r7, sp, #8
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	228c      	movs	r2, #140	; 0x8c
 8006074:	2100      	movs	r1, #0
 8006076:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006078:	f7fb fe4a 	bl	8001d10 <HAL_GetTick>
 800607c:	0003      	movs	r3, r0
 800607e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2208      	movs	r2, #8
 8006088:	4013      	ands	r3, r2
 800608a:	2b08      	cmp	r3, #8
 800608c:	d10c      	bne.n	80060a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2280      	movs	r2, #128	; 0x80
 8006092:	0391      	lsls	r1, r2, #14
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <UART_CheckIdleState+0x90>)
 8006098:	9200      	str	r2, [sp, #0]
 800609a:	2200      	movs	r2, #0
 800609c:	f000 f82e 	bl	80060fc <UART_WaitOnFlagUntilTimeout>
 80060a0:	1e03      	subs	r3, r0, #0
 80060a2:	d001      	beq.n	80060a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e023      	b.n	80060f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2204      	movs	r2, #4
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d10c      	bne.n	80060d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	03d1      	lsls	r1, r2, #15
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4a0e      	ldr	r2, [pc, #56]	; (80060f8 <UART_CheckIdleState+0x90>)
 80060c0:	9200      	str	r2, [sp, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f000 f81a 	bl	80060fc <UART_WaitOnFlagUntilTimeout>
 80060c8:	1e03      	subs	r3, r0, #0
 80060ca:	d001      	beq.n	80060d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2284      	movs	r2, #132	; 0x84
 80060d4:	2120      	movs	r1, #32
 80060d6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2288      	movs	r2, #136	; 0x88
 80060dc:	2120      	movs	r1, #32
 80060de:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2280      	movs	r2, #128	; 0x80
 80060ea:	2100      	movs	r1, #0
 80060ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	0018      	movs	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b004      	add	sp, #16
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	01ffffff 	.word	0x01ffffff

080060fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b094      	sub	sp, #80	; 0x50
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	1dfb      	adds	r3, r7, #7
 800610a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610c:	e0a7      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800610e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006110:	3301      	adds	r3, #1
 8006112:	d100      	bne.n	8006116 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006114:	e0a3      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006116:	f7fb fdfb 	bl	8001d10 <HAL_GetTick>
 800611a:	0002      	movs	r2, r0
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006122:	429a      	cmp	r2, r3
 8006124:	d302      	bcc.n	800612c <UART_WaitOnFlagUntilTimeout+0x30>
 8006126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006128:	2b00      	cmp	r3, #0
 800612a:	d13f      	bne.n	80061ac <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800612c:	f3ef 8310 	mrs	r3, PRIMASK
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
 8006136:	2301      	movs	r3, #1
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	f383 8810 	msr	PRIMASK, r3
}
 8006140:	46c0      	nop			; (mov r8, r8)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	494e      	ldr	r1, [pc, #312]	; (8006288 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800614e:	400a      	ands	r2, r1
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006154:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	f383 8810 	msr	PRIMASK, r3
}
 800615c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615e:	f3ef 8310 	mrs	r3, PRIMASK
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	643b      	str	r3, [r7, #64]	; 0x40
 8006168:	2301      	movs	r3, #1
 800616a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	f383 8810 	msr	PRIMASK, r3
}
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2101      	movs	r1, #1
 8006180:	438a      	bics	r2, r1
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	f383 8810 	msr	PRIMASK, r3
}
 800618e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2284      	movs	r2, #132	; 0x84
 8006194:	2120      	movs	r1, #32
 8006196:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2288      	movs	r2, #136	; 0x88
 800619c:	2120      	movs	r1, #32
 800619e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	2100      	movs	r1, #0
 80061a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e069      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2204      	movs	r2, #4
 80061b4:	4013      	ands	r3, r2
 80061b6:	d052      	beq.n	800625e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	401a      	ands	r2, r3
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d148      	bne.n	800625e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2280      	movs	r2, #128	; 0x80
 80061d2:	0112      	lsls	r2, r2, #4
 80061d4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d6:	f3ef 8310 	mrs	r3, PRIMASK
 80061da:	613b      	str	r3, [r7, #16]
  return(result);
 80061dc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e0:	2301      	movs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4924      	ldr	r1, [pc, #144]	; (8006288 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80061f8:	400a      	ands	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f383 8810 	msr	PRIMASK, r3
}
 8006206:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006208:	f3ef 8310 	mrs	r3, PRIMASK
 800620c:	61fb      	str	r3, [r7, #28]
  return(result);
 800620e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006210:	64bb      	str	r3, [r7, #72]	; 0x48
 8006212:	2301      	movs	r3, #1
 8006214:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f383 8810 	msr	PRIMASK, r3
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2101      	movs	r1, #1
 800622a:	438a      	bics	r2, r1
 800622c:	609a      	str	r2, [r3, #8]
 800622e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	f383 8810 	msr	PRIMASK, r3
}
 8006238:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2284      	movs	r2, #132	; 0x84
 800623e:	2120      	movs	r1, #32
 8006240:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2288      	movs	r2, #136	; 0x88
 8006246:	2120      	movs	r1, #32
 8006248:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	228c      	movs	r2, #140	; 0x8c
 800624e:	2120      	movs	r1, #32
 8006250:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2280      	movs	r2, #128	; 0x80
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e010      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	425a      	negs	r2, r3
 800626e:	4153      	adcs	r3, r2
 8006270:	b2db      	uxtb	r3, r3
 8006272:	001a      	movs	r2, r3
 8006274:	1dfb      	adds	r3, r7, #7
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d100      	bne.n	800627e <UART_WaitOnFlagUntilTimeout+0x182>
 800627c:	e747      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b014      	add	sp, #80	; 0x50
 8006286:	bd80      	pop	{r7, pc}
 8006288:	fffffe5f 	.word	0xfffffe5f

0800628c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b098      	sub	sp, #96	; 0x60
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	1dbb      	adds	r3, r7, #6
 8006298:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1dba      	adds	r2, r7, #6
 80062a4:	215c      	movs	r1, #92	; 0x5c
 80062a6:	8812      	ldrh	r2, [r2, #0]
 80062a8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1dba      	adds	r2, r7, #6
 80062ae:	215e      	movs	r1, #94	; 0x5e
 80062b0:	8812      	ldrh	r2, [r2, #0]
 80062b2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	015b      	lsls	r3, r3, #5
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d10d      	bne.n	80062e2 <UART_Start_Receive_IT+0x56>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <UART_Start_Receive_IT+0x4c>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2260      	movs	r2, #96	; 0x60
 80062d2:	497f      	ldr	r1, [pc, #508]	; (80064d0 <UART_Start_Receive_IT+0x244>)
 80062d4:	5299      	strh	r1, [r3, r2]
 80062d6:	e02e      	b.n	8006336 <UART_Start_Receive_IT+0xaa>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2260      	movs	r2, #96	; 0x60
 80062dc:	21ff      	movs	r1, #255	; 0xff
 80062de:	5299      	strh	r1, [r3, r2]
 80062e0:	e029      	b.n	8006336 <UART_Start_Receive_IT+0xaa>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <UART_Start_Receive_IT+0x7a>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <UART_Start_Receive_IT+0x70>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2260      	movs	r2, #96	; 0x60
 80062f6:	21ff      	movs	r1, #255	; 0xff
 80062f8:	5299      	strh	r1, [r3, r2]
 80062fa:	e01c      	b.n	8006336 <UART_Start_Receive_IT+0xaa>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2260      	movs	r2, #96	; 0x60
 8006300:	217f      	movs	r1, #127	; 0x7f
 8006302:	5299      	strh	r1, [r3, r2]
 8006304:	e017      	b.n	8006336 <UART_Start_Receive_IT+0xaa>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	2380      	movs	r3, #128	; 0x80
 800630c:	055b      	lsls	r3, r3, #21
 800630e:	429a      	cmp	r2, r3
 8006310:	d10d      	bne.n	800632e <UART_Start_Receive_IT+0xa2>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <UART_Start_Receive_IT+0x98>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2260      	movs	r2, #96	; 0x60
 800631e:	217f      	movs	r1, #127	; 0x7f
 8006320:	5299      	strh	r1, [r3, r2]
 8006322:	e008      	b.n	8006336 <UART_Start_Receive_IT+0xaa>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2260      	movs	r2, #96	; 0x60
 8006328:	213f      	movs	r1, #63	; 0x3f
 800632a:	5299      	strh	r1, [r3, r2]
 800632c:	e003      	b.n	8006336 <UART_Start_Receive_IT+0xaa>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2260      	movs	r2, #96	; 0x60
 8006332:	2100      	movs	r1, #0
 8006334:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	228c      	movs	r2, #140	; 0x8c
 800633a:	2100      	movs	r1, #0
 800633c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2288      	movs	r2, #136	; 0x88
 8006342:	2122      	movs	r1, #34	; 0x22
 8006344:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006346:	f3ef 8310 	mrs	r3, PRIMASK
 800634a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800634c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006350:	2301      	movs	r3, #1
 8006352:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006356:	f383 8810 	msr	PRIMASK, r3
}
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2101      	movs	r1, #1
 8006368:	430a      	orrs	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800636e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006372:	f383 8810 	msr	PRIMASK, r3
}
 8006376:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800637c:	2380      	movs	r3, #128	; 0x80
 800637e:	059b      	lsls	r3, r3, #22
 8006380:	429a      	cmp	r2, r3
 8006382:	d154      	bne.n	800642e <UART_Start_Receive_IT+0x1a2>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2268      	movs	r2, #104	; 0x68
 8006388:	5a9b      	ldrh	r3, [r3, r2]
 800638a:	1dba      	adds	r2, r7, #6
 800638c:	8812      	ldrh	r2, [r2, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d34d      	bcc.n	800642e <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	015b      	lsls	r3, r3, #5
 800639a:	429a      	cmp	r2, r3
 800639c:	d107      	bne.n	80063ae <UART_Start_Receive_IT+0x122>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a4a      	ldr	r2, [pc, #296]	; (80064d4 <UART_Start_Receive_IT+0x248>)
 80063aa:	671a      	str	r2, [r3, #112]	; 0x70
 80063ac:	e002      	b.n	80063b4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a49      	ldr	r2, [pc, #292]	; (80064d8 <UART_Start_Receive_IT+0x24c>)
 80063b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	2100      	movs	r1, #0
 80063ba:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d019      	beq.n	80063f8 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c4:	f3ef 8310 	mrs	r3, PRIMASK
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80063ce:	2301      	movs	r3, #1
 80063d0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	f383 8810 	msr	PRIMASK, r3
}
 80063d8:	46c0      	nop			; (mov r8, r8)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	0049      	lsls	r1, r1, #1
 80063e8:	430a      	orrs	r2, r1
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f2:	f383 8810 	msr	PRIMASK, r3
}
 80063f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f8:	f3ef 8310 	mrs	r3, PRIMASK
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006400:	657b      	str	r3, [r7, #84]	; 0x54
 8006402:	2301      	movs	r3, #1
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	f383 8810 	msr	PRIMASK, r3
}
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	0549      	lsls	r1, r1, #21
 800641c:	430a      	orrs	r2, r1
 800641e:	609a      	str	r2, [r3, #8]
 8006420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006422:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	f383 8810 	msr	PRIMASK, r3
}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	e04b      	b.n	80064c6 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	015b      	lsls	r3, r3, #5
 8006436:	429a      	cmp	r2, r3
 8006438:	d107      	bne.n	800644a <UART_Start_Receive_IT+0x1be>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4a25      	ldr	r2, [pc, #148]	; (80064dc <UART_Start_Receive_IT+0x250>)
 8006446:	671a      	str	r2, [r3, #112]	; 0x70
 8006448:	e002      	b.n	8006450 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4a24      	ldr	r2, [pc, #144]	; (80064e0 <UART_Start_Receive_IT+0x254>)
 800644e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2280      	movs	r2, #128	; 0x80
 8006454:	2100      	movs	r1, #0
 8006456:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d019      	beq.n	8006494 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006460:	f3ef 8310 	mrs	r3, PRIMASK
 8006464:	61fb      	str	r3, [r7, #28]
  return(result);
 8006466:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006468:	64fb      	str	r3, [r7, #76]	; 0x4c
 800646a:	2301      	movs	r3, #1
 800646c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f383 8810 	msr	PRIMASK, r3
}
 8006474:	46c0      	nop			; (mov r8, r8)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2190      	movs	r1, #144	; 0x90
 8006482:	0049      	lsls	r1, r1, #1
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	f383 8810 	msr	PRIMASK, r3
}
 8006492:	e018      	b.n	80064c6 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006494:	f3ef 8310 	mrs	r3, PRIMASK
 8006498:	613b      	str	r3, [r7, #16]
  return(result);
 800649a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800649c:	653b      	str	r3, [r7, #80]	; 0x50
 800649e:	2301      	movs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f383 8810 	msr	PRIMASK, r3
}
 80064a8:	46c0      	nop			; (mov r8, r8)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2120      	movs	r1, #32
 80064b6:	430a      	orrs	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b018      	add	sp, #96	; 0x60
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	000001ff 	.word	0x000001ff
 80064d4:	08006ebd 	.word	0x08006ebd
 80064d8:	08006bd9 	.word	0x08006bd9
 80064dc:	08006a6d 	.word	0x08006a6d
 80064e0:	08006901 	.word	0x08006901

080064e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ec:	f3ef 8310 	mrs	r3, PRIMASK
 80064f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80064f2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	2301      	movs	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f383 8810 	msr	PRIMASK, r3
}
 8006500:	46c0      	nop			; (mov r8, r8)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	21c0      	movs	r1, #192	; 0xc0
 800650e:	438a      	bics	r2, r1
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f383 8810 	msr	PRIMASK, r3
}
 800651c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	617b      	str	r3, [r7, #20]
  return(result);
 8006524:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006526:	623b      	str	r3, [r7, #32]
 8006528:	2301      	movs	r3, #1
 800652a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4908      	ldr	r1, [pc, #32]	; (8006560 <UART_EndTxTransfer+0x7c>)
 8006540:	400a      	ands	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2284      	movs	r2, #132	; 0x84
 8006554:	2120      	movs	r1, #32
 8006556:	5099      	str	r1, [r3, r2]
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	46bd      	mov	sp, r7
 800655c:	b00a      	add	sp, #40	; 0x28
 800655e:	bd80      	pop	{r7, pc}
 8006560:	ff7fffff 	.word	0xff7fffff

08006564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08e      	sub	sp, #56	; 0x38
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656c:	f3ef 8310 	mrs	r3, PRIMASK
 8006570:	617b      	str	r3, [r7, #20]
  return(result);
 8006572:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
 8006576:	2301      	movs	r3, #1
 8006578:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f383 8810 	msr	PRIMASK, r3
}
 8006580:	46c0      	nop			; (mov r8, r8)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4926      	ldr	r1, [pc, #152]	; (8006628 <UART_EndRxTransfer+0xc4>)
 800658e:	400a      	ands	r2, r1
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f383 8810 	msr	PRIMASK, r3
}
 800659c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659e:	f3ef 8310 	mrs	r3, PRIMASK
 80065a2:	623b      	str	r3, [r7, #32]
  return(result);
 80065a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30
 80065a8:	2301      	movs	r3, #1
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	f383 8810 	msr	PRIMASK, r3
}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	491b      	ldr	r1, [pc, #108]	; (800662c <UART_EndRxTransfer+0xc8>)
 80065c0:	400a      	ands	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	f383 8810 	msr	PRIMASK, r3
}
 80065ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d118      	bne.n	800660a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d8:	f3ef 8310 	mrs	r3, PRIMASK
 80065dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80065de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e2:	2301      	movs	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f383 8810 	msr	PRIMASK, r3
}
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2110      	movs	r1, #16
 80065fa:	438a      	bics	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f383 8810 	msr	PRIMASK, r3
}
 8006608:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2288      	movs	r2, #136	; 0x88
 800660e:	2120      	movs	r1, #32
 8006610:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b00e      	add	sp, #56	; 0x38
 8006624:	bd80      	pop	{r7, pc}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	fffffedf 	.word	0xfffffedf
 800662c:	effffffe 	.word	0xeffffffe

08006630 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	; 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2220      	movs	r2, #32
 8006646:	4013      	ands	r3, r2
 8006648:	d135      	bne.n	80066b6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	2256      	movs	r2, #86	; 0x56
 800664e:	2100      	movs	r1, #0
 8006650:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006652:	f3ef 8310 	mrs	r3, PRIMASK
 8006656:	60fb      	str	r3, [r7, #12]
  return(result);
 8006658:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
 800665c:	2301      	movs	r3, #1
 800665e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f383 8810 	msr	PRIMASK, r3
}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	438a      	bics	r2, r1
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f383 8810 	msr	PRIMASK, r3
}
 8006682:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006684:	f3ef 8310 	mrs	r3, PRIMASK
 8006688:	61bb      	str	r3, [r7, #24]
  return(result);
 800668a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	2301      	movs	r3, #1
 8006690:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f383 8810 	msr	PRIMASK, r3
}
 8006698:	46c0      	nop			; (mov r8, r8)
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2140      	movs	r1, #64	; 0x40
 80066a6:	430a      	orrs	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	f383 8810 	msr	PRIMASK, r3
}
 80066b4:	e004      	b.n	80066c0 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7ff f937 	bl	800592c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	46c0      	nop			; (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b00c      	add	sp, #48	; 0x30
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	0018      	movs	r0, r3
 80066da:	f7ff f92f 	bl	800593c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b004      	add	sp, #16
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b086      	sub	sp, #24
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2284      	movs	r2, #132	; 0x84
 80066f8:	589b      	ldr	r3, [r3, r2]
 80066fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2288      	movs	r2, #136	; 0x88
 8006700:	589b      	ldr	r3, [r3, r2]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	4013      	ands	r3, r2
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d10a      	bne.n	8006728 <UART_DMAError+0x42>
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b21      	cmp	r3, #33	; 0x21
 8006716:	d107      	bne.n	8006728 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2256      	movs	r2, #86	; 0x56
 800671c:	2100      	movs	r1, #0
 800671e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	0018      	movs	r0, r3
 8006724:	f7ff fede 	bl	80064e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2240      	movs	r2, #64	; 0x40
 8006730:	4013      	ands	r3, r2
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d10a      	bne.n	800674c <UART_DMAError+0x66>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b22      	cmp	r3, #34	; 0x22
 800673a:	d107      	bne.n	800674c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	225e      	movs	r2, #94	; 0x5e
 8006740:	2100      	movs	r1, #0
 8006742:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	0018      	movs	r0, r3
 8006748:	f7ff ff0c 	bl	8006564 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	228c      	movs	r2, #140	; 0x8c
 8006750:	589b      	ldr	r3, [r3, r2]
 8006752:	2210      	movs	r2, #16
 8006754:	431a      	orrs	r2, r3
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	218c      	movs	r1, #140	; 0x8c
 800675a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	0018      	movs	r0, r3
 8006760:	f7ff f8f4 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b006      	add	sp, #24
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	225e      	movs	r2, #94	; 0x5e
 800677e:	2100      	movs	r1, #0
 8006780:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2256      	movs	r2, #86	; 0x56
 8006786:	2100      	movs	r1, #0
 8006788:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	0018      	movs	r0, r3
 800678e:	f7ff f8dd 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	46bd      	mov	sp, r7
 8006796:	b004      	add	sp, #16
 8006798:	bd80      	pop	{r7, pc}

0800679a <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ac:	2200      	movs	r2, #0
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d12d      	bne.n	800681e <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2256      	movs	r2, #86	; 0x56
 80067c6:	2100      	movs	r1, #0
 80067c8:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	225e      	movs	r2, #94	; 0x5e
 80067ce:	2100      	movs	r1, #0
 80067d0:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	228c      	movs	r2, #140	; 0x8c
 80067d6:	2100      	movs	r1, #0
 80067d8:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	220f      	movs	r2, #15
 80067e0:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067e6:	2380      	movs	r3, #128	; 0x80
 80067e8:	059b      	lsls	r3, r3, #22
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d107      	bne.n	80067fe <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2110      	movs	r1, #16
 80067fa:	430a      	orrs	r2, r1
 80067fc:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2284      	movs	r2, #132	; 0x84
 8006802:	2120      	movs	r1, #32
 8006804:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2288      	movs	r2, #136	; 0x88
 800680a:	2120      	movs	r1, #32
 800680c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	0018      	movs	r0, r3
 8006818:	f7ff f8a0 	bl	800595c <HAL_UART_AbortCpltCallback>
 800681c:	e000      	b.n	8006820 <UART_DMATxAbortCallback+0x86>
      return;
 800681e:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006820:	46bd      	mov	sp, r7
 8006822:	b004      	add	sp, #16
 8006824:	bd80      	pop	{r7, pc}

08006826 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006838:	2200      	movs	r2, #0
 800683a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d127      	bne.n	800689e <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2256      	movs	r2, #86	; 0x56
 8006852:	2100      	movs	r1, #0
 8006854:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	225e      	movs	r2, #94	; 0x5e
 800685a:	2100      	movs	r1, #0
 800685c:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	228c      	movs	r2, #140	; 0x8c
 8006862:	2100      	movs	r1, #0
 8006864:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	220f      	movs	r2, #15
 800686c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2108      	movs	r1, #8
 800687a:	430a      	orrs	r2, r1
 800687c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2284      	movs	r2, #132	; 0x84
 8006882:	2120      	movs	r1, #32
 8006884:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2288      	movs	r2, #136	; 0x88
 800688a:	2120      	movs	r1, #32
 800688c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0018      	movs	r0, r3
 8006898:	f7ff f860 	bl	800595c <HAL_UART_AbortCpltCallback>
 800689c:	e000      	b.n	80068a0 <UART_DMARxAbortCallback+0x7a>
      return;
 800689e:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b004      	add	sp, #16
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ae:	f3ef 8310 	mrs	r3, PRIMASK
 80068b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068b4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	2301      	movs	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f383 8810 	msr	PRIMASK, r3
}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2140      	movs	r1, #64	; 0x40
 80068d0:	438a      	bics	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f383 8810 	msr	PRIMASK, r3
}
 80068de:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2284      	movs	r2, #132	; 0x84
 80068e4:	2120      	movs	r1, #32
 80068e6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f7ff f81b 	bl	800592c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b006      	add	sp, #24
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b090      	sub	sp, #64	; 0x40
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006908:	203e      	movs	r0, #62	; 0x3e
 800690a:	183b      	adds	r3, r7, r0
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	2160      	movs	r1, #96	; 0x60
 8006910:	5a52      	ldrh	r2, [r2, r1]
 8006912:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2288      	movs	r2, #136	; 0x88
 8006918:	589b      	ldr	r3, [r3, r2]
 800691a:	2b22      	cmp	r3, #34	; 0x22
 800691c:	d000      	beq.n	8006920 <UART_RxISR_8BIT+0x20>
 800691e:	e097      	b.n	8006a50 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006926:	213c      	movs	r1, #60	; 0x3c
 8006928:	187b      	adds	r3, r7, r1
 800692a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800692c:	187b      	adds	r3, r7, r1
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	183b      	adds	r3, r7, r0
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b2d9      	uxtb	r1, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693c:	400a      	ands	r2, r1
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	225e      	movs	r2, #94	; 0x5e
 8006950:	5a9b      	ldrh	r3, [r3, r2]
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b299      	uxth	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	225e      	movs	r2, #94	; 0x5e
 800695c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	225e      	movs	r2, #94	; 0x5e
 8006962:	5a9b      	ldrh	r3, [r3, r2]
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d000      	beq.n	800696c <UART_RxISR_8BIT+0x6c>
 800696a:	e079      	b.n	8006a60 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696c:	f3ef 8310 	mrs	r3, PRIMASK
 8006970:	61bb      	str	r3, [r7, #24]
  return(result);
 8006972:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006974:	63bb      	str	r3, [r7, #56]	; 0x38
 8006976:	2301      	movs	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f383 8810 	msr	PRIMASK, r3
}
 8006980:	46c0      	nop			; (mov r8, r8)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4936      	ldr	r1, [pc, #216]	; (8006a68 <UART_RxISR_8BIT+0x168>)
 800698e:	400a      	ands	r2, r1
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f383 8810 	msr	PRIMASK, r3
}
 800699c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699e:	f3ef 8310 	mrs	r3, PRIMASK
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
 80069a8:	2301      	movs	r3, #1
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	f383 8810 	msr	PRIMASK, r3
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2101      	movs	r1, #1
 80069c0:	438a      	bics	r2, r1
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	f383 8810 	msr	PRIMASK, r3
}
 80069ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2288      	movs	r2, #136	; 0x88
 80069d4:	2120      	movs	r1, #32
 80069d6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d12f      	bne.n	8006a46 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ec:	f3ef 8310 	mrs	r3, PRIMASK
 80069f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80069f2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f4:	633b      	str	r3, [r7, #48]	; 0x30
 80069f6:	2301      	movs	r3, #1
 80069f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f383 8810 	msr	PRIMASK, r3
}
 8006a00:	46c0      	nop			; (mov r8, r8)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2110      	movs	r1, #16
 8006a0e:	438a      	bics	r2, r1
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f383 8810 	msr	PRIMASK, r3
}
 8006a1c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	2210      	movs	r2, #16
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d103      	bne.n	8006a34 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2210      	movs	r2, #16
 8006a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	225c      	movs	r2, #92	; 0x5c
 8006a38:	5a9a      	ldrh	r2, [r3, r2]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fe ff94 	bl	800596c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a44:	e00c      	b.n	8006a60 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f7fa ff8d 	bl	8001968 <HAL_UART_RxCpltCallback>
}
 8006a4e:	e007      	b.n	8006a60 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2108      	movs	r1, #8
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	619a      	str	r2, [r3, #24]
}
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b010      	add	sp, #64	; 0x40
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	fffffedf 	.word	0xfffffedf

08006a6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b090      	sub	sp, #64	; 0x40
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a74:	203e      	movs	r0, #62	; 0x3e
 8006a76:	183b      	adds	r3, r7, r0
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	2160      	movs	r1, #96	; 0x60
 8006a7c:	5a52      	ldrh	r2, [r2, r1]
 8006a7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2288      	movs	r2, #136	; 0x88
 8006a84:	589b      	ldr	r3, [r3, r2]
 8006a86:	2b22      	cmp	r3, #34	; 0x22
 8006a88:	d000      	beq.n	8006a8c <UART_RxISR_16BIT+0x20>
 8006a8a:	e097      	b.n	8006bbc <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a92:	213c      	movs	r1, #60	; 0x3c
 8006a94:	187b      	adds	r3, r7, r1
 8006a96:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	183a      	adds	r2, r7, r0
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	8812      	ldrh	r2, [r2, #0]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab2:	1c9a      	adds	r2, r3, #2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	225e      	movs	r2, #94	; 0x5e
 8006abc:	5a9b      	ldrh	r3, [r3, r2]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b299      	uxth	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	225e      	movs	r2, #94	; 0x5e
 8006ac8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	225e      	movs	r2, #94	; 0x5e
 8006ace:	5a9b      	ldrh	r3, [r3, r2]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d000      	beq.n	8006ad8 <UART_RxISR_16BIT+0x6c>
 8006ad6:	e079      	b.n	8006bcc <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8006adc:	617b      	str	r3, [r7, #20]
  return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f383 8810 	msr	PRIMASK, r3
}
 8006aec:	46c0      	nop			; (mov r8, r8)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4936      	ldr	r1, [pc, #216]	; (8006bd4 <UART_RxISR_16BIT+0x168>)
 8006afa:	400a      	ands	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	f383 8810 	msr	PRIMASK, r3
}
 8006b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0e:	623b      	str	r3, [r7, #32]
  return(result);
 8006b10:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
 8006b14:	2301      	movs	r3, #1
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	f383 8810 	msr	PRIMASK, r3
}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	438a      	bics	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	f383 8810 	msr	PRIMASK, r3
}
 8006b3a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2288      	movs	r2, #136	; 0x88
 8006b40:	2120      	movs	r1, #32
 8006b42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d12f      	bne.n	8006bb2 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b58:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b5e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b62:	2301      	movs	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f383 8810 	msr	PRIMASK, r3
}
 8006b6c:	46c0      	nop			; (mov r8, r8)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2110      	movs	r1, #16
 8006b7a:	438a      	bics	r2, r1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f383 8810 	msr	PRIMASK, r3
}
 8006b88:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	2210      	movs	r2, #16
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d103      	bne.n	8006ba0 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	225c      	movs	r2, #92	; 0x5c
 8006ba4:	5a9a      	ldrh	r2, [r3, r2]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0011      	movs	r1, r2
 8006baa:	0018      	movs	r0, r3
 8006bac:	f7fe fede 	bl	800596c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bb0:	e00c      	b.n	8006bcc <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f7fa fed7 	bl	8001968 <HAL_UART_RxCpltCallback>
}
 8006bba:	e007      	b.n	8006bcc <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2108      	movs	r1, #8
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	619a      	str	r2, [r3, #24]
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b010      	add	sp, #64	; 0x40
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	fffffedf 	.word	0xfffffedf

08006bd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b09c      	sub	sp, #112	; 0x70
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006be0:	236a      	movs	r3, #106	; 0x6a
 8006be2:	18fb      	adds	r3, r7, r3
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	2160      	movs	r1, #96	; 0x60
 8006be8:	5a52      	ldrh	r2, [r2, r1]
 8006bea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2288      	movs	r2, #136	; 0x88
 8006c08:	589b      	ldr	r3, [r3, r2]
 8006c0a:	2b22      	cmp	r3, #34	; 0x22
 8006c0c:	d000      	beq.n	8006c10 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006c0e:	e141      	b.n	8006e94 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c10:	235e      	movs	r3, #94	; 0x5e
 8006c12:	18fb      	adds	r3, r7, r3
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	2168      	movs	r1, #104	; 0x68
 8006c18:	5a52      	ldrh	r2, [r2, r1]
 8006c1a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c1c:	e0e8      	b.n	8006df0 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c24:	215c      	movs	r1, #92	; 0x5c
 8006c26:	187b      	adds	r3, r7, r1
 8006c28:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c2a:	187b      	adds	r3, r7, r1
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	236a      	movs	r3, #106	; 0x6a
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b2d9      	uxtb	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3c:	400a      	ands	r2, r1
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	225e      	movs	r2, #94	; 0x5e
 8006c50:	5a9b      	ldrh	r3, [r3, r2]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b299      	uxth	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	225e      	movs	r2, #94	; 0x5e
 8006c5c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c68:	2207      	movs	r2, #7
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d049      	beq.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c70:	2201      	movs	r2, #1
 8006c72:	4013      	ands	r3, r2
 8006c74:	d010      	beq.n	8006c98 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006c76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2201      	movs	r2, #1
 8006c86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	228c      	movs	r2, #140	; 0x8c
 8006c8c:	589b      	ldr	r3, [r3, r2]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	218c      	movs	r1, #140	; 0x8c
 8006c96:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d00f      	beq.n	8006cc0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2202      	movs	r2, #2
 8006cae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	228c      	movs	r2, #140	; 0x8c
 8006cb4:	589b      	ldr	r3, [r3, r2]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	218c      	movs	r1, #140	; 0x8c
 8006cbe:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d00f      	beq.n	8006ce8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d00b      	beq.n	8006ce8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	228c      	movs	r2, #140	; 0x8c
 8006cdc:	589b      	ldr	r3, [r3, r2]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	218c      	movs	r1, #140	; 0x8c
 8006ce6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	228c      	movs	r2, #140	; 0x8c
 8006cec:	589b      	ldr	r3, [r3, r2]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f7fe fe29 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	228c      	movs	r2, #140	; 0x8c
 8006cfe:	2100      	movs	r1, #0
 8006d00:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	225e      	movs	r2, #94	; 0x5e
 8006d06:	5a9b      	ldrh	r3, [r3, r2]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d170      	bne.n	8006df0 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d18:	2301      	movs	r3, #1
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	f383 8810 	msr	PRIMASK, r3
}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	495f      	ldr	r1, [pc, #380]	; (8006eac <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8006d30:	400a      	ands	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	f383 8810 	msr	PRIMASK, r3
}
 8006d3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d40:	f3ef 8310 	mrs	r3, PRIMASK
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d48:	657b      	str	r3, [r7, #84]	; 0x54
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d50:	f383 8810 	msr	PRIMASK, r3
}
 8006d54:	46c0      	nop			; (mov r8, r8)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4953      	ldr	r1, [pc, #332]	; (8006eb0 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8006d62:	400a      	ands	r2, r1
 8006d64:	609a      	str	r2, [r3, #8]
 8006d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d68:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6c:	f383 8810 	msr	PRIMASK, r3
}
 8006d70:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2288      	movs	r2, #136	; 0x88
 8006d76:	2120      	movs	r1, #32
 8006d78:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d12f      	bne.n	8006de8 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d92:	623b      	str	r3, [r7, #32]
  return(result);
 8006d94:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d96:	653b      	str	r3, [r7, #80]	; 0x50
 8006d98:	2301      	movs	r3, #1
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	f383 8810 	msr	PRIMASK, r3
}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2110      	movs	r1, #16
 8006db0:	438a      	bics	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	f383 8810 	msr	PRIMASK, r3
}
 8006dbe:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d103      	bne.n	8006dd6 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2210      	movs	r2, #16
 8006dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	225c      	movs	r2, #92	; 0x5c
 8006dda:	5a9a      	ldrh	r2, [r3, r2]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0011      	movs	r1, r2
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7fe fdc3 	bl	800596c <HAL_UARTEx_RxEventCallback>
 8006de6:	e003      	b.n	8006df0 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7fa fdbc 	bl	8001968 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006df0:	235e      	movs	r3, #94	; 0x5e
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8006dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d000      	beq.n	8006e04 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8006e02:	e70c      	b.n	8006c1e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e04:	204e      	movs	r0, #78	; 0x4e
 8006e06:	183b      	adds	r3, r7, r0
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	215e      	movs	r1, #94	; 0x5e
 8006e0c:	5a52      	ldrh	r2, [r2, r1]
 8006e0e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e10:	0001      	movs	r1, r0
 8006e12:	187b      	adds	r3, r7, r1
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d044      	beq.n	8006ea4 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2268      	movs	r2, #104	; 0x68
 8006e1e:	5a9b      	ldrh	r3, [r3, r2]
 8006e20:	187a      	adds	r2, r7, r1
 8006e22:	8812      	ldrh	r2, [r2, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d23d      	bcs.n	8006ea4 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e28:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e32:	2301      	movs	r3, #1
 8006e34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f383 8810 	msr	PRIMASK, r3
}
 8006e3c:	46c0      	nop			; (mov r8, r8)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	491a      	ldr	r1, [pc, #104]	; (8006eb4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8006e4a:	400a      	ands	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]
 8006e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f383 8810 	msr	PRIMASK, r3
}
 8006e58:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a16      	ldr	r2, [pc, #88]	; (8006eb8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8006e5e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e60:	f3ef 8310 	mrs	r3, PRIMASK
 8006e64:	617b      	str	r3, [r7, #20]
  return(result);
 8006e66:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f383 8810 	msr	PRIMASK, r3
}
 8006e74:	46c0      	nop			; (mov r8, r8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2120      	movs	r1, #32
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f383 8810 	msr	PRIMASK, r3
}
 8006e90:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e92:	e007      	b.n	8006ea4 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2108      	movs	r1, #8
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	619a      	str	r2, [r3, #24]
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b01c      	add	sp, #112	; 0x70
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	fffffeff 	.word	0xfffffeff
 8006eb0:	effffffe 	.word	0xeffffffe
 8006eb4:	efffffff 	.word	0xefffffff
 8006eb8:	08006901 	.word	0x08006901

08006ebc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b09e      	sub	sp, #120	; 0x78
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ec4:	2372      	movs	r3, #114	; 0x72
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	2160      	movs	r1, #96	; 0x60
 8006ecc:	5a52      	ldrh	r2, [r2, r1]
 8006ece:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2288      	movs	r2, #136	; 0x88
 8006eec:	589b      	ldr	r3, [r3, r2]
 8006eee:	2b22      	cmp	r3, #34	; 0x22
 8006ef0:	d000      	beq.n	8006ef4 <UART_RxISR_16BIT_FIFOEN+0x38>
 8006ef2:	e141      	b.n	8007178 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ef4:	2366      	movs	r3, #102	; 0x66
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	2168      	movs	r1, #104	; 0x68
 8006efc:	5a52      	ldrh	r2, [r2, r1]
 8006efe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f00:	e0e8      	b.n	80070d4 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f08:	2164      	movs	r1, #100	; 0x64
 8006f0a:	187b      	adds	r3, r7, r1
 8006f0c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f14:	187b      	adds	r3, r7, r1
 8006f16:	2272      	movs	r2, #114	; 0x72
 8006f18:	18ba      	adds	r2, r7, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	8812      	ldrh	r2, [r2, #0]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	225e      	movs	r2, #94	; 0x5e
 8006f34:	5a9b      	ldrh	r3, [r3, r2]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b299      	uxth	r1, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	225e      	movs	r2, #94	; 0x5e
 8006f40:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f4c:	2207      	movs	r2, #7
 8006f4e:	4013      	ands	r3, r2
 8006f50:	d049      	beq.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f54:	2201      	movs	r2, #1
 8006f56:	4013      	ands	r3, r2
 8006f58:	d010      	beq.n	8006f7c <UART_RxISR_16BIT_FIFOEN+0xc0>
 8006f5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	4013      	ands	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	228c      	movs	r2, #140	; 0x8c
 8006f70:	589b      	ldr	r3, [r3, r2]
 8006f72:	2201      	movs	r2, #1
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	218c      	movs	r1, #140	; 0x8c
 8006f7a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f7e:	2202      	movs	r2, #2
 8006f80:	4013      	ands	r3, r2
 8006f82:	d00f      	beq.n	8006fa4 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f86:	2201      	movs	r2, #1
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d00b      	beq.n	8006fa4 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2202      	movs	r2, #2
 8006f92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	228c      	movs	r2, #140	; 0x8c
 8006f98:	589b      	ldr	r3, [r3, r2]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	218c      	movs	r1, #140	; 0x8c
 8006fa2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa6:	2204      	movs	r2, #4
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d00f      	beq.n	8006fcc <UART_RxISR_16BIT_FIFOEN+0x110>
 8006fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2204      	movs	r2, #4
 8006fba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	228c      	movs	r2, #140	; 0x8c
 8006fc0:	589b      	ldr	r3, [r3, r2]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	218c      	movs	r1, #140	; 0x8c
 8006fca:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	228c      	movs	r2, #140	; 0x8c
 8006fd0:	589b      	ldr	r3, [r3, r2]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7fe fcb7 	bl	800594c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	228c      	movs	r2, #140	; 0x8c
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	225e      	movs	r2, #94	; 0x5e
 8006fea:	5a9b      	ldrh	r3, [r3, r2]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d170      	bne.n	80070d4 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	f383 8810 	msr	PRIMASK, r3
}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	495f      	ldr	r1, [pc, #380]	; (8007190 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8007014:	400a      	ands	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	f383 8810 	msr	PRIMASK, r3
}
 8007022:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007024:	f3ef 8310 	mrs	r3, PRIMASK
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800702a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800702c:	65bb      	str	r3, [r7, #88]	; 0x58
 800702e:	2301      	movs	r3, #1
 8007030:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007034:	f383 8810 	msr	PRIMASK, r3
}
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4953      	ldr	r1, [pc, #332]	; (8007194 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8007046:	400a      	ands	r2, r1
 8007048:	609a      	str	r2, [r3, #8]
 800704a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800704c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007050:	f383 8810 	msr	PRIMASK, r3
}
 8007054:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2288      	movs	r2, #136	; 0x88
 800705a:	2120      	movs	r1, #32
 800705c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d12f      	bne.n	80070cc <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007072:	f3ef 8310 	mrs	r3, PRIMASK
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707a:	657b      	str	r3, [r7, #84]	; 0x54
 800707c:	2301      	movs	r3, #1
 800707e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	f383 8810 	msr	PRIMASK, r3
}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2110      	movs	r1, #16
 8007094:	438a      	bics	r2, r1
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	f383 8810 	msr	PRIMASK, r3
}
 80070a2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	2210      	movs	r2, #16
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b10      	cmp	r3, #16
 80070b0:	d103      	bne.n	80070ba <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2210      	movs	r2, #16
 80070b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	225c      	movs	r2, #92	; 0x5c
 80070be:	5a9a      	ldrh	r2, [r3, r2]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	0011      	movs	r1, r2
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7fe fc51 	bl	800596c <HAL_UARTEx_RxEventCallback>
 80070ca:	e003      	b.n	80070d4 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7fa fc4a 	bl	8001968 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070d4:	2366      	movs	r3, #102	; 0x66
 80070d6:	18fb      	adds	r3, r7, r3
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80070de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e0:	2220      	movs	r2, #32
 80070e2:	4013      	ands	r3, r2
 80070e4:	d000      	beq.n	80070e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80070e6:	e70c      	b.n	8006f02 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070e8:	2052      	movs	r0, #82	; 0x52
 80070ea:	183b      	adds	r3, r7, r0
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	215e      	movs	r1, #94	; 0x5e
 80070f0:	5a52      	ldrh	r2, [r2, r1]
 80070f2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070f4:	0001      	movs	r1, r0
 80070f6:	187b      	adds	r3, r7, r1
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d044      	beq.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2268      	movs	r2, #104	; 0x68
 8007102:	5a9b      	ldrh	r3, [r3, r2]
 8007104:	187a      	adds	r2, r7, r1
 8007106:	8812      	ldrh	r2, [r2, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d23d      	bcs.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710c:	f3ef 8310 	mrs	r3, PRIMASK
 8007110:	60fb      	str	r3, [r7, #12]
  return(result);
 8007112:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007116:	2301      	movs	r3, #1
 8007118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f383 8810 	msr	PRIMASK, r3
}
 8007120:	46c0      	nop			; (mov r8, r8)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	491a      	ldr	r1, [pc, #104]	; (8007198 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800712e:	400a      	ands	r2, r1
 8007130:	609a      	str	r2, [r3, #8]
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f383 8810 	msr	PRIMASK, r3
}
 800713c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a16      	ldr	r2, [pc, #88]	; (800719c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8007142:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007144:	f3ef 8310 	mrs	r3, PRIMASK
 8007148:	61bb      	str	r3, [r7, #24]
  return(result);
 800714a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800714c:	64bb      	str	r3, [r7, #72]	; 0x48
 800714e:	2301      	movs	r3, #1
 8007150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2120      	movs	r1, #32
 8007166:	430a      	orrs	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800716c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	f383 8810 	msr	PRIMASK, r3
}
 8007174:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007176:	e007      	b.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2108      	movs	r1, #8
 8007184:	430a      	orrs	r2, r1
 8007186:	619a      	str	r2, [r3, #24]
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b01e      	add	sp, #120	; 0x78
 800718e:	bd80      	pop	{r7, pc}
 8007190:	fffffeff 	.word	0xfffffeff
 8007194:	effffffe 	.word	0xeffffffe
 8007198:	efffffff 	.word	0xefffffff
 800719c:	08006a6d 	.word	0x08006a6d

080071a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071a8:	46c0      	nop			; (mov r8, r8)
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b002      	add	sp, #8
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071b8:	46c0      	nop			; (mov r8, r8)
 80071ba:	46bd      	mov	sp, r7
 80071bc:	b002      	add	sp, #8
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071c8:	46c0      	nop			; (mov r8, r8)
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b002      	add	sp, #8
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	5c9b      	ldrb	r3, [r3, r2]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e027      	b.n	8007236 <HAL_UARTEx_DisableFifoMode+0x66>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2280      	movs	r2, #128	; 0x80
 80071ea:	2101      	movs	r1, #1
 80071ec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2284      	movs	r2, #132	; 0x84
 80071f2:	2124      	movs	r1, #36	; 0x24
 80071f4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2101      	movs	r1, #1
 800720a:	438a      	bics	r2, r1
 800720c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4a0b      	ldr	r2, [pc, #44]	; (8007240 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007212:	4013      	ands	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2284      	movs	r2, #132	; 0x84
 8007228:	2120      	movs	r1, #32
 800722a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2280      	movs	r2, #128	; 0x80
 8007230:	2100      	movs	r1, #0
 8007232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	0018      	movs	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	b004      	add	sp, #16
 800723c:	bd80      	pop	{r7, pc}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	dfffffff 	.word	0xdfffffff

08007244 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2280      	movs	r2, #128	; 0x80
 8007252:	5c9b      	ldrb	r3, [r3, r2]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007258:	2302      	movs	r3, #2
 800725a:	e02e      	b.n	80072ba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2280      	movs	r2, #128	; 0x80
 8007260:	2101      	movs	r1, #1
 8007262:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2284      	movs	r2, #132	; 0x84
 8007268:	2124      	movs	r1, #36	; 0x24
 800726a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2101      	movs	r1, #1
 8007280:	438a      	bics	r2, r1
 8007282:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	08d9      	lsrs	r1, r3, #3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	0018      	movs	r0, r3
 800729c:	f000 f854 	bl	8007348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2284      	movs	r2, #132	; 0x84
 80072ac:	2120      	movs	r1, #32
 80072ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2280      	movs	r2, #128	; 0x80
 80072b4:	2100      	movs	r1, #0
 80072b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	0018      	movs	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	b004      	add	sp, #16
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	5c9b      	ldrb	r3, [r3, r2]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072d8:	2302      	movs	r3, #2
 80072da:	e02f      	b.n	800733c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2280      	movs	r2, #128	; 0x80
 80072e0:	2101      	movs	r1, #1
 80072e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2284      	movs	r2, #132	; 0x84
 80072e8:	2124      	movs	r1, #36	; 0x24
 80072ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2101      	movs	r1, #1
 8007300:	438a      	bics	r2, r1
 8007302:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800730c:	4013      	ands	r3, r2
 800730e:	0019      	movs	r1, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	0018      	movs	r0, r3
 800731e:	f000 f813 	bl	8007348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2284      	movs	r2, #132	; 0x84
 800732e:	2120      	movs	r1, #32
 8007330:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2280      	movs	r2, #128	; 0x80
 8007336:	2100      	movs	r1, #0
 8007338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	0018      	movs	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	b004      	add	sp, #16
 8007342:	bd80      	pop	{r7, pc}
 8007344:	f1ffffff 	.word	0xf1ffffff

08007348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007354:	2b00      	cmp	r3, #0
 8007356:	d108      	bne.n	800736a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	226a      	movs	r2, #106	; 0x6a
 800735c:	2101      	movs	r1, #1
 800735e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2268      	movs	r2, #104	; 0x68
 8007364:	2101      	movs	r1, #1
 8007366:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007368:	e043      	b.n	80073f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800736a:	260f      	movs	r6, #15
 800736c:	19bb      	adds	r3, r7, r6
 800736e:	2208      	movs	r2, #8
 8007370:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007372:	200e      	movs	r0, #14
 8007374:	183b      	adds	r3, r7, r0
 8007376:	2208      	movs	r2, #8
 8007378:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	0e5b      	lsrs	r3, r3, #25
 8007382:	b2da      	uxtb	r2, r3
 8007384:	240d      	movs	r4, #13
 8007386:	193b      	adds	r3, r7, r4
 8007388:	2107      	movs	r1, #7
 800738a:	400a      	ands	r2, r1
 800738c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	0f5b      	lsrs	r3, r3, #29
 8007396:	b2da      	uxtb	r2, r3
 8007398:	250c      	movs	r5, #12
 800739a:	197b      	adds	r3, r7, r5
 800739c:	2107      	movs	r1, #7
 800739e:	400a      	ands	r2, r1
 80073a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073a2:	183b      	adds	r3, r7, r0
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	197a      	adds	r2, r7, r5
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	4914      	ldr	r1, [pc, #80]	; (80073fc <UARTEx_SetNbDataToProcess+0xb4>)
 80073ac:	5c8a      	ldrb	r2, [r1, r2]
 80073ae:	435a      	muls	r2, r3
 80073b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80073b2:	197b      	adds	r3, r7, r5
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4a12      	ldr	r2, [pc, #72]	; (8007400 <UARTEx_SetNbDataToProcess+0xb8>)
 80073b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073ba:	0019      	movs	r1, r3
 80073bc:	f7f8 ff2e 	bl	800021c <__divsi3>
 80073c0:	0003      	movs	r3, r0
 80073c2:	b299      	uxth	r1, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	226a      	movs	r2, #106	; 0x6a
 80073c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ca:	19bb      	adds	r3, r7, r6
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	193a      	adds	r2, r7, r4
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	490a      	ldr	r1, [pc, #40]	; (80073fc <UARTEx_SetNbDataToProcess+0xb4>)
 80073d4:	5c8a      	ldrb	r2, [r1, r2]
 80073d6:	435a      	muls	r2, r3
 80073d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80073da:	193b      	adds	r3, r7, r4
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	4a08      	ldr	r2, [pc, #32]	; (8007400 <UARTEx_SetNbDataToProcess+0xb8>)
 80073e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073e2:	0019      	movs	r1, r3
 80073e4:	f7f8 ff1a 	bl	800021c <__divsi3>
 80073e8:	0003      	movs	r3, r0
 80073ea:	b299      	uxth	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2268      	movs	r2, #104	; 0x68
 80073f0:	5299      	strh	r1, [r3, r2]
}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b005      	add	sp, #20
 80073f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	08007574 	.word	0x08007574
 8007400:	0800757c 	.word	0x0800757c

08007404 <__libc_init_array>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	2600      	movs	r6, #0
 8007408:	4d0c      	ldr	r5, [pc, #48]	; (800743c <__libc_init_array+0x38>)
 800740a:	4c0d      	ldr	r4, [pc, #52]	; (8007440 <__libc_init_array+0x3c>)
 800740c:	1b64      	subs	r4, r4, r5
 800740e:	10a4      	asrs	r4, r4, #2
 8007410:	42a6      	cmp	r6, r4
 8007412:	d109      	bne.n	8007428 <__libc_init_array+0x24>
 8007414:	2600      	movs	r6, #0
 8007416:	f000 f821 	bl	800745c <_init>
 800741a:	4d0a      	ldr	r5, [pc, #40]	; (8007444 <__libc_init_array+0x40>)
 800741c:	4c0a      	ldr	r4, [pc, #40]	; (8007448 <__libc_init_array+0x44>)
 800741e:	1b64      	subs	r4, r4, r5
 8007420:	10a4      	asrs	r4, r4, #2
 8007422:	42a6      	cmp	r6, r4
 8007424:	d105      	bne.n	8007432 <__libc_init_array+0x2e>
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	00b3      	lsls	r3, r6, #2
 800742a:	58eb      	ldr	r3, [r5, r3]
 800742c:	4798      	blx	r3
 800742e:	3601      	adds	r6, #1
 8007430:	e7ee      	b.n	8007410 <__libc_init_array+0xc>
 8007432:	00b3      	lsls	r3, r6, #2
 8007434:	58eb      	ldr	r3, [r5, r3]
 8007436:	4798      	blx	r3
 8007438:	3601      	adds	r6, #1
 800743a:	e7f2      	b.n	8007422 <__libc_init_array+0x1e>
 800743c:	0800758c 	.word	0x0800758c
 8007440:	0800758c 	.word	0x0800758c
 8007444:	0800758c 	.word	0x0800758c
 8007448:	08007590 	.word	0x08007590

0800744c <memset>:
 800744c:	0003      	movs	r3, r0
 800744e:	1882      	adds	r2, r0, r2
 8007450:	4293      	cmp	r3, r2
 8007452:	d100      	bne.n	8007456 <memset+0xa>
 8007454:	4770      	bx	lr
 8007456:	7019      	strb	r1, [r3, #0]
 8007458:	3301      	adds	r3, #1
 800745a:	e7f9      	b.n	8007450 <memset+0x4>

0800745c <_init>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr

08007468 <_fini>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr
