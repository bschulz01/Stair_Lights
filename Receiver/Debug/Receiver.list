
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005924  08005924  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800592c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000034  08005960  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08005960  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5fd  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fce  00000000  00000000  0002c659  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002e628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018961  00000000  00000000  0002fc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a55a  00000000  00000000  000485b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dc3a  00000000  00000000  00052b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0745  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002840  00000000  00000000  000f07c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800587c 	.word	0x0800587c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	0800587c 	.word	0x0800587c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8b1 	bl	80005b8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ac 	bl	80005b8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzdi2>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d103      	bne.n	80005c6 <__clzdi2+0xe>
 80005be:	f000 f807 	bl	80005d0 <__clzsi2>
 80005c2:	3020      	adds	r0, #32
 80005c4:	e002      	b.n	80005cc <__clzdi2+0x14>
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	f000 f802 	bl	80005d0 <__clzsi2>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__clzsi2>:
 80005d0:	211c      	movs	r1, #28
 80005d2:	2301      	movs	r3, #1
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d301      	bcc.n	80005de <__clzsi2+0xe>
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	3910      	subs	r1, #16
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d301      	bcc.n	80005e8 <__clzsi2+0x18>
 80005e4:	0a00      	lsrs	r0, r0, #8
 80005e6:	3908      	subs	r1, #8
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0x22>
 80005ee:	0900      	lsrs	r0, r0, #4
 80005f0:	3904      	subs	r1, #4
 80005f2:	a202      	add	r2, pc, #8	; (adr r2, 80005fc <__clzsi2+0x2c>)
 80005f4:	5c10      	ldrb	r0, [r2, r0]
 80005f6:	1840      	adds	r0, r0, r1
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	02020304 	.word	0x02020304
 8000600:	01010101 	.word	0x01010101
	...

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fdad 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f833 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9bd 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 800061e:	f000 f995 	bl	800094c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000622:	f000 f911 	bl	8000848 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f95d 	bl	80008e4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800062a:	f000 f8a3 	bl	8000774 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  receiveIT();
 800062e:	f000 fc99 	bl	8000f64 <receiveIT>
  uint8_t ledState = 0;
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Process commands as they come in
	  if (cmdReady()) {
 8000638:	f000 fcb6 	bl	8000fa8 <cmdReady>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d0fb      	beq.n	8000638 <main+0x2c>
		  abortIT();
 8000640:	f000 fc7e 	bl	8000f40 <abortIT>
		  processCommand();
 8000644:	f000 fcf2 	bl	800102c <processCommand>
		  receiveIT();
 8000648:	f000 fc8c 	bl	8000f64 <receiveIT>
		  if (ledState) {
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d009      	beq.n	8000668 <main+0x5c>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x70>)
 8000656:	2200      	movs	r2, #0
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	0018      	movs	r0, r3
 800065c:	f002 f9fe 	bl	8002a5c <HAL_GPIO_WritePin>
			  ledState = 0;
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e7e7      	b.n	8000638 <main+0x2c>
		  } else {
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <main+0x70>)
 800066a:	2201      	movs	r2, #1
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	0018      	movs	r0, r3
 8000670:	f002 f9f4 	bl	8002a5c <HAL_GPIO_WritePin>
			  ledState = 1;
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
	  if (cmdReady()) {
 800067a:	e7dd      	b.n	8000638 <main+0x2c>
 800067c:	50000800 	.word	0x50000800

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b0a1      	sub	sp, #132	; 0x84
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	2448      	movs	r4, #72	; 0x48
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2338      	movs	r3, #56	; 0x38
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f005 f8eb 	bl	800586c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	2338      	movs	r3, #56	; 0x38
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	0018      	movs	r0, r3
 800069c:	2310      	movs	r3, #16
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f005 f8e3 	bl	800586c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a6:	003b      	movs	r3, r7
 80006a8:	0018      	movs	r0, r3
 80006aa:	2338      	movs	r3, #56	; 0x38
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f005 f8dc 	bl	800586c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 f9ed 	bl	8002a98 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006cc:	0021      	movs	r1, r4
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2240      	movs	r2, #64	; 0x40
 80006d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2202      	movs	r2, #2
 80006e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2208      	movs	r2, #8
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0292      	lsls	r2, r2, #10
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0492      	lsls	r2, r2, #18
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0592      	lsls	r2, r2, #22
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	187b      	adds	r3, r7, r1
 800070c:	0018      	movs	r0, r3
 800070e:	f002 fa0f 	bl	8002b30 <HAL_RCC_OscConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000716:	f000 f9a7 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	2138      	movs	r1, #56	; 0x38
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2207      	movs	r2, #7
 8000720:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2102      	movs	r1, #2
 8000738:	0018      	movs	r0, r3
 800073a:	f002 fd19 	bl	8003170 <HAL_RCC_ClockConfig>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000742:	f000 f991 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000746:	003b      	movs	r3, r7
 8000748:	4a09      	ldr	r2, [pc, #36]	; (8000770 <SystemClock_Config+0xf0>)
 800074a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800074c:	003b      	movs	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000752:	003b      	movs	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000758:	003b      	movs	r3, r7
 800075a:	0018      	movs	r0, r3
 800075c:	f002 feb2 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000764:	f000 f980 	bl	8000a68 <Error_Handler>
  }
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b021      	add	sp, #132	; 0x84
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	00004001 	.word	0x00004001

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	0018      	movs	r0, r3
 800077e:	230c      	movs	r3, #12
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f005 f872 	bl	800586c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_ADC1_Init+0xcc>)
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <MX_ADC1_Init+0xd0>)
 800078c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_ADC1_Init+0xcc>)
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	05d2      	lsls	r2, r2, #23
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_ADC1_Init+0xcc>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_ADC1_Init+0xcc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007c8:	2220      	movs	r2, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007dc:	222c      	movs	r2, #44	; 0x2c
 80007de:	2100      	movs	r1, #0
 80007e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007f6:	223c      	movs	r2, #60	; 0x3c
 80007f8:	2100      	movs	r1, #0
 80007fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_ADC1_Init+0xcc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADC1_Init+0xcc>)
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fea1 	bl	800154c <HAL_ADC_Init>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800080e:	f000 f92b 	bl	8000a68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000824:	1d3a      	adds	r2, r7, #4
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_ADC1_Init+0xcc>)
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f001 f98e 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000834:	f000 f918 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b004      	add	sp, #16
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000198 	.word	0x20000198
 8000844:	40012400 	.word	0x40012400

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_USART1_UART_Init+0x94>)
 800084e:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <MX_USART1_UART_Init+0x98>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_USART1_UART_Init+0x94>)
 8000854:	22e1      	movs	r2, #225	; 0xe1
 8000856:	0252      	lsls	r2, r2, #9
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_USART1_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_USART1_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_USART1_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_USART1_UART_Init+0x94>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_USART1_UART_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_USART1_UART_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_USART1_UART_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_USART1_UART_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART1_UART_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USART1_UART_Init+0x94>)
 8000892:	0018      	movs	r0, r3
 8000894:	f002 fff0 	bl	8003878 <HAL_UART_Init>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f8e4 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x94>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fed1 	bl	800564c <HAL_UARTEx_SetTxFifoThreshold>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f8db 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_USART1_UART_Init+0x94>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f004 ff08 	bl	80056cc <HAL_UARTEx_SetRxFifoThreshold>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f8d2 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x94>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 fe86 	bl	80055d8 <HAL_UARTEx_DisableFifoMode>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f8ca 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200001fc 	.word	0x200001fc
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_USART3_UART_Init+0x60>)
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <MX_USART3_UART_Init+0x64>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_USART3_UART_Init+0x60>)
 80008f0:	22e1      	movs	r2, #225	; 0xe1
 80008f2:	0252      	lsls	r2, r2, #9
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART3_UART_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x60>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART3_UART_Init+0x60>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART3_UART_Init+0x60>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_USART3_UART_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART3_UART_Init+0x60>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_USART3_UART_Init+0x60>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x60>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_USART3_UART_Init+0x60>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_USART3_UART_Init+0x60>)
 800092e:	0018      	movs	r0, r3
 8000930:	f002 ffa2 	bl	8003878 <HAL_UART_Init>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f896 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000050 	.word	0x20000050
 8000948:	40004800 	.word	0x40004800

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_DMA_Init+0x48>)
 8000954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_DMA_Init+0x48>)
 8000958:	2101      	movs	r1, #1
 800095a:	430a      	orrs	r2, r1
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_DMA_Init+0x48>)
 8000960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000962:	2201      	movs	r2, #1
 8000964:	4013      	ands	r3, r2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2009      	movs	r0, #9
 8000970:	f001 fc84 	bl	800227c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000974:	2009      	movs	r0, #9
 8000976:	f001 fc96 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	200a      	movs	r0, #10
 8000980:	f001 fc7c 	bl	800227c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000984:	200a      	movs	r0, #10
 8000986:	f001 fc8e 	bl	80022a6 <HAL_NVIC_EnableIRQ>

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40021000 	.word	0x40021000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	240c      	movs	r4, #12
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	0018      	movs	r0, r3
 80009a4:	2314      	movs	r3, #20
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f004 ff5f 	bl	800586c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009b4:	2102      	movs	r1, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009be:	2202      	movs	r2, #2
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009e4:	2104      	movs	r1, #4
 80009e6:	430a      	orrs	r2, r1
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ee:	2204      	movs	r2, #4
 80009f0:	4013      	ands	r3, r2
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_GPIO_Init+0x9c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 f82d 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x9c>)
 8000a20:	0019      	movs	r1, r3
 8000a22:	0010      	movs	r0, r2
 8000a24:	f001 feb6 	bl	8002794 <HAL_GPIO_Init>

}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b009      	add	sp, #36	; 0x24
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	50000800 	.word	0x50000800

08000a38 <getADCPtr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* getADCPtr() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	return &hadc1;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	; (8000a44 <getADCPtr+0xc>)
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000198 	.word	0x20000198

08000a48 <getUFP>:
UART_HandleTypeDef* getUFP() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	return &huart1;
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <getUFP+0xc>)
}
 8000a4e:	0018      	movs	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001fc 	.word	0x200001fc

08000a58 <getDFP>:
UART_HandleTypeDef* getDFP() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	return &huart3;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <getDFP+0xc>)
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000050 	.word	0x20000050

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <Error_Handler+0x6>

08000a70 <mapSensor>:
		ADC_CHANNEL_8,
		ADC_CHANNEL_9,
};

// Maps the sensor index to the correct location
uint8_t mapSensor(uint8_t idx) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	701a      	strb	r2, [r3, #0]
#ifndef REVERSE_ORDER
	if (idx == 0) {
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <mapSensor+0x18>
		return 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	e00a      	b.n	8000a9e <mapSensor+0x2e>
	} else if (idx < 5) {
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d804      	bhi.n	8000a9a <mapSensor+0x2a>
		return idx - 1;
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	e001      	b.n	8000a9e <mapSensor+0x2e>
	} else {
		return idx;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
		return 10 - idx;
	} else {
		return 9 - idx;
	}
#endif
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <getNewReadings>:


//. collect new readings from the sensors
uint16_t* getNewReadings()
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	e013      	b.n	8000adc <getNewReadings+0x34>
		prev_readings[mapSensor(sensor)] = readSensor(sensor);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	b2dd      	uxtb	r5, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ffd7 	bl	8000a70 <mapSensor>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	001c      	movs	r4, r3
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	f000 f81a 	bl	8000b00 <readSensor>
 8000acc:	0003      	movs	r3, r0
 8000ace:	0019      	movs	r1, r3
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <getNewReadings+0x44>)
 8000ad2:	0062      	lsls	r2, r4, #1
 8000ad4:	52d1      	strh	r1, [r2, r3]
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b09      	cmp	r3, #9
 8000ae0:	dde8      	ble.n	8000ab4 <getNewReadings+0xc>
	}
	return prev_readings;
 8000ae2:	4b02      	ldr	r3, [pc, #8]	; (8000aec <getNewReadings+0x44>)
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bdb0      	pop	{r4, r5, r7, pc}
 8000aec:	200002a4 	.word	0x200002a4

08000af0 <getLastReadings>:


// retrieve most recent sensor readings
uint16_t* getLastReadings() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	return prev_readings;
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <getLastReadings+0xc>)
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002a4 	.word	0x200002a4

08000b00 <readSensor>:

uint16_t readSensor(uint8_t sensor) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
	return readADC(ADC_channels[sensor]);;
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <readSensor+0x28>)
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	58d3      	ldr	r3, [r2, r3]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f808 	bl	8000b2c <readADC>
 8000b1c:	0003      	movs	r3, r0
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000000 	.word	0x20000000

08000b2c <readADC>:


uint16_t readADC(uint32_t channel)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]


	ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8000b34:	240c      	movs	r4, #12
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f004 fe94 	bl	800586c <memset>
	ADC_HandleTypeDef *adcPtr = getADCPtr(); //this is a pointer to your hal_adc
 8000b44:	f7ff ff78 	bl	8000a38 <getADCPtr>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	61fb      	str	r3, [r7, #28]
	//this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

	//this picks the IR direction to choose the right ADC.
	sConfig.Channel = channel;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]

	// make sure everything was set up correctly
	if (HAL_ADC_ConfigChannel(adcPtr, &sConfig) != HAL_OK)
 8000b5e:	193a      	adds	r2, r7, r4
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fff1 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <readADC+0x46>
	{
		return 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e016      	b.n	8000ba0 <readADC+0x74>
	}

	HAL_ADC_Start(adcPtr);
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fec5 	bl	8001904 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(adcPtr, 1);
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 ff4a 	bl	8001a18 <HAL_ADC_PollForConversion>

	uint16_t val = HAL_ADC_GetValue(adcPtr);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 ffd4 	bl	8001b34 <HAL_ADC_GetValue>
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	241a      	movs	r4, #26
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(adcPtr);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 ff02 	bl	80019a0 <HAL_ADC_Stop>

	return val;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	881b      	ldrh	r3, [r3, #0]
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b009      	add	sp, #36	; 0x24
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0549      	lsls	r1, r1, #21
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	055b      	lsls	r3, r3, #21
 8000bdc:	4013      	ands	r3, r2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fb48 	bl	800127c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b08b      	sub	sp, #44	; 0x2c
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	2314      	movs	r3, #20
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	0018      	movs	r0, r3
 8000c06:	2314      	movs	r3, #20
 8000c08:	001a      	movs	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f004 fe2e 	bl	800586c <memset>
  if(hadc->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <HAL_ADC_MspInit+0xb8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d145      	bne.n	8000ca6 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0349      	lsls	r1, r1, #13
 8000c24:	430a      	orrs	r2, r1
 8000c26:	641a      	str	r2, [r3, #64]	; 0x40
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	035b      	lsls	r3, r3, #13
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c54:	2102      	movs	r1, #2
 8000c56:	430a      	orrs	r2, r1
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_ADC_MspInit+0xbc>)
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	2202      	movs	r2, #2
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c66:	2414      	movs	r4, #20
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2203      	movs	r2, #3
 8000c72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	193a      	adds	r2, r7, r4
 8000c7c:	23a0      	movs	r3, #160	; 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f001 fd86 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2203      	movs	r2, #3
 8000c92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_ADC_MspInit+0xc0>)
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	0010      	movs	r0, r2
 8000ca2:	f001 fd77 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b00b      	add	sp, #44	; 0x2c
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	40012400 	.word	0x40012400
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	50000400 	.word	0x50000400

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	231c      	movs	r3, #28
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	2314      	movs	r3, #20
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f004 fdcc 	bl	800586c <memset>
  if(huart->Instance==USART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a67      	ldr	r2, [pc, #412]	; (8000e78 <HAL_UART_MspInit+0x1bc>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d161      	bne.n	8000da2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cde:	4b67      	ldr	r3, [pc, #412]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce2:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	01c9      	lsls	r1, r1, #7
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
 8000cec:	4b63      	ldr	r3, [pc, #396]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	01db      	lsls	r3, r3, #7
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000d00:	2102      	movs	r1, #2
 8000d02:	430a      	orrs	r2, r1
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
 8000d06:	4b5d      	ldr	r3, [pc, #372]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	211c      	movs	r1, #28
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	22c0      	movs	r2, #192	; 0xc0
 8000d18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	4a52      	ldr	r2, [pc, #328]	; (8000e80 <HAL_UART_MspInit+0x1c4>)
 8000d36:	0019      	movs	r1, r3
 8000d38:	0010      	movs	r0, r2
 8000d3a:	f001 fd2b 	bl	8002794 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000d3e:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d40:	4a51      	ldr	r2, [pc, #324]	; (8000e88 <HAL_UART_MspInit+0x1cc>)
 8000d42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d44:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d46:	2233      	movs	r2, #51	; 0x33
 8000d48:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d50:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d56:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5c:	4b49      	ldr	r3, [pc, #292]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d68:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6e:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d74:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 fab2 	bl	80022e0 <HAL_DMA_Init>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000d80:	f7ff fe72 	bl	8000a68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3f      	ldr	r2, [pc, #252]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d88:	679a      	str	r2, [r3, #120]	; 0x78
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <HAL_UART_MspInit+0x1c8>)
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	201b      	movs	r0, #27
 8000d96:	f001 fa71 	bl	800227c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9a:	201b      	movs	r0, #27
 8000d9c:	f001 fa83 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da0:	e066      	b.n	8000e70 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <HAL_UART_MspInit+0x1d0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d161      	bne.n	8000e70 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db0:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	02c9      	lsls	r1, r1, #11
 8000db6:	430a      	orrs	r2, r1
 8000db8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	02db      	lsls	r3, r3, #11
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000dce:	2102      	movs	r1, #2
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_UART_MspInit+0x1c0>)
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd8:	2202      	movs	r2, #2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000de0:	211c      	movs	r1, #28
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	22c0      	movs	r2, #192	; 0xc0
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2202      	movs	r2, #2
 8000dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2204      	movs	r2, #4
 8000e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_UART_MspInit+0x1c4>)
 8000e06:	0019      	movs	r1, r3
 8000e08:	0010      	movs	r0, r2
 8000e0a:	f001 fcc3 	bl	8002794 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <HAL_UART_MspInit+0x1d8>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e16:	2237      	movs	r2, #55	; 0x37
 8000e18:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 fa4a 	bl	80022e0 <HAL_DMA_Init>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8000e50:	f7ff fe0a 	bl	8000a68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e58:	679a      	str	r2, [r3, #120]	; 0x78
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_UART_MspInit+0x1d4>)
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	201d      	movs	r0, #29
 8000e66:	f001 fa09 	bl	800227c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8000e6a:	201d      	movs	r0, #29
 8000e6c:	f001 fa1b 	bl	80022a6 <HAL_NVIC_EnableIRQ>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b00c      	add	sp, #48	; 0x30
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	50000400 	.word	0x50000400
 8000e84:	2000013c 	.word	0x2000013c
 8000e88:	4002001c 	.word	0x4002001c
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	200000e0 	.word	0x200000e0
 8000e94:	40020008 	.word	0x40020008

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f9c2 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <DMA1_Channel1_IRQHandler+0x14>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 fb5e 	bl	8002590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	200000e0 	.word	0x200000e0

08000ee0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 fb52 	bl	8002590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	2000013c 	.word	0x2000013c

08000ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <USART1_IRQHandler+0x14>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f002 ffca 	bl	8003e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	200001fc 	.word	0x200001fc

08000f10 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <USART3_4_LPUART1_IRQHandler+0x14>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f002 ffbe 	bl	8003e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000050 	.word	0x20000050

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <SystemInit+0x14>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	0512      	lsls	r2, r2, #20
 8000f32:	609a      	str	r2, [r3, #8]
#endif
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <abortIT>:
// Stores if a new command is ready to be processed
uint8_t cmd_ready;
uint8_t sensor_buf[SENSOR_BUF_LEN];


void abortIT() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(getUFP());
 8000f44:	f7ff fd80 	bl	8000a48 <getUFP>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f002 feca 	bl	8003ce4 <HAL_UART_Abort_IT>
	HAL_UART_Abort_IT(getDFP());
 8000f50:	f7ff fd82 	bl	8000a58 <getDFP>
 8000f54:	0003      	movs	r3, r0
 8000f56:	0018      	movs	r0, r3
 8000f58:	f002 fec4 	bl	8003ce4 <HAL_UART_Abort_IT>
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <receiveIT>:

// initialize polling for receive interrupts
void receiveIT() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	ufp_cmd = 0;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <receiveIT+0x38>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	dfp_cmd = 0;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <receiveIT+0x3c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
	cmd_ready = 0;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <receiveIT+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(getUFP(), &ufp_cmd, sizeof(ufp_cmd));
 8000f7a:	f7ff fd65 	bl	8000a48 <getUFP>
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <receiveIT+0x38>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	0019      	movs	r1, r3
 8000f84:	f002 fe6c 	bl	8003c60 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(getDFP(), &dfp_cmd, sizeof(dfp_cmd));
 8000f88:	f7ff fd66 	bl	8000a58 <getDFP>
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <receiveIT+0x3c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	0019      	movs	r1, r3
 8000f92:	f002 fe65 	bl	8003c60 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(getDFP(), sensor_buf, SENSOR_BUF_LEN);
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002b9 	.word	0x200002b9
 8000fa0:	200002ba 	.word	0x200002ba
 8000fa4:	200002b8 	.word	0x200002b8

08000fa8 <cmdReady>:

uint8_t cmdReady() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	return cmd_ready;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <cmdReady+0x10>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	200002b8 	.word	0x200002b8

08000fbc <sendACK>:

// Send ACK to UFP
void sendACK(UART_HandleTypeDef* huart) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint8_t data = ACK;
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	222a      	movs	r2, #42	; 0x2a
 8000fca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &data, 1, SEND_TIMEOUT);
 8000fcc:	1879      	adds	r1, r7, r1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f002 fca6 	bl	8003924 <HAL_UART_Transmit>
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <insertReadings>:

// Adds this boards readings into the send buffer (buffer 1)
void insertReadings() {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
	// Get most recent readings
	uint16_t* readings = getLastReadings();
 8000fe6:	f7ff fd83 	bl	8000af0 <getLastReadings>
 8000fea:	0003      	movs	r3, r0
 8000fec:	60bb      	str	r3, [r7, #8]
	int startIndex = NUM_SENSORS * BOARD_INDEX;
 8000fee:	2314      	movs	r3, #20
 8000ff0:	607b      	str	r3, [r7, #4]
	// Add data to the buffer
	for (int i = 0; i < NUM_SENSORS; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e00f      	b.n	8001018 <insertReadings+0x38>
		sensor_buf[startIndex + i] = (uint8_t) (readings[i] >> 4);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	b299      	uxth	r1, r3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	18d3      	adds	r3, r2, r3
 800100c:	b2c9      	uxtb	r1, r1
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <insertReadings+0x48>)
 8001010:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_SENSORS; i++) {
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3301      	adds	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b09      	cmp	r3, #9
 800101c:	ddec      	ble.n	8000ff8 <insertReadings+0x18>
	}
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	200002bc 	.word	0x200002bc

0800102c <processCommand>:

// Reads command from hub in order to see if action needs to be taken
void processCommand() {
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0

	if (dfp_cmd == SENSOR_UPDATE) {
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <processCommand+0x64>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b06      	cmp	r3, #6
 8001038:	d125      	bne.n	8001086 <processCommand+0x5a>
		// Send ack to receive updated sensor readings
		sendACK(getDFP());
 800103a:	f7ff fd0d 	bl	8000a58 <getDFP>
 800103e:	0003      	movs	r3, r0
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ffbb 	bl	8000fbc <sendACK>
		HAL_UART_Receive(getDFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
 8001046:	f7ff fd07 	bl	8000a58 <getDFP>
 800104a:	4912      	ldr	r1, [pc, #72]	; (8001094 <processCommand+0x68>)
 800104c:	230a      	movs	r3, #10
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	f002 fd14 	bl	8003a7c <HAL_UART_Receive>
		// Get new sensor readings
		getNewReadings();
 8001054:	f7ff fd28 	bl	8000aa8 <getNewReadings>
		// Add this sensor's readings
		insertReadings();
 8001058:	f7ff ffc2 	bl	8000fe0 <insertReadings>
		// Send update to downstream board
		comm_stat_t status = sendCommand(getUFP(), SENSOR_UPDATE);
 800105c:	f7ff fcf4 	bl	8000a48 <getUFP>
 8001060:	0003      	movs	r3, r0
 8001062:	1dfc      	adds	r4, r7, #7
 8001064:	2106      	movs	r1, #6
 8001066:	0018      	movs	r0, r3
 8001068:	f000 f816 	bl	8001098 <sendCommand>
 800106c:	0003      	movs	r3, r0
 800106e:	7023      	strb	r3, [r4, #0]
		if (status == COMM_OK) {
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d106      	bne.n	8001086 <processCommand+0x5a>
			HAL_UART_Transmit(getUFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
 8001078:	f7ff fce6 	bl	8000a48 <getUFP>
 800107c:	4905      	ldr	r1, [pc, #20]	; (8001094 <processCommand+0x68>)
 800107e:	230a      	movs	r3, #10
 8001080:	2228      	movs	r2, #40	; 0x28
 8001082:	f002 fc4f 	bl	8003924 <HAL_UART_Transmit>
		}
	}
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b003      	add	sp, #12
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	200002ba 	.word	0x200002ba
 8001094:	200002bc 	.word	0x200002bc

08001098 <sendCommand>:
	// Resume receiving interrupts
	receiveIT();
	return status;
}

comm_stat_t sendCommand(UART_HandleTypeDef* huart, cmd_t cmd) {
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	000a      	movs	r2, r1
 80010a2:	1cfb      	adds	r3, r7, #3
 80010a4:	701a      	strb	r2, [r3, #0]
	// Retry if needed, then give up after too many attempts
	int numAttempts = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
	uint8_t rec = 0;
 80010aa:	230b      	movs	r3, #11
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	while(numAttempts < MAX_ATTEMPTS) {
 80010b2:	e015      	b.n	80010e0 <sendCommand+0x48>
		// Transmit command
		HAL_UART_Transmit(huart, &cmd, sizeof(cmd), SEND_TIMEOUT);
 80010b4:	1cf9      	adds	r1, r7, #3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	2302      	movs	r3, #2
 80010ba:	2201      	movs	r2, #1
 80010bc:	f002 fc32 	bl	8003924 <HAL_UART_Transmit>
		// Wait for ACK
		HAL_UART_Receive(huart, &rec, sizeof(rec), ACK_TIMEOUT);
 80010c0:	240b      	movs	r4, #11
 80010c2:	1939      	adds	r1, r7, r4
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	2302      	movs	r3, #2
 80010c8:	2201      	movs	r2, #1
 80010ca:	f002 fcd7 	bl	8003a7c <HAL_UART_Receive>
		if (rec == ACK) {
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b2a      	cmp	r3, #42	; 0x2a
 80010d4:	d101      	bne.n	80010da <sendCommand+0x42>
			return COMM_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e00d      	b.n	80010f6 <sendCommand+0x5e>
			break;
		} else {
			numAttempts++;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
	while(numAttempts < MAX_ATTEMPTS) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	dde6      	ble.n	80010b4 <sendCommand+0x1c>
//			HAL_Delay(1);
		}
	}
	if (rec != ACK) {
 80010e6:	230b      	movs	r3, #11
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b2a      	cmp	r3, #42	; 0x2a
 80010ee:	d001      	beq.n	80010f4 <sendCommand+0x5c>
		return COMM_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <sendCommand+0x5e>
	} else {
		return COMM_OK;
 80010f4:	2300      	movs	r3, #0
	}
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b005      	add	sp, #20
 80010fc:	bd90      	pop	{r4, r7, pc}
	...

08001100 <HAL_UART_RxCpltCallback>:

// Pass received data through
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	cmd_ready = 1;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_UART_RxCpltCallback+0x18>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	200002b8 	.word	0x200002b8

0800111c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001120:	f7ff ff02 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800114a:	f004 fb6b 	bl	8005824 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800114e:	f7ff fa5d 	bl	800060c <main>

08001152 <LoopForever>:

LoopForever:
  b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   r0, =_estack
 8001154:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001160:	0800592c 	.word	0x0800592c
  ldr r2, =_sbss
 8001164:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001168:	200002e8 	.word	0x200002e8

0800116c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_COMP_IRQHandler>
	...

08001170 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x3c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_Init+0x3c>)
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	0049      	lsls	r1, r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f810 	bl	80011b0 <HAL_InitTick>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d003      	beq.n	800119c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e001      	b.n	80011a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fd04 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_InitTick+0x88>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d02b      	beq.n	8001220 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_InitTick+0x8c>)
 80011ca:	681c      	ldr	r4, [r3, #0]
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_InitTick+0x88>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	0019      	movs	r1, r3
 80011d2:	23fa      	movs	r3, #250	; 0xfa
 80011d4:	0098      	lsls	r0, r3, #2
 80011d6:	f7fe ff97 	bl	8000108 <__udivsi3>
 80011da:	0003      	movs	r3, r0
 80011dc:	0019      	movs	r1, r3
 80011de:	0020      	movs	r0, r4
 80011e0:	f7fe ff92 	bl	8000108 <__udivsi3>
 80011e4:	0003      	movs	r3, r0
 80011e6:	0018      	movs	r0, r3
 80011e8:	f001 f86d 	bl	80022c6 <HAL_SYSTICK_Config>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d112      	bne.n	8001216 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d80a      	bhi.n	800120c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2200      	movs	r2, #0
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 f83c 	bl	800227c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_InitTick+0x90>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e00d      	b.n	8001228 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e008      	b.n	8001228 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001216:	230f      	movs	r3, #15
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e003      	b.n	8001228 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001220:	230f      	movs	r3, #15
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001228:	230f      	movs	r3, #15
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	781b      	ldrb	r3, [r3, #0]
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b005      	add	sp, #20
 8001234:	bd90      	pop	{r4, r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000030 	.word	0x20000030
 800123c:	20000028 	.word	0x20000028
 8001240:	2000002c 	.word	0x2000002c

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x1c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	001a      	movs	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x20>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	18d2      	adds	r2, r2, r3
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_IncTick+0x20>)
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	20000030 	.word	0x20000030
 8001264:	200002e4 	.word	0x200002e4

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <HAL_GetTick+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	200002e4 	.word	0x200002e4

0800127c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800128a:	4013      	ands	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40010000 	.word	0x40010000
 80012a4:	fffff9ff 	.word	0xfffff9ff

080012a8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80012b8:	401a      	ands	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	fe3fffff 	.word	0xfe3fffff

080012d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	23e0      	movs	r3, #224	; 0xe0
 80012de:	045b      	lsls	r3, r3, #17
 80012e0:	4013      	ands	r3, r2
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}

080012ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	2104      	movs	r1, #4
 80012fe:	400a      	ands	r2, r1
 8001300:	2107      	movs	r1, #7
 8001302:	4091      	lsls	r1, r2
 8001304:	000a      	movs	r2, r1
 8001306:	43d2      	mvns	r2, r2
 8001308:	401a      	ands	r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2104      	movs	r1, #4
 800130e:	400b      	ands	r3, r1
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4099      	lsls	r1, r3
 8001314:	000b      	movs	r3, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b004      	add	sp, #16
 8001322:	bd80      	pop	{r7, pc}

08001324 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	23c0      	movs	r3, #192	; 0xc0
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4013      	ands	r3, r2
 8001336:	d101      	bne.n	800133c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800133c:	2300      	movs	r3, #0
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}

08001346 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	211f      	movs	r1, #31
 800135a:	400a      	ands	r2, r1
 800135c:	210f      	movs	r1, #15
 800135e:	4091      	lsls	r1, r2
 8001360:	000a      	movs	r2, r1
 8001362:	43d2      	mvns	r2, r2
 8001364:	401a      	ands	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0e9b      	lsrs	r3, r3, #26
 800136a:	210f      	movs	r1, #15
 800136c:	4019      	ands	r1, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	201f      	movs	r0, #31
 8001372:	4003      	ands	r3, r0
 8001374:	4099      	lsls	r1, r3
 8001376:	000b      	movs	r3, r1
 8001378:	431a      	orrs	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}

08001386 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	035b      	lsls	r3, r3, #13
 8001398:	0b5b      	lsrs	r3, r3, #13
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	0352      	lsls	r2, r2, #13
 80013ba:	0b52      	lsrs	r2, r2, #13
 80013bc:	43d2      	mvns	r2, r2
 80013be:	401a      	ands	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	0212      	lsls	r2, r2, #8
 80013e0:	43d2      	mvns	r2, r2
 80013e2:	401a      	ands	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	400b      	ands	r3, r1
 80013ec:	4904      	ldr	r1, [pc, #16]	; (8001400 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013ee:	400b      	ands	r3, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	07ffff00 	.word	0x07ffff00

08001404 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <LL_ADC_EnableInternalRegulator+0x24>)
 8001412:	4013      	ands	r3, r2
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	0552      	lsls	r2, r2, #21
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	6fffffe8 	.word	0x6fffffe8

0800142c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	055b      	lsls	r3, r3, #21
 800143c:	401a      	ands	r2, r3
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	055b      	lsls	r3, r3, #21
 8001442:	429a      	cmp	r2, r3
 8001444:	d101      	bne.n	800144a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800144a:	2300      	movs	r3, #0
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}

08001454 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <LL_ADC_Enable+0x20>)
 8001462:	4013      	ands	r3, r2
 8001464:	2201      	movs	r2, #1
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	7fffffe8 	.word	0x7fffffe8

08001478 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <LL_ADC_Disable+0x20>)
 8001486:	4013      	ands	r3, r2
 8001488:	2202      	movs	r2, #2
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	7fffffe8 	.word	0x7fffffe8

0800149c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2201      	movs	r2, #1
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <LL_ADC_IsEnabled+0x18>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <LL_ADC_IsEnabled+0x1a>
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}

080014be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_IsDisableOngoing+0x18>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_IsDisableOngoing+0x1a>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}

080014e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <LL_ADC_REG_StartConversion+0x20>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	2204      	movs	r2, #4
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	7fffffe8 	.word	0x7fffffe8

08001504 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <LL_ADC_REG_StopConversion+0x20>)
 8001512:	4013      	ands	r3, r2
 8001514:	2210      	movs	r2, #16
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}
 8001524:	7fffffe8 	.word	0x7fffffe8

08001528 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2204      	movs	r2, #4
 8001536:	4013      	ands	r3, r2
 8001538:	2b04      	cmp	r3, #4
 800153a:	d101      	bne.n	8001540 <LL_ADC_REG_IsConversionOngoing+0x18>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001540:	2300      	movs	r3, #0
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	231f      	movs	r3, #31
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1ad      	b.n	80018ce <HAL_ADC_Init+0x382>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10a      	bne.n	8001590 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fb3b 	bl	8000bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2254      	movs	r2, #84	; 0x54
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ff49 	bl	800142c <LL_ADC_IsInternalRegulatorEnabled>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d114      	bne.n	80015c8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff ff2e 	bl	8001404 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80015a8:	4bcb      	ldr	r3, [pc, #812]	; (80018d8 <HAL_ADC_Init+0x38c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	49cb      	ldr	r1, [pc, #812]	; (80018dc <HAL_ADC_Init+0x390>)
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7fe fdaa 	bl	8000108 <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015ba:	e002      	b.n	80015c2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff2d 	bl	800142c <LL_ADC_IsInternalRegulatorEnabled>
 80015d2:	1e03      	subs	r3, r0, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	2210      	movs	r2, #16
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2201      	movs	r2, #1
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015ee:	231f      	movs	r3, #31
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7ff ff94 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001600:	0003      	movs	r3, r0
 8001602:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	2210      	movs	r2, #16
 800160a:	4013      	ands	r3, r2
 800160c:	d000      	beq.n	8001610 <HAL_ADC_Init+0xc4>
 800160e:	e151      	b.n	80018b4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d000      	beq.n	8001618 <HAL_ADC_Init+0xcc>
 8001616:	e14d      	b.n	80018b4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	4ab0      	ldr	r2, [pc, #704]	; (80018e0 <HAL_ADC_Init+0x394>)
 800161e:	4013      	ands	r3, r2
 8001620:	2202      	movs	r2, #2
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff ff35 	bl	800149c <LL_ADC_IsEnabled>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d151      	bne.n	80016da <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2218      	movs	r2, #24
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	0f9b      	lsrs	r3, r3, #30
 8001654:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800165a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8001660:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8001666:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 800166c:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	223c      	movs	r2, #60	; 0x3c
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d103      	bne.n	8001686 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2201      	movs	r2, #1
 8001682:	4313      	orrs	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	4a95      	ldr	r2, [pc, #596]	; (80018e4 <HAL_ADC_Init+0x398>)
 800168e:	4013      	ands	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	430a      	orrs	r2, r1
 800169a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	23c0      	movs	r3, #192	; 0xc0
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d018      	beq.n	80016da <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d012      	beq.n	80016da <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	061b      	lsls	r3, r3, #24
 80016bc:	429a      	cmp	r2, r3
 80016be:	d00c      	beq.n	80016da <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80016c0:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <HAL_ADC_Init+0x39c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a89      	ldr	r2, [pc, #548]	; (80018ec <HAL_ADC_Init+0x3a0>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	23f0      	movs	r3, #240	; 0xf0
 80016d0:	039b      	lsls	r3, r3, #14
 80016d2:	401a      	ands	r2, r3
 80016d4:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <HAL_ADC_Init+0x39c>)
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7e1b      	ldrb	r3, [r3, #24]
 80016de:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7e5b      	ldrb	r3, [r3, #25]
 80016e4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7e9b      	ldrb	r3, [r3, #26]
 80016ec:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_ADC_Init+0x1b2>
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	e000      	b.n	8001700 <HAL_ADC_Init+0x1b4>
 80016fe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001700:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001706:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	da04      	bge.n	800171a <HAL_ADC_Init+0x1ce>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	e001      	b.n	800171e <HAL_ADC_Init+0x1d2>
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800171e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	5c5b      	ldrb	r3, [r3, r1]
 8001726:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001728:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	5c9b      	ldrb	r3, [r3, r2]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d115      	bne.n	8001766 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7e9b      	ldrb	r3, [r3, #26]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	0252      	lsls	r2, r2, #9
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	e00b      	b.n	8001766 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	2220      	movs	r2, #32
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2201      	movs	r2, #1
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001772:	23e0      	movs	r3, #224	; 0xe0
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800177c:	4313      	orrs	r3, r2
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4a59      	ldr	r2, [pc, #356]	; (80018f0 <HAL_ADC_Init+0x3a4>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	430a      	orrs	r2, r1
 8001798:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	4a54      	ldr	r2, [pc, #336]	; (80018f4 <HAL_ADC_Init+0x3a8>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b8:	001a      	movs	r2, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	f7ff fd95 	bl	80012ea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c8:	494b      	ldr	r1, [pc, #300]	; (80018f8 <HAL_ADC_Init+0x3ac>)
 80017ca:	001a      	movs	r2, r3
 80017cc:	f7ff fd8d 	bl	80012ea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2110      	movs	r1, #16
 80017e4:	4249      	negs	r1, r1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
 80017ea:	e03c      	b.n	8001866 <HAL_ADC_Init+0x31a>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	039b      	lsls	r3, r3, #14
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d136      	bne.n	8001866 <HAL_ADC_Init+0x31a>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	e00c      	b.n	8001818 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	40da      	lsrs	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	220f      	movs	r2, #15
 800180c:	4013      	ands	r3, r2
 800180e:	2b0f      	cmp	r3, #15
 8001810:	d006      	beq.n	8001820 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b07      	cmp	r3, #7
 800181c:	d9ef      	bls.n	80017fe <HAL_ADC_Init+0x2b2>
 800181e:	e000      	b.n	8001822 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8001820:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d109      	bne.n	800183c <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2110      	movs	r1, #16
 8001834:	4249      	negs	r1, r1
 8001836:	430a      	orrs	r2, r1
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
 800183a:	e014      	b.n	8001866 <HAL_ADC_Init+0x31a>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <HAL_ADC_Init+0x3b0>)
 8001848:	4694      	mov	ip, r2
 800184a:	4463      	add	r3, ip
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	221c      	movs	r2, #28
 8001850:	4013      	ands	r3, r2
 8001852:	2210      	movs	r2, #16
 8001854:	4252      	negs	r2, r2
 8001856:	409a      	lsls	r2, r3
 8001858:	0011      	movs	r1, r2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_ADC_Init+0x3b4>)
 800186e:	4013      	ands	r3, r2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	429a      	cmp	r2, r3
 8001874:	d10b      	bne.n	800188e <HAL_ADC_Init+0x342>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	2203      	movs	r2, #3
 8001882:	4393      	bics	r3, r2
 8001884:	2201      	movs	r2, #1
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800188c:	e01c      	b.n	80018c8 <HAL_ADC_Init+0x37c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	2212      	movs	r2, #18
 8001894:	4393      	bics	r3, r2
 8001896:	2210      	movs	r2, #16
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2201      	movs	r2, #1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80018aa:	231f      	movs	r3, #31
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80018b2:	e009      	b.n	80018c8 <HAL_ADC_Init+0x37c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	2210      	movs	r2, #16
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018c0:	231f      	movs	r3, #31
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c8:	231f      	movs	r3, #31
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	781b      	ldrb	r3, [r3, #0]
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b008      	add	sp, #32
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	20000028 	.word	0x20000028
 80018dc:	00030d40 	.word	0x00030d40
 80018e0:	fffffefd 	.word	0xfffffefd
 80018e4:	1ffffc02 	.word	0x1ffffc02
 80018e8:	40012708 	.word	0x40012708
 80018ec:	ffc3ffff 	.word	0xffc3ffff
 80018f0:	fffe0219 	.word	0xfffe0219
 80018f4:	dffffc02 	.word	0xdffffc02
 80018f8:	07ffff04 	.word	0x07ffff04
 80018fc:	3fffffff 	.word	0x3fffffff
 8001900:	833fffe7 	.word	0x833fffe7

08001904 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff fe09 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d135      	bne.n	8001986 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2254      	movs	r2, #84	; 0x54
 800191e:	5c9b      	ldrb	r3, [r3, r2]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADC_Start+0x24>
 8001924:	2302      	movs	r3, #2
 8001926:	e035      	b.n	8001994 <HAL_ADC_Start+0x90>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2254      	movs	r2, #84	; 0x54
 800192c:	2101      	movs	r1, #1
 800192e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001930:	250f      	movs	r5, #15
 8001932:	197c      	adds	r4, r7, r5
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 fb1e 	bl	8001f78 <ADC_Enable>
 800193c:	0003      	movs	r3, r0
 800193e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001940:	197b      	adds	r3, r7, r5
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d119      	bne.n	800197c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_ADC_Start+0x98>)
 800194e:	4013      	ands	r3, r2
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	0052      	lsls	r2, r2, #1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	221c      	movs	r2, #28
 8001966:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2254      	movs	r2, #84	; 0x54
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fdb3 	bl	80014e0 <LL_ADC_REG_StartConversion>
 800197a:	e008      	b.n	800198e <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2254      	movs	r2, #84	; 0x54
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]
 8001984:	e003      	b.n	800198e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001986:	230f      	movs	r3, #15
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800198e:	230f      	movs	r3, #15
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bdb0      	pop	{r4, r5, r7, pc}
 800199c:	fffff0fe 	.word	0xfffff0fe

080019a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2254      	movs	r2, #84	; 0x54
 80019ac:	5c9b      	ldrb	r3, [r3, r2]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_Stop+0x16>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e02a      	b.n	8001a0c <HAL_ADC_Stop+0x6c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2254      	movs	r2, #84	; 0x54
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80019be:	250f      	movs	r5, #15
 80019c0:	197c      	adds	r4, r7, r5
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 fa9b 	bl	8001f00 <ADC_ConversionStop>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019ce:	197b      	adds	r3, r7, r5
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d113      	bne.n	80019fe <HAL_ADC_Stop+0x5e>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80019d6:	250f      	movs	r5, #15
 80019d8:	197c      	adds	r4, r7, r5
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 fb49 	bl	8002074 <ADC_Disable>
 80019e2:	0003      	movs	r3, r0
 80019e4:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80019e6:	197b      	adds	r3, r7, r5
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d107      	bne.n	80019fe <HAL_ADC_Stop+0x5e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_ADC_Stop+0x74>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	2201      	movs	r2, #1
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2254      	movs	r2, #84	; 0x54
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001a06:	230f      	movs	r3, #15
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b004      	add	sp, #16
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	fffffefe 	.word	0xfffffefe

08001a18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d102      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e00f      	b.n	8001a50 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d007      	beq.n	8001a4c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	2220      	movs	r2, #32
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e06c      	b.n	8001b26 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a50:	f7ff fc0a 	bl	8001268 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a58:	e019      	b.n	8001a8e <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	d016      	beq.n	8001a8e <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a60:	f7ff fc02 	bl	8001268 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d302      	bcc.n	8001a76 <HAL_ADC_PollForConversion+0x5e>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10b      	bne.n	8001a8e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2254      	movs	r2, #84	; 0x54
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e04b      	b.n	8001b26 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	d0df      	beq.n	8001a5a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff fc39 	bl	8001324 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d02e      	beq.n	8001b14 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7e9b      	ldrb	r3, [r3, #26]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d12a      	bne.n	8001b14 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d123      	bne.n	8001b14 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff fd29 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d110      	bne.n	8001afc <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	210c      	movs	r1, #12
 8001ae6:	438a      	bics	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_ADC_PollForConversion+0x118>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	2201      	movs	r2, #1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	659a      	str	r2, [r3, #88]	; 0x58
 8001afa:	e00b      	b.n	8001b14 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	2220      	movs	r2, #32
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e1b      	ldrb	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	220c      	movs	r2, #12
 8001b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	fffffefe 	.word	0xfffffefe

08001b34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b002      	add	sp, #8
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b56:	2317      	movs	r3, #23
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2254      	movs	r2, #84	; 0x54
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x24>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e1c2      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x3aa>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2254      	movs	r2, #84	; 0x54
 8001b74:	2101      	movs	r1, #1
 8001b76:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff fcd3 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001b82:	1e03      	subs	r3, r0, #0
 8001b84:	d000      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x3c>
 8001b86:	e1a5      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d100      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x46>
 8001b90:	e144      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d004      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ba2:	4ac2      	ldr	r2, [pc, #776]	; (8001eac <HAL_ADC_ConfigChannel+0x360>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d108      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	f7ff fbe7 	bl	8001386 <LL_ADC_REG_SetSequencerChAdd>
 8001bb8:	e0c9      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	211f      	movs	r1, #31
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	4099      	lsls	r1, r3
 8001bca:	000b      	movs	r3, r1
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4013      	ands	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	035b      	lsls	r3, r3, #13
 8001bd8:	0b5b      	lsrs	r3, r3, #13
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x9c>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0e9b      	lsrs	r3, r3, #26
 8001be2:	221f      	movs	r2, #31
 8001be4:	4013      	ands	r3, r2
 8001be6:	e098      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d000      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0xa8>
 8001bf2:	e091      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1cc>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d000      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0xb4>
 8001bfe:	e089      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x1c8>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2204      	movs	r2, #4
 8001c06:	4013      	ands	r3, r2
 8001c08:	d000      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0xc0>
 8001c0a:	e081      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x1c4>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	4013      	ands	r3, r2
 8001c14:	d000      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0xcc>
 8001c16:	e079      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1c0>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d000      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0xd8>
 8001c22:	e071      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x1bc>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d000      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0xe4>
 8001c2e:	e069      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x1b8>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	4013      	ands	r3, r2
 8001c38:	d000      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0xf0>
 8001c3a:	e061      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x1b4>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	4013      	ands	r3, r2
 8001c44:	d000      	beq.n	8001c48 <HAL_ADC_ConfigChannel+0xfc>
 8001c46:	e059      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x1b0>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d151      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1ac>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d149      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1a8>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d141      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1a4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4013      	ands	r3, r2
 8001c76:	d139      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1a0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	015b      	lsls	r3, r3, #5
 8001c80:	4013      	ands	r3, r2
 8001c82:	d131      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x19c>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	019b      	lsls	r3, r3, #6
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d129      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x198>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	01db      	lsls	r3, r3, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d121      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x194>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d119      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x190>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d111      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x18c>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d109      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x188>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	02db      	lsls	r3, r3, #11
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d001      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0x184>
 8001ccc:	2312      	movs	r3, #18
 8001cce:	e024      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e022      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cd4:	2311      	movs	r3, #17
 8001cd6:	e020      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cd8:	2310      	movs	r3, #16
 8001cda:	e01e      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cdc:	230f      	movs	r3, #15
 8001cde:	e01c      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001ce0:	230e      	movs	r3, #14
 8001ce2:	e01a      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001ce4:	230d      	movs	r3, #13
 8001ce6:	e018      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001ce8:	230c      	movs	r3, #12
 8001cea:	e016      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cec:	230b      	movs	r3, #11
 8001cee:	e014      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	e012      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cf4:	2309      	movs	r3, #9
 8001cf6:	e010      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	e00e      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	e00c      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001d00:	2306      	movs	r3, #6
 8001d02:	e00a      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001d04:	2305      	movs	r3, #5
 8001d06:	e008      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e006      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e004      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1ce>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6852      	ldr	r2, [r2, #4]
 8001d1e:	201f      	movs	r0, #31
 8001d20:	4002      	ands	r2, r0
 8001d22:	4093      	lsls	r3, r2
 8001d24:	000a      	movs	r2, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d808      	bhi.n	8001d4e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	001a      	movs	r2, r3
 8001d4a:	f7ff fafc 	bl	8001346 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	f7ff fb36 	bl	80013cc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db00      	blt.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
 8001d68:	e0be      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d6a:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff faaf 	bl	80012d0 <LL_ADC_GetCommonPathInternalCh>
 8001d72:	0003      	movs	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_ADC_ConfigChannel+0x368>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d88:	d11e      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	0412      	lsls	r2, r2, #16
 8001d90:	4313      	orrs	r3, r2
 8001d92:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001d94:	0019      	movs	r1, r3
 8001d96:	0010      	movs	r0, r2
 8001d98:	f7ff fa86 	bl	80012a8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_ADC_ConfigChannel+0x36c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4946      	ldr	r1, [pc, #280]	; (8001ebc <HAL_ADC_ConfigChannel+0x370>)
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7fe f9b0 	bl	8000108 <__udivsi3>
 8001da8:	0003      	movs	r3, r0
 8001daa:	001a      	movs	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	189b      	adds	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	3301      	adds	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dc6:	e08f      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a3c      	ldr	r2, [pc, #240]	; (8001ec0 <HAL_ADC_ConfigChannel+0x374>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10e      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x2a4>
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	045b      	lsls	r3, r3, #17
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	0452      	lsls	r2, r2, #17
 8001de2:	4313      	orrs	r3, r2
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001de6:	0019      	movs	r1, r3
 8001de8:	0010      	movs	r0, r2
 8001dea:	f7ff fa5d 	bl	80012a8 <LL_ADC_SetCommonPathInternalCh>
 8001dee:	e07b      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <HAL_ADC_ConfigChannel+0x378>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d000      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x2b0>
 8001dfa:	e075      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	03db      	lsls	r3, r3, #15
 8001e02:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e04:	d000      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x2bc>
 8001e06:	e06f      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	03d2      	lsls	r2, r2, #15
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001e12:	0019      	movs	r1, r3
 8001e14:	0010      	movs	r0, r2
 8001e16:	f7ff fa47 	bl	80012a8 <LL_ADC_SetCommonPathInternalCh>
 8001e1a:	e065      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	061b      	lsls	r3, r3, #24
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_ADC_ConfigChannel+0x360>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d107      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	0010      	movs	r0, r2
 8001e3e:	f7ff fab3 	bl	80013a8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da4e      	bge.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff fa3f 	bl	80012d0 <LL_ADC_GetCommonPathInternalCh>
 8001e52:	0003      	movs	r3, r0
 8001e54:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_ADC_ConfigChannel+0x368>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_ADC_ConfigChannel+0x37c>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001e68:	0019      	movs	r1, r3
 8001e6a:	0010      	movs	r0, r2
 8001e6c:	f7ff fa1c 	bl	80012a8 <LL_ADC_SetCommonPathInternalCh>
 8001e70:	e03a      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_ADC_ConfigChannel+0x374>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_ADC_ConfigChannel+0x380>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001e84:	0019      	movs	r1, r3
 8001e86:	0010      	movs	r0, r2
 8001e88:	f7ff fa0e 	bl	80012a8 <LL_ADC_SetCommonPathInternalCh>
 8001e8c:	e02c      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <HAL_ADC_ConfigChannel+0x378>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d127      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_ADC_ConfigChannel+0x384>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_ADC_ConfigChannel+0x364>)
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	0010      	movs	r0, r2
 8001ea4:	f7ff fa00 	bl	80012a8 <LL_ADC_SetCommonPathInternalCh>
 8001ea8:	e01e      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x39c>
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	80000004 	.word	0x80000004
 8001eb0:	40012708 	.word	0x40012708
 8001eb4:	b0001000 	.word	0xb0001000
 8001eb8:	20000028 	.word	0x20000028
 8001ebc:	00030d40 	.word	0x00030d40
 8001ec0:	b8004000 	.word	0xb8004000
 8001ec4:	b4002000 	.word	0xb4002000
 8001ec8:	ff7fffff 	.word	0xff7fffff
 8001ecc:	feffffff 	.word	0xfeffffff
 8001ed0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	2220      	movs	r2, #32
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2254      	movs	r2, #84	; 0x54
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001ef0:	2317      	movs	r3, #23
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	781b      	ldrb	r3, [r3, #0]
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b006      	add	sp, #24
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)

08001f00 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff fb0b 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d02b      	beq.n	8001f6e <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7ff facf 	bl	80014be <LL_ADC_IsDisableOngoing>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d104      	bne.n	8001f2e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff faeb 	bl	8001504 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f2e:	f7ff f99b 	bl	8001268 <HAL_GetTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001f36:	e014      	b.n	8001f62 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001f38:	f7ff f996 	bl	8001268 <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d90d      	bls.n	8001f62 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2201      	movs	r2, #1
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e006      	b.n	8001f70 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d1e4      	bne.n	8001f38 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fa87 	bl	800149c <LL_ADC_IsEnabled>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d162      	bne.n	8002058 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a32      	ldr	r2, [pc, #200]	; (8002064 <ADC_Enable+0xec>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2201      	movs	r2, #1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e04f      	b.n	800205a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7ff fa48 	bl	8001454 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <ADC_Enable+0xf0>)
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff f982 	bl	80012d0 <LL_ADC_GetCommonPathInternalCh>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00f      	beq.n	8001ff6 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <ADC_Enable+0xf4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4925      	ldr	r1, [pc, #148]	; (8002070 <ADC_Enable+0xf8>)
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7fe f893 	bl	8000108 <__udivsi3>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fe8:	e002      	b.n	8001ff0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f9      	bne.n	8001fea <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7e5b      	ldrb	r3, [r3, #25]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d02c      	beq.n	8002058 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff f933 	bl	8001268 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002006:	e020      	b.n	800204a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff fa45 	bl	800149c <LL_ADC_IsEnabled>
 8002012:	1e03      	subs	r3, r0, #0
 8002014:	d104      	bne.n	8002020 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0018      	movs	r0, r3
 800201c:	f7ff fa1a 	bl	8001454 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002020:	f7ff f922 	bl	8001268 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d90d      	bls.n	800204a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	2210      	movs	r2, #16
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2201      	movs	r2, #1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e007      	b.n	800205a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	2b01      	cmp	r3, #1
 8002056:	d1d7      	bne.n	8002008 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	80000017 	.word	0x80000017
 8002068:	40012708 	.word	0x40012708
 800206c:	20000028 	.word	0x20000028
 8002070:	00030d40 	.word	0x00030d40

08002074 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fa1c 	bl	80014be <LL_ADC_IsDisableOngoing>
 8002086:	0003      	movs	r3, r0
 8002088:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff fa04 	bl	800149c <LL_ADC_IsEnabled>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d040      	beq.n	800211a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d13d      	bne.n	800211a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2205      	movs	r2, #5
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d10d      	bne.n	80020c8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff f9e1 	bl	8001478 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2203      	movs	r2, #3
 80020bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020be:	f7ff f8d3 	bl	8001268 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020c6:	e022      	b.n	800210e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	2210      	movs	r2, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2201      	movs	r2, #1
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e01b      	b.n	800211c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020e4:	f7ff f8c0 	bl	8001268 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d90d      	bls.n	800210e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	2210      	movs	r2, #16
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	2201      	movs	r2, #1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e006      	b.n	800211c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	d1e4      	bne.n	80020e4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b004      	add	sp, #16
 8002122:	bd80      	pop	{r7, pc}

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	0002      	movs	r2, r0
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b7f      	cmp	r3, #127	; 0x7f
 8002136:	d809      	bhi.n	800214c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	001a      	movs	r2, r3
 800213e:	231f      	movs	r3, #31
 8002140:	401a      	ands	r2, r3
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_EnableIRQ+0x30>)
 8002144:	2101      	movs	r1, #1
 8002146:	4091      	lsls	r1, r2
 8002148:	000a      	movs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	0002      	movs	r2, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b7f      	cmp	r3, #127	; 0x7f
 800216c:	d828      	bhi.n	80021c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800216e:	4a2f      	ldr	r2, [pc, #188]	; (800222c <__NVIC_SetPriority+0xd4>)
 8002170:	1dfb      	adds	r3, r7, #7
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b25b      	sxtb	r3, r3
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	33c0      	adds	r3, #192	; 0xc0
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	589b      	ldr	r3, [r3, r2]
 800217e:	1dfa      	adds	r2, r7, #7
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	0011      	movs	r1, r2
 8002184:	2203      	movs	r2, #3
 8002186:	400a      	ands	r2, r1
 8002188:	00d2      	lsls	r2, r2, #3
 800218a:	21ff      	movs	r1, #255	; 0xff
 800218c:	4091      	lsls	r1, r2
 800218e:	000a      	movs	r2, r1
 8002190:	43d2      	mvns	r2, r2
 8002192:	401a      	ands	r2, r3
 8002194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	401a      	ands	r2, r3
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	0018      	movs	r0, r3
 80021a4:	2303      	movs	r3, #3
 80021a6:	4003      	ands	r3, r0
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ac:	481f      	ldr	r0, [pc, #124]	; (800222c <__NVIC_SetPriority+0xd4>)
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	430a      	orrs	r2, r1
 80021b8:	33c0      	adds	r3, #192	; 0xc0
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021be:	e031      	b.n	8002224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021c0:	4a1b      	ldr	r2, [pc, #108]	; (8002230 <__NVIC_SetPriority+0xd8>)
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	0019      	movs	r1, r3
 80021c8:	230f      	movs	r3, #15
 80021ca:	400b      	ands	r3, r1
 80021cc:	3b08      	subs	r3, #8
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3306      	adds	r3, #6
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	18d3      	adds	r3, r2, r3
 80021d6:	3304      	adds	r3, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1dfa      	adds	r2, r7, #7
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	0011      	movs	r1, r2
 80021e0:	2203      	movs	r2, #3
 80021e2:	400a      	ands	r2, r1
 80021e4:	00d2      	lsls	r2, r2, #3
 80021e6:	21ff      	movs	r1, #255	; 0xff
 80021e8:	4091      	lsls	r1, r2
 80021ea:	000a      	movs	r2, r1
 80021ec:	43d2      	mvns	r2, r2
 80021ee:	401a      	ands	r2, r3
 80021f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	22ff      	movs	r2, #255	; 0xff
 80021f8:	401a      	ands	r2, r3
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	0018      	movs	r0, r3
 8002200:	2303      	movs	r3, #3
 8002202:	4003      	ands	r3, r0
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002208:	4809      	ldr	r0, [pc, #36]	; (8002230 <__NVIC_SetPriority+0xd8>)
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	001c      	movs	r4, r3
 8002210:	230f      	movs	r3, #15
 8002212:	4023      	ands	r3, r4
 8002214:	3b08      	subs	r3, #8
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	430a      	orrs	r2, r1
 800221a:	3306      	adds	r3, #6
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	18c3      	adds	r3, r0, r3
 8002220:	3304      	adds	r3, #4
 8002222:	601a      	str	r2, [r3, #0]
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b003      	add	sp, #12
 800222a:	bd90      	pop	{r4, r7, pc}
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <SysTick_Config+0x40>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e010      	b.n	800226c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <SysTick_Config+0x44>)
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	3a01      	subs	r2, #1
 8002250:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	2301      	movs	r3, #1
 8002254:	425b      	negs	r3, r3
 8002256:	2103      	movs	r1, #3
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff ff7d 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SysTick_Config+0x44>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x44>)
 8002266:	2207      	movs	r2, #7
 8002268:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226a:	2300      	movs	r3, #0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}
 8002274:	00ffffff 	.word	0x00ffffff
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	210f      	movs	r1, #15
 8002288:	187b      	adds	r3, r7, r1
 800228a:	1c02      	adds	r2, r0, #0
 800228c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	187b      	adds	r3, r7, r1
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b25b      	sxtb	r3, r3
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff ff5d 	bl	8002158 <__NVIC_SetPriority>
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	0002      	movs	r2, r0
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff ff33 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff ffaf 	bl	8002234 <SysTick_Config>
 80022d6:	0003      	movs	r3, r0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e077      	b.n	80023e2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a3d      	ldr	r2, [pc, #244]	; (80023ec <HAL_DMA_Init+0x10c>)
 80022f8:	4694      	mov	ip, r2
 80022fa:	4463      	add	r3, ip
 80022fc:	2114      	movs	r1, #20
 80022fe:	0018      	movs	r0, r3
 8002300:	f7fd ff02 	bl	8000108 <__udivsi3>
 8002304:	0003      	movs	r3, r0
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2225      	movs	r2, #37	; 0x25
 8002310:	2102      	movs	r1, #2
 8002312:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4934      	ldr	r1, [pc, #208]	; (80023f0 <HAL_DMA_Init+0x110>)
 8002320:	400a      	ands	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6819      	ldr	r1, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f000 f9c9 	bl	80026f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	01db      	lsls	r3, r3, #7
 800236a:	429a      	cmp	r2, r3
 800236c:	d102      	bne.n	8002374 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	213f      	movs	r1, #63	; 0x3f
 800237e:	400a      	ands	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800238a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d011      	beq.n	80023b8 <HAL_DMA_Init+0xd8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b04      	cmp	r3, #4
 800239a:	d80d      	bhi.n	80023b8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 f9d4 	bl	800274c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	e008      	b.n	80023ca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2225      	movs	r2, #37	; 0x25
 80023d4:	2101      	movs	r1, #1
 80023d6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	; 0x24
 80023dc:	2100      	movs	r1, #0
 80023de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	bffdfff8 	.word	0xbffdfff8
 80023f0:	ffff800f 	.word	0xffff800f

080023f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e050      	b.n	80024a8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2225      	movs	r2, #37	; 0x25
 800240a:	5c9b      	ldrb	r3, [r3, r2]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d008      	beq.n	8002424 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	2100      	movs	r1, #0
 800241e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e041      	b.n	80024a8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	210e      	movs	r1, #14
 8002430:	438a      	bics	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	491c      	ldr	r1, [pc, #112]	; (80024b0 <HAL_DMA_Abort+0xbc>)
 8002440:	400a      	ands	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2101      	movs	r1, #1
 8002450:	438a      	bics	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <HAL_DMA_Abort+0xc0>)
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	221c      	movs	r2, #28
 800245e:	4013      	ands	r3, r2
 8002460:	2201      	movs	r2, #1
 8002462:	409a      	lsls	r2, r3
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_DMA_Abort+0xc0>)
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002472:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_DMA_Abort+0xbc>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002494:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2225      	movs	r2, #37	; 0x25
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2224      	movs	r2, #36	; 0x24
 80024a2:	2100      	movs	r1, #0
 80024a4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	fffffeff 	.word	0xfffffeff
 80024b4:	40020000 	.word	0x40020000

080024b8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2225      	movs	r2, #37	; 0x25
 80024cc:	5c9b      	ldrb	r3, [r3, r2]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d007      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024da:	230f      	movs	r3, #15
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e049      	b.n	8002578 <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	210e      	movs	r1, #14
 80024f0:	438a      	bics	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	438a      	bics	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	491e      	ldr	r1, [pc, #120]	; (8002588 <HAL_DMA_Abort_IT+0xd0>)
 8002510:	400a      	ands	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_DMA_Abort_IT+0xd4>)
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	221c      	movs	r2, #28
 800251e:	4013      	ands	r3, r2
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_DMA_Abort_IT+0xd4>)
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002532:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00c      	beq.n	8002556 <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	4910      	ldr	r1, [pc, #64]	; (8002588 <HAL_DMA_Abort_IT+0xd0>)
 8002548:	400a      	ands	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002554:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2225      	movs	r2, #37	; 0x25
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2224      	movs	r2, #36	; 0x24
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	0010      	movs	r0, r2
 8002576:	4798      	blx	r3
    }
  }
  return status;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	fffffeff 	.word	0xfffffeff
 800258c:	40020000 	.word	0x40020000

08002590 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002598:	4b55      	ldr	r3, [pc, #340]	; (80026f0 <HAL_DMA_IRQHandler+0x160>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	221c      	movs	r2, #28
 80025ac:	4013      	ands	r3, r2
 80025ae:	2204      	movs	r2, #4
 80025b0:	409a      	lsls	r2, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	d027      	beq.n	800260a <HAL_DMA_IRQHandler+0x7a>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d023      	beq.n	800260a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2220      	movs	r2, #32
 80025ca:	4013      	ands	r3, r2
 80025cc:	d107      	bne.n	80025de <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2104      	movs	r1, #4
 80025da:	438a      	bics	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80025de:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_DMA_IRQHandler+0x160>)
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	221c      	movs	r2, #28
 80025e8:	4013      	ands	r3, r2
 80025ea:	2204      	movs	r2, #4
 80025ec:	409a      	lsls	r2, r3
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_DMA_IRQHandler+0x160>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d100      	bne.n	80025fe <HAL_DMA_IRQHandler+0x6e>
 80025fc:	e073      	b.n	80026e6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	0010      	movs	r0, r2
 8002606:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002608:	e06d      	b.n	80026e6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	221c      	movs	r2, #28
 8002610:	4013      	ands	r3, r2
 8002612:	2202      	movs	r2, #2
 8002614:	409a      	lsls	r2, r3
 8002616:	0013      	movs	r3, r2
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	d02e      	beq.n	800267c <HAL_DMA_IRQHandler+0xec>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d02a      	beq.n	800267c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2220      	movs	r2, #32
 800262e:	4013      	ands	r3, r2
 8002630:	d10b      	bne.n	800264a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	210a      	movs	r1, #10
 800263e:	438a      	bics	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2225      	movs	r2, #37	; 0x25
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_DMA_IRQHandler+0x160>)
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	221c      	movs	r2, #28
 8002654:	4013      	ands	r3, r2
 8002656:	2202      	movs	r2, #2
 8002658:	409a      	lsls	r2, r3
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_DMA_IRQHandler+0x160>)
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	; 0x24
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d03a      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	0010      	movs	r0, r2
 8002678:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800267a:	e034      	b.n	80026e6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	221c      	movs	r2, #28
 8002682:	4013      	ands	r3, r2
 8002684:	2208      	movs	r2, #8
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	d02b      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x158>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2208      	movs	r2, #8
 8002694:	4013      	ands	r3, r2
 8002696:	d027      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	210e      	movs	r1, #14
 80026a4:	438a      	bics	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_DMA_IRQHandler+0x160>)
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	221c      	movs	r2, #28
 80026b2:	4013      	ands	r3, r2
 80026b4:	2201      	movs	r2, #1
 80026b6:	409a      	lsls	r2, r3
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_DMA_IRQHandler+0x160>)
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2225      	movs	r2, #37	; 0x25
 80026c8:	2101      	movs	r1, #1
 80026ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	; 0x24
 80026d0:	2100      	movs	r1, #0
 80026d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	0010      	movs	r0, r2
 80026e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46c0      	nop			; (mov r8, r8)
}
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b004      	add	sp, #16
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40020000 	.word	0x40020000

080026f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	4a10      	ldr	r2, [pc, #64]	; (8002744 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002704:	4694      	mov	ip, r2
 8002706:	4463      	add	r3, ip
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	001a      	movs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	001a      	movs	r2, r3
 8002716:	23ff      	movs	r3, #255	; 0xff
 8002718:	4013      	ands	r3, r2
 800271a:	3b08      	subs	r3, #8
 800271c:	2114      	movs	r1, #20
 800271e:	0018      	movs	r0, r3
 8002720:	f7fd fcf2 	bl	8000108 <__udivsi3>
 8002724:	0003      	movs	r3, r0
 8002726:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800272c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	221f      	movs	r2, #31
 8002732:	4013      	ands	r3, r2
 8002734:	2201      	movs	r2, #1
 8002736:	409a      	lsls	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}
 8002744:	10008200 	.word	0x10008200
 8002748:	40020880 	.word	0x40020880

0800274c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a0a      	ldr	r2, [pc, #40]	; (800278c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	001a      	movs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002772:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3b01      	subs	r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	4013      	ands	r3, r2
 800277c:	2201      	movs	r2, #1
 800277e:	409a      	lsls	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}
 800278c:	1000823f 	.word	0x1000823f
 8002790:	40020940 	.word	0x40020940

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	e147      	b.n	8002a34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4091      	lsls	r1, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d100      	bne.n	80027bc <HAL_GPIO_Init+0x28>
 80027ba:	e138      	b.n	8002a2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d00b      	beq.n	80027dc <HAL_GPIO_Init+0x48>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d007      	beq.n	80027dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027d0:	2b11      	cmp	r3, #17
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b12      	cmp	r3, #18
 80027da:	d130      	bne.n	800283e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	409a      	lsls	r2, r3
 80027ea:	0013      	movs	r3, r2
 80027ec:	43da      	mvns	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	409a      	lsls	r2, r3
 80027fe:	0013      	movs	r3, r2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002812:	2201      	movs	r2, #1
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	43da      	mvns	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	2201      	movs	r2, #1
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	409a      	lsls	r2, r3
 800284c:	0013      	movs	r3, r2
 800284e:	43da      	mvns	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0xea>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b12      	cmp	r3, #18
 800287c:	d123      	bne.n	80028c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	58d3      	ldr	r3, [r2, r3]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2207      	movs	r2, #7
 8002890:	4013      	ands	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	43da      	mvns	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2107      	movs	r1, #7
 80028aa:	400b      	ands	r3, r1
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	409a      	lsls	r2, r3
 80028b0:	0013      	movs	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	6939      	ldr	r1, [r7, #16]
 80028c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	43da      	mvns	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2203      	movs	r2, #3
 80028e4:	401a      	ands	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	409a      	lsls	r2, r3
 80028ec:	0013      	movs	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	055b      	lsls	r3, r3, #21
 8002902:	4013      	ands	r3, r2
 8002904:	d100      	bne.n	8002908 <HAL_GPIO_Init+0x174>
 8002906:	e092      	b.n	8002a2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3318      	adds	r3, #24
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	589b      	ldr	r3, [r3, r2]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2203      	movs	r2, #3
 800291a:	4013      	ands	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	220f      	movs	r2, #15
 8002920:	409a      	lsls	r2, r3
 8002922:	0013      	movs	r3, r2
 8002924:	43da      	mvns	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	23a0      	movs	r3, #160	; 0xa0
 8002930:	05db      	lsls	r3, r3, #23
 8002932:	429a      	cmp	r2, r3
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x1ca>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <HAL_GPIO_Init+0x2bc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x1c6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a44      	ldr	r2, [pc, #272]	; (8002a54 <HAL_GPIO_Init+0x2c0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x1c2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a43      	ldr	r2, [pc, #268]	; (8002a58 <HAL_GPIO_Init+0x2c4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x1be>
 800294e:	2303      	movs	r3, #3
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x1cc>
 8002952:	2305      	movs	r3, #5
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x1cc>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x1cc>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x1cc>
 800295e:	2300      	movs	r3, #0
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	2103      	movs	r1, #3
 8002964:	400a      	ands	r2, r1
 8002966:	00d2      	lsls	r2, r2, #3
 8002968:	4093      	lsls	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002970:	4936      	ldr	r1, [pc, #216]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3318      	adds	r3, #24
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800297e:	4a33      	ldr	r2, [pc, #204]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	58d3      	ldr	r3, [r2, r3]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43da      	mvns	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	4013      	ands	r3, r2
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029a4:	4929      	ldr	r1, [pc, #164]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 80029ae:	2384      	movs	r3, #132	; 0x84
 80029b0:	58d3      	ldr	r3, [r2, r3]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43da      	mvns	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	029b      	lsls	r3, r3, #10
 80029c6:	4013      	ands	r3, r2
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029d2:	491e      	ldr	r1, [pc, #120]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 80029d4:	2284      	movs	r2, #132	; 0x84
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	035b      	lsls	r3, r3, #13
 80029f2:	4013      	ands	r3, r2
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	039b      	lsls	r3, r3, #14
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	40da      	lsrs	r2, r3
 8002a3c:	1e13      	subs	r3, r2, #0
 8002a3e:	d000      	beq.n	8002a42 <HAL_GPIO_Init+0x2ae>
 8002a40:	e6b0      	b.n	80027a4 <HAL_GPIO_Init+0x10>
  }
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b006      	add	sp, #24
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	40021800 	.word	0x40021800
 8002a50:	50000400 	.word	0x50000400
 8002a54:	50000800 	.word	0x50000800
 8002a58:	50000c00 	.word	0x50000c00

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	0008      	movs	r0, r1
 8002a66:	0011      	movs	r1, r2
 8002a68:	1cbb      	adds	r3, r7, #2
 8002a6a:	1c02      	adds	r2, r0, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	1c7b      	adds	r3, r7, #1
 8002a70:	1c0a      	adds	r2, r1, #0
 8002a72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a74:	1c7b      	adds	r3, r7, #1
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7c:	1cbb      	adds	r3, r7, #2
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a86:	1cbb      	adds	r3, r7, #2
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d11f      	bne.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	189b      	adds	r3, r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4912      	ldr	r1, [pc, #72]	; (8002b14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7fd fb1c 	bl	8000108 <__udivsi3>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ad6:	e008      	b.n	8002aea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e001      	b.n	8002aea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e009      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	401a      	ands	r2, r3
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d0ed      	beq.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b004      	add	sp, #16
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	fffff9ff 	.word	0xfffff9ff
 8002b10:	20000028 	.word	0x20000028
 8002b14:	000f4240 	.word	0x000f4240

08002b18 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	23e0      	movs	r3, #224	; 0xe0
 8002b22:	01db      	lsls	r3, r3, #7
 8002b24:	4013      	ands	r3, r2
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e304      	b.n	800314c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <HAL_RCC_OscConfig+0x1e>
 8002b4c:	e07c      	b.n	8002c48 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4bc3      	ldr	r3, [pc, #780]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2238      	movs	r2, #56	; 0x38
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b58:	4bc0      	ldr	r3, [pc, #768]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d102      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3e>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_OscConfig+0x44>
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4bb9      	ldr	r3, [pc, #740]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d062      	beq.n	8002c46 <HAL_RCC_OscConfig+0x116>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d15e      	bne.n	8002c46 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e2df      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	025b      	lsls	r3, r3, #9
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x78>
 8002b98:	4bb0      	ldr	r3, [pc, #704]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4baf      	ldr	r3, [pc, #700]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	0249      	lsls	r1, r1, #9
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e020      	b.n	8002bea <HAL_RCC_OscConfig+0xba>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	23a0      	movs	r3, #160	; 0xa0
 8002bae:	02db      	lsls	r3, r3, #11
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_RCC_OscConfig+0xa2>
 8002bb4:	4ba9      	ldr	r3, [pc, #676]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4ba8      	ldr	r3, [pc, #672]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	02c9      	lsls	r1, r1, #11
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	4ba6      	ldr	r3, [pc, #664]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4ba5      	ldr	r3, [pc, #660]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0249      	lsls	r1, r1, #9
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e00b      	b.n	8002bea <HAL_RCC_OscConfig+0xba>
 8002bd2:	4ba2      	ldr	r3, [pc, #648]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4ba1      	ldr	r3, [pc, #644]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002bd8:	49a1      	ldr	r1, [pc, #644]	; (8002e60 <HAL_RCC_OscConfig+0x330>)
 8002bda:	400a      	ands	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	4b9f      	ldr	r3, [pc, #636]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002be4:	499f      	ldr	r1, [pc, #636]	; (8002e64 <HAL_RCC_OscConfig+0x334>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fb39 	bl	8001268 <HAL_GetTick>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fb34 	bl	8001268 <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e29e      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0e:	4b93      	ldr	r3, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	029b      	lsls	r3, r3, #10
 8002c16:	4013      	ands	r3, r2
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xcc>
 8002c1a:	e015      	b.n	8002c48 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fb24 	bl	8001268 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c26:	f7fe fb1f 	bl	8001268 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	; 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e289      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c38:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	029b      	lsls	r3, r3, #10
 8002c40:	4013      	ands	r3, r2
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0xf6>
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d100      	bne.n	8002c54 <HAL_RCC_OscConfig+0x124>
 8002c52:	e099      	b.n	8002d88 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c54:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2238      	movs	r2, #56	; 0x38
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2203      	movs	r2, #3
 8002c64:	4013      	ands	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_OscConfig+0x144>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d002      	beq.n	8002c7a <HAL_RCC_OscConfig+0x14a>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d135      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7a:	4b78      	ldr	r3, [pc, #480]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x162>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e25c      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b72      	ldr	r3, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4a74      	ldr	r2, [pc, #464]	; (8002e68 <HAL_RCC_OscConfig+0x338>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d112      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cae:	4b6b      	ldr	r3, [pc, #428]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x33c>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002cc2:	4b66      	ldr	r3, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0adb      	lsrs	r3, r3, #11
 8002cc8:	2207      	movs	r2, #7
 8002cca:	4013      	ands	r3, r2
 8002ccc:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_RCC_OscConfig+0x340>)
 8002cce:	40da      	lsrs	r2, r3
 8002cd0:	4b68      	ldr	r3, [pc, #416]	; (8002e74 <HAL_RCC_OscConfig+0x344>)
 8002cd2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_OscConfig+0x348>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe fa69 	bl	80011b0 <HAL_InitTick>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d051      	beq.n	8002d86 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e232      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d030      	beq.n	8002d50 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x33c>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d02:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0049      	lsls	r1, r1, #1
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe faaa 	bl	8001268 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe faa5 	bl	8001268 <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e20f      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4013      	ands	r3, r2
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <HAL_RCC_OscConfig+0x338>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	021a      	lsls	r2, r3, #8
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	e01b      	b.n	8002d88 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d56:	4949      	ldr	r1, [pc, #292]	; (8002e7c <HAL_RCC_OscConfig+0x34c>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fa84 	bl	8001268 <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fe fa7f 	bl	8001268 <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1e9      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4013      	ands	r3, r2
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x236>
 8002d84:	e000      	b.n	8002d88 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d047      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2238      	movs	r2, #56	; 0x38
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b18      	cmp	r3, #24
 8002d9c:	d10a      	bne.n	8002db4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da2:	2202      	movs	r2, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	d03c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2f2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d138      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e1cb      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d019      	beq.n	8002df0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fa4e 	bl	8001268 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fa49 	bl	8001268 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1b3      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d0f1      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x2a2>
 8002dee:	e018      	b.n	8002e22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002df2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fa34 	bl	8001268 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe fa2f 	bl	8001268 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e199      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e18:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d1f1      	bne.n	8002e06 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2204      	movs	r2, #4
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2fe>
 8002e2c:	e0c6      	b.n	8002fbc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	231f      	movs	r3, #31
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2238      	movs	r2, #56	; 0x38
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d11e      	bne.n	8002e80 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x32c>)
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2202      	movs	r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <HAL_RCC_OscConfig+0x31e>
 8002e4c:	e0b6      	b.n	8002fbc <HAL_RCC_OscConfig+0x48c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d000      	beq.n	8002e58 <HAL_RCC_OscConfig+0x328>
 8002e56:	e0b1      	b.n	8002fbc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e177      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	fffeffff 	.word	0xfffeffff
 8002e64:	fffbffff 	.word	0xfffbffff
 8002e68:	ffff80ff 	.word	0xffff80ff
 8002e6c:	ffffc7ff 	.word	0xffffc7ff
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	20000028 	.word	0x20000028
 8002e78:	2000002c 	.word	0x2000002c
 8002e7c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e80:	4bb4      	ldr	r3, [pc, #720]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	055b      	lsls	r3, r3, #21
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_OscConfig+0x360>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x362>
 8002e90:	2300      	movs	r3, #0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d011      	beq.n	8002eba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	4baf      	ldr	r3, [pc, #700]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e9a:	4bae      	ldr	r3, [pc, #696]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0549      	lsls	r1, r1, #21
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ea4:	4bab      	ldr	r3, [pc, #684]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	055b      	lsls	r3, r3, #21
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eba:	4ba7      	ldr	r3, [pc, #668]	; (8003158 <HAL_RCC_OscConfig+0x628>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec6:	4ba4      	ldr	r3, [pc, #656]	; (8003158 <HAL_RCC_OscConfig+0x628>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4ba3      	ldr	r3, [pc, #652]	; (8003158 <HAL_RCC_OscConfig+0x628>)
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	0049      	lsls	r1, r1, #1
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe f9c8 	bl	8001268 <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fe f9c3 	bl	8001268 <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e12d      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef0:	4b99      	ldr	r3, [pc, #612]	; (8003158 <HAL_RCC_OscConfig+0x628>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3e2>
 8002f04:	4b93      	ldr	r3, [pc, #588]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f08:	4b92      	ldr	r3, [pc, #584]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x41c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x404>
 8002f1a:	4b8e      	ldr	r3, [pc, #568]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f1e:	4b8d      	ldr	r3, [pc, #564]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f20:	2104      	movs	r1, #4
 8002f22:	430a      	orrs	r2, r1
 8002f24:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f26:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f2a:	4b8a      	ldr	r3, [pc, #552]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x41c>
 8002f34:	4b87      	ldr	r3, [pc, #540]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f38:	4b86      	ldr	r3, [pc, #536]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f40:	4b84      	ldr	r3, [pc, #528]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f44:	4b83      	ldr	r3, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f46:	2104      	movs	r1, #4
 8002f48:	438a      	bics	r2, r1
 8002f4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d014      	beq.n	8002f7e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe f988 	bl	8001268 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5c:	e009      	b.n	8002f72 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe f983 	bl	8001268 <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	4a7c      	ldr	r2, [pc, #496]	; (800315c <HAL_RCC_OscConfig+0x62c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0ec      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f72:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x42e>
 8002f7c:	e013      	b.n	8002fa6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f973 	bl	8001268 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f86:	e009      	b.n	8002f9c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe f96e 	bl	8001268 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	4a72      	ldr	r2, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x62c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0d7      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002fa6:	231f      	movs	r3, #31
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb4:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002fb6:	496a      	ldr	r1, [pc, #424]	; (8003160 <HAL_RCC_OscConfig+0x630>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d100      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x496>
 8002fc4:	e0c1      	b.n	800314a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2238      	movs	r2, #56	; 0x38
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d100      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4a4>
 8002fd2:	e081      	b.n	80030d8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d156      	bne.n	800308a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b5d      	ldr	r3, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8002fe2:	4960      	ldr	r1, [pc, #384]	; (8003164 <HAL_RCC_OscConfig+0x634>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe f93e 	bl	8001268 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe f939 	bl	8001268 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0a3      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003004:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	049b      	lsls	r3, r3, #18
 800300c:	4013      	ands	r3, r2
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003010:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_RCC_OscConfig+0x638>)
 8003016:	4013      	ands	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1a      	ldr	r2, [r3, #32]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	431a      	orrs	r2, r3
 800303e:	4b45      	ldr	r3, [pc, #276]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003040:	430a      	orrs	r2, r1
 8003042:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	0449      	lsls	r1, r1, #17
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003052:	4b40      	ldr	r3, [pc, #256]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	0549      	lsls	r1, r1, #21
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe f902 	bl	8001268 <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe f8fd 	bl	8001268 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e067      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307c:	4b35      	ldr	r3, [pc, #212]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	049b      	lsls	r3, r3, #18
 8003084:	4013      	ands	r3, r2
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x53a>
 8003088:	e05f      	b.n	800314a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003090:	4934      	ldr	r1, [pc, #208]	; (8003164 <HAL_RCC_OscConfig+0x634>)
 8003092:	400a      	ands	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 800309c:	2103      	movs	r1, #3
 800309e:	438a      	bics	r2, r1
 80030a0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80030a2:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 80030a8:	4930      	ldr	r1, [pc, #192]	; (800316c <HAL_RCC_OscConfig+0x63c>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe f8db 	bl	8001268 <HAL_GetTick>
 80030b2:	0003      	movs	r3, r0
 80030b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe f8d6 	bl	8001268 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e040      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	049b      	lsls	r3, r3, #18
 80030d2:	4013      	ands	r3, r2
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x588>
 80030d6:	e038      	b.n	800314a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e033      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x624>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2203      	movs	r2, #3
 80030ee:	401a      	ands	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d126      	bne.n	8003146 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2270      	movs	r2, #112	; 0x70
 80030fc:	401a      	ands	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11f      	bne.n	8003146 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	23fe      	movs	r3, #254	; 0xfe
 800310a:	01db      	lsls	r3, r3, #7
 800310c:	401a      	ands	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d116      	bne.n	8003146 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	23f8      	movs	r3, #248	; 0xf8
 800311c:	039b      	lsls	r3, r3, #14
 800311e:	401a      	ands	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d10e      	bne.n	8003146 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	23e0      	movs	r3, #224	; 0xe0
 800312c:	051b      	lsls	r3, r3, #20
 800312e:	401a      	ands	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	0f5b      	lsrs	r3, r3, #29
 800313c:	075a      	lsls	r2, r3, #29
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b008      	add	sp, #32
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	00001388 	.word	0x00001388
 8003160:	efffffff 	.word	0xefffffff
 8003164:	feffffff 	.word	0xfeffffff
 8003168:	11c1808c 	.word	0x11c1808c
 800316c:	eefeffff 	.word	0xeefeffff

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0e9      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2207      	movs	r2, #7
 800318a:	4013      	ands	r3, r2
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d91e      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b73      	ldr	r3, [pc, #460]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2207      	movs	r2, #7
 8003198:	4393      	bics	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	4b70      	ldr	r3, [pc, #448]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a4:	f7fe f860 	bl	8001268 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031ac:	e009      	b.n	80031c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ae:	f7fe f85b 	bl	8001268 <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0ca      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c2:	4b67      	ldr	r3, [pc, #412]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1ee      	bne.n	80031ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2204      	movs	r2, #4
 80031e0:	4013      	ands	r3, r2
 80031e2:	d006      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031e4:	4b60      	ldr	r3, [pc, #384]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031ea:	21e0      	movs	r1, #224	; 0xe0
 80031ec:	01c9      	lsls	r1, r1, #7
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_RCC_ClockConfig+0x1fc>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	4013      	ands	r3, r2
 800320e:	d057      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	029b      	lsls	r3, r3, #10
 8003220:	4013      	ands	r3, r2
 8003222:	d12b      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e097      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003230:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	049b      	lsls	r3, r3, #18
 8003238:	4013      	ands	r3, r2
 800323a:	d11f      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e08b      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4013      	ands	r3, r2
 8003252:	d113      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e07f      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d106      	bne.n	800326e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003264:	2202      	movs	r2, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d108      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e074      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e06d      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2207      	movs	r2, #7
 8003282:	4393      	bics	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fd ffea 	bl	8001268 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003298:	e009      	b.n	80032ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329a:	f7fd ffe5 	bl	8001268 <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e054      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2238      	movs	r2, #56	; 0x38
 80032b4:	401a      	ands	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	429a      	cmp	r2, r3
 80032be:	d1ec      	bne.n	800329a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2207      	movs	r2, #7
 80032c6:	4013      	ands	r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d21e      	bcs.n	800330c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2207      	movs	r2, #7
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032e0:	f7fd ffc2 	bl	8001268 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032e8:	e009      	b.n	80032fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ea:	f7fd ffbd 	bl	8001268 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e02c      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2207      	movs	r2, #7
 8003304:	4013      	ands	r3, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d1ee      	bne.n	80032ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2204      	movs	r2, #4
 8003312:	4013      	ands	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_RCC_ClockConfig+0x200>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800332a:	f000 f829 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800332e:	0001      	movs	r1, r0
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	220f      	movs	r2, #15
 8003338:	401a      	ands	r2, r3
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_ClockConfig+0x204>)
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	58d3      	ldr	r3, [r2, r3]
 8003340:	221f      	movs	r2, #31
 8003342:	4013      	ands	r3, r2
 8003344:	000a      	movs	r2, r1
 8003346:	40da      	lsrs	r2, r3
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_ClockConfig+0x208>)
 800334a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_ClockConfig+0x20c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fd ff2d 	bl	80011b0 <HAL_InitTick>
 8003356:	0003      	movs	r3, r0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40022000 	.word	0x40022000
 8003364:	00001388 	.word	0x00001388
 8003368:	40021000 	.word	0x40021000
 800336c:	fffff0ff 	.word	0xfffff0ff
 8003370:	ffff8fff 	.word	0xffff8fff
 8003374:	080058a4 	.word	0x080058a4
 8003378:	20000028 	.word	0x20000028
 800337c:	2000002c 	.word	0x2000002c

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003386:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2238      	movs	r2, #56	; 0x38
 800338c:	4013      	ands	r3, r2
 800338e:	d10f      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0adb      	lsrs	r3, r3, #11
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	0013      	movs	r3, r2
 80033a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	4835      	ldr	r0, [pc, #212]	; (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 80033a6:	f7fc feaf 	bl	8000108 <__udivsi3>
 80033aa:	0003      	movs	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e05d      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2238      	movs	r2, #56	; 0x38
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_RCC_GetSysClockFreq+0x100>)
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e054      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2238      	movs	r2, #56	; 0x38
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d138      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2203      	movs	r2, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	2207      	movs	r2, #7
 80033e0:	4013      	ands	r3, r2
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d10d      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4824      	ldr	r0, [pc, #144]	; (8003480 <HAL_RCC_GetSysClockFreq+0x100>)
 80033f0:	f7fc fe8a 	bl	8000108 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	0019      	movs	r1, r3
 80033f8:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	227f      	movs	r2, #127	; 0x7f
 8003400:	4013      	ands	r3, r2
 8003402:	434b      	muls	r3, r1
 8003404:	617b      	str	r3, [r7, #20]
        break;
 8003406:	e00d      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	481c      	ldr	r0, [pc, #112]	; (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 800340c:	f7fc fe7c 	bl	8000108 <__udivsi3>
 8003410:	0003      	movs	r3, r0
 8003412:	0019      	movs	r1, r3
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	227f      	movs	r2, #127	; 0x7f
 800341c:	4013      	ands	r3, r2
 800341e:	434b      	muls	r3, r1
 8003420:	617b      	str	r3, [r7, #20]
        break;
 8003422:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0f5b      	lsrs	r3, r3, #29
 800342a:	2207      	movs	r2, #7
 800342c:	4013      	ands	r3, r2
 800342e:	3301      	adds	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f7fc fe67 	bl	8000108 <__udivsi3>
 800343a:	0003      	movs	r3, r0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e015      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2238      	movs	r2, #56	; 0x38
 8003446:	4013      	ands	r3, r2
 8003448:	2b20      	cmp	r3, #32
 800344a:	d103      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e00b      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2238      	movs	r2, #56	; 0x38
 800345a:	4013      	ands	r3, r2
 800345c:	2b18      	cmp	r3, #24
 800345e:	d103      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003460:	23fa      	movs	r3, #250	; 0xfa
 8003462:	01db      	lsls	r3, r3, #7
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e001      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800346c:	693b      	ldr	r3, [r7, #16]
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b006      	add	sp, #24
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000
 800347c:	00f42400 	.word	0x00f42400
 8003480:	007a1200 	.word	0x007a1200

08003484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003488:	4b02      	ldr	r3, [pc, #8]	; (8003494 <HAL_RCC_GetHCLKFreq+0x10>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	20000028 	.word	0x20000028

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800349c:	f7ff fff2 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034a0:	0004      	movs	r4, r0
 80034a2:	f7ff fb39 	bl	8002b18 <LL_RCC_GetAPB1Prescaler>
 80034a6:	0003      	movs	r3, r0
 80034a8:	0b1a      	lsrs	r2, r3, #12
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	58d3      	ldr	r3, [r2, r3]
 80034b0:	221f      	movs	r2, #31
 80034b2:	4013      	ands	r3, r2
 80034b4:	40dc      	lsrs	r4, r3
 80034b6:	0023      	movs	r3, r4
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	080058e4 	.word	0x080058e4

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80034cc:	2313      	movs	r3, #19
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d4:	2312      	movs	r3, #18
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	4013      	ands	r3, r2
 80034e6:	d100      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80034e8:	e0af      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ea:	2311      	movs	r3, #17
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b48      	ldr	r3, [pc, #288]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80034f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	055b      	lsls	r3, r3, #21
 80034fa:	4013      	ands	r3, r2
 80034fc:	d111      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b45      	ldr	r3, [pc, #276]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003502:	4b44      	ldr	r3, [pc, #272]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	0549      	lsls	r1, r1, #21
 8003508:	430a      	orrs	r2, r1
 800350a:	63da      	str	r2, [r3, #60]	; 0x3c
 800350c:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800350e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	055b      	lsls	r3, r3, #21
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351a:	2311      	movs	r3, #17
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b3c      	ldr	r3, [pc, #240]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	0049      	lsls	r1, r1, #1
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003530:	f7fd fe9a 	bl	8001268 <HAL_GetTick>
 8003534:	0003      	movs	r3, r0
 8003536:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003538:	e00b      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fd fe95 	bl	8001268 <HAL_GetTick>
 800353e:	0002      	movs	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d904      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003548:	2313      	movs	r3, #19
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2203      	movs	r2, #3
 800354e:	701a      	strb	r2, [r3, #0]
        break;
 8003550:	e005      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d0ed      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800355e:	2313      	movs	r3, #19
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d15f      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800356a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800356c:	23c0      	movs	r3, #192	; 0xc0
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4013      	ands	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d019      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xea>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	429a      	cmp	r2, r3
 8003582:	d014      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	4a24      	ldr	r2, [pc, #144]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800358a:	4013      	ands	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003590:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0249      	lsls	r1, r1, #9
 8003598:	430a      	orrs	r2, r1
 800359a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800359e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035a2:	491f      	ldr	r1, [pc, #124]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2201      	movs	r2, #1
 80035b2:	4013      	ands	r3, r2
 80035b4:	d016      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fe57 	bl	8001268 <HAL_GetTick>
 80035ba:	0003      	movs	r3, r0
 80035bc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035be:	e00c      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fd fe52 	bl	8001268 <HAL_GetTick>
 80035c4:	0002      	movs	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d904      	bls.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80035d0:	2313      	movs	r3, #19
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2203      	movs	r2, #3
 80035d6:	701a      	strb	r2, [r3, #0]
            break;
 80035d8:	e004      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	2202      	movs	r2, #2
 80035e0:	4013      	ands	r3, r2
 80035e2:	d0ed      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80035e4:	2313      	movs	r3, #19
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035fe:	430a      	orrs	r2, r1
 8003600:	65da      	str	r2, [r3, #92]	; 0x5c
 8003602:	e017      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003604:	2312      	movs	r3, #18
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2213      	movs	r2, #19
 800360a:	18ba      	adds	r2, r7, r2
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e010      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	fffffcff 	.word	0xfffffcff
 8003620:	fffeffff 	.word	0xfffeffff
 8003624:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	2312      	movs	r3, #18
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2213      	movs	r2, #19
 800362e:	18ba      	adds	r2, r7, r2
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003634:	2311      	movs	r3, #17
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b84      	ldr	r3, [pc, #528]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003642:	4b83      	ldr	r3, [pc, #524]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003644:	4983      	ldr	r1, [pc, #524]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003646:	400a      	ands	r2, r1
 8003648:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003654:	4b7e      	ldr	r3, [pc, #504]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	2203      	movs	r2, #3
 800365a:	4393      	bics	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4b7b      	ldr	r3, [pc, #492]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003664:	430a      	orrs	r2, r1
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2202      	movs	r2, #2
 800366e:	4013      	ands	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003672:	4b77      	ldr	r3, [pc, #476]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	220c      	movs	r2, #12
 8003678:	4393      	bics	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b73      	ldr	r3, [pc, #460]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003682:	430a      	orrs	r2, r1
 8003684:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2210      	movs	r2, #16
 800368c:	4013      	ands	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003690:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	4a70      	ldr	r2, [pc, #448]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036a0:	430a      	orrs	r2, r1
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4013      	ands	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b0:	4b67      	ldr	r3, [pc, #412]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	4a69      	ldr	r2, [pc, #420]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	4b64      	ldr	r3, [pc, #400]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036c0:	430a      	orrs	r2, r1
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4013      	ands	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036d0:	4b5f      	ldr	r3, [pc, #380]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	4a62      	ldr	r2, [pc, #392]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	4b5c      	ldr	r3, [pc, #368]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2220      	movs	r2, #32
 80036ea:	4013      	ands	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ee:	4b58      	ldr	r3, [pc, #352]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	4a5c      	ldr	r2, [pc, #368]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	4b54      	ldr	r3, [pc, #336]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	02db      	lsls	r3, r3, #11
 800370a:	4013      	ands	r3, r2
 800370c:	d016      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800370e:	4b50      	ldr	r3, [pc, #320]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	4a55      	ldr	r2, [pc, #340]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003714:	4013      	ands	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800371e:	430a      	orrs	r2, r1
 8003720:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	23c0      	movs	r3, #192	; 0xc0
 8003728:	051b      	lsls	r3, r3, #20
 800372a:	429a      	cmp	r2, r3
 800372c:	d106      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800372e:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	0449      	lsls	r1, r1, #17
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	01db      	lsls	r3, r3, #7
 8003744:	4013      	ands	r3, r2
 8003746:	d015      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003748:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	0899      	lsrs	r1, r3, #2
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003754:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003756:	430a      	orrs	r2, r1
 8003758:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	05db      	lsls	r3, r3, #23
 8003762:	429a      	cmp	r2, r3
 8003764:	d106      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003766:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	0249      	lsls	r1, r1, #9
 8003770:	430a      	orrs	r2, r1
 8003772:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	031b      	lsls	r3, r3, #12
 800377c:	4013      	ands	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003780:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	4393      	bics	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378e:	4b30      	ldr	r3, [pc, #192]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003790:	430a      	orrs	r2, r1
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	039b      	lsls	r3, r3, #14
 800379c:	4013      	ands	r3, r2
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	4a31      	ldr	r2, [pc, #196]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	4b28      	ldr	r3, [pc, #160]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	03db      	lsls	r3, r3, #15
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x30a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037c0:	4b23      	ldr	r3, [pc, #140]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	0449      	lsls	r1, r1, #17
 80037ca:	430a      	orrs	r2, r1
 80037cc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	03db      	lsls	r3, r3, #15
 80037d6:	4013      	ands	r3, r2
 80037d8:	d016      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	4a24      	ldr	r2, [pc, #144]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80037ea:	430a      	orrs	r2, r1
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	045b      	lsls	r3, r3, #17
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d106      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	0449      	lsls	r1, r1, #17
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4013      	ands	r3, r2
 8003812:	d016      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800381a:	4013      	ands	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003824:	430a      	orrs	r2, r1
 8003826:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	01db      	lsls	r3, r3, #7
 8003830:	429a      	cmp	r2, r3
 8003832:	d106      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	0249      	lsls	r1, r1, #9
 800383e:	430a      	orrs	r2, r1
 8003840:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003842:	2312      	movs	r3, #18
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	781b      	ldrb	r3, [r3, #0]
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b006      	add	sp, #24
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	efffffff 	.word	0xefffffff
 8003858:	fffff3ff 	.word	0xfffff3ff
 800385c:	fff3ffff 	.word	0xfff3ffff
 8003860:	ffcfffff 	.word	0xffcfffff
 8003864:	ffffcfff 	.word	0xffffcfff
 8003868:	f3ffffff 	.word	0xf3ffffff
 800386c:	ffbfffff 	.word	0xffbfffff
 8003870:	feffffff 	.word	0xfeffffff
 8003874:	ffff3fff 	.word	0xffff3fff

08003878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e046      	b.n	8003918 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2284      	movs	r2, #132	; 0x84
 800388e:	589b      	ldr	r3, [r3, r2]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	2100      	movs	r1, #0
 800389a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0018      	movs	r0, r3
 80038a0:	f7fd fa0c 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2284      	movs	r2, #132	; 0x84
 80038a8:	2124      	movs	r1, #36	; 0x24
 80038aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2101      	movs	r1, #1
 80038b8:	438a      	bics	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 fd4a 	bl	8004358 <UART_SetConfig>
 80038c4:	0003      	movs	r3, r0
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e024      	b.n	8003918 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	0018      	movs	r0, r3
 80038da:	f001 f81d 	bl	8004918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	490d      	ldr	r1, [pc, #52]	; (8003920 <HAL_UART_Init+0xa8>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	212a      	movs	r1, #42	; 0x2a
 80038fa:	438a      	bics	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2101      	movs	r1, #1
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f001 f8b5 	bl	8004a80 <UART_CheckIdleState>
 8003916:	0003      	movs	r3, r0
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}
 8003920:	ffffb7ff 	.word	0xffffb7ff

08003924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	1dbb      	adds	r3, r7, #6
 8003932:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2284      	movs	r2, #132	; 0x84
 8003938:	589b      	ldr	r3, [r3, r2]
 800393a:	2b20      	cmp	r3, #32
 800393c:	d000      	beq.n	8003940 <HAL_UART_Transmit+0x1c>
 800393e:	e097      	b.n	8003a70 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_UART_Transmit+0x2a>
 8003946:	1dbb      	adds	r3, r7, #6
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e08f      	b.n	8003a72 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	015b      	lsls	r3, r3, #5
 800395a:	429a      	cmp	r2, r3
 800395c:	d109      	bne.n	8003972 <HAL_UART_Transmit+0x4e>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2201      	movs	r2, #1
 800396a:	4013      	ands	r3, r2
 800396c:	d001      	beq.n	8003972 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07f      	b.n	8003a72 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_UART_Transmit+0x5c>
 800397c:	2302      	movs	r3, #2
 800397e:	e078      	b.n	8003a72 <HAL_UART_Transmit+0x14e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	228c      	movs	r2, #140	; 0x8c
 800398c:	2100      	movs	r1, #0
 800398e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2284      	movs	r2, #132	; 0x84
 8003994:	2121      	movs	r1, #33	; 0x21
 8003996:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003998:	f7fd fc66 	bl	8001268 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1dba      	adds	r2, r7, #6
 80039a4:	2154      	movs	r1, #84	; 0x54
 80039a6:	8812      	ldrh	r2, [r2, #0]
 80039a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1dba      	adds	r2, r7, #6
 80039ae:	2156      	movs	r1, #86	; 0x56
 80039b0:	8812      	ldrh	r2, [r2, #0]
 80039b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	015b      	lsls	r3, r3, #5
 80039bc:	429a      	cmp	r2, r3
 80039be:	d108      	bne.n	80039d2 <HAL_UART_Transmit+0xae>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e003      	b.n	80039da <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	2100      	movs	r1, #0
 80039e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80039e2:	e02c      	b.n	8003a3e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	0013      	movs	r3, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	f001 f891 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e039      	b.n	8003a72 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	001a      	movs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	05d2      	lsls	r2, r2, #23
 8003a10:	0dd2      	lsrs	r2, r2, #23
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	3302      	adds	r3, #2
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e007      	b.n	8003a2c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2256      	movs	r2, #86	; 0x56
 8003a30:	5a9b      	ldrh	r3, [r3, r2]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b299      	uxth	r1, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2256      	movs	r2, #86	; 0x56
 8003a3c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2256      	movs	r2, #86	; 0x56
 8003a42:	5a9b      	ldrh	r3, [r3, r2]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1cc      	bne.n	80039e4 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	0013      	movs	r3, r2
 8003a54:	2200      	movs	r2, #0
 8003a56:	2140      	movs	r1, #64	; 0x40
 8003a58:	f001 f85e 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e006      	b.n	8003a72 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2284      	movs	r2, #132	; 0x84
 8003a68:	2120      	movs	r1, #32
 8003a6a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b008      	add	sp, #32
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2288      	movs	r2, #136	; 0x88
 8003a90:	589b      	ldr	r3, [r3, r2]
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d000      	beq.n	8003a98 <HAL_UART_Receive+0x1c>
 8003a96:	e0db      	b.n	8003c50 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_UART_Receive+0x2a>
 8003a9e:	1dbb      	adds	r3, r7, #6
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0d3      	b.n	8003c52 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	015b      	lsls	r3, r3, #5
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d109      	bne.n	8003aca <HAL_UART_Receive+0x4e>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d001      	beq.n	8003aca <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0c3      	b.n	8003c52 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Receive+0x5c>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e0bc      	b.n	8003c52 <HAL_UART_Receive+0x1d6>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	2101      	movs	r1, #1
 8003ade:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	228c      	movs	r2, #140	; 0x8c
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2288      	movs	r2, #136	; 0x88
 8003aec:	2122      	movs	r1, #34	; 0x22
 8003aee:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af6:	f7fd fbb7 	bl	8001268 <HAL_GetTick>
 8003afa:	0003      	movs	r3, r0
 8003afc:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1dba      	adds	r2, r7, #6
 8003b02:	215c      	movs	r1, #92	; 0x5c
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1dba      	adds	r2, r7, #6
 8003b0c:	215e      	movs	r1, #94	; 0x5e
 8003b0e:	8812      	ldrh	r2, [r2, #0]
 8003b10:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	015b      	lsls	r3, r3, #5
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d10d      	bne.n	8003b3a <HAL_UART_Receive+0xbe>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <HAL_UART_Receive+0xb4>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2260      	movs	r2, #96	; 0x60
 8003b2a:	494c      	ldr	r1, [pc, #304]	; (8003c5c <HAL_UART_Receive+0x1e0>)
 8003b2c:	5299      	strh	r1, [r3, r2]
 8003b2e:	e02e      	b.n	8003b8e <HAL_UART_Receive+0x112>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2260      	movs	r2, #96	; 0x60
 8003b34:	21ff      	movs	r1, #255	; 0xff
 8003b36:	5299      	strh	r1, [r3, r2]
 8003b38:	e029      	b.n	8003b8e <HAL_UART_Receive+0x112>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_UART_Receive+0xe2>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d104      	bne.n	8003b54 <HAL_UART_Receive+0xd8>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2260      	movs	r2, #96	; 0x60
 8003b4e:	21ff      	movs	r1, #255	; 0xff
 8003b50:	5299      	strh	r1, [r3, r2]
 8003b52:	e01c      	b.n	8003b8e <HAL_UART_Receive+0x112>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2260      	movs	r2, #96	; 0x60
 8003b58:	217f      	movs	r1, #127	; 0x7f
 8003b5a:	5299      	strh	r1, [r3, r2]
 8003b5c:	e017      	b.n	8003b8e <HAL_UART_Receive+0x112>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	055b      	lsls	r3, r3, #21
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d10d      	bne.n	8003b86 <HAL_UART_Receive+0x10a>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <HAL_UART_Receive+0x100>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2260      	movs	r2, #96	; 0x60
 8003b76:	217f      	movs	r1, #127	; 0x7f
 8003b78:	5299      	strh	r1, [r3, r2]
 8003b7a:	e008      	b.n	8003b8e <HAL_UART_Receive+0x112>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2260      	movs	r2, #96	; 0x60
 8003b80:	213f      	movs	r1, #63	; 0x3f
 8003b82:	5299      	strh	r1, [r3, r2]
 8003b84:	e003      	b.n	8003b8e <HAL_UART_Receive+0x112>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2260      	movs	r2, #96	; 0x60
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003b8e:	2312      	movs	r3, #18
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	2160      	movs	r1, #96	; 0x60
 8003b96:	5a52      	ldrh	r2, [r2, r1]
 8003b98:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	015b      	lsls	r3, r3, #5
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d108      	bne.n	8003bb8 <HAL_UART_Receive+0x13c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e003      	b.n	8003bc0 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003bc8:	e036      	b.n	8003c38 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	f000 ff9e 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e036      	b.n	8003c52 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2212      	movs	r2, #18
 8003bf4:	18ba      	adds	r2, r7, r2
 8003bf6:	8812      	ldrh	r2, [r2, #0]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	3302      	adds	r3, #2
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e00e      	b.n	8003c26 <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2212      	movs	r2, #18
 8003c12:	18ba      	adds	r2, r7, r2
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	225e      	movs	r2, #94	; 0x5e
 8003c2a:	5a9b      	ldrh	r3, [r3, r2]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b299      	uxth	r1, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	225e      	movs	r2, #94	; 0x5e
 8003c36:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	225e      	movs	r2, #94	; 0x5e
 8003c3c:	5a9b      	ldrh	r3, [r3, r2]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1c2      	bne.n	8003bca <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2288      	movs	r2, #136	; 0x88
 8003c48:	2120      	movs	r1, #32
 8003c4a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b008      	add	sp, #32
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	000001ff 	.word	0x000001ff

08003c60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	1dbb      	adds	r3, r7, #6
 8003c6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2288      	movs	r2, #136	; 0x88
 8003c72:	589b      	ldr	r3, [r3, r2]
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d12f      	bne.n	8003cd8 <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_Receive_IT+0x26>
 8003c7e:	1dbb      	adds	r3, r7, #6
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e027      	b.n	8003cda <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	015b      	lsls	r3, r3, #5
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d109      	bne.n	8003caa <HAL_UART_Receive_IT+0x4a>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d001      	beq.n	8003caa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e017      	b.n	8003cda <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Receive_IT+0x58>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e010      	b.n	8003cda <HAL_UART_Receive_IT+0x7a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003cc6:	1dbb      	adds	r3, r7, #6
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 ffa4 	bl	8004c1c <UART_Start_Receive_IT>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	e000      	b.n	8003cda <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 8003cd8:	2302      	movs	r3, #2
  }
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b004      	add	sp, #16
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8003cec:	2301      	movs	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Disable interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4963      	ldr	r1, [pc, #396]	; (8003e88 <HAL_UART_Abort_IT+0x1a4>)
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
                                   USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4960      	ldr	r1, [pc, #384]	; (8003e8c <HAL_UART_Abort_IT+0x1a8>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2110      	movs	r1, #16
 8003d24:	438a      	bics	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00f      	beq.n	8003d50 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b80      	cmp	r3, #128	; 0x80
 8003d3c:	d104      	bne.n	8003d48 <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d42:	4a53      	ldr	r2, [pc, #332]	; (8003e90 <HAL_UART_Abort_IT+0x1ac>)
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
 8003d46:	e003      	b.n	8003d50 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00f      	beq.n	8003d78 <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2240      	movs	r2, #64	; 0x40
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d104      	bne.n	8003d70 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6a:	4a4a      	ldr	r2, [pc, #296]	; (8003e94 <HAL_UART_Abort_IT+0x1b0>)
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d6e:	e003      	b.n	8003d78 <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d74:	2200      	movs	r2, #0
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d119      	bne.n	8003dba <HAL_UART_Abort_IT+0xd6>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	438a      	bics	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <HAL_UART_Abort_IT+0xd6>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fe fb88 	bl	80024b8 <HAL_DMA_Abort_IT>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_UART_Abort_IT+0xd2>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db0:	2200      	movs	r2, #0
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
 8003db4:	e001      	b.n	8003dba <HAL_UART_Abort_IT+0xd6>
      }
      else
      {
        abortcplt = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d11b      	bne.n	8003e00 <HAL_UART_Abort_IT+0x11c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2140      	movs	r1, #64	; 0x40
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00f      	beq.n	8003e00 <HAL_UART_Abort_IT+0x11c>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fe fb67 	bl	80024b8 <HAL_DMA_Abort_IT>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d006      	beq.n	8003dfc <HAL_UART_Abort_IT+0x118>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df2:	2200      	movs	r2, #0
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8003df6:	2301      	movs	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e001      	b.n	8003e00 <HAL_UART_Abort_IT+0x11c>
      }
      else
      {
        abortcplt = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d13a      	bne.n	8003e7c <HAL_UART_Abort_IT+0x198>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2256      	movs	r2, #86	; 0x56
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	225e      	movs	r2, #94	; 0x5e
 8003e12:	2100      	movs	r1, #0
 8003e14:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	228c      	movs	r2, #140	; 0x8c
 8003e26:	2100      	movs	r1, #0
 8003e28:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	220f      	movs	r2, #15
 8003e30:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	059b      	lsls	r3, r3, #22
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d107      	bne.n	8003e4e <HAL_UART_Abort_IT+0x16a>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2110      	movs	r1, #16
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2108      	movs	r1, #8
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2284      	movs	r2, #132	; 0x84
 8003e62:	2120      	movs	r1, #32
 8003e64:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2288      	movs	r2, #136	; 0x88
 8003e6a:	2120      	movs	r1, #32
 8003e6c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 fa5a 	bl	8004330 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	fffffe1f 	.word	0xfffffe1f
 8003e8c:	ef7ffffe 	.word	0xef7ffffe
 8003e90:	08004e3f 	.word	0x08004e3f
 8003e94:	08004ecb 	.word	0x08004ecb

08003e98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4abc      	ldr	r2, [pc, #752]	; (80041ac <HAL_UART_IRQHandler+0x314>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d117      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d104      	bne.n	8003ee0 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	055b      	lsls	r3, r3, #21
 8003edc:	4013      	ands	r3, r2
 8003ede:	d00a      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d100      	bne.n	8003eea <HAL_UART_IRQHandler+0x52>
 8003ee8:	e202      	b.n	80042f0 <HAL_UART_IRQHandler+0x458>
      {
        huart->RxISR(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	4798      	blx	r3
      }
      return;
 8003ef4:	e1fc      	b.n	80042f0 <HAL_UART_IRQHandler+0x458>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d100      	bne.n	8003efe <HAL_UART_IRQHandler+0x66>
 8003efc:	e0de      	b.n	80040bc <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4aab      	ldr	r2, [pc, #684]	; (80041b0 <HAL_UART_IRQHandler+0x318>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	d104      	bne.n	8003f10 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4aaa      	ldr	r2, [pc, #680]	; (80041b4 <HAL_UART_IRQHandler+0x31c>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d100      	bne.n	8003f10 <HAL_UART_IRQHandler+0x78>
 8003f0e:	e0d5      	b.n	80040bc <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2201      	movs	r2, #1
 8003f14:	4013      	ands	r3, r2
 8003f16:	d010      	beq.n	8003f3a <HAL_UART_IRQHandler+0xa2>
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2201      	movs	r2, #1
 8003f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	228c      	movs	r2, #140	; 0x8c
 8003f2e:	589b      	ldr	r3, [r3, r2]
 8003f30:	2201      	movs	r2, #1
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	218c      	movs	r1, #140	; 0x8c
 8003f38:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <HAL_UART_IRQHandler+0xca>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2201      	movs	r2, #1
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	228c      	movs	r2, #140	; 0x8c
 8003f56:	589b      	ldr	r3, [r3, r2]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	218c      	movs	r1, #140	; 0x8c
 8003f60:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2204      	movs	r2, #4
 8003f66:	4013      	ands	r3, r2
 8003f68:	d00f      	beq.n	8003f8a <HAL_UART_IRQHandler+0xf2>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2204      	movs	r2, #4
 8003f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	228c      	movs	r2, #140	; 0x8c
 8003f7e:	589b      	ldr	r3, [r3, r2]
 8003f80:	2202      	movs	r2, #2
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	218c      	movs	r1, #140	; 0x8c
 8003f88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2220      	movs	r2, #32
 8003f96:	4013      	ands	r3, r2
 8003f98:	d103      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4a84      	ldr	r2, [pc, #528]	; (80041b0 <HAL_UART_IRQHandler+0x318>)
 8003f9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003fa0:	d00b      	beq.n	8003fba <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	228c      	movs	r2, #140	; 0x8c
 8003fae:	589b      	ldr	r3, [r3, r2]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	218c      	movs	r1, #140	; 0x8c
 8003fb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d011      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x150>
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	04db      	lsls	r3, r3, #19
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2280      	movs	r2, #128	; 0x80
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	228c      	movs	r2, #140	; 0x8c
 8003fdc:	589b      	ldr	r3, [r3, r2]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	218c      	movs	r1, #140	; 0x8c
 8003fe6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	228c      	movs	r2, #140	; 0x8c
 8003fec:	589b      	ldr	r3, [r3, r2]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d100      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x15c>
 8003ff2:	e17f      	b.n	80042f4 <HAL_UART_IRQHandler+0x45c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d011      	beq.n	8004020 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2220      	movs	r2, #32
 8004000:	4013      	ands	r3, r2
 8004002:	d104      	bne.n	800400e <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	055b      	lsls	r3, r3, #21
 800400a:	4013      	ands	r3, r2
 800400c:	d008      	beq.n	8004020 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	2b00      	cmp	r3, #0
 8004014:	d004      	beq.n	8004020 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	0010      	movs	r0, r2
 800401e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	228c      	movs	r2, #140	; 0x8c
 8004024:	589b      	ldr	r3, [r3, r2]
 8004026:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2240      	movs	r2, #64	; 0x40
 8004030:	4013      	ands	r3, r2
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d003      	beq.n	800403e <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2228      	movs	r2, #40	; 0x28
 800403a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800403c:	d033      	beq.n	80040a6 <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0018      	movs	r0, r3
 8004042:	f000 feb3 	bl	8004dac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	4013      	ands	r3, r2
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d123      	bne.n	800409c <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2140      	movs	r1, #64	; 0x40
 8004060:	438a      	bics	r2, r1
 8004062:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d012      	beq.n	8004092 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004070:	4a51      	ldr	r2, [pc, #324]	; (80041b8 <HAL_UART_IRQHandler+0x320>)
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004078:	0018      	movs	r0, r3
 800407a:	f7fe fa1d 	bl	80024b8 <HAL_DMA_Abort_IT>
 800407e:	1e03      	subs	r3, r0, #0
 8004080:	d01a      	beq.n	80040b8 <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408c:	0018      	movs	r0, r3
 800408e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e012      	b.n	80040b8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f000 f943 	bl	8004320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409a:	e00d      	b.n	80040b8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 f93e 	bl	8004320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e008      	b.n	80040b8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f000 f939 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	228c      	movs	r2, #140	; 0x8c
 80040b2:	2100      	movs	r1, #0
 80040b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80040b6:	e11d      	b.n	80042f4 <HAL_UART_IRQHandler+0x45c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	46c0      	nop			; (mov r8, r8)
    return;
 80040ba:	e11b      	b.n	80042f4 <HAL_UART_IRQHandler+0x45c>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d000      	beq.n	80040c6 <HAL_UART_IRQHandler+0x22e>
 80040c4:	e0bf      	b.n	8004246 <HAL_UART_IRQHandler+0x3ae>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	2210      	movs	r2, #16
 80040ca:	4013      	ands	r3, r2
 80040cc:	d100      	bne.n	80040d0 <HAL_UART_IRQHandler+0x238>
 80040ce:	e0ba      	b.n	8004246 <HAL_UART_IRQHandler+0x3ae>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2210      	movs	r2, #16
 80040d4:	4013      	ands	r3, r2
 80040d6:	d100      	bne.n	80040da <HAL_UART_IRQHandler+0x242>
 80040d8:	e0b5      	b.n	8004246 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2210      	movs	r2, #16
 80040e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d167      	bne.n	80041c0 <HAL_UART_IRQHandler+0x328>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	2108      	movs	r1, #8
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d100      	bne.n	8004108 <HAL_UART_IRQHandler+0x270>
 8004106:	e0f7      	b.n	80042f8 <HAL_UART_IRQHandler+0x460>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	225c      	movs	r2, #92	; 0x5c
 800410c:	5a9b      	ldrh	r3, [r3, r2]
 800410e:	2208      	movs	r2, #8
 8004110:	18ba      	adds	r2, r7, r2
 8004112:	8812      	ldrh	r2, [r2, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d300      	bcc.n	800411a <HAL_UART_IRQHandler+0x282>
 8004118:	e0ee      	b.n	80042f8 <HAL_UART_IRQHandler+0x460>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	18ba      	adds	r2, r7, r2
 8004120:	215e      	movs	r1, #94	; 0x5e
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2220      	movs	r2, #32
 8004130:	4013      	ands	r3, r2
 8004132:	d12b      	bne.n	800418c <HAL_UART_IRQHandler+0x2f4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	491f      	ldr	r1, [pc, #124]	; (80041bc <HAL_UART_IRQHandler+0x324>)
 8004140:	400a      	ands	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	438a      	bics	r2, r1
 8004152:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	438a      	bics	r2, r1
 8004162:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2288      	movs	r2, #136	; 0x88
 8004168:	2120      	movs	r1, #32
 800416a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2110      	movs	r1, #16
 800417e:	438a      	bics	r2, r1
 8004180:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004186:	0018      	movs	r0, r3
 8004188:	f7fe f934 	bl	80023f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	225c      	movs	r2, #92	; 0x5c
 8004190:	5a9a      	ldrh	r2, [r3, r2]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	215e      	movs	r1, #94	; 0x5e
 8004196:	5a5b      	ldrh	r3, [r3, r1]
 8004198:	b29b      	uxth	r3, r3
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0011      	movs	r1, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 f8cc 	bl	8004340 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041a8:	e0a6      	b.n	80042f8 <HAL_UART_IRQHandler+0x460>
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	0000080f 	.word	0x0000080f
 80041b0:	10000001 	.word	0x10000001
 80041b4:	04000120 	.word	0x04000120
 80041b8:	08004e11 	.word	0x08004e11
 80041bc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	225c      	movs	r2, #92	; 0x5c
 80041c4:	5a99      	ldrh	r1, [r3, r2]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	225e      	movs	r2, #94	; 0x5e
 80041ca:	5a9b      	ldrh	r3, [r3, r2]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	230a      	movs	r3, #10
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	1a8a      	subs	r2, r1, r2
 80041d4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	225e      	movs	r2, #94	; 0x5e
 80041da:	5a9b      	ldrh	r3, [r3, r2]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d100      	bne.n	80041e4 <HAL_UART_IRQHandler+0x34c>
 80041e2:	e08b      	b.n	80042fc <HAL_UART_IRQHandler+0x464>
          &&(nb_rx_data > 0U) )
 80041e4:	230a      	movs	r3, #10
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d100      	bne.n	80041f0 <HAL_UART_IRQHandler+0x358>
 80041ee:	e085      	b.n	80042fc <HAL_UART_IRQHandler+0x464>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4943      	ldr	r1, [pc, #268]	; (8004308 <HAL_UART_IRQHandler+0x470>)
 80041fc:	400a      	ands	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4940      	ldr	r1, [pc, #256]	; (800430c <HAL_UART_IRQHandler+0x474>)
 800420c:	400a      	ands	r2, r1
 800420e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2288      	movs	r2, #136	; 0x88
 8004214:	2120      	movs	r1, #32
 8004216:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2110      	movs	r1, #16
 8004230:	438a      	bics	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004234:	230a      	movs	r3, #10
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	881a      	ldrh	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0011      	movs	r1, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f87e 	bl	8004340 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004244:	e05a      	b.n	80042fc <HAL_UART_IRQHandler+0x464>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	035b      	lsls	r3, r3, #13
 800424c:	4013      	ands	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_UART_IRQHandler+0x3d6>
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	03db      	lsls	r3, r3, #15
 8004256:	4013      	ands	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_UART_IRQHandler+0x3d6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	0352      	lsls	r2, r2, #13
 8004262:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	0018      	movs	r0, r3
 8004268:	f001 f99e 	bl	80055a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800426c:	e049      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	4013      	ands	r3, r2
 8004274:	d012      	beq.n	800429c <HAL_UART_IRQHandler+0x404>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	4013      	ands	r3, r2
 800427c:	d104      	bne.n	8004288 <HAL_UART_IRQHandler+0x3f0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	4013      	ands	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_UART_IRQHandler+0x404>
  {
    if (huart->TxISR != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	2b00      	cmp	r3, #0
 800428e:	d037      	beq.n	8004300 <HAL_UART_IRQHandler+0x468>
    {
      huart->TxISR(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	0010      	movs	r0, r2
 8004298:	4798      	blx	r3
    }
    return;
 800429a:	e031      	b.n	8004300 <HAL_UART_IRQHandler+0x468>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2240      	movs	r2, #64	; 0x40
 80042a0:	4013      	ands	r3, r2
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x41e>
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2240      	movs	r2, #64	; 0x40
 80042a8:	4013      	ands	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_UART_IRQHandler+0x41e>
  {
    UART_EndTransmit_IT(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 fe4b 	bl	8004f4a <UART_EndTransmit_IT>
    return;
 80042b4:	e025      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	4013      	ands	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_UART_IRQHandler+0x43c>
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	05db      	lsls	r3, r3, #23
 80042c6:	4013      	ands	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_UART_IRQHandler+0x43c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f001 f97b 	bl	80055c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042d2:	e016      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	045b      	lsls	r3, r3, #17
 80042da:	4013      	ands	r3, r2
 80042dc:	d011      	beq.n	8004302 <HAL_UART_IRQHandler+0x46a>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da0e      	bge.n	8004302 <HAL_UART_IRQHandler+0x46a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f001 f966 	bl	80055b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	e008      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
      return;
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	e006      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
    return;
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	e004      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
      return;
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	e002      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
      return;
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	e000      	b.n	8004302 <HAL_UART_IRQHandler+0x46a>
    return;
 8004300:	46c0      	nop			; (mov r8, r8)
  }
}
 8004302:	46bd      	mov	sp, r7
 8004304:	b008      	add	sp, #32
 8004306:	bd80      	pop	{r7, pc}
 8004308:	fffffedf 	.word	0xfffffedf
 800430c:	effffffe 	.word	0xeffffffe

08004310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	000a      	movs	r2, r1
 800434a:	1cbb      	adds	r3, r7, #2
 800434c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435a:	b091      	sub	sp, #68	; 0x44
 800435c:	af00      	add	r7, sp, #0
 800435e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004360:	231a      	movs	r3, #26
 8004362:	2220      	movs	r2, #32
 8004364:	4694      	mov	ip, r2
 8004366:	44bc      	add	ip, r7
 8004368:	4463      	add	r3, ip
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	431a      	orrs	r2, r3
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800438a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438c:	4313      	orrs	r3, r2
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4ab8      	ldr	r2, [pc, #736]	; (8004678 <UART_SetConfig+0x320>)
 8004398:	4013      	ands	r3, r2
 800439a:	0019      	movs	r1, r3
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4ab3      	ldr	r2, [pc, #716]	; (800467c <UART_SetConfig+0x324>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0018      	movs	r0, r3
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	68d9      	ldr	r1, [r3, #12]
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	0003      	movs	r3, r0
 80043bc:	430b      	orrs	r3, r1
 80043be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4aad      	ldr	r2, [pc, #692]	; (8004680 <UART_SetConfig+0x328>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043d6:	4313      	orrs	r3, r2
 80043d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4aa8      	ldr	r2, [pc, #672]	; (8004684 <UART_SetConfig+0x32c>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	220f      	movs	r2, #15
 80043f8:	4393      	bics	r3, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	0003      	movs	r3, r0
 8004406:	430b      	orrs	r3, r1
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a9e      	ldr	r2, [pc, #632]	; (8004688 <UART_SetConfig+0x330>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d134      	bne.n	800447e <UART_SetConfig+0x126>
 8004414:	4b9d      	ldr	r3, [pc, #628]	; (800468c <UART_SetConfig+0x334>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	2203      	movs	r2, #3
 800441a:	4013      	ands	r3, r2
 800441c:	2b01      	cmp	r3, #1
 800441e:	d015      	beq.n	800444c <UART_SetConfig+0xf4>
 8004420:	d304      	bcc.n	800442c <UART_SetConfig+0xd4>
 8004422:	2b02      	cmp	r3, #2
 8004424:	d00a      	beq.n	800443c <UART_SetConfig+0xe4>
 8004426:	2b03      	cmp	r3, #3
 8004428:	d018      	beq.n	800445c <UART_SetConfig+0x104>
 800442a:	e01f      	b.n	800446c <UART_SetConfig+0x114>
 800442c:	231b      	movs	r3, #27
 800442e:	2220      	movs	r2, #32
 8004430:	4694      	mov	ip, r2
 8004432:	44bc      	add	ip, r7
 8004434:	4463      	add	r3, ip
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e0c5      	b.n	80045c8 <UART_SetConfig+0x270>
 800443c:	231b      	movs	r3, #27
 800443e:	2220      	movs	r2, #32
 8004440:	4694      	mov	ip, r2
 8004442:	44bc      	add	ip, r7
 8004444:	4463      	add	r3, ip
 8004446:	2202      	movs	r2, #2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	e0bd      	b.n	80045c8 <UART_SetConfig+0x270>
 800444c:	231b      	movs	r3, #27
 800444e:	2220      	movs	r2, #32
 8004450:	4694      	mov	ip, r2
 8004452:	44bc      	add	ip, r7
 8004454:	4463      	add	r3, ip
 8004456:	2204      	movs	r2, #4
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e0b5      	b.n	80045c8 <UART_SetConfig+0x270>
 800445c:	231b      	movs	r3, #27
 800445e:	2220      	movs	r2, #32
 8004460:	4694      	mov	ip, r2
 8004462:	44bc      	add	ip, r7
 8004464:	4463      	add	r3, ip
 8004466:	2208      	movs	r2, #8
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e0ad      	b.n	80045c8 <UART_SetConfig+0x270>
 800446c:	231b      	movs	r3, #27
 800446e:	2220      	movs	r2, #32
 8004470:	4694      	mov	ip, r2
 8004472:	44bc      	add	ip, r7
 8004474:	4463      	add	r3, ip
 8004476:	2210      	movs	r2, #16
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	e0a4      	b.n	80045c8 <UART_SetConfig+0x270>
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a83      	ldr	r2, [pc, #524]	; (8004690 <UART_SetConfig+0x338>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d137      	bne.n	80044f8 <UART_SetConfig+0x1a0>
 8004488:	4b80      	ldr	r3, [pc, #512]	; (800468c <UART_SetConfig+0x334>)
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	220c      	movs	r2, #12
 800448e:	4013      	ands	r3, r2
 8004490:	2b04      	cmp	r3, #4
 8004492:	d018      	beq.n	80044c6 <UART_SetConfig+0x16e>
 8004494:	d802      	bhi.n	800449c <UART_SetConfig+0x144>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <UART_SetConfig+0x14e>
 800449a:	e024      	b.n	80044e6 <UART_SetConfig+0x18e>
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00a      	beq.n	80044b6 <UART_SetConfig+0x15e>
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	d018      	beq.n	80044d6 <UART_SetConfig+0x17e>
 80044a4:	e01f      	b.n	80044e6 <UART_SetConfig+0x18e>
 80044a6:	231b      	movs	r3, #27
 80044a8:	2220      	movs	r2, #32
 80044aa:	4694      	mov	ip, r2
 80044ac:	44bc      	add	ip, r7
 80044ae:	4463      	add	r3, ip
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e088      	b.n	80045c8 <UART_SetConfig+0x270>
 80044b6:	231b      	movs	r3, #27
 80044b8:	2220      	movs	r2, #32
 80044ba:	4694      	mov	ip, r2
 80044bc:	44bc      	add	ip, r7
 80044be:	4463      	add	r3, ip
 80044c0:	2202      	movs	r2, #2
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e080      	b.n	80045c8 <UART_SetConfig+0x270>
 80044c6:	231b      	movs	r3, #27
 80044c8:	2220      	movs	r2, #32
 80044ca:	4694      	mov	ip, r2
 80044cc:	44bc      	add	ip, r7
 80044ce:	4463      	add	r3, ip
 80044d0:	2204      	movs	r2, #4
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e078      	b.n	80045c8 <UART_SetConfig+0x270>
 80044d6:	231b      	movs	r3, #27
 80044d8:	2220      	movs	r2, #32
 80044da:	4694      	mov	ip, r2
 80044dc:	44bc      	add	ip, r7
 80044de:	4463      	add	r3, ip
 80044e0:	2208      	movs	r2, #8
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e070      	b.n	80045c8 <UART_SetConfig+0x270>
 80044e6:	231b      	movs	r3, #27
 80044e8:	2220      	movs	r2, #32
 80044ea:	4694      	mov	ip, r2
 80044ec:	44bc      	add	ip, r7
 80044ee:	4463      	add	r3, ip
 80044f0:	2210      	movs	r2, #16
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	e067      	b.n	80045c8 <UART_SetConfig+0x270>
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a65      	ldr	r2, [pc, #404]	; (8004694 <UART_SetConfig+0x33c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d107      	bne.n	8004512 <UART_SetConfig+0x1ba>
 8004502:	231b      	movs	r3, #27
 8004504:	2220      	movs	r2, #32
 8004506:	4694      	mov	ip, r2
 8004508:	44bc      	add	ip, r7
 800450a:	4463      	add	r3, ip
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e05a      	b.n	80045c8 <UART_SetConfig+0x270>
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a60      	ldr	r2, [pc, #384]	; (8004698 <UART_SetConfig+0x340>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d107      	bne.n	800452c <UART_SetConfig+0x1d4>
 800451c:	231b      	movs	r3, #27
 800451e:	2220      	movs	r2, #32
 8004520:	4694      	mov	ip, r2
 8004522:	44bc      	add	ip, r7
 8004524:	4463      	add	r3, ip
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e04d      	b.n	80045c8 <UART_SetConfig+0x270>
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a53      	ldr	r2, [pc, #332]	; (8004680 <UART_SetConfig+0x328>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d141      	bne.n	80045ba <UART_SetConfig+0x262>
 8004536:	4b55      	ldr	r3, [pc, #340]	; (800468c <UART_SetConfig+0x334>)
 8004538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453a:	23c0      	movs	r3, #192	; 0xc0
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	4013      	ands	r3, r2
 8004540:	2280      	movs	r2, #128	; 0x80
 8004542:	00d2      	lsls	r2, r2, #3
 8004544:	4293      	cmp	r3, r2
 8004546:	d01f      	beq.n	8004588 <UART_SetConfig+0x230>
 8004548:	2280      	movs	r2, #128	; 0x80
 800454a:	00d2      	lsls	r2, r2, #3
 800454c:	4293      	cmp	r3, r2
 800454e:	d802      	bhi.n	8004556 <UART_SetConfig+0x1fe>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <UART_SetConfig+0x210>
 8004554:	e028      	b.n	80045a8 <UART_SetConfig+0x250>
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	0112      	lsls	r2, r2, #4
 800455a:	4293      	cmp	r3, r2
 800455c:	d00c      	beq.n	8004578 <UART_SetConfig+0x220>
 800455e:	22c0      	movs	r2, #192	; 0xc0
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <UART_SetConfig+0x240>
 8004566:	e01f      	b.n	80045a8 <UART_SetConfig+0x250>
 8004568:	231b      	movs	r3, #27
 800456a:	2220      	movs	r2, #32
 800456c:	4694      	mov	ip, r2
 800456e:	44bc      	add	ip, r7
 8004570:	4463      	add	r3, ip
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e027      	b.n	80045c8 <UART_SetConfig+0x270>
 8004578:	231b      	movs	r3, #27
 800457a:	2220      	movs	r2, #32
 800457c:	4694      	mov	ip, r2
 800457e:	44bc      	add	ip, r7
 8004580:	4463      	add	r3, ip
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e01f      	b.n	80045c8 <UART_SetConfig+0x270>
 8004588:	231b      	movs	r3, #27
 800458a:	2220      	movs	r2, #32
 800458c:	4694      	mov	ip, r2
 800458e:	44bc      	add	ip, r7
 8004590:	4463      	add	r3, ip
 8004592:	2204      	movs	r2, #4
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e017      	b.n	80045c8 <UART_SetConfig+0x270>
 8004598:	231b      	movs	r3, #27
 800459a:	2220      	movs	r2, #32
 800459c:	4694      	mov	ip, r2
 800459e:	44bc      	add	ip, r7
 80045a0:	4463      	add	r3, ip
 80045a2:	2208      	movs	r2, #8
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e00f      	b.n	80045c8 <UART_SetConfig+0x270>
 80045a8:	231b      	movs	r3, #27
 80045aa:	2220      	movs	r2, #32
 80045ac:	4694      	mov	ip, r2
 80045ae:	44bc      	add	ip, r7
 80045b0:	4463      	add	r3, ip
 80045b2:	2210      	movs	r2, #16
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	e006      	b.n	80045c8 <UART_SetConfig+0x270>
 80045ba:	231b      	movs	r3, #27
 80045bc:	2220      	movs	r2, #32
 80045be:	4694      	mov	ip, r2
 80045c0:	44bc      	add	ip, r7
 80045c2:	4463      	add	r3, ip
 80045c4:	2210      	movs	r2, #16
 80045c6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <UART_SetConfig+0x328>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d000      	beq.n	80045d4 <UART_SetConfig+0x27c>
 80045d2:	e0aa      	b.n	800472a <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045d4:	231b      	movs	r3, #27
 80045d6:	2220      	movs	r2, #32
 80045d8:	4694      	mov	ip, r2
 80045da:	44bc      	add	ip, r7
 80045dc:	4463      	add	r3, ip
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d00d      	beq.n	8004600 <UART_SetConfig+0x2a8>
 80045e4:	dc02      	bgt.n	80045ec <UART_SetConfig+0x294>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <UART_SetConfig+0x29e>
 80045ea:	e015      	b.n	8004618 <UART_SetConfig+0x2c0>
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d00a      	beq.n	8004606 <UART_SetConfig+0x2ae>
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d00d      	beq.n	8004610 <UART_SetConfig+0x2b8>
 80045f4:	e010      	b.n	8004618 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f6:	f7fe ff4f 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 80045fa:	0003      	movs	r3, r0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045fe:	e015      	b.n	800462c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b26      	ldr	r3, [pc, #152]	; (800469c <UART_SetConfig+0x344>)
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004604:	e012      	b.n	800462c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fe febb 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800460a:	0003      	movs	r3, r0
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800460e:	e00d      	b.n	800462c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004616:	e009      	b.n	800462c <UART_SetConfig+0x2d4>
      default:
        pclk = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800461c:	231a      	movs	r3, #26
 800461e:	2220      	movs	r2, #32
 8004620:	4694      	mov	ip, r2
 8004622:	44bc      	add	ip, r7
 8004624:	4463      	add	r3, ip
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
        break;
 800462a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	2b00      	cmp	r3, #0
 8004630:	d100      	bne.n	8004634 <UART_SetConfig+0x2dc>
 8004632:	e14f      	b.n	80048d4 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <UART_SetConfig+0x348>)
 800463a:	0052      	lsls	r2, r2, #1
 800463c:	5ad3      	ldrh	r3, [r2, r3]
 800463e:	0019      	movs	r1, r3
 8004640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004642:	f7fb fd61 	bl	8000108 <__udivsi3>
 8004646:	0003      	movs	r3, r0
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	0013      	movs	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	189b      	adds	r3, r3, r2
 8004654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004656:	429a      	cmp	r2, r3
 8004658:	d305      	bcc.n	8004666 <UART_SetConfig+0x30e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004662:	429a      	cmp	r2, r3
 8004664:	d91e      	bls.n	80046a4 <UART_SetConfig+0x34c>
      {
        ret = HAL_ERROR;
 8004666:	231a      	movs	r3, #26
 8004668:	2220      	movs	r2, #32
 800466a:	4694      	mov	ip, r2
 800466c:	44bc      	add	ip, r7
 800466e:	4463      	add	r3, ip
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e12e      	b.n	80048d4 <UART_SetConfig+0x57c>
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	cfff69f3 	.word	0xcfff69f3
 800467c:	ffffcfff 	.word	0xffffcfff
 8004680:	40008000 	.word	0x40008000
 8004684:	11fff4ff 	.word	0x11fff4ff
 8004688:	40013800 	.word	0x40013800
 800468c:	40021000 	.word	0x40021000
 8004690:	40004400 	.word	0x40004400
 8004694:	40004800 	.word	0x40004800
 8004698:	40004c00 	.word	0x40004c00
 800469c:	00f42400 	.word	0x00f42400
 80046a0:	08005904 	.word	0x08005904
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b0:	4b94      	ldr	r3, [pc, #592]	; (8004904 <UART_SetConfig+0x5ac>)
 80046b2:	0052      	lsls	r2, r2, #1
 80046b4:	5ad3      	ldrh	r3, [r2, r3]
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	69b8      	ldr	r0, [r7, #24]
 80046c2:	69f9      	ldr	r1, [r7, #28]
 80046c4:	f7fb fe96 	bl	80003f4 <__aeabi_uldivmod>
 80046c8:	0003      	movs	r3, r0
 80046ca:	000c      	movs	r4, r1
 80046cc:	0e1a      	lsrs	r2, r3, #24
 80046ce:	0226      	lsls	r6, r4, #8
 80046d0:	4316      	orrs	r6, r2
 80046d2:	021d      	lsls	r5, r3, #8
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	1940      	adds	r0, r0, r5
 80046e6:	4171      	adcs	r1, r6
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f7fb fe7d 	bl	80003f4 <__aeabi_uldivmod>
 80046fa:	0003      	movs	r3, r0
 80046fc:	000c      	movs	r4, r1
 80046fe:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	4a81      	ldr	r2, [pc, #516]	; (8004908 <UART_SetConfig+0x5b0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d908      	bls.n	800471a <UART_SetConfig+0x3c2>
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	4a80      	ldr	r2, [pc, #512]	; (800490c <UART_SetConfig+0x5b4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d804      	bhi.n	800471a <UART_SetConfig+0x3c2>
        {
          huart->Instance->BRR = usartdiv;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	e0dc      	b.n	80048d4 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 800471a:	231a      	movs	r3, #26
 800471c:	2220      	movs	r2, #32
 800471e:	4694      	mov	ip, r2
 8004720:	44bc      	add	ip, r7
 8004722:	4463      	add	r3, ip
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e0d4      	b.n	80048d4 <UART_SetConfig+0x57c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	429a      	cmp	r2, r3
 8004734:	d000      	beq.n	8004738 <UART_SetConfig+0x3e0>
 8004736:	e073      	b.n	8004820 <UART_SetConfig+0x4c8>
  {
    switch (clocksource)
 8004738:	231b      	movs	r3, #27
 800473a:	2220      	movs	r2, #32
 800473c:	4694      	mov	ip, r2
 800473e:	44bc      	add	ip, r7
 8004740:	4463      	add	r3, ip
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d00d      	beq.n	8004764 <UART_SetConfig+0x40c>
 8004748:	dc02      	bgt.n	8004750 <UART_SetConfig+0x3f8>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <UART_SetConfig+0x402>
 800474e:	e015      	b.n	800477c <UART_SetConfig+0x424>
 8004750:	2b04      	cmp	r3, #4
 8004752:	d00a      	beq.n	800476a <UART_SetConfig+0x412>
 8004754:	2b08      	cmp	r3, #8
 8004756:	d00d      	beq.n	8004774 <UART_SetConfig+0x41c>
 8004758:	e010      	b.n	800477c <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475a:	f7fe fe9d 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 800475e:	0003      	movs	r3, r0
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004762:	e015      	b.n	8004790 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004764:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <UART_SetConfig+0x5b8>)
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004768:	e012      	b.n	8004790 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476a:	f7fe fe09 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800476e:	0003      	movs	r3, r0
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004772:	e00d      	b.n	8004790 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800477a:	e009      	b.n	8004790 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004780:	231a      	movs	r3, #26
 8004782:	2220      	movs	r2, #32
 8004784:	4694      	mov	ip, r2
 8004786:	44bc      	add	ip, r7
 8004788:	4463      	add	r3, ip
 800478a:	2201      	movs	r2, #1
 800478c:	701a      	strb	r2, [r3, #0]
        break;
 800478e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	2b00      	cmp	r3, #0
 8004794:	d100      	bne.n	8004798 <UART_SetConfig+0x440>
 8004796:	e09d      	b.n	80048d4 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800479c:	4b59      	ldr	r3, [pc, #356]	; (8004904 <UART_SetConfig+0x5ac>)
 800479e:	0052      	lsls	r2, r2, #1
 80047a0:	5ad3      	ldrh	r3, [r2, r3]
 80047a2:	0019      	movs	r1, r3
 80047a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047a6:	f7fb fcaf 	bl	8000108 <__udivsi3>
 80047aa:	0003      	movs	r3, r0
 80047ac:	005a      	lsls	r2, r3, #1
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	18d2      	adds	r2, r2, r3
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	0019      	movs	r1, r3
 80047bc:	0010      	movs	r0, r2
 80047be:	f7fb fca3 	bl	8000108 <__udivsi3>
 80047c2:	0003      	movs	r3, r0
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d920      	bls.n	8004810 <UART_SetConfig+0x4b8>
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	4a50      	ldr	r2, [pc, #320]	; (8004914 <UART_SetConfig+0x5bc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d81c      	bhi.n	8004810 <UART_SetConfig+0x4b8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	b29a      	uxth	r2, r3
 80047da:	200e      	movs	r0, #14
 80047dc:	2420      	movs	r4, #32
 80047de:	193b      	adds	r3, r7, r4
 80047e0:	181b      	adds	r3, r3, r0
 80047e2:	210f      	movs	r1, #15
 80047e4:	438a      	bics	r2, r1
 80047e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2207      	movs	r2, #7
 80047f0:	4013      	ands	r3, r2
 80047f2:	b299      	uxth	r1, r3
 80047f4:	193b      	adds	r3, r7, r4
 80047f6:	181b      	adds	r3, r3, r0
 80047f8:	193a      	adds	r2, r7, r4
 80047fa:	1812      	adds	r2, r2, r0
 80047fc:	8812      	ldrh	r2, [r2, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	193a      	adds	r2, r7, r4
 8004808:	1812      	adds	r2, r2, r0
 800480a:	8812      	ldrh	r2, [r2, #0]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	e061      	b.n	80048d4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8004810:	231a      	movs	r3, #26
 8004812:	2220      	movs	r2, #32
 8004814:	4694      	mov	ip, r2
 8004816:	44bc      	add	ip, r7
 8004818:	4463      	add	r3, ip
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e059      	b.n	80048d4 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004820:	231b      	movs	r3, #27
 8004822:	2220      	movs	r2, #32
 8004824:	4694      	mov	ip, r2
 8004826:	44bc      	add	ip, r7
 8004828:	4463      	add	r3, ip
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d00d      	beq.n	800484c <UART_SetConfig+0x4f4>
 8004830:	dc02      	bgt.n	8004838 <UART_SetConfig+0x4e0>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <UART_SetConfig+0x4ea>
 8004836:	e015      	b.n	8004864 <UART_SetConfig+0x50c>
 8004838:	2b04      	cmp	r3, #4
 800483a:	d00a      	beq.n	8004852 <UART_SetConfig+0x4fa>
 800483c:	2b08      	cmp	r3, #8
 800483e:	d00d      	beq.n	800485c <UART_SetConfig+0x504>
 8004840:	e010      	b.n	8004864 <UART_SetConfig+0x50c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004842:	f7fe fe29 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8004846:	0003      	movs	r3, r0
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800484a:	e015      	b.n	8004878 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b30      	ldr	r3, [pc, #192]	; (8004910 <UART_SetConfig+0x5b8>)
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004850:	e012      	b.n	8004878 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fe fd95 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8004856:	0003      	movs	r3, r0
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800485a:	e00d      	b.n	8004878 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004862:	e009      	b.n	8004878 <UART_SetConfig+0x520>
      default:
        pclk = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004868:	231a      	movs	r3, #26
 800486a:	2220      	movs	r2, #32
 800486c:	4694      	mov	ip, r2
 800486e:	44bc      	add	ip, r7
 8004870:	4463      	add	r3, ip
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
        break;
 8004876:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02a      	beq.n	80048d4 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <UART_SetConfig+0x5ac>)
 8004884:	0052      	lsls	r2, r2, #1
 8004886:	5ad3      	ldrh	r3, [r2, r3]
 8004888:	0019      	movs	r1, r3
 800488a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800488c:	f7fb fc3c 	bl	8000108 <__udivsi3>
 8004890:	0003      	movs	r3, r0
 8004892:	001a      	movs	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	18d2      	adds	r2, r2, r3
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0019      	movs	r1, r3
 80048a2:	0010      	movs	r0, r2
 80048a4:	f7fb fc30 	bl	8000108 <__udivsi3>
 80048a8:	0003      	movs	r3, r0
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2b0f      	cmp	r3, #15
 80048b2:	d908      	bls.n	80048c6 <UART_SetConfig+0x56e>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <UART_SetConfig+0x5bc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d804      	bhi.n	80048c6 <UART_SetConfig+0x56e>
      {
        huart->Instance->BRR = usartdiv;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e006      	b.n	80048d4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	231a      	movs	r3, #26
 80048c8:	2220      	movs	r2, #32
 80048ca:	4694      	mov	ip, r2
 80048cc:	44bc      	add	ip, r7
 80048ce:	4463      	add	r3, ip
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	226a      	movs	r2, #106	; 0x6a
 80048d8:	2101      	movs	r1, #1
 80048da:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	2268      	movs	r2, #104	; 0x68
 80048e0:	2101      	movs	r1, #1
 80048e2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	2200      	movs	r2, #0
 80048e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	2200      	movs	r2, #0
 80048ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80048f0:	231a      	movs	r3, #26
 80048f2:	2220      	movs	r2, #32
 80048f4:	4694      	mov	ip, r2
 80048f6:	44bc      	add	ip, r7
 80048f8:	4463      	add	r3, ip
 80048fa:	781b      	ldrb	r3, [r3, #0]
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b011      	add	sp, #68	; 0x44
 8004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004904:	08005904 	.word	0x08005904
 8004908:	000002ff 	.word	0x000002ff
 800490c:	000fffff 	.word	0x000fffff
 8004910:	00f42400 	.word	0x00f42400
 8004914:	0000ffff 	.word	0x0000ffff

08004918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	2201      	movs	r2, #1
 8004926:	4013      	ands	r3, r2
 8004928:	d00b      	beq.n	8004942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a4a      	ldr	r2, [pc, #296]	; (8004a5c <UART_AdvFeatureConfig+0x144>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	2202      	movs	r2, #2
 8004948:	4013      	ands	r3, r2
 800494a:	d00b      	beq.n	8004964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4a43      	ldr	r2, [pc, #268]	; (8004a60 <UART_AdvFeatureConfig+0x148>)
 8004954:	4013      	ands	r3, r2
 8004956:	0019      	movs	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	2204      	movs	r2, #4
 800496a:	4013      	ands	r3, r2
 800496c:	d00b      	beq.n	8004986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a3b      	ldr	r2, [pc, #236]	; (8004a64 <UART_AdvFeatureConfig+0x14c>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	2208      	movs	r2, #8
 800498c:	4013      	ands	r3, r2
 800498e:	d00b      	beq.n	80049a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a34      	ldr	r2, [pc, #208]	; (8004a68 <UART_AdvFeatureConfig+0x150>)
 8004998:	4013      	ands	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	2210      	movs	r2, #16
 80049ae:	4013      	ands	r3, r2
 80049b0:	d00b      	beq.n	80049ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <UART_AdvFeatureConfig+0x154>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	2220      	movs	r2, #32
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00b      	beq.n	80049ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4a25      	ldr	r2, [pc, #148]	; (8004a70 <UART_AdvFeatureConfig+0x158>)
 80049dc:	4013      	ands	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	2240      	movs	r2, #64	; 0x40
 80049f2:	4013      	ands	r3, r2
 80049f4:	d01d      	beq.n	8004a32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <UART_AdvFeatureConfig+0x15c>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	035b      	lsls	r3, r3, #13
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d10b      	bne.n	8004a32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <UART_AdvFeatureConfig+0x160>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	0019      	movs	r1, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	2280      	movs	r2, #128	; 0x80
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <UART_AdvFeatureConfig+0x164>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	fffdffff 	.word	0xfffdffff
 8004a60:	fffeffff 	.word	0xfffeffff
 8004a64:	fffbffff 	.word	0xfffbffff
 8004a68:	ffff7fff 	.word	0xffff7fff
 8004a6c:	ffffefff 	.word	0xffffefff
 8004a70:	ffffdfff 	.word	0xffffdfff
 8004a74:	ffefffff 	.word	0xffefffff
 8004a78:	ff9fffff 	.word	0xff9fffff
 8004a7c:	fff7ffff 	.word	0xfff7ffff

08004a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	228c      	movs	r2, #140	; 0x8c
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a90:	f7fc fbea 	bl	8001268 <HAL_GetTick>
 8004a94:	0003      	movs	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d10d      	bne.n	8004ac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	0399      	lsls	r1, r3, #14
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <UART_CheckIdleState+0x94>)
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	0013      	movs	r3, r2
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f000 f82f 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 8004aba:	1e03      	subs	r3, r0, #0
 8004abc:	d001      	beq.n	8004ac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e024      	b.n	8004b0c <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d10d      	bne.n	8004aec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	03d9      	lsls	r1, r3, #15
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <UART_CheckIdleState+0x94>)
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	0013      	movs	r3, r2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f000 f81a 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 8004ae4:	1e03      	subs	r3, r0, #0
 8004ae6:	d001      	beq.n	8004aec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e00f      	b.n	8004b0c <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2284      	movs	r2, #132	; 0x84
 8004af0:	2120      	movs	r1, #32
 8004af2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2288      	movs	r2, #136	; 0x88
 8004af8:	2120      	movs	r1, #32
 8004afa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2280      	movs	r2, #128	; 0x80
 8004b06:	2100      	movs	r1, #0
 8004b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b004      	add	sp, #16
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	01ffffff 	.word	0x01ffffff

08004b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	1dfb      	adds	r3, r7, #7
 8004b26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b28:	e062      	b.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	d05f      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b30:	f7fc fb9a 	bl	8001268 <HAL_GetTick>
 8004b34:	0002      	movs	r2, r0
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11d      	bne.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4931      	ldr	r1, [pc, #196]	; (8004c18 <UART_WaitOnFlagUntilTimeout+0x100>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2101      	movs	r1, #1
 8004b62:	438a      	bics	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2284      	movs	r2, #132	; 0x84
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2288      	movs	r2, #136	; 0x88
 8004b72:	2120      	movs	r1, #32
 8004b74:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e046      	b.n	8004c10 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d030      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	401a      	ands	r2, r3
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d126      	bne.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4918      	ldr	r1, [pc, #96]	; (8004c18 <UART_WaitOnFlagUntilTimeout+0x100>)
 8004bb8:	400a      	ands	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	438a      	bics	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2284      	movs	r2, #132	; 0x84
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2288      	movs	r2, #136	; 0x88
 8004bd8:	2120      	movs	r1, #32
 8004bda:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	228c      	movs	r2, #140	; 0x8c
 8004be0:	2120      	movs	r1, #32
 8004be2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	2100      	movs	r1, #0
 8004bea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e00f      	b.n	8004c10 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	425a      	negs	r2, r3
 8004c00:	4153      	adcs	r3, r2
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	001a      	movs	r2, r3
 8004c06:	1dfb      	adds	r3, r7, #7
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d08d      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b004      	add	sp, #16
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	fffffe5f 	.word	0xfffffe5f

08004c1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	1dbb      	adds	r3, r7, #6
 8004c28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1dba      	adds	r2, r7, #6
 8004c34:	215c      	movs	r1, #92	; 0x5c
 8004c36:	8812      	ldrh	r2, [r2, #0]
 8004c38:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1dba      	adds	r2, r7, #6
 8004c3e:	215e      	movs	r1, #94	; 0x5e
 8004c40:	8812      	ldrh	r2, [r2, #0]
 8004c42:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	015b      	lsls	r3, r3, #5
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d10d      	bne.n	8004c72 <UART_Start_Receive_IT+0x56>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <UART_Start_Receive_IT+0x4c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2260      	movs	r2, #96	; 0x60
 8004c62:	494d      	ldr	r1, [pc, #308]	; (8004d98 <UART_Start_Receive_IT+0x17c>)
 8004c64:	5299      	strh	r1, [r3, r2]
 8004c66:	e02e      	b.n	8004cc6 <UART_Start_Receive_IT+0xaa>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2260      	movs	r2, #96	; 0x60
 8004c6c:	21ff      	movs	r1, #255	; 0xff
 8004c6e:	5299      	strh	r1, [r3, r2]
 8004c70:	e029      	b.n	8004cc6 <UART_Start_Receive_IT+0xaa>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10d      	bne.n	8004c96 <UART_Start_Receive_IT+0x7a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <UART_Start_Receive_IT+0x70>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2260      	movs	r2, #96	; 0x60
 8004c86:	21ff      	movs	r1, #255	; 0xff
 8004c88:	5299      	strh	r1, [r3, r2]
 8004c8a:	e01c      	b.n	8004cc6 <UART_Start_Receive_IT+0xaa>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2260      	movs	r2, #96	; 0x60
 8004c90:	217f      	movs	r1, #127	; 0x7f
 8004c92:	5299      	strh	r1, [r3, r2]
 8004c94:	e017      	b.n	8004cc6 <UART_Start_Receive_IT+0xaa>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	055b      	lsls	r3, r3, #21
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d10d      	bne.n	8004cbe <UART_Start_Receive_IT+0xa2>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <UART_Start_Receive_IT+0x98>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2260      	movs	r2, #96	; 0x60
 8004cae:	217f      	movs	r1, #127	; 0x7f
 8004cb0:	5299      	strh	r1, [r3, r2]
 8004cb2:	e008      	b.n	8004cc6 <UART_Start_Receive_IT+0xaa>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2260      	movs	r2, #96	; 0x60
 8004cb8:	213f      	movs	r1, #63	; 0x3f
 8004cba:	5299      	strh	r1, [r3, r2]
 8004cbc:	e003      	b.n	8004cc6 <UART_Start_Receive_IT+0xaa>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2260      	movs	r2, #96	; 0x60
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	228c      	movs	r2, #140	; 0x8c
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2288      	movs	r2, #136	; 0x88
 8004cd2:	2122      	movs	r1, #34	; 0x22
 8004cd4:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	059b      	lsls	r3, r3, #22
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d12e      	bne.n	8004d50 <UART_Start_Receive_IT+0x134>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2268      	movs	r2, #104	; 0x68
 8004cf6:	5a9b      	ldrh	r3, [r3, r2]
 8004cf8:	1dba      	adds	r2, r7, #6
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d327      	bcc.n	8004d50 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	015b      	lsls	r3, r3, #5
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d107      	bne.n	8004d1c <UART_Start_Receive_IT+0x100>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <UART_Start_Receive_IT+0x180>)
 8004d18:	671a      	str	r2, [r3, #112]	; 0x70
 8004d1a:	e002      	b.n	8004d22 <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4a20      	ldr	r2, [pc, #128]	; (8004da0 <UART_Start_Receive_IT+0x184>)
 8004d20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2280      	movs	r2, #128	; 0x80
 8004d26:	2100      	movs	r1, #0
 8004d28:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2180      	movs	r1, #128	; 0x80
 8004d36:	0049      	lsls	r1, r1, #1
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	0549      	lsls	r1, r1, #21
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
 8004d4e:	e01d      	b.n	8004d8c <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	015b      	lsls	r3, r3, #5
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d107      	bne.n	8004d6c <UART_Start_Receive_IT+0x150>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a0f      	ldr	r2, [pc, #60]	; (8004da4 <UART_Start_Receive_IT+0x188>)
 8004d68:	671a      	str	r2, [r3, #112]	; 0x70
 8004d6a:	e002      	b.n	8004d72 <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <UART_Start_Receive_IT+0x18c>)
 8004d70:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	2100      	movs	r1, #0
 8004d78:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2190      	movs	r1, #144	; 0x90
 8004d86:	0049      	lsls	r1, r1, #1
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b004      	add	sp, #16
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	000001ff 	.word	0x000001ff
 8004d9c:	08005385 	.word	0x08005385
 8004da0:	08005161 	.word	0x08005161
 8004da4:	08005071 	.word	0x08005071
 8004da8:	08004f81 	.word	0x08004f81

08004dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4912      	ldr	r1, [pc, #72]	; (8004e08 <UART_EndRxTransfer+0x5c>)
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	490f      	ldr	r1, [pc, #60]	; (8004e0c <UART_EndRxTransfer+0x60>)
 8004dd0:	400a      	ands	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2110      	movs	r1, #16
 8004de8:	438a      	bics	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2288      	movs	r2, #136	; 0x88
 8004df0:	2120      	movs	r1, #32
 8004df2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b002      	add	sp, #8
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	fffffedf 	.word	0xfffffedf
 8004e0c:	effffffe 	.word	0xeffffffe

08004e10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	225e      	movs	r2, #94	; 0x5e
 8004e22:	2100      	movs	r1, #0
 8004e24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2256      	movs	r2, #86	; 0x56
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7ff fa75 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e50:	2200      	movs	r2, #0
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d12d      	bne.n	8004ec2 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2256      	movs	r2, #86	; 0x56
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	225e      	movs	r2, #94	; 0x5e
 8004e72:	2100      	movs	r1, #0
 8004e74:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	228c      	movs	r2, #140	; 0x8c
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	220f      	movs	r2, #15
 8004e84:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	059b      	lsls	r3, r3, #22
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d107      	bne.n	8004ea2 <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2110      	movs	r1, #16
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2284      	movs	r2, #132	; 0x84
 8004ea6:	2120      	movs	r1, #32
 8004ea8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2288      	movs	r2, #136	; 0x88
 8004eae:	2120      	movs	r1, #32
 8004eb0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f7ff fa38 	bl	8004330 <HAL_UART_AbortCpltCallback>
 8004ec0:	e000      	b.n	8004ec4 <UART_DMATxAbortCallback+0x86>
      return;
 8004ec2:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004edc:	2200      	movs	r2, #0
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d127      	bne.n	8004f42 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2256      	movs	r2, #86	; 0x56
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	225e      	movs	r2, #94	; 0x5e
 8004efe:	2100      	movs	r1, #0
 8004f00:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	228c      	movs	r2, #140	; 0x8c
 8004f06:	2100      	movs	r1, #0
 8004f08:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	220f      	movs	r2, #15
 8004f10:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2108      	movs	r1, #8
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2284      	movs	r2, #132	; 0x84
 8004f26:	2120      	movs	r1, #32
 8004f28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2288      	movs	r2, #136	; 0x88
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7ff f9f8 	bl	8004330 <HAL_UART_AbortCpltCallback>
 8004f40:	e000      	b.n	8004f44 <UART_DMARxAbortCallback+0x7a>
      return;
 8004f42:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b004      	add	sp, #16
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2140      	movs	r1, #64	; 0x40
 8004f5e:	438a      	bics	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2284      	movs	r2, #132	; 0x84
 8004f66:	2120      	movs	r1, #32
 8004f68:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7ff f9cc 	bl	8004310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b002      	add	sp, #8
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f88:	230e      	movs	r3, #14
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	2160      	movs	r1, #96	; 0x60
 8004f90:	5a52      	ldrh	r2, [r2, r1]
 8004f92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2288      	movs	r2, #136	; 0x88
 8004f98:	589b      	ldr	r3, [r3, r2]
 8004f9a:	2b22      	cmp	r3, #34	; 0x22
 8004f9c:	d159      	bne.n	8005052 <UART_RxISR_8BIT+0xd2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa4:	210c      	movs	r1, #12
 8004fa6:	187b      	adds	r3, r7, r1
 8004fa8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	230e      	movs	r3, #14
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b2d9      	uxtb	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	225e      	movs	r2, #94	; 0x5e
 8004fd0:	5a9b      	ldrh	r3, [r3, r2]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b299      	uxth	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	225e      	movs	r2, #94	; 0x5e
 8004fdc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	225e      	movs	r2, #94	; 0x5e
 8004fe2:	5a9b      	ldrh	r3, [r3, r2]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d13b      	bne.n	8005062 <UART_RxISR_8BIT+0xe2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	491d      	ldr	r1, [pc, #116]	; (800506c <UART_RxISR_8BIT+0xec>)
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2101      	movs	r1, #1
 8005006:	438a      	bics	r2, r1
 8005008:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2288      	movs	r2, #136	; 0x88
 800500e:	2120      	movs	r1, #32
 8005010:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d110      	bne.n	8005042 <UART_RxISR_8BIT+0xc2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2110      	movs	r1, #16
 800502c:	438a      	bics	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	225c      	movs	r2, #92	; 0x5c
 8005034:	5a9a      	ldrh	r2, [r3, r2]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	0011      	movs	r1, r2
 800503a:	0018      	movs	r0, r3
 800503c:	f7ff f980 	bl	8004340 <HAL_UARTEx_RxEventCallback>
 8005040:	e003      	b.n	800504a <UART_RxISR_8BIT+0xca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0018      	movs	r0, r3
 8005046:	f7fc f85b 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005050:	e007      	b.n	8005062 <UART_RxISR_8BIT+0xe2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2108      	movs	r1, #8
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	b004      	add	sp, #16
 8005068:	bd80      	pop	{r7, pc}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	fffffedf 	.word	0xfffffedf

08005070 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005078:	230e      	movs	r3, #14
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	2160      	movs	r1, #96	; 0x60
 8005080:	5a52      	ldrh	r2, [r2, r1]
 8005082:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2288      	movs	r2, #136	; 0x88
 8005088:	589b      	ldr	r3, [r3, r2]
 800508a:	2b22      	cmp	r3, #34	; 0x22
 800508c:	d159      	bne.n	8005142 <UART_RxISR_16BIT+0xd2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005094:	210c      	movs	r1, #12
 8005096:	187b      	adds	r3, r7, r1
 8005098:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	220e      	movs	r2, #14
 80050a4:	18ba      	adds	r2, r7, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	4013      	ands	r3, r2
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	1c9a      	adds	r2, r3, #2
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	225e      	movs	r2, #94	; 0x5e
 80050c0:	5a9b      	ldrh	r3, [r3, r2]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b299      	uxth	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	225e      	movs	r2, #94	; 0x5e
 80050cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	225e      	movs	r2, #94	; 0x5e
 80050d2:	5a9b      	ldrh	r3, [r3, r2]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d13b      	bne.n	8005152 <UART_RxISR_16BIT+0xe2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	491d      	ldr	r1, [pc, #116]	; (800515c <UART_RxISR_16BIT+0xec>)
 80050e6:	400a      	ands	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	438a      	bics	r2, r1
 80050f8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2288      	movs	r2, #136	; 0x88
 80050fe:	2120      	movs	r1, #32
 8005100:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d110      	bne.n	8005132 <UART_RxISR_16BIT+0xc2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2110      	movs	r1, #16
 800511c:	438a      	bics	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	225c      	movs	r2, #92	; 0x5c
 8005124:	5a9a      	ldrh	r2, [r3, r2]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	0011      	movs	r1, r2
 800512a:	0018      	movs	r0, r3
 800512c:	f7ff f908 	bl	8004340 <HAL_UARTEx_RxEventCallback>
 8005130:	e003      	b.n	800513a <UART_RxISR_16BIT+0xca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0018      	movs	r0, r3
 8005136:	f7fb ffe3 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005140:	e007      	b.n	8005152 <UART_RxISR_16BIT+0xe2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2108      	movs	r1, #8
 800514e:	430a      	orrs	r2, r1
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b004      	add	sp, #16
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	fffffedf 	.word	0xfffffedf

08005160 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005168:	231a      	movs	r3, #26
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	2160      	movs	r1, #96	; 0x60
 8005170:	5a52      	ldrh	r2, [r2, r1]
 8005172:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2288      	movs	r2, #136	; 0x88
 8005190:	589b      	ldr	r3, [r3, r2]
 8005192:	2b22      	cmp	r3, #34	; 0x22
 8005194:	d000      	beq.n	8005198 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005196:	e0e1      	b.n	800535c <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005198:	230e      	movs	r3, #14
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	2168      	movs	r1, #104	; 0x68
 80051a0:	5a52      	ldrh	r2, [r2, r1]
 80051a2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051a4:	e0aa      	b.n	80052fc <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ac:	210c      	movs	r1, #12
 80051ae:	187b      	adds	r3, r7, r1
 80051b0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	231a      	movs	r3, #26
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b2d9      	uxtb	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	400a      	ands	r2, r1
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	225e      	movs	r2, #94	; 0x5e
 80051d8:	5a9b      	ldrh	r3, [r3, r2]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b299      	uxth	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	225e      	movs	r2, #94	; 0x5e
 80051e4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2207      	movs	r2, #7
 80051f2:	4013      	ands	r3, r2
 80051f4:	d049      	beq.n	800528a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2201      	movs	r2, #1
 80051fa:	4013      	ands	r3, r2
 80051fc:	d010      	beq.n	8005220 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4013      	ands	r3, r2
 8005206:	d00b      	beq.n	8005220 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2201      	movs	r2, #1
 800520e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	228c      	movs	r2, #140	; 0x8c
 8005214:	589b      	ldr	r3, [r3, r2]
 8005216:	2201      	movs	r2, #1
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	218c      	movs	r1, #140	; 0x8c
 800521e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2202      	movs	r2, #2
 8005224:	4013      	ands	r3, r2
 8005226:	d00f      	beq.n	8005248 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2201      	movs	r2, #1
 800522c:	4013      	ands	r3, r2
 800522e:	d00b      	beq.n	8005248 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2202      	movs	r2, #2
 8005236:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	228c      	movs	r2, #140	; 0x8c
 800523c:	589b      	ldr	r3, [r3, r2]
 800523e:	2204      	movs	r2, #4
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	218c      	movs	r1, #140	; 0x8c
 8005246:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2204      	movs	r2, #4
 800524c:	4013      	ands	r3, r2
 800524e:	d00f      	beq.n	8005270 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2201      	movs	r2, #1
 8005254:	4013      	ands	r3, r2
 8005256:	d00b      	beq.n	8005270 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2204      	movs	r2, #4
 800525e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	228c      	movs	r2, #140	; 0x8c
 8005264:	589b      	ldr	r3, [r3, r2]
 8005266:	2202      	movs	r2, #2
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	218c      	movs	r1, #140	; 0x8c
 800526e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	228c      	movs	r2, #140	; 0x8c
 8005274:	589b      	ldr	r3, [r3, r2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	0018      	movs	r0, r3
 800527e:	f7ff f84f 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	228c      	movs	r2, #140	; 0x8c
 8005286:	2100      	movs	r1, #0
 8005288:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	225e      	movs	r2, #94	; 0x5e
 800528e:	5a9b      	ldrh	r3, [r3, r2]
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d132      	bne.n	80052fc <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4934      	ldr	r1, [pc, #208]	; (8005374 <UART_RxISR_8BIT_FIFOEN+0x214>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4931      	ldr	r1, [pc, #196]	; (8005378 <UART_RxISR_8BIT_FIFOEN+0x218>)
 80052b2:	400a      	ands	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2288      	movs	r2, #136	; 0x88
 80052ba:	2120      	movs	r1, #32
 80052bc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d110      	bne.n	80052ee <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2110      	movs	r1, #16
 80052d8:	438a      	bics	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	225c      	movs	r2, #92	; 0x5c
 80052e0:	5a9a      	ldrh	r2, [r3, r2]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0011      	movs	r1, r2
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7ff f82a 	bl	8004340 <HAL_UARTEx_RxEventCallback>
 80052ec:	e003      	b.n	80052f6 <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7fb ff05 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052fc:	230e      	movs	r3, #14
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2220      	movs	r2, #32
 800530a:	4013      	ands	r3, r2
 800530c:	d000      	beq.n	8005310 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 800530e:	e74a      	b.n	80051a6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005310:	200a      	movs	r0, #10
 8005312:	183b      	adds	r3, r7, r0
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	215e      	movs	r1, #94	; 0x5e
 8005318:	5a52      	ldrh	r2, [r2, r1]
 800531a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800531c:	183b      	adds	r3, r7, r0
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d023      	beq.n	800536c <UART_RxISR_8BIT_FIFOEN+0x20c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2268      	movs	r2, #104	; 0x68
 8005328:	5a9b      	ldrh	r3, [r3, r2]
 800532a:	220a      	movs	r2, #10
 800532c:	18ba      	adds	r2, r7, r2
 800532e:	8812      	ldrh	r2, [r2, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d21b      	bcs.n	800536c <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	490f      	ldr	r1, [pc, #60]	; (800537c <UART_RxISR_8BIT_FIFOEN+0x21c>)
 8005340:	400a      	ands	r2, r1
 8005342:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <UART_RxISR_8BIT_FIFOEN+0x220>)
 8005348:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2120      	movs	r1, #32
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800535a:	e007      	b.n	800536c <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2108      	movs	r1, #8
 8005368:	430a      	orrs	r2, r1
 800536a:	619a      	str	r2, [r3, #24]
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b008      	add	sp, #32
 8005372:	bd80      	pop	{r7, pc}
 8005374:	fffffeff 	.word	0xfffffeff
 8005378:	effffffe 	.word	0xeffffffe
 800537c:	efffffff 	.word	0xefffffff
 8005380:	08004f81 	.word	0x08004f81

08005384 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800538c:	2322      	movs	r3, #34	; 0x22
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	2160      	movs	r1, #96	; 0x60
 8005394:	5a52      	ldrh	r2, [r2, r1]
 8005396:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2288      	movs	r2, #136	; 0x88
 80053b4:	589b      	ldr	r3, [r3, r2]
 80053b6:	2b22      	cmp	r3, #34	; 0x22
 80053b8:	d000      	beq.n	80053bc <UART_RxISR_16BIT_FIFOEN+0x38>
 80053ba:	e0e1      	b.n	8005580 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80053bc:	2316      	movs	r3, #22
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	2168      	movs	r1, #104	; 0x68
 80053c4:	5a52      	ldrh	r2, [r2, r1]
 80053c6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053c8:	e0aa      	b.n	8005520 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053d0:	2114      	movs	r1, #20
 80053d2:	187b      	adds	r3, r7, r1
 80053d4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	2222      	movs	r2, #34	; 0x22
 80053e0:	18ba      	adds	r2, r7, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	8812      	ldrh	r2, [r2, #0]
 80053e6:	4013      	ands	r3, r2
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	1c9a      	adds	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	225e      	movs	r2, #94	; 0x5e
 80053fc:	5a9b      	ldrh	r3, [r3, r2]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b299      	uxth	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	225e      	movs	r2, #94	; 0x5e
 8005408:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	2207      	movs	r2, #7
 8005416:	4013      	ands	r3, r2
 8005418:	d049      	beq.n	80054ae <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	2201      	movs	r2, #1
 800541e:	4013      	ands	r3, r2
 8005420:	d010      	beq.n	8005444 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4013      	ands	r3, r2
 800542a:	d00b      	beq.n	8005444 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2201      	movs	r2, #1
 8005432:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	228c      	movs	r2, #140	; 0x8c
 8005438:	589b      	ldr	r3, [r3, r2]
 800543a:	2201      	movs	r2, #1
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	218c      	movs	r1, #140	; 0x8c
 8005442:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	2202      	movs	r2, #2
 8005448:	4013      	ands	r3, r2
 800544a:	d00f      	beq.n	800546c <UART_RxISR_16BIT_FIFOEN+0xe8>
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2201      	movs	r2, #1
 8005450:	4013      	ands	r3, r2
 8005452:	d00b      	beq.n	800546c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2202      	movs	r2, #2
 800545a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	228c      	movs	r2, #140	; 0x8c
 8005460:	589b      	ldr	r3, [r3, r2]
 8005462:	2204      	movs	r2, #4
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	218c      	movs	r1, #140	; 0x8c
 800546a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	2204      	movs	r2, #4
 8005470:	4013      	ands	r3, r2
 8005472:	d00f      	beq.n	8005494 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2201      	movs	r2, #1
 8005478:	4013      	ands	r3, r2
 800547a:	d00b      	beq.n	8005494 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2204      	movs	r2, #4
 8005482:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	228c      	movs	r2, #140	; 0x8c
 8005488:	589b      	ldr	r3, [r3, r2]
 800548a:	2202      	movs	r2, #2
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	218c      	movs	r1, #140	; 0x8c
 8005492:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	228c      	movs	r2, #140	; 0x8c
 8005498:	589b      	ldr	r3, [r3, r2]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0018      	movs	r0, r3
 80054a2:	f7fe ff3d 	bl	8004320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	228c      	movs	r2, #140	; 0x8c
 80054aa:	2100      	movs	r1, #0
 80054ac:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	225e      	movs	r2, #94	; 0x5e
 80054b2:	5a9b      	ldrh	r3, [r3, r2]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d132      	bne.n	8005520 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4934      	ldr	r1, [pc, #208]	; (8005598 <UART_RxISR_16BIT_FIFOEN+0x214>)
 80054c6:	400a      	ands	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4931      	ldr	r1, [pc, #196]	; (800559c <UART_RxISR_16BIT_FIFOEN+0x218>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2288      	movs	r2, #136	; 0x88
 80054de:	2120      	movs	r1, #32
 80054e0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d110      	bne.n	8005512 <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2110      	movs	r1, #16
 80054fc:	438a      	bics	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	225c      	movs	r2, #92	; 0x5c
 8005504:	5a9a      	ldrh	r2, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0011      	movs	r1, r2
 800550a:	0018      	movs	r0, r3
 800550c:	f7fe ff18 	bl	8004340 <HAL_UARTEx_RxEventCallback>
 8005510:	e003      	b.n	800551a <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	0018      	movs	r0, r3
 8005516:	f7fb fdf3 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005520:	2316      	movs	r3, #22
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	2220      	movs	r2, #32
 800552e:	4013      	ands	r3, r2
 8005530:	d000      	beq.n	8005534 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8005532:	e74a      	b.n	80053ca <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005534:	200e      	movs	r0, #14
 8005536:	183b      	adds	r3, r7, r0
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	215e      	movs	r1, #94	; 0x5e
 800553c:	5a52      	ldrh	r2, [r2, r1]
 800553e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005540:	183b      	adds	r3, r7, r0
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d023      	beq.n	8005590 <UART_RxISR_16BIT_FIFOEN+0x20c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2268      	movs	r2, #104	; 0x68
 800554c:	5a9b      	ldrh	r3, [r3, r2]
 800554e:	220e      	movs	r2, #14
 8005550:	18ba      	adds	r2, r7, r2
 8005552:	8812      	ldrh	r2, [r2, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d21b      	bcs.n	8005590 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	490f      	ldr	r1, [pc, #60]	; (80055a0 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8005564:	400a      	ands	r2, r1
 8005566:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <UART_RxISR_16BIT_FIFOEN+0x220>)
 800556c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2120      	movs	r1, #32
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800557e:	e007      	b.n	8005590 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2108      	movs	r1, #8
 800558c:	430a      	orrs	r2, r1
 800558e:	619a      	str	r2, [r3, #24]
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b00a      	add	sp, #40	; 0x28
 8005596:	bd80      	pop	{r7, pc}
 8005598:	fffffeff 	.word	0xfffffeff
 800559c:	effffffe 	.word	0xeffffffe
 80055a0:	efffffff 	.word	0xefffffff
 80055a4:	08005071 	.word	0x08005071

080055a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b002      	add	sp, #8
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055d0:	46c0      	nop			; (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2280      	movs	r2, #128	; 0x80
 80055e4:	5c9b      	ldrb	r3, [r3, r2]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_UARTEx_DisableFifoMode+0x16>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e027      	b.n	800563e <HAL_UARTEx_DisableFifoMode+0x66>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	2101      	movs	r1, #1
 80055f4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2284      	movs	r2, #132	; 0x84
 80055fa:	2124      	movs	r1, #36	; 0x24
 80055fc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	438a      	bics	r2, r1
 8005614:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <HAL_UARTEx_DisableFifoMode+0x70>)
 800561a:	4013      	ands	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2284      	movs	r2, #132	; 0x84
 8005630:	2120      	movs	r1, #32
 8005632:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	2100      	movs	r1, #0
 800563a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b004      	add	sp, #16
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	dfffffff 	.word	0xdfffffff

0800564c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	5c9b      	ldrb	r3, [r3, r2]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005660:	2302      	movs	r3, #2
 8005662:	e02e      	b.n	80056c2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2280      	movs	r2, #128	; 0x80
 8005668:	2101      	movs	r1, #1
 800566a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2284      	movs	r2, #132	; 0x84
 8005670:	2124      	movs	r1, #36	; 0x24
 8005672:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2101      	movs	r1, #1
 8005688:	438a      	bics	r2, r1
 800568a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	08d9      	lsrs	r1, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 f854 	bl	8005750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2284      	movs	r2, #132	; 0x84
 80056b4:	2120      	movs	r1, #32
 80056b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	2100      	movs	r1, #0
 80056be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	0018      	movs	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b004      	add	sp, #16
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2280      	movs	r2, #128	; 0x80
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e02f      	b.n	8005744 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	2101      	movs	r1, #1
 80056ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2284      	movs	r2, #132	; 0x84
 80056f0:	2124      	movs	r1, #36	; 0x24
 80056f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2101      	movs	r1, #1
 8005708:	438a      	bics	r2, r1
 800570a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4a0e      	ldr	r2, [pc, #56]	; (800574c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005714:	4013      	ands	r3, r2
 8005716:	0019      	movs	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0018      	movs	r0, r3
 8005726:	f000 f813 	bl	8005750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2284      	movs	r2, #132	; 0x84
 8005736:	2120      	movs	r1, #32
 8005738:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	2100      	movs	r1, #0
 8005740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	0018      	movs	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	b004      	add	sp, #16
 800574a:	bd80      	pop	{r7, pc}
 800574c:	f1ffffff 	.word	0xf1ffffff

08005750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005758:	2314      	movs	r3, #20
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	4a2f      	ldr	r2, [pc, #188]	; (800581c <UARTEx_SetNbDataToProcess+0xcc>)
 800575e:	ca03      	ldmia	r2!, {r0, r1}
 8005760:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005762:	230c      	movs	r3, #12
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	4a2e      	ldr	r2, [pc, #184]	; (8005820 <UARTEx_SetNbDataToProcess+0xd0>)
 8005768:	ca03      	ldmia	r2!, {r0, r1}
 800576a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005770:	2b00      	cmp	r3, #0
 8005772:	d108      	bne.n	8005786 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	226a      	movs	r2, #106	; 0x6a
 8005778:	2101      	movs	r1, #1
 800577a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2268      	movs	r2, #104	; 0x68
 8005780:	2101      	movs	r1, #1
 8005782:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005784:	e046      	b.n	8005814 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005786:	261f      	movs	r6, #31
 8005788:	19bb      	adds	r3, r7, r6
 800578a:	2208      	movs	r2, #8
 800578c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800578e:	201e      	movs	r0, #30
 8005790:	183b      	adds	r3, r7, r0
 8005792:	2208      	movs	r2, #8
 8005794:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	0e5b      	lsrs	r3, r3, #25
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	241d      	movs	r4, #29
 80057a2:	193b      	adds	r3, r7, r4
 80057a4:	2107      	movs	r1, #7
 80057a6:	400a      	ands	r2, r1
 80057a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	0f5b      	lsrs	r3, r3, #29
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	251c      	movs	r5, #28
 80057b6:	197b      	adds	r3, r7, r5
 80057b8:	2107      	movs	r1, #7
 80057ba:	400a      	ands	r2, r1
 80057bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057be:	183b      	adds	r3, r7, r0
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	197a      	adds	r2, r7, r5
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	2114      	movs	r1, #20
 80057c8:	1879      	adds	r1, r7, r1
 80057ca:	5c8a      	ldrb	r2, [r1, r2]
 80057cc:	435a      	muls	r2, r3
 80057ce:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80057d0:	197b      	adds	r3, r7, r5
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	250c      	movs	r5, #12
 80057d6:	197a      	adds	r2, r7, r5
 80057d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057da:	0019      	movs	r1, r3
 80057dc:	f7fa fd1e 	bl	800021c <__divsi3>
 80057e0:	0003      	movs	r3, r0
 80057e2:	b299      	uxth	r1, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	226a      	movs	r2, #106	; 0x6a
 80057e8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ea:	19bb      	adds	r3, r7, r6
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	193a      	adds	r2, r7, r4
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	2114      	movs	r1, #20
 80057f4:	1879      	adds	r1, r7, r1
 80057f6:	5c8a      	ldrb	r2, [r1, r2]
 80057f8:	435a      	muls	r2, r3
 80057fa:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80057fc:	193b      	adds	r3, r7, r4
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	197a      	adds	r2, r7, r5
 8005802:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005804:	0019      	movs	r1, r3
 8005806:	f7fa fd09 	bl	800021c <__divsi3>
 800580a:	0003      	movs	r3, r0
 800580c:	b299      	uxth	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2268      	movs	r2, #104	; 0x68
 8005812:	5299      	strh	r1, [r3, r2]
}
 8005814:	46c0      	nop			; (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	b009      	add	sp, #36	; 0x24
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581c:	08005894 	.word	0x08005894
 8005820:	0800589c 	.word	0x0800589c

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	2600      	movs	r6, #0
 8005828:	4d0c      	ldr	r5, [pc, #48]	; (800585c <__libc_init_array+0x38>)
 800582a:	4c0d      	ldr	r4, [pc, #52]	; (8005860 <__libc_init_array+0x3c>)
 800582c:	1b64      	subs	r4, r4, r5
 800582e:	10a4      	asrs	r4, r4, #2
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	2600      	movs	r6, #0
 8005836:	f000 f821 	bl	800587c <_init>
 800583a:	4d0a      	ldr	r5, [pc, #40]	; (8005864 <__libc_init_array+0x40>)
 800583c:	4c0a      	ldr	r4, [pc, #40]	; (8005868 <__libc_init_array+0x44>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	00b3      	lsls	r3, r6, #2
 800584a:	58eb      	ldr	r3, [r5, r3]
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	00b3      	lsls	r3, r6, #2
 8005854:	58eb      	ldr	r3, [r5, r3]
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	08005924 	.word	0x08005924
 8005860:	08005924 	.word	0x08005924
 8005864:	08005924 	.word	0x08005924
 8005868:	08005928 	.word	0x08005928

0800586c <memset>:
 800586c:	0003      	movs	r3, r0
 800586e:	1812      	adds	r2, r2, r0
 8005870:	4293      	cmp	r3, r2
 8005872:	d100      	bne.n	8005876 <memset+0xa>
 8005874:	4770      	bx	lr
 8005876:	7019      	strb	r1, [r3, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	e7f9      	b.n	8005870 <memset+0x4>

0800587c <_init>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr

08005888 <_fini>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr
