
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005928  08005928  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005930  08005930  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000034  0800596c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800596c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c607  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243b  00000000  00000000  0002c663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189bb  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d121  00000000  00000000  00048aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd35  00000000  00000000  00055bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f38f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000287c  00000000  00000000  000f394c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005888 	.word	0x08005888

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	08005888 	.word	0x08005888

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fdd7 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f833 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f9bd 	bl	80009ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000632:	f000 f995 	bl	8000960 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000636:	f000 f911 	bl	800085c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800063a:	f000 f95d 	bl	80008f8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800063e:	f000 f8a3 	bl	8000788 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  receiveIT();
 8000642:	f000 fc97 	bl	8000f74 <receiveIT>
  uint8_t ledState = 0;
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Process commands as they come in
	  if (cmdReady()) {
 800064c:	f000 fcb6 	bl	8000fbc <cmdReady>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d0fb      	beq.n	800064c <main+0x2c>
		  abortIT();
 8000654:	f000 fc7c 	bl	8000f50 <abortIT>
		  processCommand();
 8000658:	f000 fd2a 	bl	80010b0 <processCommand>
		  receiveIT();
 800065c:	f000 fc8a 	bl	8000f74 <receiveIT>
		  if (ledState) {
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <main+0x5c>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <main+0x70>)
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	0018      	movs	r0, r3
 8000670:	f002 fa22 	bl	8002ab8 <HAL_GPIO_WritePin>
			  ledState = 0;
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e7e7      	b.n	800064c <main+0x2c>
		  } else {
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <main+0x70>)
 800067e:	2201      	movs	r2, #1
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	0018      	movs	r0, r3
 8000684:	f002 fa18 	bl	8002ab8 <HAL_GPIO_WritePin>
			  ledState = 1;
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
	  if (cmdReady()) {
 800068e:	e7dd      	b.n	800064c <main+0x2c>
 8000690:	50000800 	.word	0x50000800

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b0a1      	sub	sp, #132	; 0x84
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2448      	movs	r4, #72	; 0x48
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2338      	movs	r3, #56	; 0x38
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f005 f8e7 	bl	8005878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	2338      	movs	r3, #56	; 0x38
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	0018      	movs	r0, r3
 80006b0:	2310      	movs	r3, #16
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f005 f8df 	bl	8005878 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ba:	003b      	movs	r3, r7
 80006bc:	0018      	movs	r0, r3
 80006be:	2338      	movs	r3, #56	; 0x38
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f005 f8d8 	bl	8005878 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 fa11 	bl	8002af4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2202      	movs	r2, #2
 80006d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2240      	movs	r2, #64	; 0x40
 80006ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2202      	movs	r2, #2
 80006f2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2208      	movs	r2, #8
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0292      	lsls	r2, r2, #10
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0492      	lsls	r2, r2, #18
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0592      	lsls	r2, r2, #22
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	187b      	adds	r3, r7, r1
 8000720:	0018      	movs	r0, r3
 8000722:	f002 fa33 	bl	8002b8c <HAL_RCC_OscConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f9a7 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	2138      	movs	r1, #56	; 0x38
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2207      	movs	r2, #7
 8000734:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2202      	movs	r2, #2
 800073a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2102      	movs	r1, #2
 800074c:	0018      	movs	r0, r3
 800074e:	f002 fd3d 	bl	80031cc <HAL_RCC_ClockConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 f991 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 800075a:	003b      	movs	r3, r7
 800075c:	4a09      	ldr	r2, [pc, #36]	; (8000784 <SystemClock_Config+0xf0>)
 800075e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	003b      	movs	r3, r7
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fed6 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000778:	f000 f980 	bl	8000a7c <Error_Handler>
  }
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b021      	add	sp, #132	; 0x84
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	00004001 	.word	0x00004001

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	0018      	movs	r0, r3
 8000792:	230c      	movs	r3, #12
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f005 f86e 	bl	8005878 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_ADC1_Init+0xcc>)
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	05d2      	lsls	r2, r2, #23
 80007a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007be:	2204      	movs	r2, #4
 80007c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007dc:	2220      	movs	r2, #32
 80007de:	2100      	movs	r1, #0
 80007e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007f0:	222c      	movs	r2, #44	; 0x2c
 80007f2:	2100      	movs	r1, #0
 80007f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_ADC1_Init+0xcc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_ADC1_Init+0xcc>)
 8000804:	2200      	movs	r2, #0
 8000806:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_ADC1_Init+0xcc>)
 800080a:	223c      	movs	r2, #60	; 0x3c
 800080c:	2100      	movs	r1, #0
 800080e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_ADC1_Init+0xcc>)
 8000812:	2200      	movs	r2, #0
 8000814:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_ADC1_Init+0xcc>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fecb 	bl	80015b4 <HAL_ADC_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000822:	f000 f92b 	bl	8000a7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_ADC1_Init+0xcc>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f9b4 	bl	8001bac <HAL_ADC_ConfigChannel>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000848:	f000 f918 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b004      	add	sp, #16
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000050 	.word	0x20000050
 8000858:	40012400 	.word	0x40012400

0800085c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000862:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <MX_USART1_UART_Init+0x98>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000868:	22e1      	movs	r2, #225	; 0xe1
 800086a:	0252      	lsls	r2, r2, #9
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f003 f812 	bl	80038d0 <HAL_UART_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f8e4 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	0018      	movs	r0, r3
 80008ba:	f004 fecd 	bl	8005658 <HAL_UARTEx_SetTxFifoThreshold>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f8db 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008c8:	2100      	movs	r1, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f004 ff04 	bl	80056d8 <HAL_UARTEx_SetRxFifoThreshold>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f8d2 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f004 fe82 	bl	80055e4 <HAL_UARTEx_DisableFifoMode>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f8ca 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200000b4 	.word	0x200000b4
 80008f4:	40013800 	.word	0x40013800

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_USART3_UART_Init+0x60>)
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_USART3_UART_Init+0x64>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_USART3_UART_Init+0x60>)
 8000904:	22e1      	movs	r2, #225	; 0xe1
 8000906:	0252      	lsls	r2, r2, #9
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART3_UART_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART3_UART_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART3_UART_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART3_UART_Init+0x60>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_USART3_UART_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART3_UART_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_USART3_UART_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART3_UART_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_USART3_UART_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <MX_USART3_UART_Init+0x60>)
 8000942:	0018      	movs	r0, r3
 8000944:	f002 ffc4 	bl	80038d0 <HAL_UART_Init>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 f896 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	20000144 	.word	0x20000144
 800095c:	40004800 	.word	0x40004800

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_DMA_Init+0x48>)
 8000968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_DMA_Init+0x48>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	639a      	str	r2, [r3, #56]	; 0x38
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_DMA_Init+0x48>)
 8000974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2009      	movs	r0, #9
 8000984:	f001 fcaa 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000988:	2009      	movs	r0, #9
 800098a:	f001 fcbc 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	200a      	movs	r0, #10
 8000994:	f001 fca2 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 fcb4 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	240c      	movs	r4, #12
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	2314      	movs	r3, #20
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f004 ff5b 	bl	8005878 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009c8:	2102      	movs	r1, #2
 80009ca:	430a      	orrs	r2, r1
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d2:	2202      	movs	r2, #2
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_GPIO_Init+0x98>)
 80009f8:	2104      	movs	r1, #4
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_GPIO_Init+0x98>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	2204      	movs	r2, #4
 8000a04:	4013      	ands	r3, r2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_GPIO_Init+0x9c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2140      	movs	r1, #64	; 0x40
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 f851 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a16:	0021      	movs	r1, r4
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2240      	movs	r2, #64	; 0x40
 8000a1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2201      	movs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <MX_GPIO_Init+0x9c>)
 8000a34:	0019      	movs	r1, r3
 8000a36:	0010      	movs	r0, r2
 8000a38:	f001 feda 	bl	80027f0 <HAL_GPIO_Init>

}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b009      	add	sp, #36	; 0x24
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	50000800 	.word	0x50000800

08000a4c <getADCPtr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* getADCPtr() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	return &hadc1;
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <getADCPtr+0xc>)
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000050 	.word	0x20000050

08000a5c <getUFP>:
UART_HandleTypeDef* getUFP() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	return &huart1;
 8000a60:	4b01      	ldr	r3, [pc, #4]	; (8000a68 <getUFP+0xc>)
}
 8000a62:	0018      	movs	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000b4 	.word	0x200000b4

08000a6c <getDFP>:
UART_HandleTypeDef* getDFP() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	return &huart3;
 8000a70:	4b01      	ldr	r3, [pc, #4]	; (8000a78 <getDFP+0xc>)
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000144 	.word	0x20000144

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>

08000a86 <mapSensor>:
		ADC_CHANNEL_8,
		ADC_CHANNEL_9,
};

// Maps the sensor index to the correct location
uint8_t mapSensor(uint8_t idx) {
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	0002      	movs	r2, r0
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	701a      	strb	r2, [r3, #0]
#ifndef REVERSE_ORDER
	if (idx == 0) {
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <mapSensor+0x18>
		return 4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	e00a      	b.n	8000ab4 <mapSensor+0x2e>
	} else if (idx < 5) {
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d804      	bhi.n	8000ab0 <mapSensor+0x2a>
		return idx - 1;
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	e001      	b.n	8000ab4 <mapSensor+0x2e>
	} else {
		return idx;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
		return 10 - idx;
	} else {
		return 9 - idx;
	}
#endif
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <getNewReadings>:


//. collect new readings from the sensors
uint16_t* getNewReadings()
{
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	e013      	b.n	8000af0 <getNewReadings+0x34>
		prev_readings[mapSensor(sensor)] = readSensor(sensor);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	b2dc      	uxtb	r4, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff ffd8 	bl	8000a86 <mapSensor>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	001d      	movs	r5, r3
 8000ada:	0020      	movs	r0, r4
 8000adc:	f000 f81a 	bl	8000b14 <readSensor>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <getNewReadings+0x44>)
 8000ae6:	006a      	lsls	r2, r5, #1
 8000ae8:	52d1      	strh	r1, [r2, r3]
	for (int sensor = 0; sensor < NUM_SENSORS; sensor++) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	dde8      	ble.n	8000ac8 <getNewReadings+0xc>
	}
	return prev_readings;
 8000af6:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <getNewReadings+0x44>)
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bdb0      	pop	{r4, r5, r7, pc}
 8000b00:	2000028c 	.word	0x2000028c

08000b04 <getLastReadings>:


// retrieve most recent sensor readings
uint16_t* getLastReadings() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	return prev_readings;
 8000b08:	4b01      	ldr	r3, [pc, #4]	; (8000b10 <getLastReadings+0xc>)
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000028c 	.word	0x2000028c

08000b14 <readSensor>:

uint16_t readSensor(uint8_t sensor) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	701a      	strb	r2, [r3, #0]
	return readADC(ADC_channels[sensor]);;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <readSensor+0x28>)
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	58d3      	ldr	r3, [r2, r3]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f808 	bl	8000b40 <readADC>
 8000b30:	0003      	movs	r3, r0
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000000 	.word	0x20000000

08000b40 <readADC>:


uint16_t readADC(uint32_t channel)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]


	ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8000b48:	240c      	movs	r4, #12
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	230c      	movs	r3, #12
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f004 fe90 	bl	8005878 <memset>
	ADC_HandleTypeDef *adcPtr = getADCPtr(); //this is a pointer to your hal_adc
 8000b58:	f7ff ff78 	bl	8000a4c <getADCPtr>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	61fb      	str	r3, [r7, #28]
	//this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

	//this picks the IR direction to choose the right ADC.
	sConfig.Channel = channel;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]

	// make sure everything was set up correctly
	if (HAL_ADC_ConfigChannel(adcPtr, &sConfig) != HAL_OK)
 8000b72:	193a      	adds	r2, r7, r4
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 f817 	bl	8001bac <HAL_ADC_ConfigChannel>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <readADC+0x46>
	{
		return 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e016      	b.n	8000bb4 <readADC+0x74>
	}

	HAL_ADC_Start(adcPtr);
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 feeb 	bl	8001964 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(adcPtr, 1);
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2101      	movs	r1, #1
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 ff70 	bl	8001a78 <HAL_ADC_PollForConversion>

	uint16_t val = HAL_ADC_GetValue(adcPtr);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fffa 	bl	8001b94 <HAL_ADC_GetValue>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	241a      	movs	r4, #26
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(adcPtr);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 ff28 	bl	8001a00 <HAL_ADC_Stop>

	return val;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	881b      	ldrh	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b009      	add	sp, #36	; 0x24
 8000bba:	bd90      	pop	{r4, r7, pc}

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	0549      	lsls	r1, r1, #21
 8000be4:	430a      	orrs	r2, r1
 8000be6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	055b      	lsls	r3, r3, #21
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fb72 	bl	80012e4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	2414      	movs	r4, #20
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 fe2a 	bl	8005878 <memset>
  if(hadc->Instance==ADC1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <HAL_ADC_MspInit+0xb4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d144      	bne.n	8000cb8 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0349      	lsls	r1, r1, #13
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	035b      	lsls	r3, r3, #13
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c68:	2102      	movs	r1, #2
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_ADC_MspInit+0xb8>)
 8000c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c72:	2202      	movs	r2, #2
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	22ff      	movs	r2, #255	; 0xff
 8000c7e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2203      	movs	r2, #3
 8000c84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	193a      	adds	r2, r7, r4
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fdab 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_ADC_MspInit+0xbc>)
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	0010      	movs	r0, r2
 8000cb4:	f001 fd9c 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b00b      	add	sp, #44	; 0x2c
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	40012400 	.word	0x40012400
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	50000400 	.word	0x50000400

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b08d      	sub	sp, #52	; 0x34
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	241c      	movs	r4, #28
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	2314      	movs	r3, #20
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f004 fdca 	bl	8005878 <memset>
  if(huart->Instance==USART1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a67      	ldr	r2, [pc, #412]	; (8000e88 <HAL_UART_MspInit+0x1bc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d161      	bne.n	8000db2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cee:	4b67      	ldr	r3, [pc, #412]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	01c9      	lsls	r1, r1, #7
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfc:	4b63      	ldr	r3, [pc, #396]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	01db      	lsls	r3, r3, #7
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	4b60      	ldr	r3, [pc, #384]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0e:	4b5f      	ldr	r3, [pc, #380]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000d10:	2102      	movs	r1, #2
 8000d12:	430a      	orrs	r2, r1
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
 8000d16:	4b5d      	ldr	r3, [pc, #372]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d22:	0021      	movs	r1, r4
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	22c0      	movs	r2, #192	; 0xc0
 8000d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	4a52      	ldr	r2, [pc, #328]	; (8000e90 <HAL_UART_MspInit+0x1c4>)
 8000d46:	0019      	movs	r1, r3
 8000d48:	0010      	movs	r0, r2
 8000d4a:	f001 fd51 	bl	80027f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000d4e:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d50:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <HAL_UART_MspInit+0x1cc>)
 8000d52:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d54:	4b4f      	ldr	r3, [pc, #316]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d56:	2233      	movs	r2, #51	; 0x33
 8000d58:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5a:	4b4e      	ldr	r3, [pc, #312]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d5c:	2210      	movs	r2, #16
 8000d5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6c:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d72:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d78:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7e:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d84:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f001 fada 	bl	8002340 <HAL_DMA_Init>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000d90:	f7ff fe74 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3f      	ldr	r2, [pc, #252]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d98:	679a      	str	r2, [r3, #120]	; 0x78
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <HAL_UART_MspInit+0x1c8>)
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	201b      	movs	r0, #27
 8000da6:	f001 fa99 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000daa:	201b      	movs	r0, #27
 8000dac:	f001 faab 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db0:	e066      	b.n	8000e80 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a39      	ldr	r2, [pc, #228]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d161      	bne.n	8000e80 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	02c9      	lsls	r1, r1, #11
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	02db      	lsls	r3, r3, #11
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000dde:	2102      	movs	r1, #2
 8000de0:	430a      	orrs	r2, r1
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <HAL_UART_MspInit+0x1c0>)
 8000de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de8:	2202      	movs	r2, #2
 8000dea:	4013      	ands	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000df0:	211c      	movs	r1, #28
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	22c0      	movs	r2, #192	; 0xc0
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2204      	movs	r2, #4
 8000e10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_UART_MspInit+0x1c4>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	f001 fce9 	bl	80027f0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000e22:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e26:	2237      	movs	r2, #55	; 0x37
 8000e28:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f001 fa72 	bl	8002340 <HAL_DMA_Init>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8000e60:	f7ff fe0c 	bl	8000a7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e68:	679a      	str	r2, [r3, #120]	; 0x78
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	201d      	movs	r0, #29
 8000e76:	f001 fa31 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f001 fa43 	bl	8002306 <HAL_NVIC_EnableIRQ>
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b00d      	add	sp, #52	; 0x34
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	50000400 	.word	0x50000400
 8000e94:	200001d4 	.word	0x200001d4
 8000e98:	4002001c 	.word	0x4002001c
 8000e9c:	40004800 	.word	0x40004800
 8000ea0:	20000230 	.word	0x20000230
 8000ea4:	40020008 	.word	0x40020008

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 f9ee 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <DMA1_Channel1_IRQHandler+0x14>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 fb84 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000230 	.word	0x20000230

08000ef0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 fb78 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	200001d4 	.word	0x200001d4

08000f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <USART1_IRQHandler+0x14>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f002 ffee 	bl	8003ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	200000b4 	.word	0x200000b4

08000f20 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <USART3_4_LPUART1_IRQHandler+0x14>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 ffe2 	bl	8003ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	20000144 	.word	0x20000144

08000f38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <SystemInit+0x14>)
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	0512      	lsls	r2, r2, #20
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <abortIT>:

// state of user LED on the board
uint8_t led_state = 0;


void abortIT() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(getUFP());
 8000f54:	f7ff fd82 	bl	8000a5c <getUFP>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 feee 	bl	8003d3c <HAL_UART_Abort_IT>
// Only receiver side receives interrupts from downstream boards
#if (POSITION_SIDE == SIDE_RECEIVER)
	HAL_UART_Abort_IT(getDFP());
 8000f60:	f7ff fd84 	bl	8000a6c <getDFP>
 8000f64:	0003      	movs	r3, r0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 fee8 	bl	8003d3c <HAL_UART_Abort_IT>
#endif
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <receiveIT>:

// initialize polling for data from UFP
void receiveIT() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	cmd_ready = 0;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <receiveIT+0x3c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	cmd = 0;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <receiveIT+0x40>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	abortIT();
 8000f84:	f7ff ffe4 	bl	8000f50 <abortIT>
	HAL_UART_Receive_IT(getUFP(), &cmd, 1);
 8000f88:	f7ff fd68 	bl	8000a5c <getUFP>
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <receiveIT+0x40>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	0019      	movs	r1, r3
 8000f92:	f002 fe91 	bl	8003cb8 <HAL_UART_Receive_IT>
// Only receiver side receives interrupts from downstream boards
// Downstream commands read new sensor values
#if (POSITION_SIDE == SIDE_RECEIVER)
	dfp_cmd = 0;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <receiveIT+0x44>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(getDFP(), &dfp_cmd, 1);
 8000f9c:	f7ff fd66 	bl	8000a6c <getDFP>
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <receiveIT+0x44>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	f002 fe87 	bl	8003cb8 <HAL_UART_Receive_IT>
#endif
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200002a0 	.word	0x200002a0
 8000fb4:	200002a1 	.word	0x200002a1
 8000fb8:	200002a2 	.word	0x200002a2

08000fbc <cmdReady>:
		return 0;
	}
}
#endif

uint8_t cmdReady() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	return cmd_ready;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <cmdReady+0x10>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	200002a0 	.word	0x200002a0

08000fd0 <sendACK>:

// Send ACK to UFP
void sendACK(UART_HandleTypeDef* huart) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	uint8_t data = ACK;
 8000fd8:	210f      	movs	r1, #15
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	222a      	movs	r2, #42	; 0x2a
 8000fde:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, &data, 1, SEND_TIMEOUT);
 8000fe0:	1879      	adds	r1, r7, r1
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f002 fcc8 	bl	800397c <HAL_UART_Transmit>
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <sendCommand>:

comm_stat_t sendCommand(UART_HandleTypeDef* huart, cmd_t cmd) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	000a      	movs	r2, r1
 8000ffe:	1cfb      	adds	r3, r7, #3
 8001000:	701a      	strb	r2, [r3, #0]
	// Retry if needed, then give up after too many attempts
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001002:	2317      	movs	r3, #23
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
	int numAttempts = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
	uint8_t rec = 0;
 800100e:	230f      	movs	r3, #15
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8001016:	e013      	b.n	8001040 <sendCommand+0x4c>
		// Transmit command
		HAL_UART_Transmit(huart, &cmd, sizeof(cmd), SEND_TIMEOUT);
 8001018:	1cf9      	adds	r1, r7, #3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	2302      	movs	r3, #2
 800101e:	2201      	movs	r2, #1
 8001020:	f002 fcac 	bl	800397c <HAL_UART_Transmit>
		// Wait for ACK
		ret = HAL_UART_Receive(huart, &rec, sizeof(rec), ACK_TIMEOUT);
 8001024:	2317      	movs	r3, #23
 8001026:	18fc      	adds	r4, r7, r3
 8001028:	230f      	movs	r3, #15
 800102a:	18f9      	adds	r1, r7, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	2302      	movs	r3, #2
 8001030:	2201      	movs	r2, #1
 8001032:	f002 fd4f 	bl	8003ad4 <HAL_UART_Receive>
 8001036:	0003      	movs	r3, r0
 8001038:	7023      	strb	r3, [r4, #0]
		numAttempts++;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3301      	adds	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
	while(ret != HAL_OK && numAttempts < MAX_ATTEMPTS) {
 8001040:	2317      	movs	r3, #23
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <sendCommand+0x5c>
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b04      	cmp	r3, #4
 800104e:	dde3      	ble.n	8001018 <sendCommand+0x24>
	}
	if (rec != ACK) {
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b2a      	cmp	r3, #42	; 0x2a
 8001058:	d001      	beq.n	800105e <sendCommand+0x6a>
		return COMM_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <sendCommand+0x6c>
	} else {
		return COMM_OK;
 800105e:	2300      	movs	r3, #0
	}
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b007      	add	sp, #28
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <insertReadingsToBuf>:

// Insert sensor readings to buffer
#if (POSITION_SIDE == SIDE_RECEIVER)
// Adds this boards readings into the send buffer (buffer 1)
void insertReadingsToBuf() {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	// Get most recent readings
	uint16_t* readings = getLastReadings();
 800106e:	f7ff fd49 	bl	8000b04 <getLastReadings>
 8001072:	0003      	movs	r3, r0
 8001074:	603b      	str	r3, [r7, #0]
	// Add data to the buffer
	for (int i = 0; i < SENSORS_PER_BOARD; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e00f      	b.n	800109c <insertReadingsToBuf+0x34>
		sensor_buf[i] = (uint8_t) (readings[i] / 16);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b29b      	uxth	r3, r3
 800108a:	b2d9      	uxtb	r1, r3
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <insertReadingsToBuf+0x44>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	1c0a      	adds	r2, r1, #0
 8001094:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SENSORS_PER_BOARD; i++) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3301      	adds	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b09      	cmp	r3, #9
 80010a0:	ddec      	ble.n	800107c <insertReadingsToBuf+0x14>
    // Update sensor activations (in utils.h)
	for (int i = 0; i < NUM_SENSORS; i++) {
		registerReading(i, sensor_buf[i]);
	}
    #endif
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200002a4 	.word	0x200002a4

080010b0 <processCommand>:
        * Only for receivers
    TODO: make these situations reality
*/

// Reads command from hub in order to see if action needs to be taken
HAL_StatusTypeDef processCommand() {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
	if (cmd == UPDATE_COMPLETE) {
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <processCommand+0xac>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d106      	bne.n	80010d2 <processCommand+0x22>
		sendACK(getUFP());
 80010c4:	f7ff fcca 	bl	8000a5c <getUFP>
 80010c8:	0003      	movs	r3, r0
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff ff80 	bl	8000fd0 <sendACK>
 80010d0:	e03e      	b.n	8001150 <processCommand+0xa0>
        #endif
		//// Send LED values to receiver hub when update is complete
        //#if (POSITION_SIDE == SIDE_EMITTER) 
        //sendLEDData();
        //#endif       
	} else if (cmd == SEND_SENSOR_DATA) {
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <processCommand+0xac>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d10d      	bne.n	80010f6 <processCommand+0x46>
        // Receiver side sends last sensed state
        #if (POSITION_SIDE == SIDE_RECEIVER)
            sendACK(getUFP());
 80010da:	f7ff fcbf 	bl	8000a5c <getUFP>
 80010de:	0003      	movs	r3, r0
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff ff75 	bl	8000fd0 <sendACK>
            #if (POSITION_TYPE == TYPE_HUB) // Hub sends activations to emitter hub
		    HAL_UART_Transmit(getUFP(), sensor_activations, NUM_SENSORS, SENSOR_UPDATE_TIMEOUT);
            #else // receiver sends sensor buf; NOTE: this should not get used at runtime
		    HAL_UART_Transmit(getUFP(), sensor_buf, NUM_SENSORS, SENSOR_UPDATE_TIMEOUT);
 80010e6:	f7ff fcb9 	bl	8000a5c <getUFP>
 80010ea:	491d      	ldr	r1, [pc, #116]	; (8001160 <processCommand+0xb0>)
 80010ec:	234b      	movs	r3, #75	; 0x4b
 80010ee:	220a      	movs	r2, #10
 80010f0:	f002 fc44 	bl	800397c <HAL_UART_Transmit>
 80010f4:	e02c      	b.n	8001150 <processCommand+0xa0>
            // Emitter side only sends if an object was sensed
		    // Send last known sense state back to hub
		    ret = HAL_UART_Transmit(getUFP(), &sense_state, sizeof(sense_state), SEND_TIMEOUT);
        #endif
#if (POSITION_SIDE == SIDE_RECEIVER)
	} else if (dfp_cmd == SENSOR_UPDATE) {
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <processCommand+0xb4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d128      	bne.n	8001150 <processCommand+0xa0>
		// Send ACK to dfp
		sendACK(getDFP());
 80010fe:	f7ff fcb5 	bl	8000a6c <getDFP>
 8001102:	0003      	movs	r3, r0
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff ff63 	bl	8000fd0 <sendACK>
		// Get updated sensor values from dfp
		ret = HAL_UART_Receive(getDFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
 800110a:	f7ff fcaf 	bl	8000a6c <getDFP>
 800110e:	1dfc      	adds	r4, r7, #7
 8001110:	4913      	ldr	r1, [pc, #76]	; (8001160 <processCommand+0xb0>)
 8001112:	234b      	movs	r3, #75	; 0x4b
 8001114:	220a      	movs	r2, #10
 8001116:	f002 fcdd 	bl	8003ad4 <HAL_UART_Receive>
 800111a:	0003      	movs	r3, r0
 800111c:	7023      	strb	r3, [r4, #0]
		// Get new readings
		getNewReadings();
 800111e:	f7ff fccd 	bl	8000abc <getNewReadings>
		// Scale all the sensor readings
		insertReadingsToBuf();
 8001122:	f7ff ffa1 	bl	8001068 <insertReadingsToBuf>
				sense_state = OBJECT_SENSED;
			}
		}
        #else // Non-hub sensor boards pass command to upstream board
		// Send update to downstream board
		comm_stat_t status = sendCommand(getUFP(), SENSOR_UPDATE);
 8001126:	f7ff fc99 	bl	8000a5c <getUFP>
 800112a:	0003      	movs	r3, r0
 800112c:	1dbc      	adds	r4, r7, #6
 800112e:	2106      	movs	r1, #6
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <sendCommand>
 8001136:	0003      	movs	r3, r0
 8001138:	7023      	strb	r3, [r4, #0]
		if (status == COMM_OK) {
 800113a:	1dbb      	adds	r3, r7, #6
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d106      	bne.n	8001150 <processCommand+0xa0>
			HAL_UART_Transmit(getUFP(), sensor_buf, sizeof(sensor_buf), SENSOR_UPDATE_TIMEOUT);
 8001142:	f7ff fc8b 	bl	8000a5c <getUFP>
 8001146:	4906      	ldr	r1, [pc, #24]	; (8001160 <processCommand+0xb0>)
 8001148:	234b      	movs	r3, #75	; 0x4b
 800114a:	220a      	movs	r2, #10
 800114c:	f002 fc16 	bl	800397c <HAL_UART_Transmit>
		}
        // Then would pass data on to downstream board in UPDATE_COMPLETE command
    #endif
#endif
	}
	return ret;
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	200002a1 	.word	0x200002a1
 8001160:	200002a4 	.word	0x200002a4
 8001164:	200002a2 	.word	0x200002a2

08001168 <HAL_UART_RxCpltCallback>:
	return status;
}
#endif

// Receive commands from hub
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	cmd_ready = 1;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_UART_RxCpltCallback+0x18>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	200002a0 	.word	0x200002a0

08001184 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001186:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001188:	f7ff fed6 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011b2:	f004 fb3d 	bl	8005830 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011b6:	f7ff fa33 	bl	8000620 <main>

080011ba <LoopForever>:

LoopForever:
  b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   r0, =_estack
 80011bc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80011c8:	08005938 	.word	0x08005938
  ldr r2, =_sbss
 80011cc:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80011d0:	200002b4 	.word	0x200002b4

080011d4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_COMP_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_Init+0x3c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Init+0x3c>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0049      	lsls	r1, r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f810 	bl	8001218 <HAL_InitTick>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d003      	beq.n	8001204 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e001      	b.n	8001208 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fcda 	bl	8000bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	230f      	movs	r3, #15
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_InitTick+0x88>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d02b      	beq.n	8001288 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_InitTick+0x8c>)
 8001232:	681c      	ldr	r4, [r3, #0]
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_InitTick+0x88>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	0019      	movs	r1, r3
 800123a:	23fa      	movs	r3, #250	; 0xfa
 800123c:	0098      	lsls	r0, r3, #2
 800123e:	f7fe ff63 	bl	8000108 <__udivsi3>
 8001242:	0003      	movs	r3, r0
 8001244:	0019      	movs	r1, r3
 8001246:	0020      	movs	r0, r4
 8001248:	f7fe ff5e 	bl	8000108 <__udivsi3>
 800124c:	0003      	movs	r3, r0
 800124e:	0018      	movs	r0, r3
 8001250:	f001 f869 	bl	8002326 <HAL_SYSTICK_Config>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d112      	bne.n	800127e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d80a      	bhi.n	8001274 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	425b      	negs	r3, r3
 8001264:	2200      	movs	r2, #0
 8001266:	0018      	movs	r0, r3
 8001268:	f001 f838 	bl	80022dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_InitTick+0x90>)
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e00d      	b.n	8001290 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e008      	b.n	8001290 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127e:	230f      	movs	r3, #15
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e003      	b.n	8001290 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b005      	add	sp, #20
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000030 	.word	0x20000030
 80012a4:	20000028 	.word	0x20000028
 80012a8:	2000002c 	.word	0x2000002c

080012ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x1c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	001a      	movs	r2, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x20>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	18d2      	adds	r2, r2, r3
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_IncTick+0x20>)
 80012be:	601a      	str	r2, [r3, #0]
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	20000030 	.word	0x20000030
 80012cc:	200002b0 	.word	0x200002b0

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <HAL_GetTick+0x10>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	200002b0 	.word	0x200002b0

080012e4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	40010000 	.word	0x40010000
 800130c:	fffff9ff 	.word	0xfffff9ff

08001310 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001320:	401a      	ands	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	fe3fffff 	.word	0xfe3fffff

08001338 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	23e0      	movs	r3, #224	; 0xe0
 8001346:	045b      	lsls	r3, r3, #17
 8001348:	4013      	ands	r3, r2
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}

08001352 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	2104      	movs	r1, #4
 8001366:	400a      	ands	r2, r1
 8001368:	2107      	movs	r1, #7
 800136a:	4091      	lsls	r1, r2
 800136c:	000a      	movs	r2, r1
 800136e:	43d2      	mvns	r2, r2
 8001370:	401a      	ands	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	2104      	movs	r1, #4
 8001376:	400b      	ands	r3, r1
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4099      	lsls	r1, r3
 800137c:	000b      	movs	r3, r1
 800137e:	431a      	orrs	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b004      	add	sp, #16
 800138a:	bd80      	pop	{r7, pc}

0800138c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	23c0      	movs	r3, #192	; 0xc0
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	4013      	ands	r3, r2
 800139e:	d101      	bne.n	80013a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}

080013ae <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	211f      	movs	r1, #31
 80013c2:	400a      	ands	r2, r1
 80013c4:	210f      	movs	r1, #15
 80013c6:	4091      	lsls	r1, r2
 80013c8:	000a      	movs	r2, r1
 80013ca:	43d2      	mvns	r2, r2
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0e9b      	lsrs	r3, r3, #26
 80013d2:	210f      	movs	r1, #15
 80013d4:	4019      	ands	r1, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	201f      	movs	r0, #31
 80013da:	4003      	ands	r3, r0
 80013dc:	4099      	lsls	r1, r3
 80013de:	000b      	movs	r3, r1
 80013e0:	431a      	orrs	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}

080013ee <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	035b      	lsls	r3, r3, #13
 8001400:	0b5b      	lsrs	r3, r3, #13
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}

08001410 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	0352      	lsls	r2, r2, #13
 8001422:	0b52      	lsrs	r2, r2, #13
 8001424:	43d2      	mvns	r2, r2
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}

08001434 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	0212      	lsls	r2, r2, #8
 8001448:	43d2      	mvns	r2, r2
 800144a:	401a      	ands	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	400b      	ands	r3, r1
 8001454:	4904      	ldr	r1, [pc, #16]	; (8001468 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001456:	400b      	ands	r3, r1
 8001458:	431a      	orrs	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	07ffff00 	.word	0x07ffff00

0800146c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <LL_ADC_EnableInternalRegulator+0x24>)
 800147a:	4013      	ands	r3, r2
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	0552      	lsls	r2, r2, #21
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b002      	add	sp, #8
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	6fffffe8 	.word	0x6fffffe8

08001494 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	055b      	lsls	r3, r3, #21
 80014a4:	401a      	ands	r2, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	055b      	lsls	r3, r3, #21
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}

080014bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <LL_ADC_Enable+0x20>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	2201      	movs	r2, #1
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b002      	add	sp, #8
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	7fffffe8 	.word	0x7fffffe8

080014e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <LL_ADC_Disable+0x20>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	2202      	movs	r2, #2
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	7fffffe8 	.word	0x7fffffe8

08001504 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <LL_ADC_IsEnabled+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_IsEnabled+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}

08001526 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d101      	bne.n	800153e <LL_ADC_IsDisableOngoing+0x18>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_ADC_IsDisableOngoing+0x1a>
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}

08001548 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <LL_ADC_REG_StartConversion+0x20>)
 8001556:	4013      	ands	r3, r2
 8001558:	2204      	movs	r2, #4
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b002      	add	sp, #8
 8001566:	bd80      	pop	{r7, pc}
 8001568:	7fffffe8 	.word	0x7fffffe8

0800156c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <LL_ADC_REG_StopConversion+0x20>)
 800157a:	4013      	ands	r3, r2
 800157c:	2210      	movs	r2, #16
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}
 800158c:	7fffffe8 	.word	0x7fffffe8

08001590 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2204      	movs	r2, #4
 800159e:	4013      	ands	r3, r2
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	231f      	movs	r3, #31
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1ab      	b.n	8001932 <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10a      	bne.n	80015f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff fb11 	bl	8000c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2254      	movs	r2, #84	; 0x54
 80015f4:	2100      	movs	r1, #0
 80015f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ff49 	bl	8001494 <LL_ADC_IsInternalRegulatorEnabled>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d114      	bne.n	8001630 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff ff2e 	bl	800146c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001610:	4bca      	ldr	r3, [pc, #808]	; (800193c <HAL_ADC_Init+0x388>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	49ca      	ldr	r1, [pc, #808]	; (8001940 <HAL_ADC_Init+0x38c>)
 8001616:	0018      	movs	r0, r3
 8001618:	f7fe fd76 	bl	8000108 <__udivsi3>
 800161c:	0003      	movs	r3, r0
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001622:	e002      	b.n	800162a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	3b01      	subs	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff ff2d 	bl	8001494 <LL_ADC_IsInternalRegulatorEnabled>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d10f      	bne.n	800165e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	2210      	movs	r2, #16
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	2201      	movs	r2, #1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001656:	231f      	movs	r3, #31
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff ff94 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 8001668:	0003      	movs	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	2210      	movs	r2, #16
 8001672:	4013      	ands	r3, r2
 8001674:	d000      	beq.n	8001678 <HAL_ADC_Init+0xc4>
 8001676:	e14f      	b.n	8001918 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d000      	beq.n	8001680 <HAL_ADC_Init+0xcc>
 800167e:	e14b      	b.n	8001918 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	4aaf      	ldr	r2, [pc, #700]	; (8001944 <HAL_ADC_Init+0x390>)
 8001686:	4013      	ands	r3, r2
 8001688:	2202      	movs	r2, #2
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff ff35 	bl	8001504 <LL_ADC_IsEnabled>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d151      	bne.n	8001742 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2218      	movs	r2, #24
 80016a6:	4393      	bics	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	0f9b      	lsrs	r3, r3, #30
 80016bc:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016c2:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 80016c8:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 80016ce:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 80016d4:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	223c      	movs	r2, #60	; 0x3c
 80016e0:	5c9b      	ldrb	r3, [r3, r2]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d103      	bne.n	80016ee <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	4a94      	ldr	r2, [pc, #592]	; (8001948 <HAL_ADC_Init+0x394>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	430a      	orrs	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	23c0      	movs	r3, #192	; 0xc0
 800170a:	061b      	lsls	r3, r3, #24
 800170c:	429a      	cmp	r2, r3
 800170e:	d018      	beq.n	8001742 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	05db      	lsls	r3, r3, #23
 8001718:	429a      	cmp	r2, r3
 800171a:	d012      	beq.n	8001742 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	429a      	cmp	r2, r3
 8001726:	d00c      	beq.n	8001742 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001728:	4b88      	ldr	r3, [pc, #544]	; (800194c <HAL_ADC_Init+0x398>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a88      	ldr	r2, [pc, #544]	; (8001950 <HAL_ADC_Init+0x39c>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	23f0      	movs	r3, #240	; 0xf0
 8001738:	039b      	lsls	r3, r3, #14
 800173a:	401a      	ands	r2, r3
 800173c:	4b83      	ldr	r3, [pc, #524]	; (800194c <HAL_ADC_Init+0x398>)
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7e1b      	ldrb	r3, [r3, #24]
 8001746:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e5b      	ldrb	r3, [r3, #25]
 800174c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800174e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e9b      	ldrb	r3, [r3, #26]
 8001754:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001756:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_ADC_Init+0x1b2>
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	015b      	lsls	r3, r3, #5
 8001764:	e000      	b.n	8001768 <HAL_ADC_Init+0x1b4>
 8001766:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001768:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800176e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da04      	bge.n	8001782 <HAL_ADC_Init+0x1ce>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	e001      	b.n	8001786 <HAL_ADC_Init+0x1d2>
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8001786:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	5c5b      	ldrb	r3, [r3, r1]
 800178e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001790:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2220      	movs	r2, #32
 800179c:	5c9b      	ldrb	r3, [r3, r2]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d115      	bne.n	80017ce <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e9b      	ldrb	r3, [r3, #26]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d105      	bne.n	80017b6 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0252      	lsls	r2, r2, #9
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	e00b      	b.n	80017ce <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	2220      	movs	r2, #32
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	2201      	movs	r2, #1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017da:	23e0      	movs	r3, #224	; 0xe0
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017e4:	4313      	orrs	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_ADC_Init+0x3a0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	430a      	orrs	r2, r1
 8001800:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a53      	ldr	r2, [pc, #332]	; (8001958 <HAL_ADC_Init+0x3a4>)
 800180a:	4013      	ands	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	430a      	orrs	r2, r1
 8001816:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	001a      	movs	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	f7ff fd95 	bl	8001352 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	494a      	ldr	r1, [pc, #296]	; (800195c <HAL_ADC_Init+0x3a8>)
 8001832:	001a      	movs	r2, r3
 8001834:	f7ff fd8d 	bl	8001352 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d109      	bne.n	8001854 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2110      	movs	r1, #16
 800184c:	4249      	negs	r1, r1
 800184e:	430a      	orrs	r2, r1
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
 8001852:	e03a      	b.n	80018ca <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	039b      	lsls	r3, r3, #14
 800185c:	429a      	cmp	r2, r3
 800185e:	d134      	bne.n	80018ca <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	e00c      	b.n	8001880 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	40da      	lsrs	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	220f      	movs	r2, #15
 8001874:	4013      	ands	r3, r2
 8001876:	2b0f      	cmp	r3, #15
 8001878:	d006      	beq.n	8001888 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	3301      	adds	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b07      	cmp	r3, #7
 8001884:	d9ef      	bls.n	8001866 <HAL_ADC_Init+0x2b2>
 8001886:	e000      	b.n	800188a <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8001888:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d109      	bne.n	80018a4 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2110      	movs	r1, #16
 800189c:	4249      	negs	r1, r1
 800189e:	430a      	orrs	r2, r1
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
 80018a2:	e012      	b.n	80018ca <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	221c      	movs	r2, #28
 80018b4:	4013      	ands	r3, r2
 80018b6:	2210      	movs	r2, #16
 80018b8:	4252      	negs	r2, r2
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0011      	movs	r1, r2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a23      	ldr	r2, [pc, #140]	; (8001960 <HAL_ADC_Init+0x3ac>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d10b      	bne.n	80018f2 <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	2203      	movs	r2, #3
 80018e6:	4393      	bics	r3, r2
 80018e8:	2201      	movs	r2, #1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80018f0:	e01c      	b.n	800192c <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	2212      	movs	r2, #18
 80018f8:	4393      	bics	r3, r2
 80018fa:	2210      	movs	r2, #16
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2201      	movs	r2, #1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800190e:	231f      	movs	r3, #31
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001916:	e009      	b.n	800192c <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	2210      	movs	r2, #16
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001924:	231f      	movs	r3, #31
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800192c:	231f      	movs	r3, #31
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	781b      	ldrb	r3, [r3, #0]
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b008      	add	sp, #32
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	20000028 	.word	0x20000028
 8001940:	00030d40 	.word	0x00030d40
 8001944:	fffffefd 	.word	0xfffffefd
 8001948:	1ffffc02 	.word	0x1ffffc02
 800194c:	40012708 	.word	0x40012708
 8001950:	ffc3ffff 	.word	0xffc3ffff
 8001954:	fffe0219 	.word	0xfffe0219
 8001958:	dffffc02 	.word	0xdffffc02
 800195c:	07ffff04 	.word	0x07ffff04
 8001960:	833fffe7 	.word	0x833fffe7

08001964 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff fe0d 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d135      	bne.n	80019e6 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2254      	movs	r2, #84	; 0x54
 800197e:	5c9b      	ldrb	r3, [r3, r2]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_ADC_Start+0x24>
 8001984:	2302      	movs	r3, #2
 8001986:	e035      	b.n	80019f4 <HAL_ADC_Start+0x90>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2254      	movs	r2, #84	; 0x54
 800198c:	2101      	movs	r1, #1
 800198e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001990:	250f      	movs	r5, #15
 8001992:	197c      	adds	r4, r7, r5
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0018      	movs	r0, r3
 8001998:	f000 fb1e 	bl	8001fd8 <ADC_Enable>
 800199c:	0003      	movs	r3, r0
 800199e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019a0:	197b      	adds	r3, r7, r5
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d119      	bne.n	80019dc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_ADC_Start+0x98>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	0052      	lsls	r2, r2, #1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	221c      	movs	r2, #28
 80019c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2254      	movs	r2, #84	; 0x54
 80019cc:	2100      	movs	r1, #0
 80019ce:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff fdb7 	bl	8001548 <LL_ADC_REG_StartConversion>
 80019da:	e008      	b.n	80019ee <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2254      	movs	r2, #84	; 0x54
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]
 80019e4:	e003      	b.n	80019ee <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2202      	movs	r2, #2
 80019ec:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ee:	230f      	movs	r3, #15
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	781b      	ldrb	r3, [r3, #0]
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	fffff0fe 	.word	0xfffff0fe

08001a00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2254      	movs	r2, #84	; 0x54
 8001a0c:	5c9b      	ldrb	r3, [r3, r2]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Stop+0x16>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e029      	b.n	8001a6a <HAL_ADC_Stop+0x6a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2254      	movs	r2, #84	; 0x54
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001a1e:	250f      	movs	r5, #15
 8001a20:	197c      	adds	r4, r7, r5
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f000 fa9b 	bl	8001f60 <ADC_ConversionStop>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a2e:	197b      	adds	r3, r7, r5
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d112      	bne.n	8001a5c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a36:	197c      	adds	r4, r7, r5
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 fb4a 	bl	80020d4 <ADC_Disable>
 8001a40:	0003      	movs	r3, r0
 8001a42:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a44:	197b      	adds	r3, r7, r5
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_ADC_Stop+0x74>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	2201      	movs	r2, #1
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2254      	movs	r2, #84	; 0x54
 8001a60:	2100      	movs	r1, #0
 8001a62:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001a64:	230f      	movs	r3, #15
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	781b      	ldrb	r3, [r3, #0]
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	fffffefe 	.word	0xfffffefe

08001a78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d102      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e00f      	b.n	8001ab0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d007      	beq.n	8001aac <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e06c      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001aac:	2304      	movs	r3, #4
 8001aae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ab0:	f7ff fc0e 	bl	80012d0 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ab8:	e019      	b.n	8001aee <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	d016      	beq.n	8001aee <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ac0:	f7ff fc06 	bl	80012d0 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d302      	bcc.n	8001ad6 <HAL_ADC_PollForConversion+0x5e>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10b      	bne.n	8001aee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	2204      	movs	r2, #4
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2254      	movs	r2, #84	; 0x54
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e04b      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	d0df      	beq.n	8001aba <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff fc3d 	bl	800138c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d02e      	beq.n	8001b74 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7e9b      	ldrb	r3, [r3, #26]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12a      	bne.n	8001b74 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2208      	movs	r2, #8
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d123      	bne.n	8001b74 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fd2d 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d110      	bne.n	8001b5c <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	210c      	movs	r1, #12
 8001b46:	438a      	bics	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_ADC_PollForConversion+0x118>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	2201      	movs	r2, #1
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
 8001b5a:	e00b      	b.n	8001b74 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	2220      	movs	r2, #32
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7e1b      	ldrb	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	220c      	movs	r2, #12
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	fffffefe 	.word	0xfffffefe

08001b94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb6:	2317      	movs	r3, #23
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2254      	movs	r2, #84	; 0x54
 8001bc6:	5c9b      	ldrb	r3, [r3, r2]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x24>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e1c2      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x3aa>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2254      	movs	r2, #84	; 0x54
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fcd7 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d000      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x3c>
 8001be6:	e1a5      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d100      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x46>
 8001bf0:	e144      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d004      	beq.n	8001c08 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c02:	4ac2      	ldr	r2, [pc, #776]	; (8001f0c <HAL_ADC_ConfigChannel+0x360>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d108      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0019      	movs	r1, r3
 8001c12:	0010      	movs	r0, r2
 8001c14:	f7ff fbeb 	bl	80013ee <LL_ADC_REG_SetSequencerChAdd>
 8001c18:	e0c9      	b.n	8001dae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	211f      	movs	r1, #31
 8001c24:	400b      	ands	r3, r1
 8001c26:	210f      	movs	r1, #15
 8001c28:	4099      	lsls	r1, r3
 8001c2a:	000b      	movs	r3, r1
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4013      	ands	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	035b      	lsls	r3, r3, #13
 8001c38:	0b5b      	lsrs	r3, r3, #13
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x9c>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	221f      	movs	r2, #31
 8001c44:	4013      	ands	r3, r2
 8001c46:	e098      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d000      	beq.n	8001c54 <HAL_ADC_ConfigChannel+0xa8>
 8001c52:	e091      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x1cc>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d000      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0xb4>
 8001c5e:	e089      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1c8>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2204      	movs	r2, #4
 8001c66:	4013      	ands	r3, r2
 8001c68:	d000      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0xc0>
 8001c6a:	e081      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x1c4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2208      	movs	r2, #8
 8001c72:	4013      	ands	r3, r2
 8001c74:	d000      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0xcc>
 8001c76:	e079      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1c0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d000      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0xd8>
 8001c82:	e071      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x1bc>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d000      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0xe4>
 8001c8e:	e069      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x1b8>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	4013      	ands	r3, r2
 8001c98:	d000      	beq.n	8001c9c <HAL_ADC_ConfigChannel+0xf0>
 8001c9a:	e061      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x1b4>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d000      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0xfc>
 8001ca6:	e059      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1b0>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d151      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1ac>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d149      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1a8>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d141      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1a4>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d139      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1a0>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	015b      	lsls	r3, r3, #5
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d131      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x19c>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	019b      	lsls	r3, r3, #6
 8001cec:	4013      	ands	r3, r2
 8001cee:	d129      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x198>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d121      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x194>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	4013      	ands	r3, r2
 8001d06:	d119      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x190>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	025b      	lsls	r3, r3, #9
 8001d10:	4013      	ands	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x18c>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d109      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x188>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	02db      	lsls	r3, r3, #11
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d001      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x184>
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	e024      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d30:	2300      	movs	r3, #0
 8001d32:	e022      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d34:	2311      	movs	r3, #17
 8001d36:	e020      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d38:	2310      	movs	r3, #16
 8001d3a:	e01e      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	e01c      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d40:	230e      	movs	r3, #14
 8001d42:	e01a      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d44:	230d      	movs	r3, #13
 8001d46:	e018      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d48:	230c      	movs	r3, #12
 8001d4a:	e016      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	230b      	movs	r3, #11
 8001d4e:	e014      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d50:	230a      	movs	r3, #10
 8001d52:	e012      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d54:	2309      	movs	r3, #9
 8001d56:	e010      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d58:	2308      	movs	r3, #8
 8001d5a:	e00e      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	e00c      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d60:	2306      	movs	r3, #6
 8001d62:	e00a      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d64:	2305      	movs	r3, #5
 8001d66:	e008      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	2304      	movs	r3, #4
 8001d6a:	e006      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e004      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	6852      	ldr	r2, [r2, #4]
 8001d7e:	201f      	movs	r0, #31
 8001d80:	4002      	ands	r2, r0
 8001d82:	4093      	lsls	r3, r2
 8001d84:	000a      	movs	r2, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d808      	bhi.n	8001dae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	001a      	movs	r2, r3
 8001daa:	f7ff fb00 	bl	80013ae <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	001a      	movs	r2, r3
 8001dbc:	f7ff fb3a 	bl	8001434 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db00      	blt.n	8001dca <HAL_ADC_ConfigChannel+0x21e>
 8001dc8:	e0be      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fab3 	bl	8001338 <LL_ADC_GetCommonPathInternalCh>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a4e      	ldr	r2, [pc, #312]	; (8001f14 <HAL_ADC_ConfigChannel+0x368>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d123      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001de8:	d11e      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	0412      	lsls	r2, r2, #16
 8001df0:	4313      	orrs	r3, r2
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001df4:	0019      	movs	r1, r3
 8001df6:	0010      	movs	r0, r2
 8001df8:	f7ff fa8a 	bl	8001310 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001dfc:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_ADC_ConfigChannel+0x36c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4946      	ldr	r1, [pc, #280]	; (8001f1c <HAL_ADC_ConfigChannel+0x370>)
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7fe f980 	bl	8000108 <__udivsi3>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	189b      	adds	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	3301      	adds	r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e26:	e08f      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3c      	ldr	r2, [pc, #240]	; (8001f20 <HAL_ADC_ConfigChannel+0x374>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10e      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x2a4>
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	045b      	lsls	r3, r3, #17
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	0452      	lsls	r2, r2, #17
 8001e42:	4313      	orrs	r3, r2
 8001e44:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001e46:	0019      	movs	r1, r3
 8001e48:	0010      	movs	r0, r2
 8001e4a:	f7ff fa61 	bl	8001310 <LL_ADC_SetCommonPathInternalCh>
 8001e4e:	e07b      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <HAL_ADC_ConfigChannel+0x378>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d000      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0x2b0>
 8001e5a:	e075      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	03db      	lsls	r3, r3, #15
 8001e62:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e64:	d000      	beq.n	8001e68 <HAL_ADC_ConfigChannel+0x2bc>
 8001e66:	e06f      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	03d2      	lsls	r2, r2, #15
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f7ff fa4b 	bl	8001310 <LL_ADC_SetCommonPathInternalCh>
 8001e7a:	e065      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d004      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_ADC_ConfigChannel+0x360>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d107      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	f7ff fab7 	bl	8001410 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da4e      	bge.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fa43 	bl	8001338 <LL_ADC_GetCommonPathInternalCh>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <HAL_ADC_ConfigChannel+0x368>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d108      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_ADC_ConfigChannel+0x37c>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001ec8:	0019      	movs	r1, r3
 8001eca:	0010      	movs	r0, r2
 8001ecc:	f7ff fa20 	bl	8001310 <LL_ADC_SetCommonPathInternalCh>
 8001ed0:	e03a      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_ADC_ConfigChannel+0x374>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <HAL_ADC_ConfigChannel+0x380>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	f7ff fa12 	bl	8001310 <LL_ADC_SetCommonPathInternalCh>
 8001eec:	e02c      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <HAL_ADC_ConfigChannel+0x378>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d127      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_ADC_ConfigChannel+0x384>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_ADC_ConfigChannel+0x364>)
 8001f00:	0019      	movs	r1, r3
 8001f02:	0010      	movs	r0, r2
 8001f04:	f7ff fa04 	bl	8001310 <LL_ADC_SetCommonPathInternalCh>
 8001f08:	e01e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x39c>
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	80000004 	.word	0x80000004
 8001f10:	40012708 	.word	0x40012708
 8001f14:	b0001000 	.word	0xb0001000
 8001f18:	20000028 	.word	0x20000028
 8001f1c:	00030d40 	.word	0x00030d40
 8001f20:	b8004000 	.word	0xb8004000
 8001f24:	b4002000 	.word	0xb4002000
 8001f28:	ff7fffff 	.word	0xff7fffff
 8001f2c:	feffffff 	.word	0xfeffffff
 8001f30:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	2220      	movs	r2, #32
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f40:	2317      	movs	r3, #23
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2254      	movs	r2, #84	; 0x54
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	781b      	ldrb	r3, [r3, #0]
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b006      	add	sp, #24
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)

08001f60 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff fb0f 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d02b      	beq.n	8001fce <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff fad3 	bl	8001526 <LL_ADC_IsDisableOngoing>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d104      	bne.n	8001f8e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff faef 	bl	800156c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f8e:	f7ff f99f 	bl	80012d0 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001f96:	e014      	b.n	8001fc2 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001f98:	f7ff f99a 	bl	80012d0 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d90d      	bls.n	8001fc2 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	2210      	movs	r2, #16
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e006      	b.n	8001fd0 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d1e4      	bne.n	8001f98 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b004      	add	sp, #16
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff fa8b 	bl	8001504 <LL_ADC_IsEnabled>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d162      	bne.n	80020b8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <ADC_Enable+0xec>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d00d      	beq.n	800201a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	2210      	movs	r2, #16
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e04f      	b.n	80020ba <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff fa4c 	bl	80014bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <ADC_Enable+0xf0>)
 8002026:	0018      	movs	r0, r3
 8002028:	f7ff f986 	bl	8001338 <LL_ADC_GetCommonPathInternalCh>
 800202c:	0002      	movs	r2, r0
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	4013      	ands	r3, r2
 8002034:	d00f      	beq.n	8002056 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <ADC_Enable+0xf4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4925      	ldr	r1, [pc, #148]	; (80020d0 <ADC_Enable+0xf8>)
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe f863 	bl	8000108 <__udivsi3>
 8002042:	0003      	movs	r3, r0
 8002044:	3301      	adds	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002048:	e002      	b.n	8002050 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3b01      	subs	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7e5b      	ldrb	r3, [r3, #25]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d02c      	beq.n	80020b8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800205e:	f7ff f937 	bl	80012d0 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002066:	e020      	b.n	80020aa <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff fa49 	bl	8001504 <LL_ADC_IsEnabled>
 8002072:	1e03      	subs	r3, r0, #0
 8002074:	d104      	bne.n	8002080 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0018      	movs	r0, r3
 800207c:	f7ff fa1e 	bl	80014bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002080:	f7ff f926 	bl	80012d0 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d90d      	bls.n	80020aa <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	2210      	movs	r2, #16
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2201      	movs	r2, #1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e007      	b.n	80020ba <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d1d7      	bne.n	8002068 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	80000017 	.word	0x80000017
 80020c8:	40012708 	.word	0x40012708
 80020cc:	20000028 	.word	0x20000028
 80020d0:	00030d40 	.word	0x00030d40

080020d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff fa20 	bl	8001526 <LL_ADC_IsDisableOngoing>
 80020e6:	0003      	movs	r3, r0
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff fa08 	bl	8001504 <LL_ADC_IsEnabled>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d040      	beq.n	800217a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d13d      	bne.n	800217a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2205      	movs	r2, #5
 8002106:	4013      	ands	r3, r2
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10d      	bne.n	8002128 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff f9e5 	bl	80014e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2203      	movs	r2, #3
 800211c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800211e:	f7ff f8d7 	bl	80012d0 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002126:	e022      	b.n	800216e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	2210      	movs	r2, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	2201      	movs	r2, #1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e01b      	b.n	800217c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002144:	f7ff f8c4 	bl	80012d0 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d90d      	bls.n	800216e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	2210      	movs	r2, #16
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2201      	movs	r2, #1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e006      	b.n	800217c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
 8002178:	d1e4      	bne.n	8002144 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	0002      	movs	r2, r0
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b7f      	cmp	r3, #127	; 0x7f
 8002196:	d809      	bhi.n	80021ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	001a      	movs	r2, r3
 800219e:	231f      	movs	r3, #31
 80021a0:	401a      	ands	r2, r3
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_EnableIRQ+0x30>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	4091      	lsls	r1, r2
 80021a8:	000a      	movs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	0002      	movs	r2, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b7f      	cmp	r3, #127	; 0x7f
 80021cc:	d828      	bhi.n	8002220 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ce:	4a2f      	ldr	r2, [pc, #188]	; (800228c <__NVIC_SetPriority+0xd4>)
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	33c0      	adds	r3, #192	; 0xc0
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	589b      	ldr	r3, [r3, r2]
 80021de:	1dfa      	adds	r2, r7, #7
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	0011      	movs	r1, r2
 80021e4:	2203      	movs	r2, #3
 80021e6:	400a      	ands	r2, r1
 80021e8:	00d2      	lsls	r2, r2, #3
 80021ea:	21ff      	movs	r1, #255	; 0xff
 80021ec:	4091      	lsls	r1, r2
 80021ee:	000a      	movs	r2, r1
 80021f0:	43d2      	mvns	r2, r2
 80021f2:	401a      	ands	r2, r3
 80021f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	401a      	ands	r2, r3
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	0018      	movs	r0, r3
 8002204:	2303      	movs	r3, #3
 8002206:	4003      	ands	r3, r0
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800220c:	481f      	ldr	r0, [pc, #124]	; (800228c <__NVIC_SetPriority+0xd4>)
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b25b      	sxtb	r3, r3
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	430a      	orrs	r2, r1
 8002218:	33c0      	adds	r3, #192	; 0xc0
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800221e:	e031      	b.n	8002284 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <__NVIC_SetPriority+0xd8>)
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	0019      	movs	r1, r3
 8002228:	230f      	movs	r3, #15
 800222a:	400b      	ands	r3, r1
 800222c:	3b08      	subs	r3, #8
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3306      	adds	r3, #6
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	3304      	adds	r3, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1dfa      	adds	r2, r7, #7
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	0011      	movs	r1, r2
 8002240:	2203      	movs	r2, #3
 8002242:	400a      	ands	r2, r1
 8002244:	00d2      	lsls	r2, r2, #3
 8002246:	21ff      	movs	r1, #255	; 0xff
 8002248:	4091      	lsls	r1, r2
 800224a:	000a      	movs	r2, r1
 800224c:	43d2      	mvns	r2, r2
 800224e:	401a      	ands	r2, r3
 8002250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	22ff      	movs	r2, #255	; 0xff
 8002258:	401a      	ands	r2, r3
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	0018      	movs	r0, r3
 8002260:	2303      	movs	r3, #3
 8002262:	4003      	ands	r3, r0
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <__NVIC_SetPriority+0xd8>)
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	001c      	movs	r4, r3
 8002270:	230f      	movs	r3, #15
 8002272:	4023      	ands	r3, r4
 8002274:	3b08      	subs	r3, #8
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	430a      	orrs	r2, r1
 800227a:	3306      	adds	r3, #6
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	18c3      	adds	r3, r0, r3
 8002280:	3304      	adds	r3, #4
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b003      	add	sp, #12
 800228a:	bd90      	pop	{r4, r7, pc}
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	045b      	lsls	r3, r3, #17
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d301      	bcc.n	80022ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a8:	2301      	movs	r3, #1
 80022aa:	e010      	b.n	80022ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <SysTick_Config+0x44>)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	3a01      	subs	r2, #1
 80022b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b4:	2301      	movs	r3, #1
 80022b6:	425b      	negs	r3, r3
 80022b8:	2103      	movs	r1, #3
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff ff7c 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x44>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x44>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	210f      	movs	r1, #15
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	1c02      	adds	r2, r0, #0
 80022ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	0011      	movs	r1, r2
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	0002      	movs	r2, r0
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b25b      	sxtb	r3, r3
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff ff33 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff ffaf 	bl	8002294 <SysTick_Config>
 8002336:	0003      	movs	r3, r0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e077      	b.n	8002442 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a3d      	ldr	r2, [pc, #244]	; (800244c <HAL_DMA_Init+0x10c>)
 8002358:	4694      	mov	ip, r2
 800235a:	4463      	add	r3, ip
 800235c:	2114      	movs	r1, #20
 800235e:	0018      	movs	r0, r3
 8002360:	f7fd fed2 	bl	8000108 <__udivsi3>
 8002364:	0003      	movs	r3, r0
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2225      	movs	r2, #37	; 0x25
 8002370:	2102      	movs	r1, #2
 8002372:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4934      	ldr	r1, [pc, #208]	; (8002450 <HAL_DMA_Init+0x110>)
 8002380:	400a      	ands	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 f9c7 	bl	8002750 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	01db      	lsls	r3, r3, #7
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d102      	bne.n	80023d4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	213f      	movs	r1, #63	; 0x3f
 80023de:	400a      	ands	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <HAL_DMA_Init+0xd8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d80d      	bhi.n	8002418 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 f9d2 	bl	80027a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	e008      	b.n	800242a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2225      	movs	r2, #37	; 0x25
 8002434:	2101      	movs	r1, #1
 8002436:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	bffdfff8 	.word	0xbffdfff8
 8002450:	ffff800f 	.word	0xffff800f

08002454 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e050      	b.n	8002508 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2225      	movs	r2, #37	; 0x25
 800246a:	5c9b      	ldrb	r3, [r3, r2]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d008      	beq.n	8002484 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e041      	b.n	8002508 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	210e      	movs	r1, #14
 8002490:	438a      	bics	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	491c      	ldr	r1, [pc, #112]	; (8002510 <HAL_DMA_Abort+0xbc>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_DMA_Abort+0xc0>)
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	221c      	movs	r2, #28
 80024be:	4013      	ands	r3, r2
 80024c0:	2201      	movs	r2, #1
 80024c2:	409a      	lsls	r2, r3
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_DMA_Abort+0xc0>)
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00c      	beq.n	80024f6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	490a      	ldr	r1, [pc, #40]	; (8002510 <HAL_DMA_Abort+0xbc>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80024f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2225      	movs	r2, #37	; 0x25
 80024fa:	2101      	movs	r1, #1
 80024fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2224      	movs	r2, #36	; 0x24
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}
 8002510:	fffffeff 	.word	0xfffffeff
 8002514:	40020000 	.word	0x40020000

08002518 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	210f      	movs	r1, #15
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2225      	movs	r2, #37	; 0x25
 800252c:	5c9b      	ldrb	r3, [r3, r2]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d006      	beq.n	8002542 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e049      	b.n	80025d6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	210e      	movs	r1, #14
 800254e:	438a      	bics	r2, r1
 8002550:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	438a      	bics	r2, r1
 8002560:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	491d      	ldr	r1, [pc, #116]	; (80025e4 <HAL_DMA_Abort_IT+0xcc>)
 800256e:	400a      	ands	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_DMA_Abort_IT+0xd0>)
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	221c      	movs	r2, #28
 800257c:	4013      	ands	r3, r2
 800257e:	2201      	movs	r2, #1
 8002580:	409a      	lsls	r2, r3
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_DMA_Abort_IT+0xd0>)
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002590:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a4:	490f      	ldr	r1, [pc, #60]	; (80025e4 <HAL_DMA_Abort_IT+0xcc>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2225      	movs	r2, #37	; 0x25
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	0010      	movs	r0, r2
 80025d4:	4798      	blx	r3
    }
  }
  return status;
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fffffeff 	.word	0xfffffeff
 80025e8:	40020000 	.word	0x40020000

080025ec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80025f4:	4b55      	ldr	r3, [pc, #340]	; (800274c <HAL_DMA_IRQHandler+0x160>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	221c      	movs	r2, #28
 8002608:	4013      	ands	r3, r2
 800260a:	2204      	movs	r2, #4
 800260c:	409a      	lsls	r2, r3
 800260e:	0013      	movs	r3, r2
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_IRQHandler+0x7a>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2204      	movs	r2, #4
 800261a:	4013      	ands	r3, r2
 800261c:	d023      	beq.n	8002666 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2220      	movs	r2, #32
 8002626:	4013      	ands	r3, r2
 8002628:	d107      	bne.n	800263a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2104      	movs	r1, #4
 8002636:	438a      	bics	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800263a:	4b44      	ldr	r3, [pc, #272]	; (800274c <HAL_DMA_IRQHandler+0x160>)
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	221c      	movs	r2, #28
 8002644:	4013      	ands	r3, r2
 8002646:	2204      	movs	r2, #4
 8002648:	409a      	lsls	r2, r3
 800264a:	4b40      	ldr	r3, [pc, #256]	; (800274c <HAL_DMA_IRQHandler+0x160>)
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b00      	cmp	r3, #0
 8002656:	d100      	bne.n	800265a <HAL_DMA_IRQHandler+0x6e>
 8002658:	e073      	b.n	8002742 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	0010      	movs	r0, r2
 8002662:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002664:	e06d      	b.n	8002742 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	221c      	movs	r2, #28
 800266c:	4013      	ands	r3, r2
 800266e:	2202      	movs	r2, #2
 8002670:	409a      	lsls	r2, r3
 8002672:	0013      	movs	r3, r2
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	d02e      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xec>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2202      	movs	r2, #2
 800267e:	4013      	ands	r3, r2
 8002680:	d02a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2220      	movs	r2, #32
 800268a:	4013      	ands	r3, r2
 800268c:	d10b      	bne.n	80026a6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	210a      	movs	r1, #10
 800269a:	438a      	bics	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2225      	movs	r2, #37	; 0x25
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_DMA_IRQHandler+0x160>)
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	221c      	movs	r2, #28
 80026b0:	4013      	ands	r3, r2
 80026b2:	2202      	movs	r2, #2
 80026b4:	409a      	lsls	r2, r3
 80026b6:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_DMA_IRQHandler+0x160>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03a      	beq.n	8002742 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	0010      	movs	r0, r2
 80026d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80026d6:	e034      	b.n	8002742 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	221c      	movs	r2, #28
 80026de:	4013      	ands	r3, r2
 80026e0:	2208      	movs	r2, #8
 80026e2:	409a      	lsls	r2, r3
 80026e4:	0013      	movs	r3, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	d02b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x158>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2208      	movs	r2, #8
 80026f0:	4013      	ands	r3, r2
 80026f2:	d027      	beq.n	8002744 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	210e      	movs	r1, #14
 8002700:	438a      	bics	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_DMA_IRQHandler+0x160>)
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	221c      	movs	r2, #28
 800270e:	4013      	ands	r3, r2
 8002710:	2201      	movs	r2, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_DMA_IRQHandler+0x160>)
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2225      	movs	r2, #37	; 0x25
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	0010      	movs	r0, r2
 8002740:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46c0      	nop			; (mov r8, r8)
}
 8002746:	46bd      	mov	sp, r7
 8002748:	b004      	add	sp, #16
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40020000 	.word	0x40020000

08002750 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002760:	4694      	mov	ip, r2
 8002762:	4463      	add	r3, ip
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	001a      	movs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	001a      	movs	r2, r3
 8002772:	23ff      	movs	r3, #255	; 0xff
 8002774:	4013      	ands	r3, r2
 8002776:	3b08      	subs	r3, #8
 8002778:	2114      	movs	r1, #20
 800277a:	0018      	movs	r0, r3
 800277c:	f7fd fcc4 	bl	8000108 <__udivsi3>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002788:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	221f      	movs	r2, #31
 800278e:	4013      	ands	r3, r2
 8002790:	2201      	movs	r2, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	10008200 	.word	0x10008200
 80027a4:	40020880 	.word	0x40020880

080027a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	223f      	movs	r2, #63	; 0x3f
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80027be:	4694      	mov	ip, r2
 80027c0:	4463      	add	r3, ip
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	001a      	movs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	4013      	ands	r3, r2
 80027d8:	2201      	movs	r2, #1
 80027da:	409a      	lsls	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	659a      	str	r2, [r3, #88]	; 0x58
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b004      	add	sp, #16
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	1000823f 	.word	0x1000823f
 80027ec:	40020940 	.word	0x40020940

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e147      	b.n	8002a90 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4091      	lsls	r1, r2
 800280a:	000a      	movs	r2, r1
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d100      	bne.n	8002818 <HAL_GPIO_Init+0x28>
 8002816:	e138      	b.n	8002a8a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d00b      	beq.n	8002838 <HAL_GPIO_Init+0x48>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282c:	2b11      	cmp	r3, #17
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	409a      	lsls	r2, r3
 8002846:	0013      	movs	r3, r2
 8002848:	43da      	mvns	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	0013      	movs	r3, r2
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
 8002874:	0013      	movs	r3, r2
 8002876:	43da      	mvns	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	2201      	movs	r2, #1
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
 800288c:	0013      	movs	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	43da      	mvns	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0xea>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	58d3      	ldr	r3, [r2, r3]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2207      	movs	r2, #7
 80028ec:	4013      	ands	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	409a      	lsls	r2, r3
 80028f4:	0013      	movs	r3, r2
 80028f6:	43da      	mvns	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2107      	movs	r1, #7
 8002906:	400b      	ands	r3, r1
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	6939      	ldr	r1, [r7, #16]
 8002920:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	409a      	lsls	r2, r3
 8002930:	0013      	movs	r3, r2
 8002932:	43da      	mvns	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	401a      	ands	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	0013      	movs	r3, r2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	055b      	lsls	r3, r3, #21
 800295e:	4013      	ands	r3, r2
 8002960:	d100      	bne.n	8002964 <HAL_GPIO_Init+0x174>
 8002962:	e092      	b.n	8002a8a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002964:	4a50      	ldr	r2, [pc, #320]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3318      	adds	r3, #24
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	589b      	ldr	r3, [r3, r2]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2203      	movs	r2, #3
 8002976:	4013      	ands	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	220f      	movs	r2, #15
 800297c:	409a      	lsls	r2, r3
 800297e:	0013      	movs	r3, r2
 8002980:	43da      	mvns	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	23a0      	movs	r3, #160	; 0xa0
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	429a      	cmp	r2, r3
 8002990:	d013      	beq.n	80029ba <HAL_GPIO_Init+0x1ca>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a45      	ldr	r2, [pc, #276]	; (8002aac <HAL_GPIO_Init+0x2bc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00d      	beq.n	80029b6 <HAL_GPIO_Init+0x1c6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a44      	ldr	r2, [pc, #272]	; (8002ab0 <HAL_GPIO_Init+0x2c0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <HAL_GPIO_Init+0x1c2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a43      	ldr	r2, [pc, #268]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_GPIO_Init+0x1be>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x1cc>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x1cc>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x1cc>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x1cc>
 80029ba:	2300      	movs	r3, #0
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	2103      	movs	r1, #3
 80029c0:	400a      	ands	r2, r1
 80029c2:	00d2      	lsls	r2, r2, #3
 80029c4:	4093      	lsls	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80029cc:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3318      	adds	r3, #24
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029da:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	58d3      	ldr	r3, [r2, r3]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	025b      	lsls	r3, r3, #9
 80029f4:	4013      	ands	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a00:	4929      	ldr	r1, [pc, #164]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002a0a:	2384      	movs	r3, #132	; 0x84
 8002a0c:	58d3      	ldr	r3, [r2, r3]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43da      	mvns	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	4013      	ands	r3, r2
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a2e:	491e      	ldr	r1, [pc, #120]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002a30:	2284      	movs	r2, #132	; 0x84
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	035b      	lsls	r3, r3, #13
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	039b      	lsls	r3, r3, #14
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	40da      	lsrs	r2, r3
 8002a98:	1e13      	subs	r3, r2, #0
 8002a9a:	d000      	beq.n	8002a9e <HAL_GPIO_Init+0x2ae>
 8002a9c:	e6b0      	b.n	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	50000400 	.word	0x50000400
 8002ab0:	50000800 	.word	0x50000800
 8002ab4:	50000c00 	.word	0x50000c00

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	0008      	movs	r0, r1
 8002ac2:	0011      	movs	r1, r2
 8002ac4:	1cbb      	adds	r3, r7, #2
 8002ac6:	1c02      	adds	r2, r0, #0
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	1c7b      	adds	r3, r7, #1
 8002acc:	1c0a      	adds	r2, r1, #0
 8002ace:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad0:	1c7b      	adds	r3, r7, #1
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad8:	1cbb      	adds	r3, r7, #2
 8002ada:	881a      	ldrh	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae0:	e003      	b.n	8002aea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae2:	1cbb      	adds	r3, r7, #2
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d11f      	bne.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4912      	ldr	r1, [pc, #72]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7fd faee 	bl	8000108 <__udivsi3>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b32:	e008      	b.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e001      	b.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e009      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d0ed      	beq.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40007000 	.word	0x40007000
 8002b68:	fffff9ff 	.word	0xfffff9ff
 8002b6c:	20000028 	.word	0x20000028
 8002b70:	000f4240 	.word	0x000f4240

08002b74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	23e0      	movs	r3, #224	; 0xe0
 8002b7e:	01db      	lsls	r3, r3, #7
 8002b80:	4013      	ands	r3, r2
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e304      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d100      	bne.n	8002baa <HAL_RCC_OscConfig+0x1e>
 8002ba8:	e07c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4bc3      	ldr	r3, [pc, #780]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2238      	movs	r2, #56	; 0x38
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4bc0      	ldr	r3, [pc, #768]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	4013      	ands	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_OscConfig+0x3e>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4bb9      	ldr	r3, [pc, #740]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	029b      	lsls	r3, r3, #10
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d062      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x116>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d15e      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e2df      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x78>
 8002bf4:	4bb0      	ldr	r3, [pc, #704]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4baf      	ldr	r3, [pc, #700]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	0249      	lsls	r1, r1, #9
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e020      	b.n	8002c46 <HAL_RCC_OscConfig+0xba>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	23a0      	movs	r3, #160	; 0xa0
 8002c0a:	02db      	lsls	r3, r3, #11
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0xa2>
 8002c10:	4ba9      	ldr	r3, [pc, #676]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4ba8      	ldr	r3, [pc, #672]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	02c9      	lsls	r1, r1, #11
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	4ba6      	ldr	r3, [pc, #664]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4ba5      	ldr	r3, [pc, #660]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0249      	lsls	r1, r1, #9
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0xba>
 8002c2e:	4ba2      	ldr	r3, [pc, #648]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4ba1      	ldr	r3, [pc, #644]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c34:	49a1      	ldr	r1, [pc, #644]	; (8002ebc <HAL_RCC_OscConfig+0x330>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	4b9f      	ldr	r3, [pc, #636]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b9e      	ldr	r3, [pc, #632]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c40:	499f      	ldr	r1, [pc, #636]	; (8002ec0 <HAL_RCC_OscConfig+0x334>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d014      	beq.n	8002c78 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fb3f 	bl	80012d0 <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fb3a 	bl	80012d0 <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e29e      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6a:	4b93      	ldr	r3, [pc, #588]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	029b      	lsls	r3, r3, #10
 8002c72:	4013      	ands	r3, r2
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xcc>
 8002c76:	e015      	b.n	8002ca4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fb2a 	bl	80012d0 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c82:	f7fe fb25 	bl	80012d0 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e289      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c94:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0xf6>
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d100      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x124>
 8002cae:	e099      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4b81      	ldr	r3, [pc, #516]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2238      	movs	r2, #56	; 0x38
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cba:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x144>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d002      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x14a>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d135      	bne.n	8002d42 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd6:	4b78      	ldr	r3, [pc, #480]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x162>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e25c      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	4b6e      	ldr	r3, [pc, #440]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d112      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_RCC_OscConfig+0x33c>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d1e:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0adb      	lsrs	r3, r3, #11
 8002d24:	2207      	movs	r2, #7
 8002d26:	4013      	ands	r3, r2
 8002d28:	4a68      	ldr	r2, [pc, #416]	; (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d2a:	40da      	lsrs	r2, r3
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <HAL_RCC_OscConfig+0x344>)
 8002d2e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x348>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7fe fa6f 	bl	8001218 <HAL_InitTick>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d051      	beq.n	8002de2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e232      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d030      	beq.n	8002dac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d4a:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5e      	ldr	r2, [pc, #376]	; (8002ec8 <HAL_RCC_OscConfig+0x33c>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	4b57      	ldr	r3, [pc, #348]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	0049      	lsls	r1, r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fab0 	bl	80012d0 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe faab 	bl	80012d0 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e20f      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4013      	ands	r3, r2
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	021a      	lsls	r2, r3, #8
 8002da4:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	e01b      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002db2:	4949      	ldr	r1, [pc, #292]	; (8002ed8 <HAL_RCC_OscConfig+0x34c>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fa8a 	bl	80012d0 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fa85 	bl	80012d0 <HAL_GetTick>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1e9      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd4:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x236>
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2208      	movs	r2, #8
 8002dea:	4013      	ands	r3, r2
 8002dec:	d047      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2238      	movs	r2, #56	; 0x38
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b18      	cmp	r3, #24
 8002df8:	d10a      	bne.n	8002e10 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	d03c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d138      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e1cb      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	2101      	movs	r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fa54 	bl	80012d0 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fe fa4f 	bl	80012d0 <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1b3      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	2202      	movs	r2, #2
 8002e46:	4013      	ands	r3, r2
 8002e48:	d0f1      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2a2>
 8002e4a:	e018      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	438a      	bics	r2, r1
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fa3a 	bl	80012d0 <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe fa35 	bl	80012d0 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e199      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d1f1      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2fe>
 8002e88:	e0c6      	b.n	8003018 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2238      	movs	r2, #56	; 0x38
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d11e      	bne.n	8002edc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <HAL_RCC_OscConfig+0x31e>
 8002ea8:	e0b6      	b.n	8003018 <HAL_RCC_OscConfig+0x48c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d000      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x328>
 8002eb2:	e0b1      	b.n	8003018 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e177      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	fffeffff 	.word	0xfffeffff
 8002ec0:	fffbffff 	.word	0xfffbffff
 8002ec4:	ffff80ff 	.word	0xffff80ff
 8002ec8:	ffffc7ff 	.word	0xffffc7ff
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	20000028 	.word	0x20000028
 8002ed4:	2000002c 	.word	0x2000002c
 8002ed8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002edc:	4bb4      	ldr	r3, [pc, #720]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	055b      	lsls	r3, r3, #21
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_OscConfig+0x360>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x362>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4baf      	ldr	r3, [pc, #700]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef6:	4bae      	ldr	r3, [pc, #696]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0549      	lsls	r1, r1, #21
 8002efc:	430a      	orrs	r2, r1
 8002efe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f00:	4bab      	ldr	r3, [pc, #684]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	055b      	lsls	r3, r3, #21
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002f0e:	231f      	movs	r3, #31
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f16:	4ba7      	ldr	r3, [pc, #668]	; (80031b4 <HAL_RCC_OscConfig+0x628>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f22:	4ba4      	ldr	r3, [pc, #656]	; (80031b4 <HAL_RCC_OscConfig+0x628>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4ba3      	ldr	r3, [pc, #652]	; (80031b4 <HAL_RCC_OscConfig+0x628>)
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	0049      	lsls	r1, r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002f30:	f7fe f9ce 	bl	80012d0 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3a:	f7fe f9c9 	bl	80012d0 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e12d      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4c:	4b99      	ldr	r3, [pc, #612]	; (80031b4 <HAL_RCC_OscConfig+0x628>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3e2>
 8002f60:	4b93      	ldr	r3, [pc, #588]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f64:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f6c:	e01c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x404>
 8002f76:	4b8e      	ldr	r3, [pc, #568]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f7a:	4b8d      	ldr	r3, [pc, #564]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f82:	4b8b      	ldr	r3, [pc, #556]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f86:	4b8a      	ldr	r3, [pc, #552]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f88:	2101      	movs	r1, #1
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
 8002f90:	4b87      	ldr	r3, [pc, #540]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f94:	4b86      	ldr	r3, [pc, #536]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	438a      	bics	r2, r1
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f9c:	4b84      	ldr	r3, [pc, #528]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002f9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fa0:	4b83      	ldr	r3, [pc, #524]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d014      	beq.n	8002fda <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f98e 	bl	80012d0 <HAL_GetTick>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb8:	e009      	b.n	8002fce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fe f989 	bl	80012d0 <HAL_GetTick>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	4a7c      	ldr	r2, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x62c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0ec      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	4b78      	ldr	r3, [pc, #480]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x42e>
 8002fd8:	e013      	b.n	8003002 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fe f979 	bl	80012d0 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe2:	e009      	b.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe f974 	bl	80012d0 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	4a72      	ldr	r2, [pc, #456]	; (80031b8 <HAL_RCC_OscConfig+0x62c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0d7      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	4013      	ands	r3, r2
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003002:	231f      	movs	r3, #31
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 800300e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003010:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003012:	496a      	ldr	r1, [pc, #424]	; (80031bc <HAL_RCC_OscConfig+0x630>)
 8003014:	400a      	ands	r2, r1
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d100      	bne.n	8003022 <HAL_RCC_OscConfig+0x496>
 8003020:	e0c1      	b.n	80031a6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003022:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2238      	movs	r2, #56	; 0x38
 8003028:	4013      	ands	r3, r2
 800302a:	2b10      	cmp	r3, #16
 800302c:	d100      	bne.n	8003030 <HAL_RCC_OscConfig+0x4a4>
 800302e:	e081      	b.n	8003134 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d156      	bne.n	80030e6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003038:	4b5d      	ldr	r3, [pc, #372]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 800303e:	4960      	ldr	r1, [pc, #384]	; (80031c0 <HAL_RCC_OscConfig+0x634>)
 8003040:	400a      	ands	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f944 	bl	80012d0 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe f93f 	bl	80012d0 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0a3      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	049b      	lsls	r3, r3, #18
 8003068:	4013      	ands	r3, r2
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a54      	ldr	r2, [pc, #336]	; (80031c4 <HAL_RCC_OscConfig+0x638>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	431a      	orrs	r2, r3
 800309a:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0449      	lsls	r1, r1, #17
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80030ae:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	0549      	lsls	r1, r1, #21
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe f908 	bl	80012d0 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe f903 	bl	80012d0 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e067      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	049b      	lsls	r3, r3, #18
 80030e0:	4013      	ands	r3, r2
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x53a>
 80030e4:	e05f      	b.n	80031a6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030ec:	4934      	ldr	r1, [pc, #208]	; (80031c0 <HAL_RCC_OscConfig+0x634>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 80030f8:	2103      	movs	r1, #3
 80030fa:	438a      	bics	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003104:	4930      	ldr	r1, [pc, #192]	; (80031c8 <HAL_RCC_OscConfig+0x63c>)
 8003106:	400a      	ands	r2, r1
 8003108:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe f8e1 	bl	80012d0 <HAL_GetTick>
 800310e:	0003      	movs	r3, r0
 8003110:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe f8dc 	bl	80012d0 <HAL_GetTick>
 8003118:	0002      	movs	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e040      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	049b      	lsls	r3, r3, #18
 800312e:	4013      	ands	r3, r2
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x588>
 8003132:	e038      	b.n	80031a6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e033      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2203      	movs	r2, #3
 800314a:	401a      	ands	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	429a      	cmp	r2, r3
 8003152:	d126      	bne.n	80031a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2270      	movs	r2, #112	; 0x70
 8003158:	401a      	ands	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11f      	bne.n	80031a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	23fe      	movs	r3, #254	; 0xfe
 8003166:	01db      	lsls	r3, r3, #7
 8003168:	401a      	ands	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d116      	bne.n	80031a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	23f8      	movs	r3, #248	; 0xf8
 8003178:	039b      	lsls	r3, r3, #14
 800317a:	401a      	ands	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d10e      	bne.n	80031a2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	23e0      	movs	r3, #224	; 0xe0
 8003188:	051b      	lsls	r3, r3, #20
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	0f5b      	lsrs	r3, r3, #29
 8003198:	075a      	lsls	r2, r3, #29
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b008      	add	sp, #32
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	00001388 	.word	0x00001388
 80031bc:	efffffff 	.word	0xefffffff
 80031c0:	feffffff 	.word	0xfeffffff
 80031c4:	11c1808c 	.word	0x11c1808c
 80031c8:	eefeffff 	.word	0xeefeffff

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0e9      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b76      	ldr	r3, [pc, #472]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2207      	movs	r2, #7
 80031e6:	4013      	ands	r3, r2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d91e      	bls.n	800322c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b73      	ldr	r3, [pc, #460]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2207      	movs	r2, #7
 80031f4:	4393      	bics	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003200:	f7fe f866 	bl	80012d0 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003208:	e009      	b.n	800321e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320a:	f7fe f861 	bl	80012d0 <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	4a6a      	ldr	r2, [pc, #424]	; (80033c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e0ca      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800321e:	4b67      	ldr	r3, [pc, #412]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2207      	movs	r2, #7
 8003224:	4013      	ands	r3, r2
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d015      	beq.n	8003262 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2204      	movs	r2, #4
 800323c:	4013      	ands	r3, r2
 800323e:	d006      	beq.n	800324e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003240:	4b60      	ldr	r3, [pc, #384]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003246:	21e0      	movs	r1, #224	; 0xe0
 8003248:	01c9      	lsls	r1, r1, #7
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324e:	4b5d      	ldr	r3, [pc, #372]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4a5d      	ldr	r2, [pc, #372]	; (80033c8 <HAL_RCC_ClockConfig+0x1fc>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2201      	movs	r2, #1
 8003268:	4013      	ands	r3, r2
 800326a:	d057      	beq.n	800331c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003274:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	029b      	lsls	r3, r3, #10
 800327c:	4013      	ands	r3, r2
 800327e:	d12b      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e097      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d107      	bne.n	800329c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328c:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	049b      	lsls	r3, r3, #18
 8003294:	4013      	ands	r3, r2
 8003296:	d11f      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e08b      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a4:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4013      	ands	r3, r2
 80032ae:	d113      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e07f      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 80032be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c0:	2202      	movs	r2, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	d108      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e074      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2202      	movs	r2, #2
 80032d0:	4013      	ands	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e06d      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2207      	movs	r2, #7
 80032de:	4393      	bics	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ec:	f7fd fff0 	bl	80012d0 <HAL_GetTick>
 80032f0:	0003      	movs	r3, r0
 80032f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f4:	e009      	b.n	800330a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f6:	f7fd ffeb 	bl	80012d0 <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e054      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2238      	movs	r2, #56	; 0x38
 8003310:	401a      	ands	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	429a      	cmp	r2, r3
 800331a:	d1ec      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2207      	movs	r2, #7
 8003322:	4013      	ands	r3, r2
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d21e      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2207      	movs	r2, #7
 8003330:	4393      	bics	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800333c:	f7fd ffc8 	bl	80012d0 <HAL_GetTick>
 8003340:	0003      	movs	r3, r0
 8003342:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003344:	e009      	b.n	800335a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003346:	f7fd ffc3 	bl	80012d0 <HAL_GetTick>
 800334a:	0002      	movs	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e02c      	b.n	80033b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800335a:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2207      	movs	r2, #7
 8003360:	4013      	ands	r3, r2
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2204      	movs	r2, #4
 800336e:	4013      	ands	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <HAL_RCC_ClockConfig+0x200>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003382:	430a      	orrs	r2, r1
 8003384:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003386:	f000 f829 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 800338a:	0001      	movs	r1, r0
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	220f      	movs	r2, #15
 8003394:	401a      	ands	r2, r3
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x204>)
 8003398:	0092      	lsls	r2, r2, #2
 800339a:	58d3      	ldr	r3, [r2, r3]
 800339c:	221f      	movs	r2, #31
 800339e:	4013      	ands	r3, r2
 80033a0:	000a      	movs	r2, r1
 80033a2:	40da      	lsrs	r2, r3
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_ClockConfig+0x208>)
 80033a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_ClockConfig+0x20c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fd ff33 	bl	8001218 <HAL_InitTick>
 80033b2:	0003      	movs	r3, r0
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40022000 	.word	0x40022000
 80033c0:	00001388 	.word	0x00001388
 80033c4:	40021000 	.word	0x40021000
 80033c8:	fffff0ff 	.word	0xfffff0ff
 80033cc:	ffff8fff 	.word	0xffff8fff
 80033d0:	080058b0 	.word	0x080058b0
 80033d4:	20000028 	.word	0x20000028
 80033d8:	2000002c 	.word	0x2000002c

080033dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e2:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2238      	movs	r2, #56	; 0x38
 80033e8:	4013      	ands	r3, r2
 80033ea:	d10f      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0adb      	lsrs	r3, r3, #11
 80033f2:	2207      	movs	r2, #7
 80033f4:	4013      	ands	r3, r2
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	0013      	movs	r3, r2
 80033fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	4835      	ldr	r0, [pc, #212]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003402:	f7fc fe81 	bl	8000108 <__udivsi3>
 8003406:	0003      	movs	r3, r0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	e05d      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800340c:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2238      	movs	r2, #56	; 0x38
 8003412:	4013      	ands	r3, r2
 8003414:	2b08      	cmp	r3, #8
 8003416:	d102      	bne.n	800341e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCC_GetSysClockFreq+0x100>)
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e054      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341e:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2238      	movs	r2, #56	; 0x38
 8003424:	4013      	ands	r3, r2
 8003426:	2b10      	cmp	r3, #16
 8003428:	d138      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800342a:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2203      	movs	r2, #3
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003434:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	2207      	movs	r2, #7
 800343c:	4013      	ands	r3, r2
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d10d      	bne.n	8003464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	4824      	ldr	r0, [pc, #144]	; (80034dc <HAL_RCC_GetSysClockFreq+0x100>)
 800344c:	f7fc fe5c 	bl	8000108 <__udivsi3>
 8003450:	0003      	movs	r3, r0
 8003452:	0019      	movs	r1, r3
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	227f      	movs	r2, #127	; 0x7f
 800345c:	4013      	ands	r3, r2
 800345e:	434b      	muls	r3, r1
 8003460:	617b      	str	r3, [r7, #20]
        break;
 8003462:	e00d      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	481c      	ldr	r0, [pc, #112]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003468:	f7fc fe4e 	bl	8000108 <__udivsi3>
 800346c:	0003      	movs	r3, r0
 800346e:	0019      	movs	r1, r3
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	227f      	movs	r2, #127	; 0x7f
 8003478:	4013      	ands	r3, r2
 800347a:	434b      	muls	r3, r1
 800347c:	617b      	str	r3, [r7, #20]
        break;
 800347e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0f5b      	lsrs	r3, r3, #29
 8003486:	2207      	movs	r2, #7
 8003488:	4013      	ands	r3, r2
 800348a:	3301      	adds	r3, #1
 800348c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	6978      	ldr	r0, [r7, #20]
 8003492:	f7fc fe39 	bl	8000108 <__udivsi3>
 8003496:	0003      	movs	r3, r0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e015      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2238      	movs	r2, #56	; 0x38
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d103      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2238      	movs	r2, #56	; 0x38
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b18      	cmp	r3, #24
 80034ba:	d103      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80034bc:	23fa      	movs	r3, #250	; 0xfa
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	e001      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034c8:	693b      	ldr	r3, [r7, #16]
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b006      	add	sp, #24
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	40021000 	.word	0x40021000
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b02      	ldr	r3, [pc, #8]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	20000028 	.word	0x20000028

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b5b0      	push	{r4, r5, r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034f8:	f7ff fff2 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 80034fc:	0004      	movs	r4, r0
 80034fe:	f7ff fb39 	bl	8002b74 <LL_RCC_GetAPB1Prescaler>
 8003502:	0003      	movs	r3, r0
 8003504:	0b1a      	lsrs	r2, r3, #12
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003508:	0092      	lsls	r2, r2, #2
 800350a:	58d3      	ldr	r3, [r2, r3]
 800350c:	221f      	movs	r2, #31
 800350e:	4013      	ands	r3, r2
 8003510:	40dc      	lsrs	r4, r3
 8003512:	0023      	movs	r3, r4
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	bdb0      	pop	{r4, r5, r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	080058f0 	.word	0x080058f0

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003528:	2313      	movs	r3, #19
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003530:	2312      	movs	r3, #18
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	029b      	lsls	r3, r3, #10
 8003540:	4013      	ands	r3, r2
 8003542:	d100      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003544:	e0ad      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2011      	movs	r0, #17
 8003548:	183b      	adds	r3, r7, r0
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	055b      	lsls	r3, r3, #21
 8003556:	4013      	ands	r3, r2
 8003558:	d110      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800355c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	0549      	lsls	r1, r1, #21
 8003564:	430a      	orrs	r2, r1
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800356a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	055b      	lsls	r3, r3, #21
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	183b      	adds	r3, r7, r0
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357c:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003582:	2180      	movs	r1, #128	; 0x80
 8003584:	0049      	lsls	r1, r1, #1
 8003586:	430a      	orrs	r2, r1
 8003588:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800358a:	f7fd fea1 	bl	80012d0 <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003592:	e00b      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7fd fe9c 	bl	80012d0 <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d904      	bls.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80035a2:	2313      	movs	r3, #19
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2203      	movs	r2, #3
 80035a8:	701a      	strb	r2, [r3, #0]
        break;
 80035aa:	e005      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ac:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4013      	ands	r3, r2
 80035b6:	d0ed      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80035b8:	2313      	movs	r3, #19
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d15e      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80035c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035c6:	23c0      	movs	r3, #192	; 0xc0
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4013      	ands	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d014      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	4a24      	ldr	r2, [pc, #144]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e8:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80035ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	0249      	lsls	r1, r1, #9
 80035f2:	430a      	orrs	r2, r1
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80035f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035fa:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80035fc:	491e      	ldr	r1, [pc, #120]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80035fe:	400a      	ands	r2, r1
 8003600:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2201      	movs	r2, #1
 800360c:	4013      	ands	r3, r2
 800360e:	d016      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd fe5e 	bl	80012d0 <HAL_GetTick>
 8003614:	0003      	movs	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003618:	e00c      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fd fe59 	bl	80012d0 <HAL_GetTick>
 800361e:	0002      	movs	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	4a15      	ldr	r2, [pc, #84]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d904      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800362a:	2313      	movs	r3, #19
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2203      	movs	r2, #3
 8003630:	701a      	strb	r2, [r3, #0]
            break;
 8003632:	e004      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2202      	movs	r2, #2
 800363a:	4013      	ands	r3, r2
 800363c:	d0ed      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800363e:	2313      	movs	r3, #19
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800364e:	4013      	ands	r3, r2
 8003650:	0019      	movs	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003658:	430a      	orrs	r2, r1
 800365a:	65da      	str	r2, [r3, #92]	; 0x5c
 800365c:	e016      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800365e:	2312      	movs	r3, #18
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	2213      	movs	r2, #19
 8003664:	18ba      	adds	r2, r7, r2
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e00f      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
 8003674:	fffffcff 	.word	0xfffffcff
 8003678:	fffeffff 	.word	0xfffeffff
 800367c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	2312      	movs	r3, #18
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2213      	movs	r2, #19
 8003686:	18ba      	adds	r2, r7, r2
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800368c:	2311      	movs	r3, #17
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b84      	ldr	r3, [pc, #528]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369a:	4b83      	ldr	r3, [pc, #524]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800369c:	4983      	ldr	r1, [pc, #524]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800369e:	400a      	ands	r2, r1
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2201      	movs	r2, #1
 80036a8:	4013      	ands	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ac:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	2203      	movs	r2, #3
 80036b2:	4393      	bics	r3, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80036bc:	430a      	orrs	r2, r1
 80036be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2202      	movs	r2, #2
 80036c6:	4013      	ands	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ca:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	220c      	movs	r2, #12
 80036d0:	4393      	bics	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2210      	movs	r2, #16
 80036e4:	4013      	ands	r3, r2
 80036e6:	d009      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e8:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	4a70      	ldr	r2, [pc, #448]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	0019      	movs	r1, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4013      	ands	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003708:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	4a69      	ldr	r2, [pc, #420]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	4b64      	ldr	r3, [pc, #400]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003718:	430a      	orrs	r2, r1
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4013      	ands	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003728:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	4a62      	ldr	r2, [pc, #392]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800372e:	4013      	ands	r3, r2
 8003730:	0019      	movs	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003738:	430a      	orrs	r2, r1
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2220      	movs	r2, #32
 8003742:	4013      	ands	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003746:	4b58      	ldr	r3, [pc, #352]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	4a5c      	ldr	r2, [pc, #368]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	4b54      	ldr	r3, [pc, #336]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003756:	430a      	orrs	r2, r1
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	02db      	lsls	r3, r3, #11
 8003762:	4013      	ands	r3, r2
 8003764:	d016      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	4a55      	ldr	r2, [pc, #340]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800376c:	4013      	ands	r3, r2
 800376e:	0019      	movs	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003776:	430a      	orrs	r2, r1
 8003778:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	23c0      	movs	r3, #192	; 0xc0
 8003780:	051b      	lsls	r3, r3, #20
 8003782:	429a      	cmp	r2, r3
 8003784:	d106      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003786:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	0449      	lsls	r1, r1, #17
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	01db      	lsls	r3, r3, #7
 800379c:	4013      	ands	r3, r2
 800379e:	d015      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037a0:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	0899      	lsrs	r1, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ac:	4b3e      	ldr	r3, [pc, #248]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80037ae:	430a      	orrs	r2, r1
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	05db      	lsls	r3, r3, #23
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d106      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037be:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0249      	lsls	r1, r1, #9
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	031b      	lsls	r3, r3, #12
 80037d4:	4013      	ands	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	2240      	movs	r2, #64	; 0x40
 80037de:	4393      	bics	r3, r2
 80037e0:	0019      	movs	r1, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80037e8:	430a      	orrs	r2, r1
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	039b      	lsls	r3, r3, #14
 80037f4:	4013      	ands	r3, r2
 80037f6:	d016      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	4a31      	ldr	r2, [pc, #196]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003808:	430a      	orrs	r2, r1
 800380a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	03db      	lsls	r3, r3, #15
 8003814:	429a      	cmp	r2, r3
 8003816:	d106      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	0449      	lsls	r1, r1, #17
 8003822:	430a      	orrs	r2, r1
 8003824:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	03db      	lsls	r3, r3, #15
 800382e:	4013      	ands	r3, r2
 8003830:	d016      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003842:	430a      	orrs	r2, r1
 8003844:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	045b      	lsls	r3, r3, #17
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	0449      	lsls	r1, r1, #17
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	4013      	ands	r3, r2
 800386a:	d016      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	4a16      	ldr	r2, [pc, #88]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003872:	4013      	ands	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800387c:	430a      	orrs	r2, r1
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	01db      	lsls	r3, r3, #7
 8003888:	429a      	cmp	r2, r3
 800388a:	d106      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	0249      	lsls	r1, r1, #9
 8003896:	430a      	orrs	r2, r1
 8003898:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800389a:	2312      	movs	r3, #18
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b006      	add	sp, #24
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000
 80038ac:	efffffff 	.word	0xefffffff
 80038b0:	fffff3ff 	.word	0xfffff3ff
 80038b4:	fff3ffff 	.word	0xfff3ffff
 80038b8:	ffcfffff 	.word	0xffcfffff
 80038bc:	ffffcfff 	.word	0xffffcfff
 80038c0:	f3ffffff 	.word	0xf3ffffff
 80038c4:	ffbfffff 	.word	0xffbfffff
 80038c8:	feffffff 	.word	0xfeffffff
 80038cc:	ffff3fff 	.word	0xffff3fff

080038d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e046      	b.n	8003970 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2284      	movs	r2, #132	; 0x84
 80038e6:	589b      	ldr	r3, [r3, r2]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d107      	bne.n	80038fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fd f9e8 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2284      	movs	r2, #132	; 0x84
 8003900:	2124      	movs	r1, #36	; 0x24
 8003902:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2101      	movs	r1, #1
 8003910:	438a      	bics	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	0018      	movs	r0, r3
 8003918:	f000 fd46 	bl	80043a8 <UART_SetConfig>
 800391c:	0003      	movs	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e024      	b.n	8003970 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	0018      	movs	r0, r3
 8003932:	f000 fffd 	bl	8004930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	490d      	ldr	r1, [pc, #52]	; (8003978 <HAL_UART_Init+0xa8>)
 8003942:	400a      	ands	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	212a      	movs	r1, #42	; 0x2a
 8003952:	438a      	bics	r2, r1
 8003954:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2101      	movs	r1, #1
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0018      	movs	r0, r3
 800396a:	f001 f895 	bl	8004a98 <UART_CheckIdleState>
 800396e:	0003      	movs	r3, r0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}
 8003978:	ffffb7ff 	.word	0xffffb7ff

0800397c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2284      	movs	r2, #132	; 0x84
 8003990:	589b      	ldr	r3, [r3, r2]
 8003992:	2b20      	cmp	r3, #32
 8003994:	d000      	beq.n	8003998 <HAL_UART_Transmit+0x1c>
 8003996:	e097      	b.n	8003ac8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_UART_Transmit+0x2a>
 800399e:	1dbb      	adds	r3, r7, #6
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e08f      	b.n	8003aca <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	015b      	lsls	r3, r3, #5
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d109      	bne.n	80039ca <HAL_UART_Transmit+0x4e>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2201      	movs	r2, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	d001      	beq.n	80039ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Transmit+0x5c>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e078      	b.n	8003aca <HAL_UART_Transmit+0x14e>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	2101      	movs	r1, #1
 80039de:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	228c      	movs	r2, #140	; 0x8c
 80039e4:	2100      	movs	r1, #0
 80039e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2284      	movs	r2, #132	; 0x84
 80039ec:	2121      	movs	r1, #33	; 0x21
 80039ee:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f0:	f7fd fc6e 	bl	80012d0 <HAL_GetTick>
 80039f4:	0003      	movs	r3, r0
 80039f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1dba      	adds	r2, r7, #6
 80039fc:	2154      	movs	r1, #84	; 0x54
 80039fe:	8812      	ldrh	r2, [r2, #0]
 8003a00:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1dba      	adds	r2, r7, #6
 8003a06:	2156      	movs	r1, #86	; 0x56
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	015b      	lsls	r3, r3, #5
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d108      	bne.n	8003a2a <HAL_UART_Transmit+0xae>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	e003      	b.n	8003a32 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	2100      	movs	r1, #0
 8003a38:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003a3a:	e02c      	b.n	8003a96 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	0013      	movs	r3, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	f001 f86f 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003a4e:	1e03      	subs	r3, r0, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e039      	b.n	8003aca <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	001a      	movs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	05d2      	lsls	r2, r2, #23
 8003a68:	0dd2      	lsrs	r2, r2, #23
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	3302      	adds	r3, #2
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e007      	b.n	8003a84 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2256      	movs	r2, #86	; 0x56
 8003a88:	5a9b      	ldrh	r3, [r3, r2]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b299      	uxth	r1, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2256      	movs	r2, #86	; 0x56
 8003a94:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2256      	movs	r2, #86	; 0x56
 8003a9a:	5a9b      	ldrh	r3, [r3, r2]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cc      	bne.n	8003a3c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	0013      	movs	r3, r2
 8003aac:	2200      	movs	r2, #0
 8003aae:	2140      	movs	r1, #64	; 0x40
 8003ab0:	f001 f83c 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e006      	b.n	8003aca <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2284      	movs	r2, #132	; 0x84
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b008      	add	sp, #32
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	1dbb      	adds	r3, r7, #6
 8003ae2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2288      	movs	r2, #136	; 0x88
 8003ae8:	589b      	ldr	r3, [r3, r2]
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d000      	beq.n	8003af0 <HAL_UART_Receive+0x1c>
 8003aee:	e0db      	b.n	8003ca8 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_UART_Receive+0x2a>
 8003af6:	1dbb      	adds	r3, r7, #6
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0d3      	b.n	8003caa <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	015b      	lsls	r3, r3, #5
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d109      	bne.n	8003b22 <HAL_UART_Receive+0x4e>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d105      	bne.n	8003b22 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d001      	beq.n	8003b22 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0c3      	b.n	8003caa <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2280      	movs	r2, #128	; 0x80
 8003b26:	5c9b      	ldrb	r3, [r3, r2]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Receive+0x5c>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0bc      	b.n	8003caa <HAL_UART_Receive+0x1d6>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	2101      	movs	r1, #1
 8003b36:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	228c      	movs	r2, #140	; 0x8c
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2288      	movs	r2, #136	; 0x88
 8003b44:	2122      	movs	r1, #34	; 0x22
 8003b46:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fbbf 	bl	80012d0 <HAL_GetTick>
 8003b52:	0003      	movs	r3, r0
 8003b54:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1dba      	adds	r2, r7, #6
 8003b5a:	215c      	movs	r1, #92	; 0x5c
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1dba      	adds	r2, r7, #6
 8003b64:	215e      	movs	r1, #94	; 0x5e
 8003b66:	8812      	ldrh	r2, [r2, #0]
 8003b68:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	015b      	lsls	r3, r3, #5
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d10d      	bne.n	8003b92 <HAL_UART_Receive+0xbe>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Receive+0xb4>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2260      	movs	r2, #96	; 0x60
 8003b82:	494c      	ldr	r1, [pc, #304]	; (8003cb4 <HAL_UART_Receive+0x1e0>)
 8003b84:	5299      	strh	r1, [r3, r2]
 8003b86:	e02e      	b.n	8003be6 <HAL_UART_Receive+0x112>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2260      	movs	r2, #96	; 0x60
 8003b8c:	21ff      	movs	r1, #255	; 0xff
 8003b8e:	5299      	strh	r1, [r3, r2]
 8003b90:	e029      	b.n	8003be6 <HAL_UART_Receive+0x112>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <HAL_UART_Receive+0xe2>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_UART_Receive+0xd8>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2260      	movs	r2, #96	; 0x60
 8003ba6:	21ff      	movs	r1, #255	; 0xff
 8003ba8:	5299      	strh	r1, [r3, r2]
 8003baa:	e01c      	b.n	8003be6 <HAL_UART_Receive+0x112>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2260      	movs	r2, #96	; 0x60
 8003bb0:	217f      	movs	r1, #127	; 0x7f
 8003bb2:	5299      	strh	r1, [r3, r2]
 8003bb4:	e017      	b.n	8003be6 <HAL_UART_Receive+0x112>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	055b      	lsls	r3, r3, #21
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10d      	bne.n	8003bde <HAL_UART_Receive+0x10a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_UART_Receive+0x100>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2260      	movs	r2, #96	; 0x60
 8003bce:	217f      	movs	r1, #127	; 0x7f
 8003bd0:	5299      	strh	r1, [r3, r2]
 8003bd2:	e008      	b.n	8003be6 <HAL_UART_Receive+0x112>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2260      	movs	r2, #96	; 0x60
 8003bd8:	213f      	movs	r1, #63	; 0x3f
 8003bda:	5299      	strh	r1, [r3, r2]
 8003bdc:	e003      	b.n	8003be6 <HAL_UART_Receive+0x112>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2260      	movs	r2, #96	; 0x60
 8003be2:	2100      	movs	r1, #0
 8003be4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003be6:	2312      	movs	r3, #18
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	2160      	movs	r1, #96	; 0x60
 8003bee:	5a52      	ldrh	r2, [r2, r1]
 8003bf0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	015b      	lsls	r3, r3, #5
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d108      	bne.n	8003c10 <HAL_UART_Receive+0x13c>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e003      	b.n	8003c18 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c20:	e036      	b.n	8003c90 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2120      	movs	r1, #32
 8003c30:	f000 ff7c 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003c34:	1e03      	subs	r3, r0, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e036      	b.n	8003caa <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2212      	movs	r2, #18
 8003c4c:	18ba      	adds	r2, r7, r2
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	4013      	ands	r3, r2
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e00e      	b.n	8003c7e <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2212      	movs	r2, #18
 8003c6a:	18ba      	adds	r2, r7, r2
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	225e      	movs	r2, #94	; 0x5e
 8003c82:	5a9b      	ldrh	r3, [r3, r2]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b299      	uxth	r1, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	225e      	movs	r2, #94	; 0x5e
 8003c8e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	225e      	movs	r2, #94	; 0x5e
 8003c94:	5a9b      	ldrh	r3, [r3, r2]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1c2      	bne.n	8003c22 <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2288      	movs	r2, #136	; 0x88
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e000      	b.n	8003caa <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b008      	add	sp, #32
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	000001ff 	.word	0x000001ff

08003cb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	1dbb      	adds	r3, r7, #6
 8003cc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2288      	movs	r2, #136	; 0x88
 8003cca:	589b      	ldr	r3, [r3, r2]
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d12f      	bne.n	8003d30 <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_UART_Receive_IT+0x26>
 8003cd6:	1dbb      	adds	r3, r7, #6
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e027      	b.n	8003d32 <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	015b      	lsls	r3, r3, #5
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d109      	bne.n	8003d02 <HAL_UART_Receive_IT+0x4a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d001      	beq.n	8003d02 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e017      	b.n	8003d32 <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	5c9b      	ldrb	r3, [r3, r2]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_UART_Receive_IT+0x58>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e010      	b.n	8003d32 <HAL_UART_Receive_IT+0x7a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	2101      	movs	r1, #1
 8003d16:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d1e:	1dbb      	adds	r3, r7, #6
 8003d20:	881a      	ldrh	r2, [r3, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 ff82 	bl	8004c30 <UART_Start_Receive_IT>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8003d44:	2301      	movs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Disable interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4963      	ldr	r1, [pc, #396]	; (8003ee0 <HAL_UART_Abort_IT+0x1a4>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]
                                   USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4960      	ldr	r1, [pc, #384]	; (8003ee4 <HAL_UART_Abort_IT+0x1a8>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2110      	movs	r1, #16
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00f      	beq.n	8003da8 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d104      	bne.n	8003da0 <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9a:	4a53      	ldr	r2, [pc, #332]	; (8003ee8 <HAL_UART_Abort_IT+0x1ac>)
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d9e:	e003      	b.n	8003da8 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da4:	2200      	movs	r2, #0
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00f      	beq.n	8003dd0 <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2240      	movs	r2, #64	; 0x40
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d104      	bne.n	8003dc8 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc2:	4a4a      	ldr	r2, [pc, #296]	; (8003eec <HAL_UART_Abort_IT+0x1b0>)
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8003dc6:	e003      	b.n	8003dd0 <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dcc:	2200      	movs	r2, #0
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d119      	bne.n	8003e12 <HAL_UART_Abort_IT+0xd6>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	438a      	bics	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <HAL_UART_Abort_IT+0xd6>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fe fb8c 	bl	8002518 <HAL_DMA_Abort_IT>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d004      	beq.n	8003e0e <HAL_UART_Abort_IT+0xd2>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e08:	2200      	movs	r2, #0
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e0c:	e001      	b.n	8003e12 <HAL_UART_Abort_IT+0xd6>
      }
      else
      {
        abortcplt = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2240      	movs	r2, #64	; 0x40
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d11b      	bne.n	8003e58 <HAL_UART_Abort_IT+0x11c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2140      	movs	r1, #64	; 0x40
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00f      	beq.n	8003e58 <HAL_UART_Abort_IT+0x11c>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fe fb6b 	bl	8002518 <HAL_DMA_Abort_IT>
 8003e42:	1e03      	subs	r3, r0, #0
 8003e44:	d006      	beq.n	8003e54 <HAL_UART_Abort_IT+0x118>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e001      	b.n	8003e58 <HAL_UART_Abort_IT+0x11c>
      }
      else
      {
        abortcplt = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d13a      	bne.n	8003ed4 <HAL_UART_Abort_IT+0x198>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2256      	movs	r2, #86	; 0x56
 8003e62:	2100      	movs	r1, #0
 8003e64:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	225e      	movs	r2, #94	; 0x5e
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	228c      	movs	r2, #140	; 0x8c
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	220f      	movs	r2, #15
 8003e88:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	059b      	lsls	r3, r3, #22
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d107      	bne.n	8003ea6 <HAL_UART_Abort_IT+0x16a>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2110      	movs	r1, #16
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2108      	movs	r1, #8
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2284      	movs	r2, #132	; 0x84
 8003eba:	2120      	movs	r1, #32
 8003ebc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2288      	movs	r2, #136	; 0x88
 8003ec2:	2120      	movs	r1, #32
 8003ec4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 fa56 	bl	8004380 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b004      	add	sp, #16
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	fffffe1f 	.word	0xfffffe1f
 8003ee4:	ef7ffffe 	.word	0xef7ffffe
 8003ee8:	08004e53 	.word	0x08004e53
 8003eec:	08004edf 	.word	0x08004edf

08003ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4abb      	ldr	r2, [pc, #748]	; (8004200 <HAL_UART_IRQHandler+0x310>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d117      	bne.n	8003f4e <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2220      	movs	r2, #32
 8003f22:	4013      	ands	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d104      	bne.n	8003f38 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	055b      	lsls	r3, r3, #21
 8003f34:	4013      	ands	r3, r2
 8003f36:	d00a      	beq.n	8003f4e <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d100      	bne.n	8003f42 <HAL_UART_IRQHandler+0x52>
 8003f40:	e1fd      	b.n	800433e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	0010      	movs	r0, r2
 8003f4a:	4798      	blx	r3
      }
      return;
 8003f4c:	e1f7      	b.n	800433e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d100      	bne.n	8003f56 <HAL_UART_IRQHandler+0x66>
 8003f54:	e0de      	b.n	8004114 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	4aaa      	ldr	r2, [pc, #680]	; (8004204 <HAL_UART_IRQHandler+0x314>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d104      	bne.n	8003f68 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4aa9      	ldr	r2, [pc, #676]	; (8004208 <HAL_UART_IRQHandler+0x318>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	d100      	bne.n	8003f68 <HAL_UART_IRQHandler+0x78>
 8003f66:	e0d5      	b.n	8004114 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d010      	beq.n	8003f92 <HAL_UART_IRQHandler+0xa2>
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4013      	ands	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	228c      	movs	r2, #140	; 0x8c
 8003f86:	589b      	ldr	r3, [r3, r2]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	218c      	movs	r1, #140	; 0x8c
 8003f90:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2202      	movs	r2, #2
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00f      	beq.n	8003fba <HAL_UART_IRQHandler+0xca>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	228c      	movs	r2, #140	; 0x8c
 8003fae:	589b      	ldr	r3, [r3, r2]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	218c      	movs	r1, #140	; 0x8c
 8003fb8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xf2>
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	228c      	movs	r2, #140	; 0x8c
 8003fd6:	589b      	ldr	r3, [r3, r2]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	218c      	movs	r1, #140	; 0x8c
 8003fe0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2220      	movs	r2, #32
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d103      	bne.n	8003ffa <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	4a83      	ldr	r2, [pc, #524]	; (8004204 <HAL_UART_IRQHandler+0x314>)
 8003ff6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ff8:	d00b      	beq.n	8004012 <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2208      	movs	r2, #8
 8004000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	228c      	movs	r2, #140	; 0x8c
 8004006:	589b      	ldr	r3, [r3, r2]
 8004008:	2208      	movs	r2, #8
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	218c      	movs	r1, #140	; 0x8c
 8004010:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	4013      	ands	r3, r2
 800401a:	d011      	beq.n	8004040 <HAL_UART_IRQHandler+0x150>
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	04db      	lsls	r3, r3, #19
 8004022:	4013      	ands	r3, r2
 8004024:	d00c      	beq.n	8004040 <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	0112      	lsls	r2, r2, #4
 800402e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	228c      	movs	r2, #140	; 0x8c
 8004034:	589b      	ldr	r3, [r3, r2]
 8004036:	2220      	movs	r2, #32
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	218c      	movs	r1, #140	; 0x8c
 800403e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	228c      	movs	r2, #140	; 0x8c
 8004044:	589b      	ldr	r3, [r3, r2]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d100      	bne.n	800404c <HAL_UART_IRQHandler+0x15c>
 800404a:	e17a      	b.n	8004342 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2220      	movs	r2, #32
 8004050:	4013      	ands	r3, r2
 8004052:	d011      	beq.n	8004078 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2220      	movs	r2, #32
 8004058:	4013      	ands	r3, r2
 800405a:	d104      	bne.n	8004066 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	055b      	lsls	r3, r3, #21
 8004062:	4013      	ands	r3, r2
 8004064:	d008      	beq.n	8004078 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	0010      	movs	r0, r2
 8004076:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	228c      	movs	r2, #140	; 0x8c
 800407c:	589b      	ldr	r3, [r3, r2]
 800407e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	4013      	ands	r3, r2
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d003      	beq.n	8004096 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2228      	movs	r2, #40	; 0x28
 8004092:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004094:	d033      	beq.n	80040fe <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 fe91 	bl	8004dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2240      	movs	r2, #64	; 0x40
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d123      	bne.n	80040f4 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2140      	movs	r1, #64	; 0x40
 80040b8:	438a      	bics	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c8:	4a50      	ldr	r2, [pc, #320]	; (800420c <HAL_UART_IRQHandler+0x31c>)
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7fe fa21 	bl	8002518 <HAL_DMA_Abort_IT>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d01a      	beq.n	8004110 <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e4:	0018      	movs	r0, r3
 80040e6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e012      	b.n	8004110 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 f93f 	bl	8004370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f2:	e00d      	b.n	8004110 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f93a 	bl	8004370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e008      	b.n	8004110 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 f935 	bl	8004370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	228c      	movs	r2, #140	; 0x8c
 800410a:	2100      	movs	r1, #0
 800410c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800410e:	e118      	b.n	8004342 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	46c0      	nop			; (mov r8, r8)
    return;
 8004112:	e116      	b.n	8004342 <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d000      	beq.n	800411e <HAL_UART_IRQHandler+0x22e>
 800411c:	e0bb      	b.n	8004296 <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2210      	movs	r2, #16
 8004122:	4013      	ands	r3, r2
 8004124:	d100      	bne.n	8004128 <HAL_UART_IRQHandler+0x238>
 8004126:	e0b6      	b.n	8004296 <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2210      	movs	r2, #16
 800412c:	4013      	ands	r3, r2
 800412e:	d100      	bne.n	8004132 <HAL_UART_IRQHandler+0x242>
 8004130:	e0b1      	b.n	8004296 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2210      	movs	r2, #16
 8004138:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2240      	movs	r2, #64	; 0x40
 8004142:	4013      	ands	r3, r2
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d165      	bne.n	8004214 <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	2108      	movs	r1, #8
 8004152:	187b      	adds	r3, r7, r1
 8004154:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8004156:	187b      	adds	r3, r7, r1
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d100      	bne.n	8004160 <HAL_UART_IRQHandler+0x270>
 800415e:	e0f2      	b.n	8004346 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	225c      	movs	r2, #92	; 0x5c
 8004164:	5a9b      	ldrh	r3, [r3, r2]
 8004166:	187a      	adds	r2, r7, r1
 8004168:	8812      	ldrh	r2, [r2, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d300      	bcc.n	8004170 <HAL_UART_IRQHandler+0x280>
 800416e:	e0ea      	b.n	8004346 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	187a      	adds	r2, r7, r1
 8004174:	215e      	movs	r1, #94	; 0x5e
 8004176:	8812      	ldrh	r2, [r2, #0]
 8004178:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2220      	movs	r2, #32
 8004184:	4013      	ands	r3, r2
 8004186:	d12b      	bne.n	80041e0 <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	491f      	ldr	r1, [pc, #124]	; (8004210 <HAL_UART_IRQHandler+0x320>)
 8004194:	400a      	ands	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2101      	movs	r1, #1
 80041a4:	438a      	bics	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2140      	movs	r1, #64	; 0x40
 80041b4:	438a      	bics	r2, r1
 80041b6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2288      	movs	r2, #136	; 0x88
 80041bc:	2120      	movs	r1, #32
 80041be:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2110      	movs	r1, #16
 80041d2:	438a      	bics	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041da:	0018      	movs	r0, r3
 80041dc:	f7fe f93a 	bl	8002454 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	225c      	movs	r2, #92	; 0x5c
 80041e4:	5a9a      	ldrh	r2, [r3, r2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	215e      	movs	r1, #94	; 0x5e
 80041ea:	5a5b      	ldrh	r3, [r3, r1]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0011      	movs	r1, r2
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f8ca 	bl	8004390 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041fc:	e0a3      	b.n	8004346 <HAL_UART_IRQHandler+0x456>
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	0000080f 	.word	0x0000080f
 8004204:	10000001 	.word	0x10000001
 8004208:	04000120 	.word	0x04000120
 800420c:	08004e25 	.word	0x08004e25
 8004210:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	225c      	movs	r2, #92	; 0x5c
 8004218:	5a99      	ldrh	r1, [r3, r2]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	225e      	movs	r2, #94	; 0x5e
 800421e:	5a9b      	ldrh	r3, [r3, r2]
 8004220:	b29a      	uxth	r2, r3
 8004222:	200a      	movs	r0, #10
 8004224:	183b      	adds	r3, r7, r0
 8004226:	1a8a      	subs	r2, r1, r2
 8004228:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	225e      	movs	r2, #94	; 0x5e
 800422e:	5a9b      	ldrh	r3, [r3, r2]
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d100      	bne.n	8004238 <HAL_UART_IRQHandler+0x348>
 8004236:	e088      	b.n	800434a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8004238:	183b      	adds	r3, r7, r0
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d100      	bne.n	8004242 <HAL_UART_IRQHandler+0x352>
 8004240:	e083      	b.n	800434a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4942      	ldr	r1, [pc, #264]	; (8004358 <HAL_UART_IRQHandler+0x468>)
 800424e:	400a      	ands	r2, r1
 8004250:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	493f      	ldr	r1, [pc, #252]	; (800435c <HAL_UART_IRQHandler+0x46c>)
 800425e:	400a      	ands	r2, r1
 8004260:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2288      	movs	r2, #136	; 0x88
 8004266:	2120      	movs	r1, #32
 8004268:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2110      	movs	r1, #16
 8004282:	438a      	bics	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004286:	183b      	adds	r3, r7, r0
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0011      	movs	r1, r2
 800428e:	0018      	movs	r0, r3
 8004290:	f000 f87e 	bl	8004390 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004294:	e059      	b.n	800434a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	035b      	lsls	r3, r3, #13
 800429c:	4013      	ands	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_UART_IRQHandler+0x3ce>
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	03db      	lsls	r3, r3, #15
 80042a6:	4013      	ands	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	0352      	lsls	r2, r2, #13
 80042b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f001 f97c 	bl	80055b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042bc:	e048      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2280      	movs	r2, #128	; 0x80
 80042c2:	4013      	ands	r3, r2
 80042c4:	d012      	beq.n	80042ec <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2280      	movs	r2, #128	; 0x80
 80042ca:	4013      	ands	r3, r2
 80042cc:	d104      	bne.n	80042d8 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	4013      	ands	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d036      	beq.n	800434e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	0010      	movs	r0, r2
 80042e8:	4798      	blx	r3
    }
    return;
 80042ea:	e030      	b.n	800434e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	4013      	ands	r3, r2
 80042f2:	d008      	beq.n	8004306 <HAL_UART_IRQHandler+0x416>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2240      	movs	r2, #64	; 0x40
 80042f8:	4013      	ands	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 fe2d 	bl	8004f5e <UART_EndTransmit_IT>
    return;
 8004304:	e024      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	4013      	ands	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_UART_IRQHandler+0x434>
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	05db      	lsls	r3, r3, #23
 8004316:	4013      	ands	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f001 f959 	bl	80055d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004322:	e015      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	045b      	lsls	r3, r3, #17
 800432a:	4013      	ands	r3, r2
 800432c:	d010      	beq.n	8004350 <HAL_UART_IRQHandler+0x460>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	da0d      	bge.n	8004350 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0018      	movs	r0, r3
 8004338:	f001 f944 	bl	80055c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800433c:	e008      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
      return;
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	e006      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
    return;
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	e004      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
      return;
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	e002      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
      return;
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	e000      	b.n	8004350 <HAL_UART_IRQHandler+0x460>
    return;
 800434e:	46c0      	nop			; (mov r8, r8)
  }
}
 8004350:	46bd      	mov	sp, r7
 8004352:	b008      	add	sp, #32
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	fffffedf 	.word	0xfffffedf
 800435c:	effffffe 	.word	0xeffffffe

08004360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b002      	add	sp, #8
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b002      	add	sp, #8
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	000a      	movs	r2, r1
 800439a:	1cbb      	adds	r3, r7, #2
 800439c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b002      	add	sp, #8
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a8:	b5b0      	push	{r4, r5, r7, lr}
 80043aa:	b090      	sub	sp, #64	; 0x40
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043b0:	231a      	movs	r3, #26
 80043b2:	2220      	movs	r2, #32
 80043b4:	189b      	adds	r3, r3, r2
 80043b6:	19db      	adds	r3, r3, r7
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043da:	4313      	orrs	r3, r2
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4aae      	ldr	r2, [pc, #696]	; (80046a0 <UART_SetConfig+0x2f8>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4aaa      	ldr	r2, [pc, #680]	; (80046a4 <UART_SetConfig+0x2fc>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	68d9      	ldr	r1, [r3, #12]
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	0003      	movs	r3, r0
 800440a:	430b      	orrs	r3, r1
 800440c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4aa3      	ldr	r2, [pc, #652]	; (80046a8 <UART_SetConfig+0x300>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004424:	4313      	orrs	r3, r2
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4a9f      	ldr	r2, [pc, #636]	; (80046ac <UART_SetConfig+0x304>)
 8004430:	4013      	ands	r3, r2
 8004432:	0019      	movs	r1, r3
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	430b      	orrs	r3, r1
 800443c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	220f      	movs	r2, #15
 8004446:	4393      	bics	r3, r2
 8004448:	0018      	movs	r0, r3
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	0003      	movs	r3, r0
 8004454:	430b      	orrs	r3, r1
 8004456:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a94      	ldr	r2, [pc, #592]	; (80046b0 <UART_SetConfig+0x308>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d131      	bne.n	80044c6 <UART_SetConfig+0x11e>
 8004462:	4b94      	ldr	r3, [pc, #592]	; (80046b4 <UART_SetConfig+0x30c>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	2203      	movs	r2, #3
 8004468:	4013      	ands	r3, r2
 800446a:	2b03      	cmp	r3, #3
 800446c:	d01d      	beq.n	80044aa <UART_SetConfig+0x102>
 800446e:	d823      	bhi.n	80044b8 <UART_SetConfig+0x110>
 8004470:	2b02      	cmp	r3, #2
 8004472:	d00c      	beq.n	800448e <UART_SetConfig+0xe6>
 8004474:	d820      	bhi.n	80044b8 <UART_SetConfig+0x110>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <UART_SetConfig+0xd8>
 800447a:	2b01      	cmp	r3, #1
 800447c:	d00e      	beq.n	800449c <UART_SetConfig+0xf4>
 800447e:	e01b      	b.n	80044b8 <UART_SetConfig+0x110>
 8004480:	231b      	movs	r3, #27
 8004482:	2220      	movs	r2, #32
 8004484:	189b      	adds	r3, r3, r2
 8004486:	19db      	adds	r3, r3, r7
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e0b4      	b.n	80045f8 <UART_SetConfig+0x250>
 800448e:	231b      	movs	r3, #27
 8004490:	2220      	movs	r2, #32
 8004492:	189b      	adds	r3, r3, r2
 8004494:	19db      	adds	r3, r3, r7
 8004496:	2202      	movs	r2, #2
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e0ad      	b.n	80045f8 <UART_SetConfig+0x250>
 800449c:	231b      	movs	r3, #27
 800449e:	2220      	movs	r2, #32
 80044a0:	189b      	adds	r3, r3, r2
 80044a2:	19db      	adds	r3, r3, r7
 80044a4:	2204      	movs	r2, #4
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e0a6      	b.n	80045f8 <UART_SetConfig+0x250>
 80044aa:	231b      	movs	r3, #27
 80044ac:	2220      	movs	r2, #32
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	19db      	adds	r3, r3, r7
 80044b2:	2208      	movs	r2, #8
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e09f      	b.n	80045f8 <UART_SetConfig+0x250>
 80044b8:	231b      	movs	r3, #27
 80044ba:	2220      	movs	r2, #32
 80044bc:	189b      	adds	r3, r3, r2
 80044be:	19db      	adds	r3, r3, r7
 80044c0:	2210      	movs	r2, #16
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e098      	b.n	80045f8 <UART_SetConfig+0x250>
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7b      	ldr	r2, [pc, #492]	; (80046b8 <UART_SetConfig+0x310>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d131      	bne.n	8004534 <UART_SetConfig+0x18c>
 80044d0:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <UART_SetConfig+0x30c>)
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	220c      	movs	r2, #12
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d01d      	beq.n	8004518 <UART_SetConfig+0x170>
 80044dc:	d823      	bhi.n	8004526 <UART_SetConfig+0x17e>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d00c      	beq.n	80044fc <UART_SetConfig+0x154>
 80044e2:	d820      	bhi.n	8004526 <UART_SetConfig+0x17e>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <UART_SetConfig+0x146>
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d00e      	beq.n	800450a <UART_SetConfig+0x162>
 80044ec:	e01b      	b.n	8004526 <UART_SetConfig+0x17e>
 80044ee:	231b      	movs	r3, #27
 80044f0:	2220      	movs	r2, #32
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e07d      	b.n	80045f8 <UART_SetConfig+0x250>
 80044fc:	231b      	movs	r3, #27
 80044fe:	2220      	movs	r2, #32
 8004500:	189b      	adds	r3, r3, r2
 8004502:	19db      	adds	r3, r3, r7
 8004504:	2202      	movs	r2, #2
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e076      	b.n	80045f8 <UART_SetConfig+0x250>
 800450a:	231b      	movs	r3, #27
 800450c:	2220      	movs	r2, #32
 800450e:	189b      	adds	r3, r3, r2
 8004510:	19db      	adds	r3, r3, r7
 8004512:	2204      	movs	r2, #4
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e06f      	b.n	80045f8 <UART_SetConfig+0x250>
 8004518:	231b      	movs	r3, #27
 800451a:	2220      	movs	r2, #32
 800451c:	189b      	adds	r3, r3, r2
 800451e:	19db      	adds	r3, r3, r7
 8004520:	2208      	movs	r2, #8
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	e068      	b.n	80045f8 <UART_SetConfig+0x250>
 8004526:	231b      	movs	r3, #27
 8004528:	2220      	movs	r2, #32
 800452a:	189b      	adds	r3, r3, r2
 800452c:	19db      	adds	r3, r3, r7
 800452e:	2210      	movs	r2, #16
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e061      	b.n	80045f8 <UART_SetConfig+0x250>
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a60      	ldr	r2, [pc, #384]	; (80046bc <UART_SetConfig+0x314>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d106      	bne.n	800454c <UART_SetConfig+0x1a4>
 800453e:	231b      	movs	r3, #27
 8004540:	2220      	movs	r2, #32
 8004542:	189b      	adds	r3, r3, r2
 8004544:	19db      	adds	r3, r3, r7
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e055      	b.n	80045f8 <UART_SetConfig+0x250>
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a5b      	ldr	r2, [pc, #364]	; (80046c0 <UART_SetConfig+0x318>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d106      	bne.n	8004564 <UART_SetConfig+0x1bc>
 8004556:	231b      	movs	r3, #27
 8004558:	2220      	movs	r2, #32
 800455a:	189b      	adds	r3, r3, r2
 800455c:	19db      	adds	r3, r3, r7
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e049      	b.n	80045f8 <UART_SetConfig+0x250>
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a4f      	ldr	r2, [pc, #316]	; (80046a8 <UART_SetConfig+0x300>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d13e      	bne.n	80045ec <UART_SetConfig+0x244>
 800456e:	4b51      	ldr	r3, [pc, #324]	; (80046b4 <UART_SetConfig+0x30c>)
 8004570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004572:	23c0      	movs	r3, #192	; 0xc0
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	4013      	ands	r3, r2
 8004578:	22c0      	movs	r2, #192	; 0xc0
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	4293      	cmp	r3, r2
 800457e:	d027      	beq.n	80045d0 <UART_SetConfig+0x228>
 8004580:	22c0      	movs	r2, #192	; 0xc0
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	4293      	cmp	r3, r2
 8004586:	d82a      	bhi.n	80045de <UART_SetConfig+0x236>
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	4293      	cmp	r3, r2
 800458e:	d011      	beq.n	80045b4 <UART_SetConfig+0x20c>
 8004590:	2280      	movs	r2, #128	; 0x80
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	4293      	cmp	r3, r2
 8004596:	d822      	bhi.n	80045de <UART_SetConfig+0x236>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <UART_SetConfig+0x1fe>
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	00d2      	lsls	r2, r2, #3
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <UART_SetConfig+0x21a>
 80045a4:	e01b      	b.n	80045de <UART_SetConfig+0x236>
 80045a6:	231b      	movs	r3, #27
 80045a8:	2220      	movs	r2, #32
 80045aa:	189b      	adds	r3, r3, r2
 80045ac:	19db      	adds	r3, r3, r7
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e021      	b.n	80045f8 <UART_SetConfig+0x250>
 80045b4:	231b      	movs	r3, #27
 80045b6:	2220      	movs	r2, #32
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	19db      	adds	r3, r3, r7
 80045bc:	2202      	movs	r2, #2
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e01a      	b.n	80045f8 <UART_SetConfig+0x250>
 80045c2:	231b      	movs	r3, #27
 80045c4:	2220      	movs	r2, #32
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	19db      	adds	r3, r3, r7
 80045ca:	2204      	movs	r2, #4
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e013      	b.n	80045f8 <UART_SetConfig+0x250>
 80045d0:	231b      	movs	r3, #27
 80045d2:	2220      	movs	r2, #32
 80045d4:	189b      	adds	r3, r3, r2
 80045d6:	19db      	adds	r3, r3, r7
 80045d8:	2208      	movs	r2, #8
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e00c      	b.n	80045f8 <UART_SetConfig+0x250>
 80045de:	231b      	movs	r3, #27
 80045e0:	2220      	movs	r2, #32
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	19db      	adds	r3, r3, r7
 80045e6:	2210      	movs	r2, #16
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e005      	b.n	80045f8 <UART_SetConfig+0x250>
 80045ec:	231b      	movs	r3, #27
 80045ee:	2220      	movs	r2, #32
 80045f0:	189b      	adds	r3, r3, r2
 80045f2:	19db      	adds	r3, r3, r7
 80045f4:	2210      	movs	r2, #16
 80045f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <UART_SetConfig+0x300>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d000      	beq.n	8004604 <UART_SetConfig+0x25c>
 8004602:	e0a8      	b.n	8004756 <UART_SetConfig+0x3ae>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004604:	231b      	movs	r3, #27
 8004606:	2220      	movs	r2, #32
 8004608:	189b      	adds	r3, r3, r2
 800460a:	19db      	adds	r3, r3, r7
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b08      	cmp	r3, #8
 8004610:	d015      	beq.n	800463e <UART_SetConfig+0x296>
 8004612:	dc18      	bgt.n	8004646 <UART_SetConfig+0x29e>
 8004614:	2b04      	cmp	r3, #4
 8004616:	d00d      	beq.n	8004634 <UART_SetConfig+0x28c>
 8004618:	dc15      	bgt.n	8004646 <UART_SetConfig+0x29e>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <UART_SetConfig+0x27c>
 800461e:	2b02      	cmp	r3, #2
 8004620:	d005      	beq.n	800462e <UART_SetConfig+0x286>
 8004622:	e010      	b.n	8004646 <UART_SetConfig+0x29e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fe ff66 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8004628:	0003      	movs	r3, r0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800462c:	e014      	b.n	8004658 <UART_SetConfig+0x2b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462e:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <UART_SetConfig+0x31c>)
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004632:	e011      	b.n	8004658 <UART_SetConfig+0x2b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004634:	f7fe fed2 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8004638:	0003      	movs	r3, r0
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800463c:	e00c      	b.n	8004658 <UART_SetConfig+0x2b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004644:	e008      	b.n	8004658 <UART_SetConfig+0x2b0>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800464a:	231a      	movs	r3, #26
 800464c:	2220      	movs	r2, #32
 800464e:	189b      	adds	r3, r3, r2
 8004650:	19db      	adds	r3, r3, r7
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
        break;
 8004656:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	2b00      	cmp	r3, #0
 800465c:	d100      	bne.n	8004660 <UART_SetConfig+0x2b8>
 800465e:	e14b      	b.n	80048f8 <UART_SetConfig+0x550>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <UART_SetConfig+0x320>)
 8004666:	0052      	lsls	r2, r2, #1
 8004668:	5ad3      	ldrh	r3, [r2, r3]
 800466a:	0019      	movs	r1, r3
 800466c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800466e:	f7fb fd4b 	bl	8000108 <__udivsi3>
 8004672:	0003      	movs	r3, r0
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	0013      	movs	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	189b      	adds	r3, r3, r2
 8004680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004682:	429a      	cmp	r2, r3
 8004684:	d305      	bcc.n	8004692 <UART_SetConfig+0x2ea>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800468c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468e:	429a      	cmp	r2, r3
 8004690:	d91c      	bls.n	80046cc <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8004692:	231a      	movs	r3, #26
 8004694:	2220      	movs	r2, #32
 8004696:	189b      	adds	r3, r3, r2
 8004698:	19db      	adds	r3, r3, r7
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e12b      	b.n	80048f8 <UART_SetConfig+0x550>
 80046a0:	cfff69f3 	.word	0xcfff69f3
 80046a4:	ffffcfff 	.word	0xffffcfff
 80046a8:	40008000 	.word	0x40008000
 80046ac:	11fff4ff 	.word	0x11fff4ff
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40004400 	.word	0x40004400
 80046bc:	40004800 	.word	0x40004800
 80046c0:	40004c00 	.word	0x40004c00
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	08005910 	.word	0x08005910
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <UART_SetConfig+0x580>)
 80046da:	0052      	lsls	r2, r2, #1
 80046dc:	5ad3      	ldrh	r3, [r2, r3]
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	69b8      	ldr	r0, [r7, #24]
 80046ea:	69f9      	ldr	r1, [r7, #28]
 80046ec:	f7fb fe82 	bl	80003f4 <__aeabi_uldivmod>
 80046f0:	0002      	movs	r2, r0
 80046f2:	000b      	movs	r3, r1
 80046f4:	0e11      	lsrs	r1, r2, #24
 80046f6:	021d      	lsls	r5, r3, #8
 80046f8:	430d      	orrs	r5, r1
 80046fa:	0214      	lsls	r4, r2, #8
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68b8      	ldr	r0, [r7, #8]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	1900      	adds	r0, r0, r4
 800470e:	4169      	adcs	r1, r5
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f7fb fe69 	bl	80003f4 <__aeabi_uldivmod>
 8004722:	0002      	movs	r2, r0
 8004724:	000b      	movs	r3, r1
 8004726:	0013      	movs	r3, r2
 8004728:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800472a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472c:	23c0      	movs	r3, #192	; 0xc0
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	429a      	cmp	r2, r3
 8004732:	d309      	bcc.n	8004748 <UART_SetConfig+0x3a0>
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	035b      	lsls	r3, r3, #13
 800473a:	429a      	cmp	r2, r3
 800473c:	d204      	bcs.n	8004748 <UART_SetConfig+0x3a0>
        {
          huart->Instance->BRR = usartdiv;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	e0d7      	b.n	80048f8 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8004748:	231a      	movs	r3, #26
 800474a:	2220      	movs	r2, #32
 800474c:	189b      	adds	r3, r3, r2
 800474e:	19db      	adds	r3, r3, r7
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e0d0      	b.n	80048f8 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	429a      	cmp	r2, r3
 8004760:	d000      	beq.n	8004764 <UART_SetConfig+0x3bc>
 8004762:	e071      	b.n	8004848 <UART_SetConfig+0x4a0>
  {
    switch (clocksource)
 8004764:	231b      	movs	r3, #27
 8004766:	2220      	movs	r2, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d015      	beq.n	800479e <UART_SetConfig+0x3f6>
 8004772:	dc18      	bgt.n	80047a6 <UART_SetConfig+0x3fe>
 8004774:	2b04      	cmp	r3, #4
 8004776:	d00d      	beq.n	8004794 <UART_SetConfig+0x3ec>
 8004778:	dc15      	bgt.n	80047a6 <UART_SetConfig+0x3fe>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <UART_SetConfig+0x3dc>
 800477e:	2b02      	cmp	r3, #2
 8004780:	d005      	beq.n	800478e <UART_SetConfig+0x3e6>
 8004782:	e010      	b.n	80047a6 <UART_SetConfig+0x3fe>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004784:	f7fe feb6 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8004788:	0003      	movs	r3, r0
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800478c:	e014      	b.n	80047b8 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <UART_SetConfig+0x584>)
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004792:	e011      	b.n	80047b8 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004794:	f7fe fe22 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8004798:	0003      	movs	r3, r0
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800479c:	e00c      	b.n	80047b8 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047a4:	e008      	b.n	80047b8 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80047aa:	231a      	movs	r3, #26
 80047ac:	2220      	movs	r2, #32
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
        break;
 80047b6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d100      	bne.n	80047c0 <UART_SetConfig+0x418>
 80047be:	e09b      	b.n	80048f8 <UART_SetConfig+0x550>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c4:	4b58      	ldr	r3, [pc, #352]	; (8004928 <UART_SetConfig+0x580>)
 80047c6:	0052      	lsls	r2, r2, #1
 80047c8:	5ad3      	ldrh	r3, [r2, r3]
 80047ca:	0019      	movs	r1, r3
 80047cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047ce:	f7fb fc9b 	bl	8000108 <__udivsi3>
 80047d2:	0003      	movs	r3, r0
 80047d4:	005a      	lsls	r2, r3, #1
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	18d2      	adds	r2, r2, r3
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	0019      	movs	r1, r3
 80047e4:	0010      	movs	r0, r2
 80047e6:	f7fb fc8f 	bl	8000108 <__udivsi3>
 80047ea:	0003      	movs	r3, r0
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	d921      	bls.n	800483a <UART_SetConfig+0x492>
 80047f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	025b      	lsls	r3, r3, #9
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d21c      	bcs.n	800483a <UART_SetConfig+0x492>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	b29a      	uxth	r2, r3
 8004804:	200e      	movs	r0, #14
 8004806:	2420      	movs	r4, #32
 8004808:	1903      	adds	r3, r0, r4
 800480a:	19db      	adds	r3, r3, r7
 800480c:	210f      	movs	r1, #15
 800480e:	438a      	bics	r2, r1
 8004810:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	2207      	movs	r2, #7
 800481a:	4013      	ands	r3, r2
 800481c:	b299      	uxth	r1, r3
 800481e:	1903      	adds	r3, r0, r4
 8004820:	19db      	adds	r3, r3, r7
 8004822:	1902      	adds	r2, r0, r4
 8004824:	19d2      	adds	r2, r2, r7
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1902      	adds	r2, r0, r4
 8004832:	19d2      	adds	r2, r2, r7
 8004834:	8812      	ldrh	r2, [r2, #0]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e05e      	b.n	80048f8 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800483a:	231a      	movs	r3, #26
 800483c:	2220      	movs	r2, #32
 800483e:	189b      	adds	r3, r3, r2
 8004840:	19db      	adds	r3, r3, r7
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e057      	b.n	80048f8 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004848:	231b      	movs	r3, #27
 800484a:	2220      	movs	r2, #32
 800484c:	189b      	adds	r3, r3, r2
 800484e:	19db      	adds	r3, r3, r7
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d015      	beq.n	8004882 <UART_SetConfig+0x4da>
 8004856:	dc18      	bgt.n	800488a <UART_SetConfig+0x4e2>
 8004858:	2b04      	cmp	r3, #4
 800485a:	d00d      	beq.n	8004878 <UART_SetConfig+0x4d0>
 800485c:	dc15      	bgt.n	800488a <UART_SetConfig+0x4e2>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <UART_SetConfig+0x4c0>
 8004862:	2b02      	cmp	r3, #2
 8004864:	d005      	beq.n	8004872 <UART_SetConfig+0x4ca>
 8004866:	e010      	b.n	800488a <UART_SetConfig+0x4e2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004868:	f7fe fe44 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 800486c:	0003      	movs	r3, r0
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004870:	e014      	b.n	800489c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004872:	4b2e      	ldr	r3, [pc, #184]	; (800492c <UART_SetConfig+0x584>)
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004876:	e011      	b.n	800489c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004878:	f7fe fdb0 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 800487c:	0003      	movs	r3, r0
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004880:	e00c      	b.n	800489c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004888:	e008      	b.n	800489c <UART_SetConfig+0x4f4>
      default:
        pclk = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800488e:	231a      	movs	r3, #26
 8004890:	2220      	movs	r2, #32
 8004892:	189b      	adds	r3, r3, r2
 8004894:	19db      	adds	r3, r3, r7
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
        break;
 800489a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02a      	beq.n	80048f8 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <UART_SetConfig+0x580>)
 80048a8:	0052      	lsls	r2, r2, #1
 80048aa:	5ad3      	ldrh	r3, [r2, r3]
 80048ac:	0019      	movs	r1, r3
 80048ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048b0:	f7fb fc2a 	bl	8000108 <__udivsi3>
 80048b4:	0003      	movs	r3, r0
 80048b6:	001a      	movs	r2, r3
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	18d2      	adds	r2, r2, r3
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0019      	movs	r1, r3
 80048c6:	0010      	movs	r0, r2
 80048c8:	f7fb fc1e 	bl	8000108 <__udivsi3>
 80048cc:	0003      	movs	r3, r0
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d909      	bls.n	80048ec <UART_SetConfig+0x544>
 80048d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	025b      	lsls	r3, r3, #9
 80048de:	429a      	cmp	r2, r3
 80048e0:	d204      	bcs.n	80048ec <UART_SetConfig+0x544>
      {
        huart->Instance->BRR = usartdiv;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	e005      	b.n	80048f8 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80048ec:	231a      	movs	r3, #26
 80048ee:	2220      	movs	r2, #32
 80048f0:	189b      	adds	r3, r3, r2
 80048f2:	19db      	adds	r3, r3, r7
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	226a      	movs	r2, #106	; 0x6a
 80048fc:	2101      	movs	r1, #1
 80048fe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	2268      	movs	r2, #104	; 0x68
 8004904:	2101      	movs	r1, #1
 8004906:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	2200      	movs	r2, #0
 800490c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	2200      	movs	r2, #0
 8004912:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004914:	231a      	movs	r3, #26
 8004916:	2220      	movs	r2, #32
 8004918:	189b      	adds	r3, r3, r2
 800491a:	19db      	adds	r3, r3, r7
 800491c:	781b      	ldrb	r3, [r3, #0]
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b010      	add	sp, #64	; 0x40
 8004924:	bdb0      	pop	{r4, r5, r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	08005910 	.word	0x08005910
 800492c:	00f42400 	.word	0x00f42400

08004930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	2201      	movs	r2, #1
 800493e:	4013      	ands	r3, r2
 8004940:	d00b      	beq.n	800495a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a4a      	ldr	r2, [pc, #296]	; (8004a74 <UART_AdvFeatureConfig+0x144>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	2202      	movs	r2, #2
 8004960:	4013      	ands	r3, r2
 8004962:	d00b      	beq.n	800497c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4a43      	ldr	r2, [pc, #268]	; (8004a78 <UART_AdvFeatureConfig+0x148>)
 800496c:	4013      	ands	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	2204      	movs	r2, #4
 8004982:	4013      	ands	r3, r2
 8004984:	d00b      	beq.n	800499e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <UART_AdvFeatureConfig+0x14c>)
 800498e:	4013      	ands	r3, r2
 8004990:	0019      	movs	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	2208      	movs	r2, #8
 80049a4:	4013      	ands	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a34      	ldr	r2, [pc, #208]	; (8004a80 <UART_AdvFeatureConfig+0x150>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	0019      	movs	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	2210      	movs	r2, #16
 80049c6:	4013      	ands	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <UART_AdvFeatureConfig+0x154>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	0019      	movs	r1, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	2220      	movs	r2, #32
 80049e8:	4013      	ands	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <UART_AdvFeatureConfig+0x158>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	0019      	movs	r1, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	2240      	movs	r2, #64	; 0x40
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d01d      	beq.n	8004a4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <UART_AdvFeatureConfig+0x15c>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	035b      	lsls	r3, r3, #13
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d10b      	bne.n	8004a4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <UART_AdvFeatureConfig+0x160>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	4013      	ands	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <UART_AdvFeatureConfig+0x164>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b002      	add	sp, #8
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	fffdffff 	.word	0xfffdffff
 8004a78:	fffeffff 	.word	0xfffeffff
 8004a7c:	fffbffff 	.word	0xfffbffff
 8004a80:	ffff7fff 	.word	0xffff7fff
 8004a84:	ffffefff 	.word	0xffffefff
 8004a88:	ffffdfff 	.word	0xffffdfff
 8004a8c:	ffefffff 	.word	0xffefffff
 8004a90:	ff9fffff 	.word	0xff9fffff
 8004a94:	fff7ffff 	.word	0xfff7ffff

08004a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	228c      	movs	r2, #140	; 0x8c
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa8:	f7fc fc12 	bl	80012d0 <HAL_GetTick>
 8004aac:	0003      	movs	r3, r0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d10c      	bne.n	8004ad8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	0391      	lsls	r1, r2, #14
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <UART_CheckIdleState+0x90>)
 8004ac8:	9200      	str	r2, [sp, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f000 f82e 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004ad0:	1e03      	subs	r3, r0, #0
 8004ad2:	d001      	beq.n	8004ad8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e023      	b.n	8004b20 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2204      	movs	r2, #4
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d10c      	bne.n	8004b00 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	03d1      	lsls	r1, r2, #15
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <UART_CheckIdleState+0x90>)
 8004af0:	9200      	str	r2, [sp, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f000 f81a 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004af8:	1e03      	subs	r3, r0, #0
 8004afa:	d001      	beq.n	8004b00 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e00f      	b.n	8004b20 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2284      	movs	r2, #132	; 0x84
 8004b04:	2120      	movs	r1, #32
 8004b06:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2288      	movs	r2, #136	; 0x88
 8004b0c:	2120      	movs	r1, #32
 8004b0e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b004      	add	sp, #16
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	01ffffff 	.word	0x01ffffff

08004b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	1dfb      	adds	r3, r7, #7
 8004b3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3c:	e062      	b.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	3301      	adds	r3, #1
 8004b42:	d05f      	beq.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7fc fbc4 	bl	80012d0 <HAL_GetTick>
 8004b48:	0002      	movs	r2, r0
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11d      	bne.n	8004b96 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4931      	ldr	r1, [pc, #196]	; (8004c2c <UART_WaitOnFlagUntilTimeout+0x100>)
 8004b66:	400a      	ands	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2101      	movs	r1, #1
 8004b76:	438a      	bics	r2, r1
 8004b78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2284      	movs	r2, #132	; 0x84
 8004b7e:	2120      	movs	r1, #32
 8004b80:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2288      	movs	r2, #136	; 0x88
 8004b86:	2120      	movs	r1, #32
 8004b88:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2280      	movs	r2, #128	; 0x80
 8004b8e:	2100      	movs	r1, #0
 8004b90:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e046      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d030      	beq.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	401a      	ands	r2, r3
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d126      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4918      	ldr	r1, [pc, #96]	; (8004c2c <UART_WaitOnFlagUntilTimeout+0x100>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	438a      	bics	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2284      	movs	r2, #132	; 0x84
 8004be4:	2120      	movs	r1, #32
 8004be6:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2288      	movs	r2, #136	; 0x88
 8004bec:	2120      	movs	r1, #32
 8004bee:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	228c      	movs	r2, #140	; 0x8c
 8004bf4:	2120      	movs	r1, #32
 8004bf6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2280      	movs	r2, #128	; 0x80
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e00f      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	425a      	negs	r2, r3
 8004c14:	4153      	adcs	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	001a      	movs	r2, r3
 8004c1a:	1dfb      	adds	r3, r7, #7
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d08d      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b004      	add	sp, #16
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	fffffe5f 	.word	0xfffffe5f

08004c30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	1dbb      	adds	r3, r7, #6
 8004c3c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1dba      	adds	r2, r7, #6
 8004c48:	215c      	movs	r1, #92	; 0x5c
 8004c4a:	8812      	ldrh	r2, [r2, #0]
 8004c4c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1dba      	adds	r2, r7, #6
 8004c52:	215e      	movs	r1, #94	; 0x5e
 8004c54:	8812      	ldrh	r2, [r2, #0]
 8004c56:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	015b      	lsls	r3, r3, #5
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d10d      	bne.n	8004c86 <UART_Start_Receive_IT+0x56>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <UART_Start_Receive_IT+0x4c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2260      	movs	r2, #96	; 0x60
 8004c76:	494d      	ldr	r1, [pc, #308]	; (8004dac <UART_Start_Receive_IT+0x17c>)
 8004c78:	5299      	strh	r1, [r3, r2]
 8004c7a:	e02e      	b.n	8004cda <UART_Start_Receive_IT+0xaa>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2260      	movs	r2, #96	; 0x60
 8004c80:	21ff      	movs	r1, #255	; 0xff
 8004c82:	5299      	strh	r1, [r3, r2]
 8004c84:	e029      	b.n	8004cda <UART_Start_Receive_IT+0xaa>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10d      	bne.n	8004caa <UART_Start_Receive_IT+0x7a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d104      	bne.n	8004ca0 <UART_Start_Receive_IT+0x70>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2260      	movs	r2, #96	; 0x60
 8004c9a:	21ff      	movs	r1, #255	; 0xff
 8004c9c:	5299      	strh	r1, [r3, r2]
 8004c9e:	e01c      	b.n	8004cda <UART_Start_Receive_IT+0xaa>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2260      	movs	r2, #96	; 0x60
 8004ca4:	217f      	movs	r1, #127	; 0x7f
 8004ca6:	5299      	strh	r1, [r3, r2]
 8004ca8:	e017      	b.n	8004cda <UART_Start_Receive_IT+0xaa>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	055b      	lsls	r3, r3, #21
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d10d      	bne.n	8004cd2 <UART_Start_Receive_IT+0xa2>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <UART_Start_Receive_IT+0x98>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2260      	movs	r2, #96	; 0x60
 8004cc2:	217f      	movs	r1, #127	; 0x7f
 8004cc4:	5299      	strh	r1, [r3, r2]
 8004cc6:	e008      	b.n	8004cda <UART_Start_Receive_IT+0xaa>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2260      	movs	r2, #96	; 0x60
 8004ccc:	213f      	movs	r1, #63	; 0x3f
 8004cce:	5299      	strh	r1, [r3, r2]
 8004cd0:	e003      	b.n	8004cda <UART_Start_Receive_IT+0xaa>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2260      	movs	r2, #96	; 0x60
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	228c      	movs	r2, #140	; 0x8c
 8004cde:	2100      	movs	r1, #0
 8004ce0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2288      	movs	r2, #136	; 0x88
 8004ce6:	2122      	movs	r1, #34	; 0x22
 8004ce8:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	059b      	lsls	r3, r3, #22
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d12e      	bne.n	8004d64 <UART_Start_Receive_IT+0x134>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2268      	movs	r2, #104	; 0x68
 8004d0a:	5a9b      	ldrh	r3, [r3, r2]
 8004d0c:	1dba      	adds	r2, r7, #6
 8004d0e:	8812      	ldrh	r2, [r2, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d327      	bcc.n	8004d64 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	015b      	lsls	r3, r3, #5
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d107      	bne.n	8004d30 <UART_Start_Receive_IT+0x100>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <UART_Start_Receive_IT+0x180>)
 8004d2c:	671a      	str	r2, [r3, #112]	; 0x70
 8004d2e:	e002      	b.n	8004d36 <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a20      	ldr	r2, [pc, #128]	; (8004db4 <UART_Start_Receive_IT+0x184>)
 8004d34:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2280      	movs	r2, #128	; 0x80
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2180      	movs	r1, #128	; 0x80
 8004d4a:	0049      	lsls	r1, r1, #1
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2180      	movs	r1, #128	; 0x80
 8004d5c:	0549      	lsls	r1, r1, #21
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	e01d      	b.n	8004da0 <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	015b      	lsls	r3, r3, #5
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d107      	bne.n	8004d80 <UART_Start_Receive_IT+0x150>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d103      	bne.n	8004d80 <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <UART_Start_Receive_IT+0x188>)
 8004d7c:	671a      	str	r2, [r3, #112]	; 0x70
 8004d7e:	e002      	b.n	8004d86 <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <UART_Start_Receive_IT+0x18c>)
 8004d84:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2280      	movs	r2, #128	; 0x80
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2190      	movs	r1, #144	; 0x90
 8004d9a:	0049      	lsls	r1, r1, #1
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b004      	add	sp, #16
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	000001ff 	.word	0x000001ff
 8004db0:	08005391 	.word	0x08005391
 8004db4:	0800516d 	.word	0x0800516d
 8004db8:	08005081 	.word	0x08005081
 8004dbc:	08004f95 	.word	0x08004f95

08004dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4912      	ldr	r1, [pc, #72]	; (8004e1c <UART_EndRxTransfer+0x5c>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	490f      	ldr	r1, [pc, #60]	; (8004e20 <UART_EndRxTransfer+0x60>)
 8004de4:	400a      	ands	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2110      	movs	r1, #16
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2288      	movs	r2, #136	; 0x88
 8004e04:	2120      	movs	r1, #32
 8004e06:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	fffffedf 	.word	0xfffffedf
 8004e20:	effffffe 	.word	0xeffffffe

08004e24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	225e      	movs	r2, #94	; 0x5e
 8004e36:	2100      	movs	r1, #0
 8004e38:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2256      	movs	r2, #86	; 0x56
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff fa93 	bl	8004370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b004      	add	sp, #16
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e64:	2200      	movs	r2, #0
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d12d      	bne.n	8004ed6 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2256      	movs	r2, #86	; 0x56
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	225e      	movs	r2, #94	; 0x5e
 8004e86:	2100      	movs	r1, #0
 8004e88:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	228c      	movs	r2, #140	; 0x8c
 8004e8e:	2100      	movs	r1, #0
 8004e90:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	220f      	movs	r2, #15
 8004e98:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	059b      	lsls	r3, r3, #22
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d107      	bne.n	8004eb6 <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2110      	movs	r1, #16
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2284      	movs	r2, #132	; 0x84
 8004eba:	2120      	movs	r1, #32
 8004ebc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2288      	movs	r2, #136	; 0x88
 8004ec2:	2120      	movs	r1, #32
 8004ec4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7ff fa56 	bl	8004380 <HAL_UART_AbortCpltCallback>
 8004ed4:	e000      	b.n	8004ed8 <UART_DMATxAbortCallback+0x86>
      return;
 8004ed6:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b004      	add	sp, #16
 8004edc:	bd80      	pop	{r7, pc}

08004ede <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d127      	bne.n	8004f56 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2256      	movs	r2, #86	; 0x56
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	225e      	movs	r2, #94	; 0x5e
 8004f12:	2100      	movs	r1, #0
 8004f14:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	228c      	movs	r2, #140	; 0x8c
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	220f      	movs	r2, #15
 8004f24:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2108      	movs	r1, #8
 8004f32:	430a      	orrs	r2, r1
 8004f34:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2284      	movs	r2, #132	; 0x84
 8004f3a:	2120      	movs	r1, #32
 8004f3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2288      	movs	r2, #136	; 0x88
 8004f42:	2120      	movs	r1, #32
 8004f44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7ff fa16 	bl	8004380 <HAL_UART_AbortCpltCallback>
 8004f54:	e000      	b.n	8004f58 <UART_DMARxAbortCallback+0x7a>
      return;
 8004f56:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2140      	movs	r1, #64	; 0x40
 8004f72:	438a      	bics	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2284      	movs	r2, #132	; 0x84
 8004f7a:	2120      	movs	r1, #32
 8004f7c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7ff f9ea 	bl	8004360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b002      	add	sp, #8
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f9c:	200e      	movs	r0, #14
 8004f9e:	183b      	adds	r3, r7, r0
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	2160      	movs	r1, #96	; 0x60
 8004fa4:	5a52      	ldrh	r2, [r2, r1]
 8004fa6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2288      	movs	r2, #136	; 0x88
 8004fac:	589b      	ldr	r3, [r3, r2]
 8004fae:	2b22      	cmp	r3, #34	; 0x22
 8004fb0:	d158      	bne.n	8005064 <UART_RxISR_8BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb8:	210c      	movs	r1, #12
 8004fba:	187b      	adds	r3, r7, r1
 8004fbc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fbe:	187b      	adds	r3, r7, r1
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	183b      	adds	r3, r7, r0
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b2d9      	uxtb	r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	400a      	ands	r2, r1
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	225e      	movs	r2, #94	; 0x5e
 8004fe2:	5a9b      	ldrh	r3, [r3, r2]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b299      	uxth	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	225e      	movs	r2, #94	; 0x5e
 8004fee:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	225e      	movs	r2, #94	; 0x5e
 8004ff4:	5a9b      	ldrh	r3, [r3, r2]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d13b      	bne.n	8005074 <UART_RxISR_8BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	491d      	ldr	r1, [pc, #116]	; (800507c <UART_RxISR_8BIT+0xe8>)
 8005008:	400a      	ands	r2, r1
 800500a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2101      	movs	r1, #1
 8005018:	438a      	bics	r2, r1
 800501a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2288      	movs	r2, #136	; 0x88
 8005020:	2120      	movs	r1, #32
 8005022:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d110      	bne.n	8005054 <UART_RxISR_8BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2110      	movs	r1, #16
 800503e:	438a      	bics	r2, r1
 8005040:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	225c      	movs	r2, #92	; 0x5c
 8005046:	5a9a      	ldrh	r2, [r3, r2]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f7ff f99f 	bl	8004390 <HAL_UARTEx_RxEventCallback>
 8005052:	e003      	b.n	800505c <UART_RxISR_8BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	0018      	movs	r0, r3
 8005058:	f7fc f886 	bl	8001168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005062:	e007      	b.n	8005074 <UART_RxISR_8BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2108      	movs	r1, #8
 8005070:	430a      	orrs	r2, r1
 8005072:	619a      	str	r2, [r3, #24]
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}
 800507c:	fffffedf 	.word	0xfffffedf

08005080 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005088:	200e      	movs	r0, #14
 800508a:	183b      	adds	r3, r7, r0
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	2160      	movs	r1, #96	; 0x60
 8005090:	5a52      	ldrh	r2, [r2, r1]
 8005092:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2288      	movs	r2, #136	; 0x88
 8005098:	589b      	ldr	r3, [r3, r2]
 800509a:	2b22      	cmp	r3, #34	; 0x22
 800509c:	d158      	bne.n	8005150 <UART_RxISR_16BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a4:	210c      	movs	r1, #12
 80050a6:	187b      	adds	r3, r7, r1
 80050a8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	183a      	adds	r2, r7, r0
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	8812      	ldrh	r2, [r2, #0]
 80050b8:	4013      	ands	r3, r2
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	1c9a      	adds	r2, r3, #2
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	225e      	movs	r2, #94	; 0x5e
 80050ce:	5a9b      	ldrh	r3, [r3, r2]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b299      	uxth	r1, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	225e      	movs	r2, #94	; 0x5e
 80050da:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	225e      	movs	r2, #94	; 0x5e
 80050e0:	5a9b      	ldrh	r3, [r3, r2]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d13b      	bne.n	8005160 <UART_RxISR_16BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	491d      	ldr	r1, [pc, #116]	; (8005168 <UART_RxISR_16BIT+0xe8>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2101      	movs	r1, #1
 8005104:	438a      	bics	r2, r1
 8005106:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2288      	movs	r2, #136	; 0x88
 800510c:	2120      	movs	r1, #32
 800510e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d110      	bne.n	8005140 <UART_RxISR_16BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2110      	movs	r1, #16
 800512a:	438a      	bics	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	225c      	movs	r2, #92	; 0x5c
 8005132:	5a9a      	ldrh	r2, [r3, r2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	0011      	movs	r1, r2
 8005138:	0018      	movs	r0, r3
 800513a:	f7ff f929 	bl	8004390 <HAL_UARTEx_RxEventCallback>
 800513e:	e003      	b.n	8005148 <UART_RxISR_16BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0018      	movs	r0, r3
 8005144:	f7fc f810 	bl	8001168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800514e:	e007      	b.n	8005160 <UART_RxISR_16BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2108      	movs	r1, #8
 800515c:	430a      	orrs	r2, r1
 800515e:	619a      	str	r2, [r3, #24]
}
 8005160:	46c0      	nop			; (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b004      	add	sp, #16
 8005166:	bd80      	pop	{r7, pc}
 8005168:	fffffedf 	.word	0xfffffedf

0800516c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005174:	231a      	movs	r3, #26
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	2160      	movs	r1, #96	; 0x60
 800517c:	5a52      	ldrh	r2, [r2, r1]
 800517e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2288      	movs	r2, #136	; 0x88
 800519c:	589b      	ldr	r3, [r3, r2]
 800519e:	2b22      	cmp	r3, #34	; 0x22
 80051a0:	d000      	beq.n	80051a4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80051a2:	e0e1      	b.n	8005368 <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051a4:	230e      	movs	r3, #14
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	2168      	movs	r1, #104	; 0x68
 80051ac:	5a52      	ldrh	r2, [r2, r1]
 80051ae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051b0:	e0aa      	b.n	8005308 <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b8:	210c      	movs	r1, #12
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051be:	187b      	adds	r3, r7, r1
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	231a      	movs	r3, #26
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b2d9      	uxtb	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	400a      	ands	r2, r1
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	225e      	movs	r2, #94	; 0x5e
 80051e4:	5a9b      	ldrh	r3, [r3, r2]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b299      	uxth	r1, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	225e      	movs	r2, #94	; 0x5e
 80051f0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2207      	movs	r2, #7
 80051fe:	4013      	ands	r3, r2
 8005200:	d049      	beq.n	8005296 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	d010      	beq.n	800522c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d00b      	beq.n	800522c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	228c      	movs	r2, #140	; 0x8c
 8005220:	589b      	ldr	r3, [r3, r2]
 8005222:	2201      	movs	r2, #1
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	218c      	movs	r1, #140	; 0x8c
 800522a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2202      	movs	r2, #2
 8005230:	4013      	ands	r3, r2
 8005232:	d00f      	beq.n	8005254 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2201      	movs	r2, #1
 8005238:	4013      	ands	r3, r2
 800523a:	d00b      	beq.n	8005254 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2202      	movs	r2, #2
 8005242:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	228c      	movs	r2, #140	; 0x8c
 8005248:	589b      	ldr	r3, [r3, r2]
 800524a:	2204      	movs	r2, #4
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	218c      	movs	r1, #140	; 0x8c
 8005252:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2204      	movs	r2, #4
 8005258:	4013      	ands	r3, r2
 800525a:	d00f      	beq.n	800527c <UART_RxISR_8BIT_FIFOEN+0x110>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2201      	movs	r2, #1
 8005260:	4013      	ands	r3, r2
 8005262:	d00b      	beq.n	800527c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2204      	movs	r2, #4
 800526a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	228c      	movs	r2, #140	; 0x8c
 8005270:	589b      	ldr	r3, [r3, r2]
 8005272:	2202      	movs	r2, #2
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	218c      	movs	r1, #140	; 0x8c
 800527a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	228c      	movs	r2, #140	; 0x8c
 8005280:	589b      	ldr	r3, [r3, r2]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	0018      	movs	r0, r3
 800528a:	f7ff f871 	bl	8004370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	228c      	movs	r2, #140	; 0x8c
 8005292:	2100      	movs	r1, #0
 8005294:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	225e      	movs	r2, #94	; 0x5e
 800529a:	5a9b      	ldrh	r3, [r3, r2]
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d132      	bne.n	8005308 <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4934      	ldr	r1, [pc, #208]	; (8005380 <UART_RxISR_8BIT_FIFOEN+0x214>)
 80052ae:	400a      	ands	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4931      	ldr	r1, [pc, #196]	; (8005384 <UART_RxISR_8BIT_FIFOEN+0x218>)
 80052be:	400a      	ands	r2, r1
 80052c0:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2288      	movs	r2, #136	; 0x88
 80052c6:	2120      	movs	r1, #32
 80052c8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d110      	bne.n	80052fa <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2110      	movs	r1, #16
 80052e4:	438a      	bics	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	225c      	movs	r2, #92	; 0x5c
 80052ec:	5a9a      	ldrh	r2, [r3, r2]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	0011      	movs	r1, r2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7ff f84c 	bl	8004390 <HAL_UARTEx_RxEventCallback>
 80052f8:	e003      	b.n	8005302 <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f7fb ff33 	bl	8001168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005308:	230e      	movs	r3, #14
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	2220      	movs	r2, #32
 8005316:	4013      	ands	r3, r2
 8005318:	d000      	beq.n	800531c <UART_RxISR_8BIT_FIFOEN+0x1b0>
 800531a:	e74a      	b.n	80051b2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800531c:	200a      	movs	r0, #10
 800531e:	183b      	adds	r3, r7, r0
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	215e      	movs	r1, #94	; 0x5e
 8005324:	5a52      	ldrh	r2, [r2, r1]
 8005326:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005328:	0001      	movs	r1, r0
 800532a:	187b      	adds	r3, r7, r1
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d022      	beq.n	8005378 <UART_RxISR_8BIT_FIFOEN+0x20c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2268      	movs	r2, #104	; 0x68
 8005336:	5a9b      	ldrh	r3, [r3, r2]
 8005338:	187a      	adds	r2, r7, r1
 800533a:	8812      	ldrh	r2, [r2, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d21b      	bcs.n	8005378 <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	490f      	ldr	r1, [pc, #60]	; (8005388 <UART_RxISR_8BIT_FIFOEN+0x21c>)
 800534c:	400a      	ands	r2, r1
 800534e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <UART_RxISR_8BIT_FIFOEN+0x220>)
 8005354:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2120      	movs	r1, #32
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005366:	e007      	b.n	8005378 <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2108      	movs	r1, #8
 8005374:	430a      	orrs	r2, r1
 8005376:	619a      	str	r2, [r3, #24]
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b008      	add	sp, #32
 800537e:	bd80      	pop	{r7, pc}
 8005380:	fffffeff 	.word	0xfffffeff
 8005384:	effffffe 	.word	0xeffffffe
 8005388:	efffffff 	.word	0xefffffff
 800538c:	08004f95 	.word	0x08004f95

08005390 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005398:	2322      	movs	r3, #34	; 0x22
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	2160      	movs	r1, #96	; 0x60
 80053a0:	5a52      	ldrh	r2, [r2, r1]
 80053a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2288      	movs	r2, #136	; 0x88
 80053c0:	589b      	ldr	r3, [r3, r2]
 80053c2:	2b22      	cmp	r3, #34	; 0x22
 80053c4:	d000      	beq.n	80053c8 <UART_RxISR_16BIT_FIFOEN+0x38>
 80053c6:	e0e1      	b.n	800558c <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80053c8:	2316      	movs	r3, #22
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	2168      	movs	r1, #104	; 0x68
 80053d0:	5a52      	ldrh	r2, [r2, r1]
 80053d2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053d4:	e0aa      	b.n	800552c <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053dc:	2114      	movs	r1, #20
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	2222      	movs	r2, #34	; 0x22
 80053ec:	18ba      	adds	r2, r7, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	8812      	ldrh	r2, [r2, #0]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	1c9a      	adds	r2, r3, #2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	225e      	movs	r2, #94	; 0x5e
 8005408:	5a9b      	ldrh	r3, [r3, r2]
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b299      	uxth	r1, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	225e      	movs	r2, #94	; 0x5e
 8005414:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	2207      	movs	r2, #7
 8005422:	4013      	ands	r3, r2
 8005424:	d049      	beq.n	80054ba <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	2201      	movs	r2, #1
 800542a:	4013      	ands	r3, r2
 800542c:	d010      	beq.n	8005450 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	4013      	ands	r3, r2
 8005436:	d00b      	beq.n	8005450 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	228c      	movs	r2, #140	; 0x8c
 8005444:	589b      	ldr	r3, [r3, r2]
 8005446:	2201      	movs	r2, #1
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	218c      	movs	r1, #140	; 0x8c
 800544e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2202      	movs	r2, #2
 8005454:	4013      	ands	r3, r2
 8005456:	d00f      	beq.n	8005478 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2201      	movs	r2, #1
 800545c:	4013      	ands	r3, r2
 800545e:	d00b      	beq.n	8005478 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2202      	movs	r2, #2
 8005466:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	228c      	movs	r2, #140	; 0x8c
 800546c:	589b      	ldr	r3, [r3, r2]
 800546e:	2204      	movs	r2, #4
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	218c      	movs	r1, #140	; 0x8c
 8005476:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	2204      	movs	r2, #4
 800547c:	4013      	ands	r3, r2
 800547e:	d00f      	beq.n	80054a0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2201      	movs	r2, #1
 8005484:	4013      	ands	r3, r2
 8005486:	d00b      	beq.n	80054a0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2204      	movs	r2, #4
 800548e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	228c      	movs	r2, #140	; 0x8c
 8005494:	589b      	ldr	r3, [r3, r2]
 8005496:	2202      	movs	r2, #2
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	218c      	movs	r1, #140	; 0x8c
 800549e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	228c      	movs	r2, #140	; 0x8c
 80054a4:	589b      	ldr	r3, [r3, r2]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fe ff5f 	bl	8004370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	228c      	movs	r2, #140	; 0x8c
 80054b6:	2100      	movs	r1, #0
 80054b8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	225e      	movs	r2, #94	; 0x5e
 80054be:	5a9b      	ldrh	r3, [r3, r2]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d132      	bne.n	800552c <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4934      	ldr	r1, [pc, #208]	; (80055a4 <UART_RxISR_16BIT_FIFOEN+0x214>)
 80054d2:	400a      	ands	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4931      	ldr	r1, [pc, #196]	; (80055a8 <UART_RxISR_16BIT_FIFOEN+0x218>)
 80054e2:	400a      	ands	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2288      	movs	r2, #136	; 0x88
 80054ea:	2120      	movs	r1, #32
 80054ec:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d110      	bne.n	800551e <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2110      	movs	r1, #16
 8005508:	438a      	bics	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	225c      	movs	r2, #92	; 0x5c
 8005510:	5a9a      	ldrh	r2, [r3, r2]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	0011      	movs	r1, r2
 8005516:	0018      	movs	r0, r3
 8005518:	f7fe ff3a 	bl	8004390 <HAL_UARTEx_RxEventCallback>
 800551c:	e003      	b.n	8005526 <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	0018      	movs	r0, r3
 8005522:	f7fb fe21 	bl	8001168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800552c:	2316      	movs	r3, #22
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2220      	movs	r2, #32
 800553a:	4013      	ands	r3, r2
 800553c:	d000      	beq.n	8005540 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 800553e:	e74a      	b.n	80053d6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005540:	200e      	movs	r0, #14
 8005542:	183b      	adds	r3, r7, r0
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	215e      	movs	r1, #94	; 0x5e
 8005548:	5a52      	ldrh	r2, [r2, r1]
 800554a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800554c:	0001      	movs	r1, r0
 800554e:	187b      	adds	r3, r7, r1
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d022      	beq.n	800559c <UART_RxISR_16BIT_FIFOEN+0x20c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2268      	movs	r2, #104	; 0x68
 800555a:	5a9b      	ldrh	r3, [r3, r2]
 800555c:	187a      	adds	r2, r7, r1
 800555e:	8812      	ldrh	r2, [r2, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d21b      	bcs.n	800559c <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	490f      	ldr	r1, [pc, #60]	; (80055ac <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8005570:	400a      	ands	r2, r1
 8005572:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a0e      	ldr	r2, [pc, #56]	; (80055b0 <UART_RxISR_16BIT_FIFOEN+0x220>)
 8005578:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2120      	movs	r1, #32
 8005586:	430a      	orrs	r2, r1
 8005588:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800558a:	e007      	b.n	800559c <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2108      	movs	r1, #8
 8005598:	430a      	orrs	r2, r1
 800559a:	619a      	str	r2, [r3, #24]
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b00a      	add	sp, #40	; 0x28
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	fffffeff 	.word	0xfffffeff
 80055a8:	effffffe 	.word	0xeffffffe
 80055ac:	efffffff 	.word	0xefffffff
 80055b0:	08005081 	.word	0x08005081

080055b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055cc:	46c0      	nop			; (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	5c9b      	ldrb	r3, [r3, r2]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_UARTEx_DisableFifoMode+0x16>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e027      	b.n	800564a <HAL_UARTEx_DisableFifoMode+0x66>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2284      	movs	r2, #132	; 0x84
 8005606:	2124      	movs	r1, #36	; 0x24
 8005608:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2101      	movs	r1, #1
 800561e:	438a      	bics	r2, r1
 8005620:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a0b      	ldr	r2, [pc, #44]	; (8005654 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005626:	4013      	ands	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2284      	movs	r2, #132	; 0x84
 800563c:	2120      	movs	r1, #32
 800563e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2280      	movs	r2, #128	; 0x80
 8005644:	2100      	movs	r1, #0
 8005646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	dfffffff 	.word	0xdfffffff

08005658 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2280      	movs	r2, #128	; 0x80
 8005666:	5c9b      	ldrb	r3, [r3, r2]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800566c:	2302      	movs	r3, #2
 800566e:	e02e      	b.n	80056ce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	2101      	movs	r1, #1
 8005676:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2284      	movs	r2, #132	; 0x84
 800567c:	2124      	movs	r1, #36	; 0x24
 800567e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2101      	movs	r1, #1
 8005694:	438a      	bics	r2, r1
 8005696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	08d9      	lsrs	r1, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	0018      	movs	r0, r3
 80056b0:	f000 f854 	bl	800575c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2284      	movs	r2, #132	; 0x84
 80056c0:	2120      	movs	r1, #32
 80056c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	2100      	movs	r1, #0
 80056ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	5c9b      	ldrb	r3, [r3, r2]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e02f      	b.n	8005750 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	2101      	movs	r1, #1
 80056f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2284      	movs	r2, #132	; 0x84
 80056fc:	2124      	movs	r1, #36	; 0x24
 80056fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2101      	movs	r1, #1
 8005714:	438a      	bics	r2, r1
 8005716:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005720:	4013      	ands	r3, r2
 8005722:	0019      	movs	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f813 	bl	800575c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2284      	movs	r2, #132	; 0x84
 8005742:	2120      	movs	r1, #32
 8005744:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2280      	movs	r2, #128	; 0x80
 800574a:	2100      	movs	r1, #0
 800574c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b004      	add	sp, #16
 8005756:	bd80      	pop	{r7, pc}
 8005758:	f1ffffff 	.word	0xf1ffffff

0800575c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800575c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005764:	2314      	movs	r3, #20
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <UARTEx_SetNbDataToProcess+0xcc>)
 800576a:	ca03      	ldmia	r2!, {r0, r1}
 800576c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800576e:	230c      	movs	r3, #12
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	4a2e      	ldr	r2, [pc, #184]	; (800582c <UARTEx_SetNbDataToProcess+0xd0>)
 8005774:	ca03      	ldmia	r2!, {r0, r1}
 8005776:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	226a      	movs	r2, #106	; 0x6a
 8005784:	2101      	movs	r1, #1
 8005786:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2268      	movs	r2, #104	; 0x68
 800578c:	2101      	movs	r1, #1
 800578e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005790:	e046      	b.n	8005820 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005792:	261f      	movs	r6, #31
 8005794:	19bb      	adds	r3, r7, r6
 8005796:	2208      	movs	r2, #8
 8005798:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800579a:	201e      	movs	r0, #30
 800579c:	183b      	adds	r3, r7, r0
 800579e:	2208      	movs	r2, #8
 80057a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	0e5b      	lsrs	r3, r3, #25
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	241d      	movs	r4, #29
 80057ae:	193b      	adds	r3, r7, r4
 80057b0:	2107      	movs	r1, #7
 80057b2:	400a      	ands	r2, r1
 80057b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	0f5b      	lsrs	r3, r3, #29
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	251c      	movs	r5, #28
 80057c2:	197b      	adds	r3, r7, r5
 80057c4:	2107      	movs	r1, #7
 80057c6:	400a      	ands	r2, r1
 80057c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ca:	183b      	adds	r3, r7, r0
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	197a      	adds	r2, r7, r5
 80057d0:	7812      	ldrb	r2, [r2, #0]
 80057d2:	2114      	movs	r1, #20
 80057d4:	1879      	adds	r1, r7, r1
 80057d6:	5c8a      	ldrb	r2, [r1, r2]
 80057d8:	435a      	muls	r2, r3
 80057da:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80057dc:	197b      	adds	r3, r7, r5
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	250c      	movs	r5, #12
 80057e2:	197a      	adds	r2, r7, r5
 80057e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057e6:	0019      	movs	r1, r3
 80057e8:	f7fa fd18 	bl	800021c <__divsi3>
 80057ec:	0003      	movs	r3, r0
 80057ee:	b299      	uxth	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	226a      	movs	r2, #106	; 0x6a
 80057f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f6:	19bb      	adds	r3, r7, r6
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	193a      	adds	r2, r7, r4
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	2114      	movs	r1, #20
 8005800:	1879      	adds	r1, r7, r1
 8005802:	5c8a      	ldrb	r2, [r1, r2]
 8005804:	435a      	muls	r2, r3
 8005806:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005808:	193b      	adds	r3, r7, r4
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	197a      	adds	r2, r7, r5
 800580e:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005810:	0019      	movs	r1, r3
 8005812:	f7fa fd03 	bl	800021c <__divsi3>
 8005816:	0003      	movs	r3, r0
 8005818:	b299      	uxth	r1, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2268      	movs	r2, #104	; 0x68
 800581e:	5299      	strh	r1, [r3, r2]
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b009      	add	sp, #36	; 0x24
 8005826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005828:	080058a0 	.word	0x080058a0
 800582c:	080058a8 	.word	0x080058a8

08005830 <__libc_init_array>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	2600      	movs	r6, #0
 8005834:	4d0c      	ldr	r5, [pc, #48]	; (8005868 <__libc_init_array+0x38>)
 8005836:	4c0d      	ldr	r4, [pc, #52]	; (800586c <__libc_init_array+0x3c>)
 8005838:	1b64      	subs	r4, r4, r5
 800583a:	10a4      	asrs	r4, r4, #2
 800583c:	42a6      	cmp	r6, r4
 800583e:	d109      	bne.n	8005854 <__libc_init_array+0x24>
 8005840:	2600      	movs	r6, #0
 8005842:	f000 f821 	bl	8005888 <_init>
 8005846:	4d0a      	ldr	r5, [pc, #40]	; (8005870 <__libc_init_array+0x40>)
 8005848:	4c0a      	ldr	r4, [pc, #40]	; (8005874 <__libc_init_array+0x44>)
 800584a:	1b64      	subs	r4, r4, r5
 800584c:	10a4      	asrs	r4, r4, #2
 800584e:	42a6      	cmp	r6, r4
 8005850:	d105      	bne.n	800585e <__libc_init_array+0x2e>
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	00b3      	lsls	r3, r6, #2
 8005856:	58eb      	ldr	r3, [r5, r3]
 8005858:	4798      	blx	r3
 800585a:	3601      	adds	r6, #1
 800585c:	e7ee      	b.n	800583c <__libc_init_array+0xc>
 800585e:	00b3      	lsls	r3, r6, #2
 8005860:	58eb      	ldr	r3, [r5, r3]
 8005862:	4798      	blx	r3
 8005864:	3601      	adds	r6, #1
 8005866:	e7f2      	b.n	800584e <__libc_init_array+0x1e>
 8005868:	08005930 	.word	0x08005930
 800586c:	08005930 	.word	0x08005930
 8005870:	08005930 	.word	0x08005930
 8005874:	08005934 	.word	0x08005934

08005878 <memset>:
 8005878:	0003      	movs	r3, r0
 800587a:	1882      	adds	r2, r0, r2
 800587c:	4293      	cmp	r3, r2
 800587e:	d100      	bne.n	8005882 <memset+0xa>
 8005880:	4770      	bx	lr
 8005882:	7019      	strb	r1, [r3, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	e7f9      	b.n	800587c <memset+0x4>

08005888 <_init>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr

08005894 <_fini>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr
